import UIKit
import Flutter
import GoogleMaps
import moengage_flutter_ios
import MoEngageSDK
import flutter_local_notifications
import Firebase

@UIApplicationMain
@objc class AppDelegate: FlutterAppDelegate {
  let METHODCHANNEL = "flutter.native/mfast"
  var vnPayResult : FlutterResult?

  override func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {
    FirebaseApp.configure()
    FlutterLocalNotificationsPlugin.setPluginRegistrantCallback { (registry) in
      GeneratedPluginRegistrant.register(with: registry)
    }
    if #available(iOS 10.0, *) {
      UNUserNotificationCenter.current().delegate = self as? UNUserNotificationCenterDelegate
    }
    GMSServices.provideAPIKey("AIzaSyAraFAzb156jIFrblQXOueaSAQbPBJxubc")
    let sdkConfig = MoEngageSDKConfig(withAppID: "9QBXCRQ6ZYJBYYXZQMZAG3UM")
    sdkConfig.enableLogs = true
    MoEngageInitializer.sharedInstance.initializeDefaultInstance(sdkConfig, launchOptions: launchOptions)
    GeneratedPluginRegistrant.register(with: self)
    if let controller = self.window.rootViewController as? FlutterViewController {
       self.setupNaviChannel(vc: controller)
    }
    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }

  private func setupNaviChannel(vc: FlutterViewController) {
    let methodChannel = FlutterMethodChannel(name: METHODCHANNEL, binaryMessenger: vc.binaryMessenger)
    methodChannel.setMethodCallHandler { [weak self](call, result) in
        guard let self = self else { return }
        switch (call.method) {
            case "openVNPay":
                self.vnPayResult = result
                if let arguments = call.arguments as? [String: Any],
                    let url = arguments["url"] as? String,
                    let scheme = arguments["scheme"] as? String,
                    let title = arguments["title"] as? String,
                    let titleColor = arguments["titleColor"] as? String,
                    let beginColor = arguments["beginColor"] as? String,
                    let endColor = arguments["endColor"] as? String,
                    let iconBackName = arguments["iconBackName"] as? String,
                    let backAlert = arguments["backAlert"] as? String,
                    let isSanBox = arguments["isSanbox"] as? Bool,
                    let tmnCode = arguments["tmnCode"] as? String {
                        self.openVNPay(vc: vc,
                                        url: url,
                                        tmnCode: tmnCode,
                                        scheme: scheme,
                                        title: title,
                                        titleColor: titleColor,
                                        beginColor: beginColor,
                                        endColor: endColor,
                                        iconBackName: iconBackName,
                                        backAlert: backAlert,
                                        isSanBox: isSanBox)
                }
                break
            default:
                break
        }
    }
  }
}
