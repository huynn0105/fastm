import 'package:collection/collection.dart';
import 'package:flutter_module/common/enum/client/project_detail_type.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/models/client/ad_link/ad_link_model.dart';
import 'package:flutter_module/models/client/ad_link/ad_link_statistic_model.dart';
import 'package:flutter_module/models/client/ad_link/total_ad_link_model.dart';
import 'package:flutter_module/models/client/client_detail/project_detail_model.dart';
import 'package:flutter_module/models/client_data/client_statistic_by_date_model.dart';
import 'package:flutter_module/models/client_data/client_statistic_model.dart';
import 'package:flutter_module/models/client_data/filter_client_model.dart';
import 'package:flutter_module/models/mtrade/personal_link_setup/mtrade_personal_link_setup_model.dart';
import 'package:flutter_module/services/api/api_service.dart';
import 'package:flutter_module/services/api/client/payload/delete_client_payload.dart';
import 'package:flutter_module/services/api/client/payload/get_list_ad_link_payload.dart';
import 'package:flutter_module/services/api/client/payload/get_project_detail_payload.dart';
import 'package:flutter_module/services/api/client/payload/get_stastis_by_date_pay_load.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_personal_link_setup_payload.dart';
import 'package:flutter_module/services/base/base_response.dart';
import 'package:flutter_module/models/client/client_detail/client_detail_model.dart';
import 'package:flutter_module/models/client/client_detail/client_district_model.dart';
import 'package:flutter_module/services/api/client/client_endpoint.dart';
import 'package:flutter_module/services/api/client/payload/get_customer_detail_payload.dart';
import 'package:flutter_module/services/api/client/payload/get_list_customer_payload.dart';
import 'package:flutter_module/services/api/client/payload/priority_payload.dart';
import 'package:flutter_module/services/api/client/payload/update_client_payload.dart';

abstract class ClientApi {
  Future<BaseModel<ClientStatisticModel>> getStatisticByStatus({required String category});

  Future<BaseModel<ClientStatisticModel>> getStatisticByProduct();

  Future<BaseModel<ClientStatisticModel>> getStatisticBySkill();

  Future<BaseModel<FilterClientModel>> getFilterClient();

  Future<BaseModel<List<ClientDetailModel>>> getListClient(GetListClientPayload payload);

  Future<BaseModel<ClientDetailModel>> getClientDetail(GetClientDetailPayload payload);

  Future<BaseModel<bool>> addPriority(PriorityPayload payload);

  Future<BaseModel<bool>> deletePriority(PriorityPayload payload);

  Future<BaseModel<List<ClientDistrictModel>>> getDistricts();

  Future<BaseModel<bool>> updateClient(UpdateClientPayload payload);

  Future<BaseModel<ProjectDetailModel>> getDetailProject(GetProjectDetailPayload payload);

  Future<BaseModel<bool>> deleteClient(DeleteClientPayload payload);

  Future<BaseModel<bool>> deleteTrash();

  Future<BaseModel<ClientStatisticByDateModel>> getStatisTicByDate(GetStatisticByDatePayload payload);

  Future<BaseModel<List<AdLinkModel>>> getListAdLink(GetListAdLinkPayload payload);

  Future<BaseModel<TotalAdLinkModel>> getTotalAdLink();

  Future<BaseModel<AdLinkStatisticModel>> getStatisticLink({List? potentialIDs});

  Future<BaseModel<MTradePersonalLinkSetupModel>> getDetailAdLink(String id);

  Future<BaseModel<bool>> updateAdLink(DetailLinkSetup payload);

  Future<BaseModel<bool>> createAdLink(DetailLinkSetup payload);

  Future<BaseModel<bool>> removeAdLink(String id);
}

class ClientApiImpl implements ClientApi {
  @override
  Future<BaseModel<ClientStatisticModel>> getStatisticByStatus({required String category}) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().getStatisticByStatus(category: category),
    );

    if (apiResponse.status == true) {
      return BaseModel<ClientStatisticModel>(status: true, data: ClientStatisticModel.fromJson(apiResponse.data));
    } else {
      return BaseModel<ClientStatisticModel>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<ClientStatisticModel>> getStatisticByProduct() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().getStatisticByProduct(),
    );

    if (apiResponse.status == true) {
      return BaseModel<ClientStatisticModel>(
        status: true,
        data: ClientStatisticModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<ClientStatisticModel>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<ClientStatisticModel>> getStatisticBySkill() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().getStatisticBySkill(),
    );

    if (apiResponse.status == true) {
      return BaseModel<ClientStatisticModel>(
        status: true,
        data: ClientStatisticModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<ClientStatisticModel>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<FilterClientModel>> getFilterClient() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().getFilterClient(),
    );

    if (apiResponse.status == true) {
      return BaseModel<FilterClientModel>(
          status: true,
          data: FilterClientModel.fromJson(
            apiResponse.data,
          ));
    } else {
      return BaseModel<FilterClientModel>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<ClientDetailModel>>> getListClient(GetListClientPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().getListCustomer(payload),
    );
    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;
      return BaseModel<List<ClientDetailModel>>(
        status: true,
        data: data?.map((e) => ClientDetailModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<ClientDetailModel>>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<ClientDetailModel>> getClientDetail(GetClientDetailPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().getCustomerDetail(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<ClientDetailModel>(
        status: true,
        data: ClientDetailModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<ClientDetailModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> addPriority(PriorityPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().addPriority(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> deletePriority(PriorityPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().deletePriority(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<ClientDistrictModel>>> getDistricts() async {
    BaseResponse apiResponse = await APIService.instance.requestOldData(
      ClientEndpoint().getDistricts(),
    );
    if (apiResponse.status == true) {
      List<ClientDistrictModel> data = [];
      if (apiResponse.data is Map) {
        data = (apiResponse.data as Map).entries.map((e) => ClientDistrictModel(id: e.key, value: e.value)).toList();
      }
      return BaseModel<List<ClientDistrictModel>>(
        status: true,
        data: data,
      );
    } else {
      return BaseModel<List<ClientDistrictModel>>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> updateClient(UpdateClientPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestOldData(
      ClientEndpoint().updateClient(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<ProjectDetailModel>> getDetailProject(GetProjectDetailPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestOldData(
      ClientEndpoint().getDetailProject(payload),
    );
    if (apiResponse.status == true) {
      final ProjectDetailType? type = ProjectDetailType.values.firstWhereOrNull((e) => e.name == payload.category);
      final Map<String, dynamic> json = apiResponse.data["data"];
      ProjectDetailModel? data;
      switch (type) {
        case ProjectDetailType.pl:
          data = ProjectDetailModel.fromFinanceJson(json);
          break;
        case ProjectDetailType.insurance:
          data = ProjectDetailModel.fromInsuranceJson(json);
          break;
        case ProjectDetailType.daa:
          data = ProjectDetailModel.fromDAAJson(json);
          break;
        case ProjectDetailType.mpl:
          data = ProjectDetailModel.fromMPLJson(json);
          break;
        default:
          break;
      }

      return BaseModel<ProjectDetailModel>(
        status: true,
        data: data,
      );
    } else {
      return BaseModel<ProjectDetailModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> deleteClient(DeleteClientPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().deleteClient(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> deleteTrash() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().deleteTrash(),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<ClientStatisticByDateModel>> getStatisTicByDate(
    GetStatisticByDatePayload payload,
  ) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().getStatisticByDate(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<ClientStatisticByDateModel>(
        status: true,
        data: ClientStatisticByDateModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<ClientStatisticByDateModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<AdLinkModel>>> getListAdLink(GetListAdLinkPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().getListAdLink(payload),
    );
    if (apiResponse.status == true) {
      final data = apiResponse.data as List;
      return BaseModel<List<AdLinkModel>>(
        status: true,
        data: data.map((e) => AdLinkModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<AdLinkModel>>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<TotalAdLinkModel>> getTotalAdLink() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().getTotalAdLink(),
    );
    if (apiResponse.status == true) {
      return BaseModel<TotalAdLinkModel>(
        status: true,
        data: TotalAdLinkModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<TotalAdLinkModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<AdLinkStatisticModel>> getStatisticLink({List? potentialIDs}) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().getStatisticLink(potentialIDs: potentialIDs),
    );
    if (apiResponse.status == true) {
      return BaseModel<AdLinkStatisticModel>(
        status: true,
        data: AdLinkStatisticModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<AdLinkStatisticModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<MTradePersonalLinkSetupModel>> getDetailAdLink(String id) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().getDetailAdLink(id),
    );
    if (apiResponse.status == true) {
      return BaseModel<MTradePersonalLinkSetupModel>(
        status: true,
        data: MTradePersonalLinkSetupModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<MTradePersonalLinkSetupModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> updateAdLink(DetailLinkSetup payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().updateAdLink(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
        errorMessage: apiResponse.errorMessage,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> createAdLink(DetailLinkSetup payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().createAdLink(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
        errorMessage: apiResponse.errorMessage,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> removeAdLink(String id) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ClientEndpoint().removeAdLink(id),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
        errorMessage: apiResponse.errorMessage,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }
}
