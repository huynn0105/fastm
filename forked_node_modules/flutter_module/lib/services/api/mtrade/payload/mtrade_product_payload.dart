import '../../../../models/mtrade/product_group/mtrade_special_group_model.dart';

/// group : ""
/// productGroup : [""]
/// productCategory : [""]
/// brand : [""]
/// price : [300000]
/// paymentMethod : [""]
/// productName : ""
/// provinceCode : ""
/// page : 1

class MTradeProductPayload {
  MTradeProductPayload({
    this.group,
    this.productGroup,
    this.productCategory,
    this.brand,
    this.price,
    this.paymentMethod,
    this.specialCategory,
    this.productName,
    this.provinceCode,
    this.districtCode,
    this.wardCode,
    this.page = 1,
    this.jsonFilters,
  });

  MTradeProductPayload.fromJson(dynamic json) {
    group = json['group'];
    productGroup = json['productGroup'] != null ? json['productGroup'].cast<String>() : [];
    productCategory = json['productCategory'] != null ? json['productCategory'].cast<String>() : [];
    brand = json['brand'] != null ? json['brand'].cast<String>() : [];
    price = json['price'] != null ? json['price'].cast<String>() : [];
    paymentMethod = json['paymentMethod'] != null ? json['paymentMethod'].cast<String>() : [];
    specialCategory = json['specialCategory'] != null ? MTradeSpecialGroupModel.fromJson(json['specialCategory']) : null;
    productName = json['productName'];
    provinceCode = json['provinceCode'];
    districtCode = json['districtCode'];
    wardCode = json['wardCode'];
    page = json['page'];
  }

  String? group;
  List<String>? productGroup;
  List<String>? productCategory;
  List<String>? brand;
  List<String>? price;
  List<String>? paymentMethod;
  MTradeSpecialGroupModel? specialCategory;
  String? productName;
  String? provinceCode;
  String? districtCode;
  String? wardCode;
  int? page;
  Map<String, dynamic>? jsonFilters;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['group'] = group ?? "";
    map['productGroup'] = productGroup ?? [];
    map['productCategory'] = productCategory ?? [];
    map['brand'] = brand ?? [];
    map['price'] = price ?? [];
    map['paymentMethod'] = paymentMethod ?? [];
    map['productName'] = productName ?? "";
    map['provinceCode'] = provinceCode ?? "";
    map['districtCode'] = districtCode ?? "";
    map['wardCode'] = wardCode ?? "";
    map['page'] = page ?? 1;
    if (specialCategory?.keyword != null) {
      map[specialCategory!.keyword!] = [specialCategory?.code];
    }
    if (jsonFilters?.isNotEmpty ?? false) {
      map.addAll(jsonFilters!);
    }
    return map;
  }

  MTradeProductPayload copyWith({
    String? group,
    List<String>? productGroup,
    List<String>? productCategory,
    List<String>? brand,
    List<String>? price,
    List<String>? paymentMethod,
    MTradeSpecialGroupModel? specialCategory,
    String? productName,
    String? provinceCode,
    String? districtCode,
    String? wardCode,
    int? page,
    Map<String, dynamic>? jsonFilters,
  }) {
    return MTradeProductPayload(
      group: group ?? this.group,
      productGroup: productGroup ?? this.productGroup,
      productCategory: productCategory ?? this.productCategory,
      brand: brand ?? this.brand,
      price: price ?? this.price,
      paymentMethod: paymentMethod ?? this.paymentMethod,
      specialCategory: specialCategory ?? this.specialCategory,
      productName: productName ?? this.productName,
      provinceCode: provinceCode ?? this.provinceCode,
      districtCode: districtCode ?? this.districtCode,
      wardCode: wardCode ?? this.wardCode,
      page: page ?? this.page,
      jsonFilters: jsonFilters ?? this.jsonFilters,
    );
  }
}
