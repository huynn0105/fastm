import 'dart:io';

import 'package:flutter_module/models/shipper/order/shipper_detail_order_model.dart';
import 'package:flutter_module/models/shipper/payment_method/payment_method_model.dart';
import 'package:flutter_module/services/api/shipper/payload/warning_payment_payload.dart';

import '../../../models/base_model.dart';
import '../../../models/shipper/bill_lading/shipper_base_bill_lading_model.dart';
import '../../../models/shipper/document/update_document_model.dart';
import '../../../models/shipper/order/payment_status_model.dart';
import '../../base/base_response.dart';
import '../api_service.dart';
import '../file_service.dart';
import 'payload/shipper_detail_order_payload.dart';
import 'payload/update_document_payload.dart';
import 'payload/update_shipper_order_status_payload.dart';
import 'shipper_endpoint.dart';

abstract class ShipperApi {
  Future<BaseModel<ShipperBaseBillLadingModel>> getListBillLading({
    required String step,
    required int skip,
    String keySearch = "",
  });

  Future<BaseModel<String>> uploadImageFromFile(File? file);

  Future<BaseModel<DeliveryModel>> getDetailDelivery(DeliveryPayload payload);

  Future<BaseModel<bool>> updateDeliveryStatus(UpdateDeliveryStatusPayload payload);

  Future<BaseModel<List<UpdateDocumentModel>>> updateDocument(UpdateDocumentPayload payload);

  Future<BaseModel<PaymentStatusModel>> getPaymentStatus(String paymentTransactionId);

  Future<BaseModel<bool>> extendLinkPayment(String orderCode);

  Future<BaseModel<List<PaymentMethodModel>>> getPaymentMethods();

  Future<BaseModel<bool>> warningPayment(WarningPaymentPayload payload);
}

class ShipperApiImpl implements ShipperApi {
  @override
  Future<BaseModel<ShipperBaseBillLadingModel>> getListBillLading({
    required String step,
    required int skip,
    String keySearch = "",
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      ShipperEndpoint().getListBillLading(
        step: step,
        skip: skip,
        keySearch: keySearch,
      ),
    );
    if (apiResponse.status == true) {
      return BaseModel<ShipperBaseBillLadingModel>(
        status: true,
        data: ShipperBaseBillLadingModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<ShipperBaseBillLadingModel>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<String>> uploadImageFromFile(File? file) async {
    if (file == null) {
      return BaseModel<String>(status: false, errorMessage: 'Hình ảnh không hợp lệ');
    }
    BaseResponse apiResponse =
        await FileService.instance.uploadImageFromFile(ShipperEndpoint().uploadImageFromFile(file));
    if (apiResponse.status!) {
      return BaseModel<String>(status: true, data: apiResponse.data?['url']);
    } else {
      return BaseModel<String>(status: false, errorMessage: apiResponse.errorMessage);
    }
  }

  @override
  Future<BaseModel<DeliveryModel>> getDetailDelivery(DeliveryPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(ShipperEndpoint().getDetailDelivery(payload));
    if (apiResponse.status!) {
      return BaseModel<DeliveryModel>(
        status: true,
        data: DeliveryModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<DeliveryModel>(status: false, errorMessage: apiResponse.errorMessage);
    }
  }

  @override
  Future<BaseModel<bool>> updateDeliveryStatus(UpdateDeliveryStatusPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(ShipperEndpoint().updateDeliveryStatus(payload));
    if (apiResponse.status!) {
      return BaseModel<bool>(
        status: true,
        data: true,
      );
    } else {
      return BaseModel<bool>(status: false, errorMessage: apiResponse.errorMessage);
    }
  }

  @override
  Future<BaseModel<List<UpdateDocumentModel>>> updateDocument(UpdateDocumentPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(ShipperEndpoint().updateDocument(payload));
    if (apiResponse.status!) {
      final data = apiResponse.data as List?;
      final documents = data?.map((e) => UpdateDocumentModel.fromJson(e)).toList();
      return BaseModel<List<UpdateDocumentModel>>(
        status: true,
        data: documents,
      );
    } else {
      return BaseModel<List<UpdateDocumentModel>>(status: false, errorMessage: apiResponse.errorMessage);
    }
  }

  @override
  Future<BaseModel<List<PaymentMethodModel>>> getPaymentMethods() async {
    BaseResponse apiResponse = await APIService.instance.requestData(ShipperEndpoint().getPaymentMethods());
    if (apiResponse.status!) {
      final data = apiResponse.data as List?;
      final paymentMethods = data?.map((e) => PaymentMethodModel.fromJson(e)).toList();
      return BaseModel<List<PaymentMethodModel>>(
        status: true,
        data: paymentMethods,
      );
    } else {
      return BaseModel<List<PaymentMethodModel>>(status: false, errorMessage: apiResponse.errorMessage);
    }
  }

  @override
  Future<BaseModel<PaymentStatusModel>> getPaymentStatus(String paymentTransactionId) async {
    BaseResponse apiResponse =
        await APIService.instance.requestData(ShipperEndpoint().getPaymentStatus(paymentTransactionId));
    if (apiResponse.status!) {
      return BaseModel<PaymentStatusModel>(
        status: true,
        data: PaymentStatusModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<PaymentStatusModel>(
        status: false,
        errorMessage: apiResponse.errorMessage,
        errorTitle: apiResponse.errorTitle,
      );
    }
  }

  @override
  Future<BaseModel<bool>> extendLinkPayment(String orderCode) async {
    BaseResponse apiResponse = await APIService.instance.requestData(ShipperEndpoint().extendLinkPayment(orderCode));
    if (apiResponse.status!) {
      return BaseModel<bool>(
        status: true,
        data: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorMessage: apiResponse.errorMessage,
        errorTitle: apiResponse.errorTitle,
      );
    }
  }

  @override
  Future<BaseModel<bool>> warningPayment(WarningPaymentPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(ShipperEndpoint().warningPayment(payload));
    if (apiResponse.status!) {
      return BaseModel<bool>(
        status: true,
        data: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorMessage: apiResponse.errorMessage,
        errorTitle: apiResponse.errorTitle,
      );
    }
  }
}
