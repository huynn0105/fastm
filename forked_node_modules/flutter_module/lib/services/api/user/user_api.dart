import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/models/otp/email_otp_model.dart';
import 'package:flutter_module/models/personal_setting/login_history_model.dart';
import 'package:flutter_module/models/user/user_delete_model.dart';
import 'package:flutter_module/models/user/user_meta_data_model.dart';
import 'package:flutter_module/services/api/api_service.dart';
import 'package:flutter_module/services/api/authentication/payload/delete_account_payload.dart';
import 'package:flutter_module/services/api/firebase_function_api_service.dart';
import 'package:flutter_module/services/api/user/payload/check_duplicate_email_payload.dart';
import 'package:flutter_module/services/api/user/payload/check_duplicate_nick_name_payload.dart';
import 'package:flutter_module/services/api/user/payload/create_pass_code_payload.dart';
import 'package:flutter_module/services/api/user/payload/get_login_history_payload.dart';
import 'package:flutter_module/services/api/user/payload/request_email_otp_payload.dart';
import 'package:flutter_module/services/api/user/payload/update_user_meta_data_payload.dart';
import 'package:flutter_module/services/api/user/payload/update_user_payload.dart';
import 'package:flutter_module/services/api/user/payload/verify_email_otp_payload.dart';
import 'package:flutter_module/services/api/user/user_endpoint.dart';
import 'package:flutter_module/services/base/base_response.dart';

import '../../../models/user/referral_info_model.dart';
import '../../../models/user/user_info_model.dart';

abstract class UserApi {
  Future<BaseModel<UserInfoModel>> getUserInfo();

  Future<BaseModel<UserMetaDataModel>> getUserMetaData();

  Future<BaseModel<bool>> checkDuplicateNickName({
    required CheckDuplicateNickNamePayload payload,
  });

  Future<BaseModel<bool>> checkDuplicateEmail({
    required CheckDuplicateEmailPayload payload,
  });

  Future<BaseModel<UserMetaDataModel>> updateUserMetaData({
    required UpdateUserMetaDataPayload payload,
  });

  Future<BaseModel<RequestEmailOTPModel>> requestEmailOTP({
    required RequestEmailOTPPayload payload,
  });

  Future<BaseModel<void>> verifyEmailOTP({
    required VerifyEmailOTPPayload payload,
  });

  Future<BaseModel<List<LoginHistoryModel>>> getLoginHistory({
    required GetLoginHistoryPayload payload,
  });

  Future<BaseModel<ReferralInfoModel>> getReferralInfo();

  Future<BaseModel<bool>> updateUser({
    required UpdateUserPayload payload,
  });

  Future<BaseModel<bool>> createPassCode({
    required CreatePassCodePayload payload,
  });

  Future<BaseModel<bool>> checkUsePassCode(String mobilePhone);

  Future<BaseModel<bool>> changeUsePassCode(int status);

  Future<BaseModel<UserDeleteModel>> getUserDelete();

  Future<BaseModel<bool>> deleteAccount(DeleteAccountPayload payload);

  Future<BaseModel<bool>> cancelDeleteAccount();
}

class UserApiImpl implements UserApi {
  @override
  Future<BaseModel<UserInfoModel>> getUserInfo() async {
    BaseResponse apiResponse = await FirebaseFunctionAPIService.instance.requestData(
      UserEndpoint().getUser(),
    );

    if (apiResponse.status == true) {
      return BaseModel<UserInfoModel>(
        status: true,
        data: UserInfoModel.fromJson(apiResponse.data, raw: apiResponse.raw),
      );
    } else {
      return BaseModel<UserInfoModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<UserMetaDataModel>> getUserMetaData() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().getUserMetaData(),
    );

    if (apiResponse.status == true) {
      return BaseModel<UserMetaDataModel>(
        status: true,
        data: UserMetaDataModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<UserMetaDataModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> checkDuplicateNickName({
    required CheckDuplicateNickNamePayload payload,
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().checkDuplicateNickName(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> checkDuplicateEmail({
    required CheckDuplicateEmailPayload payload,
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().checkDuplicateEmail(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<UserMetaDataModel>> updateUserMetaData({
    required UpdateUserMetaDataPayload payload,
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().updateUserMetaData(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<UserMetaDataModel>(
        status: true,
        data: UserMetaDataModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<UserMetaDataModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<RequestEmailOTPModel>> requestEmailOTP({
    required RequestEmailOTPPayload payload,
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().requestEmailOTP(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<RequestEmailOTPModel>(
        status: true,
        data: RequestEmailOTPModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<RequestEmailOTPModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<void>> verifyEmailOTP({
    required VerifyEmailOTPPayload payload,
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().verifyEmailOTP(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<void>(
        status: true,
        // data: UserMetaDataModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<void>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<LoginHistoryModel>>> getLoginHistory({
    required GetLoginHistoryPayload payload,
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().getLoginHistory(payload),
    );

    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;
      return BaseModel<List<LoginHistoryModel>>(
        status: true,
        data: data?.map((e) => LoginHistoryModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<LoginHistoryModel>>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<ReferralInfoModel>> getReferralInfo() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().getReferralInfo(),
    );

    if (apiResponse.status == true) {
      return BaseModel<ReferralInfoModel>(
        status: true,
        data: ReferralInfoModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<ReferralInfoModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> updateUser({
    required UpdateUserPayload payload,
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().updateUser(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> createPassCode({
    required CreatePassCodePayload payload,
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().createPassCode(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> checkUsePassCode(String mobilePhone) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().checkUsePassCode(mobilePhone),
    );

    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
        data: apiResponse.data['isUserPassCode'],
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> changeUsePassCode(int status) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().changeUsePassCode(status),
    );

    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<UserDeleteModel>> getUserDelete() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().getUserDelete(),
    );

    if (apiResponse.status == true) {
      final data = apiResponse.raw as Map<String, dynamic>;
      return BaseModel<UserDeleteModel>(
        status: true,
        data: UserDeleteModel.fromJson(data),
      );
    } else {
      return BaseModel<UserDeleteModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> deleteAccount(DeleteAccountPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().deleteAccount(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> cancelDeleteAccount() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      UserEndpoint().cancelDeleteAccount(),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }
}
