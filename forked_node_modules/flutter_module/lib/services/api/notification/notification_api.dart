import 'package:collection/collection.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/models/mfast/notification/mfast_notification_model.dart';
import 'package:flutter_module/models/mfast/notification/mfast_notification_setting_model.dart';
import 'package:flutter_module/services/api/api_service.dart';
import 'package:flutter_module/services/api/firebase_function_api_service.dart';
import 'package:flutter_module/services/api/notification/notification_endpoint.dart';
import 'package:flutter_module/services/api/notification/payload/get_chat_unread_count_payload.dart';
import 'package:flutter_module/services/api/notification/payload/mfast_notification_payload.dart';
import 'package:flutter_module/services/api/notification/payload/mfast_send_rsm_message_payload.dart';
import 'package:flutter_module/services/api/notification/payload/register_fcm_token_payload.dart';
import 'package:flutter_module/services/base/base_response.dart';

abstract class NotificationApi {
  Future<BaseModel<List<MFastNotificationModel>>> getNotifications({
    required MFastNotificationPayload payload,
  });

  Future<BaseModel<bool>> readNotification({
    required String notiID,
  });

  Future<BaseModel<bool>> flagNotification({
    required String notiID,
    required bool isFlag,
  });

  Future<BaseModel<bool>> readAllNotifications({
    required String category,
  });

  Future<BaseModel<List<MFastNotificationSettingModel>>> getNotificationSettings();

  Future<BaseModel<bool>> updateNotificationSettings({
    required String categoryID,
    required String status,
  });

  Future<BaseModel<Map<String, int>>> getUnreadNotification();

  Future<BaseModel<bool>> sendRSMMessage({
    required MFastSendRSMMessagePayload payload,
  });

  Future<BaseModel<bool>> registerFcmToken(RegisterFcmTokenPayload payload);

  Future<BaseModel<int>> getChatUnreadCount(GetChatUnreadCountPayload payload);

  Future<BaseModel<int>> getNotificationUnreadCount();
}

class NotificationApiImpl implements NotificationApi {
  @override
  Future<BaseModel<List<MFastNotificationModel>>> getNotifications({
    required MFastNotificationPayload payload,
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      NotificationEndpoint().getNotifications(payload: payload),
    );
    if (apiResponse.status == true) {
      final data = apiResponse.data as List;
      return BaseModel<List<MFastNotificationModel>>(
        status: true,
        data: data.map((e) => MFastNotificationModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<MFastNotificationModel>>(
        status: false,
      );
    }
  }

  @override
  Future<BaseModel<bool>> flagNotification({required String notiID, required bool isFlag}) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      NotificationEndpoint().flagNotification(
        notiID: notiID,
        isFlag: isFlag,
      ),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
      );
    }
  }

  @override
  Future<BaseModel<bool>> readNotification({required String notiID}) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      NotificationEndpoint().readNotification(
        notiID: notiID,
      ),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
      );
    }
  }

  @override
  Future<BaseModel<bool>> readAllNotifications({required String category}) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      NotificationEndpoint().readAllNotifications(
        category: category,
      ),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
      );
    }
  }

  @override
  Future<BaseModel<List<MFastNotificationSettingModel>>> getNotificationSettings() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      NotificationEndpoint().getNotificationSettings(),
    );
    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;
      return BaseModel<List<MFastNotificationSettingModel>>(
        status: true,
        data: data
                ?.map((e) => MFastNotificationSettingModel.fromJson(e))
                .sorted((a, b) => (TextUtils.parseInt(a.iD) ?? 0).compareTo((TextUtils.parseInt(b.iD) ?? 0))) ??
            [],
      );
    } else {
      return BaseModel<List<MFastNotificationSettingModel>>(
        status: false,
      );
    }
  }

  @override
  Future<BaseModel<bool>> updateNotificationSettings({
    required String categoryID,
    required String status,
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      NotificationEndpoint().updateNotificationSettings(
        categoryID: categoryID,
        status: status,
      ),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
      );
    }
  }

  @override
  Future<BaseModel<Map<String, int>>> getUnreadNotification() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      NotificationEndpoint().getUnreadNotification(),
    );
    if (apiResponse.status == true) {
      return BaseModel<Map<String, int>>(
        status: true,
        data: Map<String, int>.from(apiResponse.data),
      );
    } else {
      return BaseModel<Map<String, int>>(
        status: false,
      );
    }
  }

  @override
  Future<BaseModel<bool>> sendRSMMessage({required MFastSendRSMMessagePayload payload}) async {
    BaseResponse apiResponse = await FirebaseFunctionAPIService.instance.requestData(
      NotificationEndpoint().sendRSMMessage(payload: payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
      );
    }
  }

  @override
  Future<BaseModel<bool>> registerFcmToken(RegisterFcmTokenPayload payload) async {
    BaseResponse apiResponse = await FirebaseFunctionAPIService.instance.requestData(
      NotificationEndpoint().registerFcmToken(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
      );
    }
  }

  @override
  Future<BaseModel<int>> getChatUnreadCount(GetChatUnreadCountPayload payload) async {
    BaseResponse apiResponse = await FirebaseFunctionAPIService.instance.requestData(
      NotificationEndpoint().getChatUnreadCount(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<int>(
        status: true,
        data: TextUtils.parseInt(apiResponse.data) ?? 0,
      );
    } else {
      return BaseModel<int>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<int>> getNotificationUnreadCount() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      NotificationEndpoint().getNotificationUnreadCount(),
    );
    if (apiResponse.status == true) {
      int admin = TextUtils.parseInt(apiResponse.data?['admin']) ?? 0;
      int system = TextUtils.parseInt(apiResponse.data?['system']) ?? 0;
      return BaseModel<int>(
        status: true,
        data: admin + system,
      );
    } else {
      return BaseModel<int>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }
}
