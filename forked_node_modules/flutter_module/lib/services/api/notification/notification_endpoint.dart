import 'package:dio/dio.dart';
import 'package:flutter_module/services/api/notification/payload/get_chat_unread_count_payload.dart';
import 'package:flutter_module/services/api/notification/payload/mfast_notification_payload.dart';
import 'package:flutter_module/services/api/notification/payload/mfast_send_rsm_message_payload.dart';
import 'package:flutter_module/services/api/notification/payload/register_fcm_token_payload.dart';
import 'package:flutter_module/services/base/base_endpoint.dart';
import 'package:flutter_module/services/base/method_request.dart';

abstract class NotificationEndpointProtocol {
  EndpointType getNotifications({
    required MFastNotificationPayload payload,
  });

  EndpointType readNotification({
    required String notiID,
  });

  EndpointType flagNotification({
    required String notiID,
    required bool isFlag,
  });

  EndpointType readAllNotifications({
    required String category,
  });

  EndpointType getNotificationSettings();

  EndpointType updateNotificationSettings({
    required String categoryID,
    required String status,
  });

  EndpointType getUnreadNotification();

  EndpointType sendRSMMessage({
    required MFastSendRSMMessagePayload payload,
  });

  EndpointType registerFcmToken(RegisterFcmTokenPayload payload);

  EndpointType getChatUnreadCount(GetChatUnreadCountPayload payload);

  EndpointType getNotificationUnreadCount();
}

class NotificationEndpoint implements NotificationEndpointProtocol {
  @override
  EndpointType getNotifications({required MFastNotificationPayload payload}) {
    final endpoint = EndpointType(
      path: "/app_api_v1/notification/getOldNoti",
      httpMethod: HttpMethod.get,
      parameters: payload.toJson(),
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType flagNotification({required String notiID, required bool isFlag}) {
    final endpoint = EndpointType(
      path: "/app_api_v1/notification/flagNoti",
      httpMethod: HttpMethod.post,
      parameters: {
        "notiID": notiID,
        "isFlag": isFlag,
      },
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType readNotification({required String notiID}) {
    final endpoint = EndpointType(
      path: "/app_api_v1/notification/readNoti",
      httpMethod: HttpMethod.post,
      parameters: {
        "notiID": notiID,
      },
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType readAllNotifications({required String category}) {
    final endpoint = EndpointType(
      path: "/app_api_v1/notification/readAllNoti",
      httpMethod: HttpMethod.post,
      parameters: {
        "category": category,
      },
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType getNotificationSettings() {
    final endpoint = EndpointType(
      path: "/app_api_v1/notification/get_categories",
      httpMethod: HttpMethod.get,
      parameters: {},
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType updateNotificationSettings({
    required String categoryID,
    required String status,
  }) {
    final endpoint = EndpointType(
      path: "/app_api_v1/notification/category_subscribe",
      httpMethod: HttpMethod.post,
      parameters: {
        "categoryID": categoryID,
        "status": status,
      },
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType getUnreadNotification() {
    final endpoint = EndpointType(
      path: "/app_api_v1/notification/numUnreadNoti",
      httpMethod: HttpMethod.get,
      parameters: {},
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType sendRSMMessage({required MFastSendRSMMessagePayload payload}) {
    final endpoint = EndpointType(
      path: "/sendMessage",
      httpMethod: HttpMethod.get,
      parameters: payload.toJson(),
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType registerFcmToken(RegisterFcmTokenPayload payload) {
    final endpoint = EndpointType(
      path: "/registerFcmToken",
      httpMethod: HttpMethod.get,
      parameters: payload.toJson(),
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType getChatUnreadCount(GetChatUnreadCountPayload payload) {
    final endpoint = EndpointType(
      path: "/countChatUnread",
      httpMethod: HttpMethod.get,
      parameters: payload.toJson(),
      listFormat: ListFormat.multiCompatible,
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType getNotificationUnreadCount() {
    final endpoint = EndpointType(
      path: "/app_api_v1/notification/numUnreadNoti",
      httpMethod: HttpMethod.get,
      parameters: {},
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }
}
