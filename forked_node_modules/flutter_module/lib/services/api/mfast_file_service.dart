import 'dart:convert';
import 'dart:io';

import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_image_compress/flutter_image_compress.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/env_data.dart';
import 'package:path_provider/path_provider.dart';

import '../../../common/utils/log_util.dart';
import '../base/base_endpoint.dart';
import '../base/base_response.dart';

abstract class MFastFileServiceProtocol {
  Future<BaseResponse> sendBrochure(FileEndpointType endpoint, String? email);
  Future<BaseResponse> uploadImage(FileEndpointType endpoint);
}

class MFastFileService extends MFastFileServiceProtocol {
  MFastFileService._();

  static const String _tag = 'MFastFileService';
  static final MFastFileService instance = MFastFileService._();

  Dio? dio;

  Dio init() {
    if (dio == null) {
      dio = Dio();
      dio!.options.connectTimeout = const Duration(seconds: 45);
      dio!.options.receiveTimeout = const Duration(seconds: 45);
      dio!.options.baseUrl = EnvData.instance.baseUrl;
    }
    return dio!;
  }

  @override
  Future<BaseResponse> sendBrochure(FileEndpointType endpoint, String? email) async {
    final dio = init();
    File file = endpoint.file;
    FormData formData = FormData();
    formData.files.add(MapEntry(
      "file",
      await MultipartFile.fromFile(
        file.path,
        // contentType: MediaType('image', _getFileExtension(file.path)),
        filename: "brochure_${DateTime.now().millisecondsSinceEpoch}.pdf}",
      ),
    ));
    formData.fields.add(MapEntry("email", email ?? ''));

    final header = <String, dynamic>{};

    try {
      Response response = await dio.post(
        endpoint.path!,
        options: Options(headers: header),
        data: formData,
      );
      final json = response.data is Map<String, dynamic> ? response.data : response.data[0];
      AppLog.d(_tag, 'response: ${jsonEncode(json)}');
      if (json != null) {
        int statusCode = response.statusCode!;
        if (statusCode >= 200 && statusCode < 300) {
          return BaseResponse.fromJsonSuccess(json);
        } else {
          return BaseResponse.fromJsonFail(json);
        }
      }
      return BaseResponse(
        status: false,
        errorMessage: "Không thể kết nối tới hệ thống!",
      );
    } catch (e) {
      return BaseResponse(
        status: false,
        errorMessage: "Không thể kết nối tới hệ thống!",
      );
    }
  }

  @override
  Future<BaseResponse> uploadImage(FileEndpointType endpoint) async {
    final dio = init();
    File file = endpoint.file;
    XFile? result;
    if (!kIsWeb) {
      final tempDir = await getTemporaryDirectory();
      final targetPath = "${tempDir.absolute.path}/${DateTime.now().millisecondsSinceEpoch}.jpg";
      result = await FlutterImageCompress.compressAndGetFile(
        file.absolute.path,
        targetPath,
        minHeight: 1920,
        minWidth: 1080,
      );
    }

    FormData formData = FormData();
    formData.files.add(MapEntry(
      "file",
      await MultipartFile.fromFile(
        kIsWeb ? file.path : result!.path,
        // contentType: MediaType('image', _getFileExtension(file.path)),
        filename: "img_${DateTime.now().millisecondsSinceEpoch}.${_getFileExtension(file.path)}",
      ),
    ));
    formData.fields.add(const MapEntry("mediaType", "IMAGE"));

    final header = <String, dynamic>{};

    endpoint.parameters = {
      ...?endpoint.parameters,
      ...AppData.instance.defaultParam.toJsonWithoutToken(),
    };

    try {
      Response response = await dio.post(
        endpoint.path!,
        options: Options(headers: header),
        data: formData,
        queryParameters: AppData.instance.defaultParam.toJson(),
      );
      final json = response.data is Map<String, dynamic> ? response.data : response.data[0];
      AppLog.d(_tag, 'response: ${jsonEncode(json)}');
      if (json != null) {
        int statusCode = response.statusCode!;
        if (statusCode >= 200 && statusCode < 300) {
          return BaseResponse.fromJsonSuccess(json);
        } else {
          return BaseResponse.fromJsonFail(json);
        }
      }
      return BaseResponse(
        status: false,
        errorMessage: "Không thể kết nối tới hệ thống!",
      );
    } catch (e) {
      return BaseResponse(
        status: false,
        errorMessage: "Không thể kết nối tới hệ thống!",
      );
    }
  }

  String _getFileExtension(String fileName) {
    try {
      return fileName.split('.').last;
    } catch (e) {
      return '';
    }
  }
}
