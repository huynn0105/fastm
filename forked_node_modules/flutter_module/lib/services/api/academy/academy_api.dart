import 'package:flutter_module/models/academy/count_registered_event/academy_count_registered_event_model.dart';
import 'package:flutter_module/models/academy/event/academy_event_checkout_model.dart';
import 'package:flutter_module/models/academy/event/academy_filter_event_type_model.dart';
import 'package:flutter_module/models/academy/event_detail/academy_event_detail_model.dart';
import 'package:flutter_module/models/academy/event/academy_event_model.dart';
import 'package:flutter_module/models/academy/event/academy_filter_event_model.dart';
import 'package:flutter_module/models/academy/registered_event/academy_registered_event_model.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/services/api/academy/academy_endpoint.dart';
import 'package:flutter_module/services/api/academy/payload/academy_event_detail_payload.dart';
import 'package:flutter_module/services/api/academy/payload/academy_register_event_payload.dart';
import 'package:flutter_module/services/api/academy/payload/academy_submit_quiz_payload.dart';
import 'package:flutter_module/services/api/academy/payload/request_otp_payload.dart';

import '../../base/base_response.dart';
import '../api_service.dart';

import 'package:flutter_module/services/api/academy/payload/registered_event_payload.dart';

import 'payload/event_payload.dart';
import 'payload/filter_event_payload.dart';

abstract class AcademyApi {
  Future<BaseModel<List<AcademyRegisteredEventModel>>> getListRegisteredEvent(RegisteredEventPayload payload);

  Future<BaseModel<List<AcademyFilterEventTypeModel>>> getListFilterEvent(AcademyFilterEventPayload payload);

  Future<BaseModel<List<AcademyEventModel>>> getListEvent(AcademyEventPayload payload);

  Future<BaseModel<bool>> requestOTP({
    required AcademyRequestOTPPayload payload,
  });

  Future<BaseModel<AcademyEventDetailModel>> getEventDetail({
    required AcademyEventDetailPayload payload,
  });

  Future<BaseModel<bool>> registerEvent({
    required AcademyRegisterEventPayload payload,
  });

  Future<BaseModel<bool>> checkInEvent({
    required AcademyRegisterEventPayload payload,
  });
  Future<BaseModel<AcademyEventCheckOutModel>> checkOutEvent({
    required AcademyRegisterEventPayload payload,
  });
  Future<BaseModel<bool>> submitQuiz({
    required AcademySubmitQuizPayload payload,
  });
  Future<BaseModel<List<AcademyCountRegisteredEventModel>>> getCountRegisteredEvent();
}

class AcademyApiImpl implements AcademyApi {
  @override
  Future<BaseModel<List<AcademyRegisteredEventModel>>> getListRegisteredEvent(RegisteredEventPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      AcademyEndpoint().getListRegisteredEvent(payload),
    );
    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;
      return BaseModel<List<AcademyRegisteredEventModel>>(
        status: true,
        data: data?.map((e) => AcademyRegisteredEventModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<AcademyRegisteredEventModel>>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<AcademyFilterEventTypeModel>>> getListFilterEvent(AcademyFilterEventPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      AcademyEndpoint().getListFilterEvent(payload),
    );
    if (apiResponse.status == true) {
      var responseData = apiResponse.data;
      List<AcademyFilterEventTypeModel>? data;
      if (responseData is Map) {
        data = [AcademyFilterEventTypeModel.fromJson(responseData)];
      } else if (responseData is List) {
        data = responseData.map((e) => AcademyFilterEventTypeModel.fromJson(e)).toList();
      }
      return BaseModel<List<AcademyFilterEventTypeModel>>(
        status: true,
        data: data,
      );
    } else {
      return BaseModel<List<AcademyFilterEventTypeModel>>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<AcademyEventModel>>> getListEvent(AcademyEventPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      AcademyEndpoint().getListEvent(payload),
    );
    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;
      return BaseModel<List<AcademyEventModel>>(
        status: true,
        data: data?.map((e) => AcademyEventModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<AcademyEventModel>>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> requestOTP({
    required AcademyRequestOTPPayload payload,
  }) async {
    await Future.delayed(const Duration(seconds: 2));
    BaseResponse apiResponse = await APIService.instance.requestData(
      AcademyEndpoint().requestOTP(
        payload: payload,
      ),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorMessage: apiResponse.errorMessage,
        errorCode: apiResponse.errorCode,
      );
    }
  }

  @override
  Future<BaseModel<AcademyEventDetailModel>> getEventDetail({required AcademyEventDetailPayload payload}) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      AcademyEndpoint().getEventDetail(
        payload: payload,
      ),
    );
    if (apiResponse.status == true) {
      return BaseModel<AcademyEventDetailModel>(
        status: true,
        data: AcademyEventDetailModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<AcademyEventDetailModel>(
        status: false,
        errorMessage: apiResponse.errorMessage,
        errorCode: apiResponse.errorCode,
      );
    }
  }

  @override
  Future<BaseModel<bool>> registerEvent({
    required AcademyRegisterEventPayload payload,
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      AcademyEndpoint().registerEvent(
        payload: payload,
      ),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorMessage: apiResponse.errorMessage,
        errorCode: apiResponse.errorCode,
      );
    }
  }

  @override
  Future<BaseModel<bool>> checkInEvent({
    required AcademyRegisterEventPayload payload,
  }) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      AcademyEndpoint().checkInEvent(
        payload: payload,
      ),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorMessage: apiResponse.errorMessage,
        errorCode: apiResponse.errorCode,
      );
    }
  }

  @override
  Future<BaseModel<AcademyEventCheckOutModel>> checkOutEvent({required AcademyRegisterEventPayload payload}) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      AcademyEndpoint().checkOutEvent(
        payload: payload,
      ),
    );
    if (apiResponse.status == true) {
      return BaseModel<AcademyEventCheckOutModel>(
        status: true,
        data: AcademyEventCheckOutModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<AcademyEventCheckOutModel>(
        status: false,
        errorMessage: apiResponse.errorMessage,
        errorCode: apiResponse.errorCode,
      );
    }
  }

  @override
  Future<BaseModel<bool>> submitQuiz({required AcademySubmitQuizPayload payload}) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      AcademyEndpoint().submitQuiz(
        payload: payload,
      ),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorMessage: apiResponse.errorMessage,
        errorCode: apiResponse.errorCode,
      );
    }
  }

  @override
  Future<BaseModel<List<AcademyCountRegisteredEventModel>>> getCountRegisteredEvent() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      AcademyEndpoint().getCountRegisteredEvent(),
    );
    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;

      return BaseModel<List<AcademyCountRegisteredEventModel>>(
        status: true,
        data: data?.map((e) => AcademyCountRegisteredEventModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<AcademyCountRegisteredEventModel>>(
        status: false,
        errorMessage: apiResponse.errorMessage,
        errorCode: apiResponse.errorCode,
      );
    }
  }
}
