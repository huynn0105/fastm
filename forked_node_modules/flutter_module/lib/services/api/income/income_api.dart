import 'package:flutter_module/models/authentication/otp_model.dart';
import 'package:flutter_module/models/income/check_withdraw_info_model.dart';
import 'package:flutter_module/models/income/fee_withdraw_model.dart';
import 'package:flutter_module/models/income/history_income_model.dart';
import 'package:flutter_module/models/income/statistic_income_model.dart';
import 'package:flutter_module/models/income/withdraw_info_model.dart';
import 'package:flutter_module/services/api/api_service.dart';
import 'package:flutter_module/services/api/income/payload/export_statement_payload.dart';
import 'package:flutter_module/services/api/income/payload/get_statistice_income_payload.dart';
import 'package:flutter_module/services/api/income/payload/get_withdraw_fee_payload.dart';
import 'package:flutter_module/services/api/income/payload/history_income_payload.dart';
import 'package:flutter_module/services/api/income/payload/send_withdraw_otp_payload.dart';
import 'package:flutter_module/services/api/income/payload/submit_withdraw_payload.dart';

import '../../../models/base_model.dart';
import '../../base/base_response.dart';
import 'income_endpoint.dart';

abstract class IncomeApi {
  Future<BaseModel<StatisticIncomeModel>> getStatisticeIncome(GetStatisticeIncomePayload payload);

  Future<BaseModel<bool>> exportStatement(ExportStatementPayload payload);

  Future<BaseModel<HistoryIncomeModel>> getHistoryIncome(GetHistoryIncomePayload payload);

  Future<BaseModel<WithdrawInfoModel>> getWithdrawInfo();

  Future<BaseModel<CheckWithdrawInfoModel>> checkWithdrawInfo();

  Future<BaseModel<FeeWithdrawModel>> getWithdrawFee(GetWithdrawFeePayload payload);

  Future<BaseModel<OtpModel>> sendWithdrawOTP(SendWithdrawOTPPayload payload);

  Future<BaseModel<bool>> submitWithdraw(SubmitWithdrawPayload payload);
}

class IncomeApiImpl implements IncomeApi {
  @override
  Future<BaseModel<StatisticIncomeModel>> getStatisticeIncome(GetStatisticeIncomePayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      IncomeEndpoint().getStatisticeIncome(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<StatisticIncomeModel>(
        status: true,
        data: StatisticIncomeModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<StatisticIncomeModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> exportStatement(ExportStatementPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      IncomeEndpoint().exportStatement(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<HistoryIncomeModel>> getHistoryIncome(GetHistoryIncomePayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      IncomeEndpoint().getHistoryIncome(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<HistoryIncomeModel>(
        status: true,
        data: HistoryIncomeModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<HistoryIncomeModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<WithdrawInfoModel>> getWithdrawInfo() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      IncomeEndpoint().getWithdrawInfo(),
    );

    if (apiResponse.status == true) {
      return BaseModel<WithdrawInfoModel>(
        status: true,
        data: WithdrawInfoModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<WithdrawInfoModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<CheckWithdrawInfoModel>> checkWithdrawInfo() async {
    BaseResponse apiResponse = await APIService.instance.requestOldData(
      IncomeEndpoint().checkWithdrawInfo(),
    );

    if (apiResponse.status == true) {
      return BaseModel<CheckWithdrawInfoModel>(
        status: true,
        data: CheckWithdrawInfoModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<CheckWithdrawInfoModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<FeeWithdrawModel>> getWithdrawFee(GetWithdrawFeePayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestOldData(
      IncomeEndpoint().getWithdrawFee(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<FeeWithdrawModel>(
        status: true,
        data: FeeWithdrawModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<FeeWithdrawModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<OtpModel>> sendWithdrawOTP(SendWithdrawOTPPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      IncomeEndpoint().sendWithdrawOTP(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<OtpModel>(
        status: true,
        data: OtpModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<OtpModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> submitWithdraw(SubmitWithdrawPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      IncomeEndpoint().submitWithdraw(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }
}
