import 'package:flutter_module/services/api/news/payload/get_news_payload.dart';

import '../../../models/base_model.dart';
import '../../../models/news/contests_model.dart';
import '../../../models/news/knowledges_model.dart';
import '../../../models/news/news_model.dart';
import '../../base/base_response.dart';
import '../api_service.dart';
import 'news_endpoint.dart';

abstract class NewsApi {
  Future<BaseModel<List<KnowledgesModel>>> getListKnowledges();

  Future<BaseModel<List<NewsModel>>> getListNews(GetListNewsPayload payload);

  Future<BaseModel<ContestsModel>> getListContests();
}

class NewsApiImpl implements NewsApi {
  @override
  Future<BaseModel<List<KnowledgesModel>>> getListKnowledges() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      NewsEndpoint().getListKnowledges(),
    );
    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;
      return BaseModel<List<KnowledgesModel>>(
        status: true,
        data: data?.map((e) => KnowledgesModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<KnowledgesModel>>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<NewsModel>>> getListNews(GetListNewsPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      NewsEndpoint().getListNews(payload),
    );
    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;
      return BaseModel<List<NewsModel>>(
        status: true,
        data: data?.map((e) => NewsModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<NewsModel>>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<ContestsModel>> getListContests() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      NewsEndpoint().getListContests(),
    );
    if (apiResponse.status == true) {
      final data = apiResponse.data;
      return BaseModel<ContestsModel>(
        status: true,
        data: ContestsModel.fromJson(data),
      );
    } else {
      return BaseModel<ContestsModel>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }
}
