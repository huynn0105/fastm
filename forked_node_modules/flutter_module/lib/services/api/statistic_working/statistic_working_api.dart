import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/models/statistic_working/statistic_report_model.dart';
import 'package:flutter_module/models/statistic_working/statistic_checking_model.dart';
import 'package:flutter_module/services/api/api_service.dart';
import 'package:flutter_module/services/api/statistic_working/payload/get_statistic_checking_by_filter_payload.dart';
import 'package:flutter_module/services/api/statistic_working/payload/get_statistic_summary_checking_payload.dart';
import 'package:flutter_module/services/api/statistic_working/payload/get_statistic_summary_report_payload.dart';
import 'package:flutter_module/services/api/statistic_working/statistic_working_endpoint.dart';

import 'payload/get_statistic_report_by_filter_payload.dart';

abstract class StatisticWorkingApi {
  Future<BaseModel<StatisticCheckingModel>> getStatisticSummaryChecking(
    GetStatisticSummaryCheckingPayload payload,
  );

  Future<BaseModel<List<StatisticCheckingModel>>> getStatisticCheckingByFilter(
    GetStatisticCheckingByFilterPayload payload,
  );

  Future<BaseModel<StatisticReportModel>> getStatisticSummaryReport(GetStatisticSummaryReportPayload payload);

  Future<BaseModel<List<StatisticReportModel>>> getStatisticReportByFilter(GetStatisticReportByFilterPayload payload);
}

class StatisticWorkingApiImpl implements StatisticWorkingApi {
  @override
  Future<BaseModel<StatisticCheckingModel>> getStatisticSummaryChecking(
    GetStatisticSummaryCheckingPayload payload,
  ) async {
    final apiResponse = await APIService.instance.requestData(
      StatisticWorkingEndpoint().getStatisticSummaryChecking(payload),
    );
    if (apiResponse.status!) {
      return BaseModel<StatisticCheckingModel>(
        status: true,
        data: StatisticCheckingModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<StatisticCheckingModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<StatisticCheckingModel>>> getStatisticCheckingByFilter(
    GetStatisticCheckingByFilterPayload payload,
  ) async {
    final apiResponse = await APIService.instance.requestData(
      StatisticWorkingEndpoint().getStatisticCheckingByFilter(payload),
    );
    if (apiResponse.status!) {
      final data = apiResponse.data as List?;
      return BaseModel<List<StatisticCheckingModel>>(
        status: true,
        data: data?.map((e) => StatisticCheckingModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<StatisticCheckingModel>>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<StatisticReportModel>> getStatisticSummaryReport(GetStatisticSummaryReportPayload payload) async {
    final apiResponse = await APIService.instance.requestData(
      StatisticWorkingEndpoint().getStatisticSummaryReport(payload),
    );
    if (apiResponse.status!) {
      return BaseModel<StatisticReportModel>(
        status: true,
        data: StatisticReportModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<StatisticReportModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<StatisticReportModel>>> getStatisticReportByFilter(
      GetStatisticReportByFilterPayload payload) async {
    final apiResponse = await APIService.instance.requestData(
      StatisticWorkingEndpoint().getStatisticReportByFilter(payload),
    );
    if (apiResponse.status!) {
      final mapData = apiResponse.data as List?;
      final data = mapData?.map((e) => StatisticReportModel.fromJson(e)).toList();
      return BaseModel<List<StatisticReportModel>>(
        status: true,
        data: data,
      );
    } else {
      return BaseModel<List<StatisticReportModel>>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }
}
