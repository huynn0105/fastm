import 'package:flutter_module/models/mtrade/my_review/mentor_rating_model.dart';
import 'package:flutter_module/models/personal_setting/core_agent_model.dart';
import 'package:flutter_module/models/personal_setting/del_mfast_lead_model.dart';
import 'package:flutter_module/models/personal_setting/personal_setting_model.dart';
import 'package:flutter_module/models/personal_setting/visible_setting_model.dart';
import 'package:flutter_module/services/api/api_service.dart';
import 'package:flutter_module/services/api/personal_setting/payload/update_setting_payload.dart';
import 'package:flutter_module/services/api/personal_setting/personal_setting_endpoint.dart';

import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/services/base/base_response.dart';
import 'package:flutter_module/services/local/mock/mock_rating.dart';

abstract class PersonalSettingApi {
  Future<BaseModel<List<PersonalSettingModel>>> getPersonalSetting();

  Future<BaseModel<MentorRatingModel>> getMentorRating();

  Future<BaseModel<List<VisibleSettingModel>>> getVisibleSettings();

  Future<BaseModel<void>> updateVisibleSetting(UpdateSettingPayload payload);

  Future<BaseModel<CoreAgent>> getCoreAgent();

  Future<BaseModel<DelMFastLeadModel>> getDelMFastLead();
}

class PersonalSettingApiImpl implements PersonalSettingApi {
  @override
  Future<BaseModel<List<PersonalSettingModel>>> getPersonalSetting() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      PersonalSettingEndpoint().getPersonalSetting(),
    );

    if (apiResponse.status == true) {
      final json = (apiResponse.data?["data"] ?? []) as List;
      final data = json.map((e) => PersonalSettingModel.fromJson(e)).toList();
      return BaseModel<List<PersonalSettingModel>>(
        status: true,
        data: data,
      );
    } else {
      return BaseModel<List<PersonalSettingModel>>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<MentorRatingModel>> getMentorRating() async {
    // BaseResponse apiResponse = await APIService.instance.requestData(
    //   PersonalSettingEndpoint().getMentorRating(),
    // );

    final apiResponse = BaseResponse.fromJsonSuccess(mockRatingData);
    await Future.delayed(const Duration(seconds: 2));

    if (apiResponse.status == true) {
      final json = apiResponse.data?["listRating"];
      return BaseModel<MentorRatingModel>(
        status: true,
        data: MentorRatingModel.fromJson(json),
      );
    } else {
      return BaseModel<MentorRatingModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<VisibleSettingModel>>> getVisibleSettings() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      PersonalSettingEndpoint().getPrivacyVisibleConfigs(),
    );

    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;
      return BaseModel<List<VisibleSettingModel>>(
        status: true,
        data: data?.map((e) => VisibleSettingModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<VisibleSettingModel>>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<void>> updateVisibleSetting(UpdateSettingPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      PersonalSettingEndpoint().updateVisibleSetting(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<void>(
        status: true,
      );
    } else {
      return BaseModel<void>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<CoreAgent>> getCoreAgent() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      PersonalSettingEndpoint().getCoreAgent(),
    );

    if (apiResponse.status == true) {
      Map<String, dynamic>? data;
      if (apiResponse.data is Map) {
        data = apiResponse.data?['content'];
      }

      return BaseModel<CoreAgent>(
        status: true,
        data: data != null ? CoreAgent.fromJson(data) : null,
      );
    } else {
      return BaseModel<CoreAgent>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<DelMFastLeadModel>> getDelMFastLead() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      PersonalSettingEndpoint().getDelMFastLead(),
    );

    if (apiResponse.status == true) {
      return BaseModel<DelMFastLeadModel>(
        status: true,
        data: DelMFastLeadModel.fromJson(apiResponse.data, raw: apiResponse.raw),
      );
    } else {
      return BaseModel<DelMFastLeadModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }
}
