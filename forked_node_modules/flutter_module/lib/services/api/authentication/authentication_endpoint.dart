import 'package:flutter_module/services/api/authentication/payload/logout_payload.dart';
import 'package:flutter_module/services/api/authentication/payload/register_payload.dart';

import '../../base/base_endpoint.dart';
import '../../base/method_request.dart';
import 'payload/request_otp_payload.dart';
import 'payload/verify_otp_payload.dart';
import 'payload/verify_password_payload.dart';

abstract class AuthenticationEndpointProtocol {
  EndpointType requestOtp(
    RequestOtpPayload payload,
  );

  EndpointType verifyOtp(
    VerifyOtpPayload payload,
  );

  EndpointType verifyPassword(
    VerifyPasswordPayload payload,
  );

  EndpointType logout(
    LogoutPayload payload,
  );

  EndpointType checkNickname(
    String nickname,
  );

  EndpointType register(
    RegisterPayload payload,
  );
}

class AuthenticationEndpoint implements AuthenticationEndpointProtocol {
  @override
  EndpointType requestOtp(RequestOtpPayload payload) {
    final endpoint = EndpointType(
      path: "/mfast_api_v1/authorization/otp",
      httpMethod: HttpMethod.get,
      parameters: payload.toJson(),
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType verifyOtp(VerifyOtpPayload payload) {
    final endpoint = EndpointType(
      path: "/loginExternal",
      httpMethod: HttpMethod.get,
      parameters: payload.toJson(),
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType verifyPassword(VerifyPasswordPayload payload) {
    final endpoint = EndpointType(
      path: "/mfast_api_v1/authorization/login_by_password",
      httpMethod: HttpMethod.post,
      parameters: payload.toJson(),
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType logout(LogoutPayload payload) {
    final endpoint = EndpointType(
      path: "/logout",
      httpMethod: HttpMethod.get,
      parameters: payload.toJson(),
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType checkNickname(String nickname) {
    final endpoint = EndpointType(
      path: "/mfast_api_v1/personal/check_duplicate_full_name",
      httpMethod: HttpMethod.get,
      parameters: {
        "full_name": nickname,
      },
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType register(RegisterPayload payload) {
    final endpoint = EndpointType(
      path: "/registerExternal",
      httpMethod: HttpMethod.get,
      parameters: payload.toJson(),
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }
}
