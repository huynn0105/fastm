import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/services/api/authentication/payload/logout_payload.dart';
import 'package:flutter_module/services/api/authentication/payload/register_payload.dart';
import 'package:flutter_module/services/api/firebase_function_api_service.dart';

import '../../../models/authentication/otp_model.dart';
import '../../../models/base_model.dart';
import '../../../models/user/user_info_model.dart';
import '../../base/base_response.dart';
import '../api_service.dart';
import 'authentication_endpoint.dart';
import 'payload/request_otp_payload.dart';
import 'payload/verify_otp_payload.dart';
import 'payload/verify_password_payload.dart';

abstract class AuthenticationApi {
  Future<BaseModel<OtpModel>> requestOtp(RequestOtpPayload payload);

  Future<BaseModel<UserInfoModel>> verifyOtp(VerifyOtpPayload payload);

  Future<BaseModel<UserInfoModel>> verifyPassword(VerifyPasswordPayload payload);

  Future<BaseModel<bool>> logout(LogoutPayload payload);

  Future<BaseModel<bool>> checkNickname(String nickname);

  Future<BaseModel<UserInfoModel>> register(RegisterPayload payload);
}

class AuthenticationApiImpl implements AuthenticationApi {
  @override
  Future<BaseModel<OtpModel>> requestOtp(RequestOtpPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      AuthenticationEndpoint().requestOtp(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<OtpModel>(
        status: true,
        data: OtpModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<OtpModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<UserInfoModel>> verifyOtp(VerifyOtpPayload payload) async {
    BaseResponse apiResponse = await FirebaseFunctionAPIService.instance.requestData(
      AuthenticationEndpoint().verifyOtp(payload),
    );
    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;
      return BaseModel<UserInfoModel>(status: true, data: UserInfoModel.fromJson(data.getFirst()));
    } else {
      return BaseModel<UserInfoModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<UserInfoModel>> verifyPassword(VerifyPasswordPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      AuthenticationEndpoint().verifyPassword(payload),
    );
    if (apiResponse.status == true) {
      final response = apiResponse.data is List ? (apiResponse.data as List?)?.getFirst() : apiResponse.data;
      return BaseModel<UserInfoModel>(
        status: true,
        data: UserInfoModel.fromJson(response),
      );
    } else {
      return BaseModel<UserInfoModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> logout(LogoutPayload payload) async {
    BaseResponse apiResponse = await FirebaseFunctionAPIService.instance.requestData(
      AuthenticationEndpoint().logout(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> checkNickname(String nickname) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      AuthenticationEndpoint().checkNickname(nickname),
    );
    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<UserInfoModel>> register(RegisterPayload payload) async {
    BaseResponse apiResponse = await FirebaseFunctionAPIService.instance.requestData(
      AuthenticationEndpoint().register(payload),
    );
    if (apiResponse.status == true) {
      return BaseModel<UserInfoModel>(
        status: true,
        data: UserInfoModel.fromJson(apiResponse.data),
      );
    } else {
      return BaseModel<UserInfoModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }
}
