import 'package:flutter_module/services/api/chat/payload/file_upload_payload.dart';
import 'package:flutter_module/services/api/chat/payload/rating/user_review_payload.dart';
import 'package:flutter_module/services/api/chat/payload/thread_messages/update_read_time_in_thread_pay_load.dart';
import 'package:flutter_module/services/base/base_endpoint.dart';
import 'package:flutter_module/services/base/method_request.dart';

abstract class ChatEndpointProtocol {
  EndpointType getListSupportRequest({
    required String userID,
    required String type,
    int page = 1,
  });

  FileEndpointType uploadFile({
    required FileUploadPayload payload,
  });

  MultiFileEndpointType uploadMultiFile({
    required FileUploadPayload payload,
  });

  MultiFileEndpointType mUploadMultiFile({
    required FileUploadPayload payload,
  });

  EndpointType getContactsOnline();

  EndpointType searchContact({
    required String keyword,
  });

  EndpointType sendRequestAddContact({
    required String nickname,
    required String phoneNumber,
  });

  EndpointType getInvitationAndSendingRequest();

  EndpointType cancelRequestContact({
    required String phoneNumber,
  });

  EndpointType acceptRequestContact({
    required String invitationID,
    required String acceptedUserID,
  });

  EndpointType rejectRequestContact({
    required String senderID,
  });

  EndpointType getContacts();

  EndpointType updateUserReadTimeInThread({
    required UpdateReadTimeInThreadPayload payload,
  });

  EndpointType getReviews({
    required UserReviewPayload payload,
  });

  EndpointType getUserRating({
    required String userID,
  });

  EndpointType getBlockedUsers();
}

class ChatEndpoint implements ChatEndpointProtocol {
  @override
  EndpointType getListSupportRequest({
    required String userID,
    required String type,
    int page = 1,
  }) {
    final endpoint = EndpointType(
      path: "/get_ticket_userID.php",
      httpMethod: HttpMethod.get,
      parameters: {"userID": userID, "type": type, "page": page},
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  FileEndpointType uploadFile({
    required FileUploadPayload payload,
  }) {
    final endpoint = FileEndpointType(
      path: "storage/uploadFile",
      file: payload.files.first,
    );
    return endpoint;
  }

  @override
  MultiFileEndpointType uploadMultiFile({
    required FileUploadPayload payload,
  }) {
    final endpoint = MultiFileEndpointType(
      path: "storage/uploadFile",
      files: payload.files,
      parameters: {},
    );
    return endpoint;
  }

  @override
  MultiFileEndpointType mUploadMultiFile({
    required FileUploadPayload payload,
  }) {
    final endpoint = MultiFileEndpointType(
      path: "/mfast_api_v1/upload/upload_s3",
      httpMethod: HttpMethod.post,
      files: payload.files,
      parameters: {},
    );
    return endpoint;
  }

  @override
  EndpointType getContactsOnline() {
    final endpoint = EndpointType(
      path: "/fetchConversationContactsOnline",
      httpMethod: HttpMethod.get,
      parameters: {},
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType searchContact({required String keyword}) {
    final endpoint = EndpointType(
      path: "/mfast_api_v1/personal/search_by_nickname_or_mfastcode",
      httpMethod: HttpMethod.get,
      parameters: {"keyword": keyword},
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType sendRequestAddContact({
    required String nickname,
    required String phoneNumber,
  }) {
    final endpoint = EndpointType(
      path: "/sendRequestContact",
      httpMethod: HttpMethod.get,
      parameters: {
        "nickname": nickname,
        "phoneNumber": phoneNumber,
        "message": "",
      },
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType getInvitationAndSendingRequest() {
    final endpoint = EndpointType(
      path: "/fetchInvitationAndSendingRequest",
      httpMethod: HttpMethod.get,
      parameters: {},
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType cancelRequestContact({required String phoneNumber}) {
    final endpoint = EndpointType(
      path: "/cancelRequestContact",
      httpMethod: HttpMethod.get,
      parameters: {
        "phoneNumber": phoneNumber,
      },
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType acceptRequestContact({required String invitationID, required String acceptedUserID}) {
    final endpoint = EndpointType(
      path: "/acceptRequestContact",
      httpMethod: HttpMethod.get,
      parameters: {
        "invitationID": invitationID,
        "acceptedUserID": acceptedUserID,
      },
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType rejectRequestContact({required String senderID}) {
    final endpoint = EndpointType(
      path: "/rejectRequestContact",
      httpMethod: HttpMethod.get,
      parameters: {
        "senderID": senderID,
      },
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType getContacts() {
    final endpoint = EndpointType(
      path: "/fetchConversationContacts",
      httpMethod: HttpMethod.get,
      parameters: {},
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType updateUserReadTimeInThread({
    required UpdateReadTimeInThreadPayload payload,
  }) {
    final endpoint = EndpointType(
      path: "/updateUserReadTimeInThread",
      httpMethod: HttpMethod.get,
      parameters: payload.toJson(),
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType getReviews({required UserReviewPayload payload}) {
    final endpoint = EndpointType(
      path: "/mfast_api_v1/hierarchical/load_page_rating_user",
      httpMethod: HttpMethod.post,
      parameters: payload.toJson(),
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType getUserRating({required String userID}) {
    final endpoint = EndpointType(
      path: "/mfast_api_v1/hierarchical/hier_info_user",
      httpMethod: HttpMethod.post,
      parameters: {
        "userID": userID,
        "isUserCollab": false,
        "parentUserID": userID,
      },
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }

  @override
  EndpointType getBlockedUsers() {
    final endpoint = EndpointType(
      path: "/getBlockedUsers",
      httpMethod: HttpMethod.get,
      parameters: {},
      header: DefaultHeader.instance.addDefaultHeader(),
    );
    return endpoint;
  }
}
