import 'package:flutter_module/models/home_data/dpd_model.dart';
import 'package:flutter_module/models/home_data/home_banner_model.dart';
import 'package:flutter_module/models/home_data/home_item_model.dart';
import 'package:flutter_module/models/home_data/home_page_layout_model.dart';
import 'package:flutter_module/models/news/news_model.dart';
import 'package:flutter_module/services/api/api_service.dart';
import 'package:flutter_module/services/api/home_data/payload/gen_project_link_payload.dart';
import 'package:flutter_module/services/api/mfast/payload/mfast_tracking_event_non_user_payload.dart';
import 'package:flutter_module/services/api/mfast/payload/mfast_tracking_event_payload.dart';

import '../../../models/base_model.dart';
import '../../../models/customer_requirements/customer_requirement_model.dart';
import '../../base/base_response.dart';
import 'home_data_endpoint.dart';

abstract class HomeDataApi {
  Future<BaseModel<HomePageLayoutModel>> getHomePageData();

  Future<BaseModel<List<CustomerRequirementModel>>> getCustomerRequirements();

  Future<BaseModel<List<HomeBannerModel>>> getHomeBanners();

  Future<BaseModel<List<NewsModel>>> getHomeTips();

  Future<BaseModel<DPDModel>> getHomeDPD();

  Future<BaseModel<List<HomeItemModel>>> getHighlightProjects();

  Future<BaseModel<bool>> trackingEvent(MFastTrackingEventPayload payload);

  Future<BaseModel<bool>> trackingEventNonUser(MFastTrackingEventNonUserPayload payload);

  Future<BaseModel<String>> genProjectLink(GenProjectLinkPayload payload);
}

class HomeDataApiImpl implements HomeDataApi {
  @override
  Future<BaseModel<HomePageLayoutModel>> getHomePageData() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      HomeEndpoint().getHomePageData(),
    );

    if (apiResponse.status == true) {
      return BaseModel<HomePageLayoutModel>(
        status: true,
        data: HomePageLayoutModel.fromJson(apiResponse.raw),
      );
    } else {
      return BaseModel<HomePageLayoutModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<CustomerRequirementModel>>> getCustomerRequirements() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      HomeEndpoint().getCustomerRequirement(),
    );

    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;
      return BaseModel<List<CustomerRequirementModel>>(
        status: true,
        data: data?.map((e) => CustomerRequirementModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<CustomerRequirementModel>>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<HomeBannerModel>>> getHomeBanners() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      HomeEndpoint().getHomeBanners(),
    );

    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;
      return BaseModel<List<HomeBannerModel>>(
        status: true,
        data: data?.map((e) => HomeBannerModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<HomeBannerModel>>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<NewsModel>>> getHomeTips() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      HomeEndpoint().getHomeTips(),
    );

    if (apiResponse.status == true) {
      final data = apiResponse.data as List?;
      return BaseModel<List<NewsModel>>(
        status: true,
        data: data?.map((e) => NewsModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<NewsModel>>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<DPDModel>> getHomeDPD() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      HomeEndpoint().getHomeDPD(),
    );

    if (apiResponse.status == true) {
      return BaseModel<DPDModel>(
        status: true,
        data: DPDModel.fromJson(apiResponse.raw),
      );
    } else {
      return BaseModel<DPDModel>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<List<HomeItemModel>>> getHighlightProjects() async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      HomeEndpoint().getHighlightProjects(),
    );

    if (apiResponse.status == true) {
      final data = apiResponse.data['items'] as List?;
      return BaseModel<List<HomeItemModel>>(
        status: true,
        data: data?.map((e) => HomeItemModel.fromJson(e)).toList(),
      );
    } else {
      return BaseModel<List<HomeItemModel>>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> trackingEvent(MFastTrackingEventPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      HomeEndpoint().trackingEvent(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<bool>> trackingEventNonUser(MFastTrackingEventNonUserPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      HomeEndpoint().trackingEventNonUser(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<bool>(
        status: true,
      );
    } else {
      return BaseModel<bool>(
        status: false,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }

  @override
  Future<BaseModel<String>> genProjectLink(GenProjectLinkPayload payload) async {
    BaseResponse apiResponse = await APIService.instance.requestData(
      HomeEndpoint().genProjectLink(payload),
    );

    if (apiResponse.status == true) {
      return BaseModel<String>(
        status: true,
        data: '',
      );
    } else {
      return BaseModel<String>(
        status: false,
        errorCode: apiResponse.errorCode,
        errorMessage: apiResponse.errorMessage,
      );
    }
  }
}
