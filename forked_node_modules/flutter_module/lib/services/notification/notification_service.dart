import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_module/common/enum/mfast/notification_type.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/app_cubit.dart';
import 'package:flutter_module/features/notification/cubit/push_notification/push_notification_cubit.dart';
import 'package:flutter_module/features/notification/page/notification/mixin/tap_notification_mixin.dart';
import 'package:flutter_module/general_config.dart';
import 'package:flutter_module/routes/routes.dart';
import 'package:flutter_module/services/notification/mo_engage_notification_service.dart';

import '../../common/utils/text_util.dart';
import '../../models/mfast/notification/mfast_notification_model.dart';
import 'device_token.dart';
import 'fcm_wrapper.dart';

class NotificationService extends FCMWrapper with TapNotificationMixin {
  static final NotificationService _inst = NotificationService._internal();

  NotificationService._internal();

  factory NotificationService() {
    return _inst;
  }

  late final MoEngageNotificationService moe;

  void initNotification() {
    initService(logo: 'app_icon');
    initFCM();
    // final moengagePlugin = getItInstance.get<AppCubit>().moengagePlugin;
    // moe = MoEngageNotificationService(moengagePlugin: moengagePlugin);
  }

  // handle navigate to screens when app kill or background
  void processRemoteMessage(RemoteMessage message) {
    final data = MFastNotificationDataModel.fromPushNotificationJson(message.data);
    handleNavigateToScreen(
      notification: MFastNotificationModel(
        data: data,
      ),
    );
  }

  @override
  void initialMessage(RemoteMessage message) {
    processRemoteMessage(message);
  }

  @override
  void onMessage(RemoteMessage message) {
    showNotification(message);
    triggerIncomingMessage(message);
    getItInstance.get<PushNotificationCubit>().refreshUnreadCount();
  }

  @override
  void onMessageOpenedApp(RemoteMessage message) {
    processRemoteMessage(message);
  }

  @override
  Future<void> selectNotification(MFastNotificationModel data) async {
    handleNavigateToScreen(notification: data);
  }

  @override
  Future<void> onGetToken(String? token) async {
    onUpdateToken(token);
  }

  @override
  void onTokenRefresh(String token) {
    onUpdateToken(token);
  }

  void onUpdateToken(String? token) {
    DeviceToken.instance.setFCMToken(token);
    getItInstance.get<AppCubit>().updateAppflyerServerUninstallToken(token);
    getItInstance.get<AppCubit>().moeService.initPushConfig(fcmToken: token ?? '');
  }

  void onDeleteToken() {
    //
  }

  void handleNavigateToScreen({
    MFastNotificationModel? notification,
  }) {
    if (notification != null) {
      updateReadNotify(notification.data?.notificationId);
      final context = getItInstance.get<AppRouter>().navigatorKey.currentContext;
      handleOnTapPush(context, item: notification);
    }
  }

  void updateReadNotify(String? notificationID) {
    if (TextUtils.isEmpty(notificationID)) {
      return;
    }
    eventBus.fire(ReadNotificationEventBus(notificationID));
    getItInstance.get<PushNotificationCubit>().refreshUnreadCount();
  }

  void triggerIncomingMessage(RemoteMessage message) {
    onTriggerIncomingNotification(item: getNotificationFromRemoteMessage(message));
  }
}
