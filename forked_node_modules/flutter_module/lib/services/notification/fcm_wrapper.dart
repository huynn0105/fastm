import 'dart:convert';

import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';

import '../../common/utils/log_util.dart';
import 'notification_wrapper.dart';

abstract class FCMWrapper extends NotificationWrapper {
  final _tag = "FCMWrapper";
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;

  void initialMessage(RemoteMessage message);

  void onMessage(RemoteMessage message);

  void onMessageOpenedApp(RemoteMessage message);

  Future<void> onGetToken(String? token);

  void onTokenRefresh(String token);

  void onSubscribeToTopic(String name) {
    _firebaseMessaging.subscribeToTopic(name);
  }

  void onUnsubscribeFromTopic(String name) {
    _firebaseMessaging.unsubscribeFromTopic(name);
  }

  void initFCM() async {
    _firebaseMessaging.getInitialMessage().then((RemoteMessage? message) {
      AppLog.d(_tag, 'getInitialMessage ${jsonEncode(message?.toMap())}');
      if (message == null) {
        return;
      }
      initialMessage(message);
    });
    String? token = await _firebaseMessaging.getToken();
    AppLog.d(_tag, 'onGetToken $token');
    onGetToken(token);

    _firebaseMessaging.onTokenRefresh.listen((token) {
      AppLog.d(_tag, 'onTokenRefresh $token');
      onTokenRefresh(token);
    });

    /// listen message app on foreground.
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      AppLog.d(_tag, 'onMessage ${jsonEncode(message.toMap())}');
      onMessage(message);
    });

    //listen message app on background -> run on isolate -> can't update UI.
    FirebaseMessaging.onBackgroundMessage(_messagingBackgroundHandler);

    /// listen app kill -> open app -> listen navigate screen.
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      AppLog.d(_tag, 'onMessageOpenedApp ${jsonEncode(message.toMap())}');
      onMessageOpenedApp(message);
    });
  }

  static Future _messagingBackgroundHandler(RemoteMessage message) async {
    AppLog.d('FCMWrapper', 'onBackgroundMessage ${jsonEncode(message.toMap())}');

    // If you're going to use other Firebase services in the background, such as Firestore,
    // make sure you call `initializeApp` before using other Firebase services.
    await Firebase.initializeApp();
  }
}
