import 'dart:convert';
import 'dart:io';
import 'dart:math';

import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter_module/models/mfast/notification/mfast_notification_model.dart';
import 'package:path_provider/path_provider.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:http/http.dart' as http;

import '../../common/colors.dart';

abstract class NotificationWrapper {
  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

  Future<void> selectNotification(
    MFastNotificationModel data,
  );

  final AndroidNotificationChannel _androidChannel = const AndroidNotificationChannel(
    'cnext', // id
    'High Importance Notifications', // title
    description: 'This channel is used for important notifications.',
    importance: Importance.max,
  );

  Future<void> initService({required String logo}) async {
    _requestPermissions();
    final initializationSettingsAndroid = AndroidInitializationSettings(logo);

    final initializationSettingsIOS = DarwinInitializationSettings(
      onDidReceiveLocalNotification: (
        int id,
        String? title,
        String? body,
        String? payload,
      ) async {},
    );

    final initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    await _flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (NotificationResponse? response) {
        _selectNotification(payload: response?.payload);
      },
    );
    tz.initializeTimeZones();
  }

  Future<void> _selectNotification({String? payload}) async {
    Map<String, dynamic> valueMap = json.decode(payload ?? '');
    final data = MFastNotificationModel.fromJson(valueMap);
    selectNotification(data);
  }

  Future<void> showNotification(RemoteMessage message) async {
    String payload;
    try {
      payload = json.encode(message.data);
    } on FormatException {
      payload = '';
    }

    if (Platform.isAndroid) {
      await _showNotificationAndroidStyleMedia(
        message.notification?.title ?? '',
        message.notification?.body ?? '',
        message.notification?.android?.imageUrl ?? '',
        payload,
        id: Random().nextInt(10000000),
      );
    } else if (Platform.isIOS) {
      await _showNotificationIOSStyleMedia(
        message.notification?.title ?? '',
        message.notification?.body ?? '',
        message.notification?.apple?.imageUrl ?? '',
        payload,
        id: Random().nextInt(10000000),
      );
    }
  }

  Future<void> _showNotificationAndroidStyleMedia(
    String title,
    String message,
    String url,
    String payload, {
    int id = 0,
  }) async {
    String? largeIconPath;
    if (url != "") {
      largeIconPath = await _downloadAndSaveFile(url, 'largeIcon');
    }
    final androidPlatformChannelSpecifics = AndroidNotificationDetails(
      _androidChannel.id,
      _androidChannel.name,
      channelDescription: _androidChannel.description,
      importance: Importance.max,
      priority: Priority.max,
      color: UIColors.primaryColor,
      ticker: 'ticket',
      largeIcon: largeIconPath != null ? FilePathAndroidBitmap(largeIconPath) : null,
    );

    final notificationDetails = NotificationDetails(
      android: androidPlatformChannelSpecifics,
    );

    await _flutterLocalNotificationsPlugin.show(
      id,
      title,
      message,
      notificationDetails,
      payload: payload,
    );
  }

  Future<void> _showNotificationIOSStyleMedia(
    String title,
    String message,
    String url,
    String payload, {
    int id = 0,
  }) async {
    String? largeIconPath;
    if (url != "") {
      largeIconPath = await _downloadAndSaveFile(url, 'largeIcon.jpg');
    }
    final iOSPlatformChannelSpecifics = DarwinNotificationDetails(
      attachments: <DarwinNotificationAttachment>[
        if (largeIconPath != null) DarwinNotificationAttachment(largeIconPath)
      ],
    );

    final notificationDetails = NotificationDetails(
      iOS: iOSPlatformChannelSpecifics,
    );
    await _flutterLocalNotificationsPlugin.show(
      id,
      title,
      message,
      notificationDetails,
      payload: payload,
    );
  }

  void _requestPermissions() {
    if (Platform.isAndroid) {
      _flutterLocalNotificationsPlugin
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
          ?.requestNotificationsPermission();
    } else {
      _flutterLocalNotificationsPlugin
          .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>()
          ?.requestPermissions(alert: true, badge: true, sound: true);

      FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(alert: false, badge: false, sound: false);
    }
  }

  Future<String?> _downloadAndSaveFile(String url, String fileName) async {
    try {
      final Directory directory = await getApplicationDocumentsDirectory();
      final String filePath = '${directory.path}/$fileName';
      final http.Response response = await http.get(Uri.parse(url));
      final File file = File(filePath);
      await file.writeAsBytes(response.bodyBytes);
      return filePath;
    } on Exception catch (_) {
      return null;
    }
  }

  void clearNotificationTray() {
    _flutterLocalNotificationsPlugin.cancelAll();
  }
}
