import 'dart:convert';
import 'dart:io';

import 'package:flutter_module/common/utils/deeplink_util.dart';
import 'package:flutter_module/common/utils/log_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/routes/routes.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:moengage_flutter/moengage_flutter.dart';

class MoEngageNotificationService {
  final MoEngageFlutter moengagePlugin;

  MoEngageNotificationService({required this.moengagePlugin}) {
    moengagePlugin.configureLogs(LogLevel.VERBOSE);
    moengagePlugin.setPushClickCallbackHandler(_onPushClick);
    moengagePlugin.setPushTokenCallbackHandler(_onPushTokenGenerated);

    moengagePlugin.setInAppClickHandler(_onInAppClick);
    moengagePlugin.setInAppShownCallbackHandler(_onInAppShown);
    moengagePlugin.setInAppDismissedCallbackHandler(_onInAppDismiss);
    moengagePlugin.setSelfHandledInAppHandler(_onInAppSelfHandle);
  }

  String get _tag => "MoEngageNotificationService";

  void initPushConfig({
    required String fcmToken,
  }) {
    if (Platform.isIOS) {
      moengagePlugin.registerForPushNotification();
    } else if (Platform.isAndroid) {
      moengagePlugin.passFCMPushToken(fcmToken);
      moengagePlugin.passFCMPushPayload({});
    }
  }

  void _onPushClick(PushCampaignData message) {
    AppLog.d(_tag, "_onPushClick(): ${jsonEncode(message.data.toMap())}");
    try {
      if (Platform.isIOS) {
        final url = message.data.payload['app_extra']['moe_deeplink'] ?? '';
        if (TextUtils.isNotEmpty(url)) {
          DeepLinkUtil.open(url);
        }
      } else if (Platform.isAndroid) {
        final screenName = message.data.payload['screenName'] ?? '';
        if (TextUtils.isNotEmpty(screenName)) {
          getItInstance.get<AppRouter>().pushNamed('/$screenName');
          return;
        }

        final title = message.data.payload['title'] ?? '';
        final url = message.data.payload['url'] ?? '';
        getItInstance.get<AppRouter>().push(WebViewRoute(
              title: title,
              url: url,
              isBackableInside: false,
            ));
      }
    } on Exception catch (e) {
      AppLog.e(_tag, "_onPushClick(): $e");
    }
  }

  void _onPushTokenGenerated(PushTokenData data) {
    AppLog.d(_tag, "_onPushTokenGenerated: ${data.token}");
  }

  void _onInAppClick(ClickData message) {
    AppLog.d(_tag, "_onInAppClick: $message");
  }

  void _onInAppShown(InAppData message) {
    AppLog.d(_tag, "_onInAppShown: $message");
  }

  void _onInAppDismiss(InAppData message) {
    AppLog.d(_tag, "_onInAppDismiss: $message");
  }

  void _onInAppSelfHandle(SelfHandledCampaignData message) {
    AppLog.d(_tag, "_onInAppSelfHandle: $message");
  }

  // void setPushClickCallbackHandler() {
  //   moengagePlugin.setPushClickCallbackHandler(onPushClick);
  // }
  //
  // void listenPopupMoengage() {
  //   void _onInAppClick(ClickData message) {
  //     print("This is a inapp click callback from native to flutter. Payload " + message.toString());
  //   }
  //
  //   void _onInAppShown(InAppData message) {
  //     print("This is a callback on inapp shown from native to flutter. Payload " + message.toString());
  //   }
  //
  //   void _onInAppDismiss(InAppData message) {
  //     print("This is a callback on inapp dismiss from native to flutter. Payload " + message.toString());
  //   }
  //
  //   void _onInAppSelfHandle(SelfHandledCampaignData message) {
  //     print("This is a callback on inapp self handle from native to flutter. Payload " + message.toString());
  //   }
  //
  //   //Register for callbacks
  //   moengagePlugin.setInAppClickHandler(_onInAppClick);
  //   moengagePlugin.setInAppShownCallbackHandler(_onInAppShown);
  //   moengagePlugin.setInAppDismissedCallbackHandler(_onInAppDismiss);
  //   moengagePlugin.setSelfHandledInAppHandler(_onInAppSelfHandle);
  // }
}
