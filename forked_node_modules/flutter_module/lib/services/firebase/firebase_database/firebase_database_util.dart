import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/enum/chat/thread_type.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/models/chat/file/media_model.dart';
import 'package:flutter_module/models/chat/message/message_model.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';

class FirebaseDatabaseUtil {
  FirebaseDatabaseUtil._();

  static String getFirebaseUserID({String? userID}) {
    userID ??= AppData.instance.userID;
    return 'user_$userID';
  }

  static bool isThreadValid(ChatThreadModel thread) {
    // get total users
    final totalUsers = thread.users?.length ?? 0;

    //delete by me
    final isDelete = thread.isDeletedByMe();

    //leave group
    final isLeftGroup = thread.isLeftGroup();

    // single thread must have 2 users
    if (thread.type == ThreadType.single.name && totalUsers == 2 && !isDelete) {
      return true;
    }
    // group threads must have more than 1 user
    if (thread.type == ThreadType.group.name && totalUsers > 0 && !isDelete && !isLeftGroup) {
      return true;
    }
    // others is false
    return false;
  }

  static Map<String, dynamic> convertObjectToMap(Object? obj) {
    final value = (obj as Map?) ?? {};
    return Map<String, dynamic>.from(value);
  }

  static String convertUrlAvatar(String? url) {
    if (url == null || url.isEmpty == true) {
      return '';
    }
    final findIndexFolder = url.indexOf('images');
    final isFirebaseUrl = url.contains("firebase");
    if (findIndexFolder < 0 || !isFirebaseUrl) {
      return url;
    }
    final lastIndexFolder = url.indexOf('?');
    final findSubString = url.substring(findIndexFolder, lastIndexFolder);
    final newUrl = findSubString.split('/').join('%2F');
    final urlRight = url.replaceFirst(findSubString, newUrl);
    return urlRight;
  }

  static List<MediaModel> getMediasFromMessages(List<MessageModel> messages) {
    final List<MediaModel> meidas = [];

    for (var message in messages) {
      meidas.addAll(List.from(message.getMedias()));
    }
    return meidas;
  }

  static MessageModel? getMessageFromMediaMessages(List<MessageModel> messages, MediaModel media) {
    MessageModel? message;

    for (var _message in messages) {
      final isExist = _message.getMedias().map((e) => e.id).contains(media.id);
      if (isExist) {
        message = _message;
        break;
      }
    }
    return message;
  }

  static String? generateSingleThreadID({String? userID1, String? userID2}) {
    final uid1 = TextUtils.parseInt(userID1);
    final uid2 = TextUtils.parseInt(userID2);
    if ((uid1 != null && uid2 != null) && (uid1 > 0 && uid2 > 0) && (uid1 != uid2)) {
      if (uid1 < uid2) {
        return 'single_${uid1.toString()}_${uid2.toString()}';
      } else if (uid1 > uid2) {
        return 'single_${uid2.toString()}_${uid1.toString()}';
      }
    }
    return null;
  }
}
