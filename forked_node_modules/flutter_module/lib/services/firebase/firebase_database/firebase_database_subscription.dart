import 'package:firebase_database/firebase_database.dart';
import 'package:flutter_module/services/firebase/firebase_database/firebase_database_util.dart';
import 'package:flutter_module/models/chat/message/chat_message_model.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';
import 'package:flutter_module/services/firebase/firebase_database/firebase_database_service.dart';

class FirebaseDatabaseSubscription {
  Map<String, bool> subscribePaths = {};

  subscribeMyThreadsChange(
    List<String> threadIDs, {
    Function(DatabaseEvent)? onThreadChange,
    Function(DatabaseEvent, String)? onThreadTypingDataChange,
  }) async {
    final threadsRef = FirebaseDatabaseService.instance.threadsRef;
    final threadsTypingRef = FirebaseDatabaseService.instance.threadsTypingRef;
    for (var threadID in threadIDs) {
      final path = '${threadsRef.key}/$threadID';

      threadsRef.child(threadID).onDisconnect();
      threadsRef.child(threadID).onValue.listen(onThreadChange);
      subscribePaths[path] = true;

      final pathAddData = "${threadsTypingRef.key}/$threadID/typing";
      threadsTypingRef.child('$threadID/typing').onDisconnect();
      threadsTypingRef
          .child('$threadID/typing')
          .onValue
          .listen((event) => onThreadTypingDataChange?.call(event, threadID));
      subscribePaths[pathAddData] = true;
    }
  }

  subscribeNewThread({
    Function(DatabaseEvent)? onNewThread,
  }) {
    final usersThreadsRef = FirebaseDatabaseService.instance.usersThreadsRef;
    final fbUserID = FirebaseDatabaseUtil.getFirebaseUserID();
    final path = '${usersThreadsRef.key}/$fbUserID/threads';

    usersThreadsRef.child('$fbUserID/threads').onDisconnect();
    usersThreadsRef
        .child('$fbUserID/threads')
        .orderByChild('updateTime')
        .startAt(DateTime.now().millisecond)
        .limitToLast(1)
        .onChildAdded
        .listen(onNewThread);
    subscribePaths[path] = true;
  }

  subscribeNewPublicThread({
    Function(DatabaseEvent)? onNewThread,
  }) {
    final threadsPublicRef = FirebaseDatabaseService.instance.threadsPublicRef;
    final fbUserID = FirebaseDatabaseUtil.getFirebaseUserID();
    final path = '${threadsPublicRef.key}/$fbUserID/threads';

    threadsPublicRef.child('$fbUserID/threads').onDisconnect();
    threadsPublicRef
        .child('$fbUserID/threads')
        .orderByChild('updateTime')
        .startAt(DateTime.now().millisecond)
        .limitToLast(1)
        .onChildAdded
        .listen(onNewThread);
    subscribePaths[path] = true;
  }

  subscribeNewMessage(
    List<ChatThreadModel> threads, {
    required ChatMessageModel Function(String threadID) onGetLastMessages,
    Function(DatabaseEvent)? onNewMessage,
    Function(DatabaseEvent)? onChangeMessage,
  }) async {
    for (var thread in threads) {
      final threadID = thread.uid;
      final threadsMessagesRef = FirebaseDatabaseService.instance.threadsMessagesRef;

      final lastMessage = onGetLastMessages.call(threadID ?? '');
      // final int lastTimeUpdate = thread.getLastReadTime() ?? 0;
      final int lastTimeUpdate = (thread.getLastReadTime() ?? 0) < (lastMessage.createTime ?? 0)
          ? (thread.getLastReadTime() ?? 0)
          : (lastMessage.createTime ?? 0);

      threadsMessagesRef.child('$threadID/messages').onDisconnect();

      threadsMessagesRef
          .child('$threadID/messages')
          .orderByChild('createTime')
          .startAt(lastTimeUpdate)
          .limitToLast(1)
          .onChildAdded
          .listen(onNewMessage);

      threadsMessagesRef.child('$threadID/messages').limitToLast(20).onChildChanged.listen(onChangeMessage);

      final path = '${threadsMessagesRef.key}/$threadID/messages';
      subscribePaths[path] = true;
    }
  }

  subscribeBlockedThread({Function(DatabaseEvent)? onChangeBlockThread}) {
    final threadsRef = FirebaseDatabaseService.instance.usersBlockThreadRef;
    final path = threadsRef.key;

    final fbUserID = FirebaseDatabaseUtil.getFirebaseUserID();
    threadsRef.onDisconnect();
    threadsRef.child(fbUserID).onValue.listen(onChangeBlockThread);
    subscribePaths["$path"] = true;
  }

  Stream<DatabaseEvent> threadMessagesAdded(String threadID) {
    return FirebaseDatabaseService.instance.threadsMessagesRef
        .child('$threadID/messages')
        .orderByChild('createTime')
        .startAt(0)
        .limitToLast(1)
        .onChildAdded;
  }

  Stream<DatabaseEvent> threadMessagesChanged(String threadID) {
    return FirebaseDatabaseService.instance.threadsMessagesRef.child('$threadID/messages').onChildChanged;
  }

  Stream<DatabaseEvent> usersBlockByChanged({required String threadID, required String userID}) {
    final fbUserID = FirebaseDatabaseUtil.getFirebaseUserID(userID: userID);
    return FirebaseDatabaseService.instance.usersBlockByRef.child(fbUserID).onChildChanged;
  }
}
