import 'dart:convert';

import 'package:crypto/crypto.dart';
import 'package:flutter/services.dart';
import 'package:flutter_module/env_data.dart';
import 'package:get_ip_address/get_ip_address.dart';

class BridgeService {
  static final BridgeService instance = BridgeService._();

  BridgeService._();

  final _mfastMethodChannel = const MethodChannel('flutter.native/mfast');

  Future<String?> openVNPayFromWebView({required Map<String, dynamic> json, required String title}) async {
    Map? vnpayParams = json['data'];
    var ipAddress = IpAddress(type: RequestType.text);
    String ipAddr = await ipAddress.getIpAddress();
    vnpayParams?['vnp_IpAddr'] = ipAddr;
    vnpayParams?['vnp_TmnCode'] = EnvData.instance.vnpayTmnCode;

    List? fieldNames = vnpayParams?.keys.toList();
    fieldNames = fieldNames?..sort();
    final hashData = StringBuffer();
    final query = StringBuffer();

    for (var item in fieldNames ?? []) {
      String fieldName = item;
      String? fieldValue = vnpayParams?[fieldName]?.toString();
      if (fieldValue != null && fieldValue.isNotEmpty) {
        hashData.write(fieldName);
        hashData.write('=');
        hashData.write(Uri.encodeQueryComponent(fieldValue));
        if (fieldNames?.last != item) {
          hashData.write('&');
        }

        query.write(Uri.encodeQueryComponent(fieldName));
        query.write('=');
        query.write(Uri.encodeQueryComponent(fieldValue));
        if (fieldNames?.last != item) {
          query.write('&');
        }
      }
    }
    var key = utf8.encode(EnvData.instance.vnpayHashSecret);
    var bytes = utf8.encode(hashData.toString());
    var hmacSha512 = Hmac(sha512, key);
    Digest vnpSecureHash = hmacSha512.convert(bytes);

    String queryUrl = '$query&vnp_SecureHash=$vnpSecureHash';
    String paymentUrl = '${EnvData.instance.vnpPayUrl}?$queryUrl';
    final result = openVNPay(url: paymentUrl, title: title);
    return result;
  }

  Future<String?> openVNPay({required String url, required String title}) async {
    final result = await _mfastMethodChannel.invokeMethod<String?>("openVNPay", {
      "url": url,
      "isSanbox": !EnvData.instance.isProduction,
      "tmnCode": EnvData.instance.vnpayTmnCode,
      "scheme": EnvData.instance.deepLinkBaseUrl,
      "beginColor": 'f2f2f2',
      "endColor": 'f2f2f2',
      "titleColor": '000000',
      "iconBackName": 'ic_back',
      "title": title,
      "backAlert": 'Bạn có chắc chắn trở lại ko?',
    });
    return result;
  }
}
