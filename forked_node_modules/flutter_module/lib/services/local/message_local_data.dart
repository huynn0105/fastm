import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/chat/hive_database/daos/message_dao.dart';
import 'package:flutter_module/models/chat/message/message_model.dart';

import '../../features/chat/hive_database/entities/message/message_entity.dart';

abstract class MessageLocalData {
  Future<void> insertOrUpdateMessage(MessageModel message);
  Future<void> insertOrUpdateChatMessage(List<MessageModel> messages);
  List<MessageModel> getMessagesByThreadID(String threadId);
  Future<void> deleteOldMessages(String threadId);
}

class MessageLocalDataImpl implements MessageLocalData {
  @override
  List<MessageModel> getMessagesByThreadID(String threadId) {
    final messagesInDb = getItInstance<MessageDao>().getAll().where((e) => e.threadID == threadId).toList();
    final messages = messagesInDb.map((e) => MessageModel.fromEntity(e)).toList();
    messages.sort((a, b) => b.createTime!.compareTo(a.createTime!));
    return messages;
  }

  @override
  Future<void> insertOrUpdateMessage(MessageModel message) async {
    await getItInstance<MessageDao>().insert(MessageEntity.fromModel(message));
  }

  @override
  Future<void> insertOrUpdateChatMessage(List<MessageModel> messages) async {
    await deleteOldMessages(messages.first.threadID ?? '');
    final entites = messages.map((e) => MessageEntity.fromModel(e)).toList();
    await getItInstance<MessageDao>().insertAll(entites);
  }

  @override
  Future<void> deleteOldMessages(String threadId) async {
    final messagesInDb = getItInstance<MessageDao>().getAll().where((e) => e.threadID == threadId).toList();
    await getItInstance<MessageDao>().deleteAll(messagesInDb.map((e) => e.uid).toList());
  }
}
