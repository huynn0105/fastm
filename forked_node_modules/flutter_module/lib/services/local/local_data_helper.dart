import 'dart:convert';

import 'package:flutter/foundation.dart';
import 'package:flutter_module/models/home_data/home_item_model.dart';
import 'package:flutter_module/common/enum/statistic_working/statistic_working_popup_type.dart';
import 'package:flutter_module/models/mtrade/product_detail/mtrade_product_detail_model.dart';
import 'package:flutter_module/models/mtrade/product_detail/mtrade_sku_detail_model.dart';
import 'package:flutter_module/services/base/object_mapper.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:universal_html/html.dart';

import '../../models/mtrade/cart/mtrade_cart_product_model.dart';
import '../../models/user/user_info_model.dart';

class LocalDataHelper {
  final String _keyDeliverySupportProvinceCode = "_keyDeliverySupportProvinceCode";
  final String _keyDeliverySupportDistrictCode = "_keyDeliverySupportDistrictCode";
  final String _keyDeliverySupportWardCode = "_keyDeliverySupportWardCode";
  final String _keyLoginPhone = "_keyLoginPhone";
  final String _keyKeyboardHeight = "_keyKeyboardHeight";
  final String _keyUser = "_keyUser";
  final String _keyUsePassword = "_keyUsePassword";
  final String _keyUseBiometric = "_keyUseBiometric";
  final String _keyPassword = "_keyPassword";
  final String _keyHomeRecentSearchedProducts = "_keyHomeRecentSearchedProducts";
  final String _keyOnboarding = "_keyOnboarding";
  final String _keyUserGuideHome = "_keyUserGuideHome";
  final String _keyUserGuideBanner = "_keyUserGuideBanner";
  final String _keyUserGuideClientDetail = "_keyUserGuideClientDetail";
  final String _keyUserGuideClientUnclassified = "_keyUserGuideClientUnclassified";
  final String _keyUserGuideClientTrash = "_keyUserGuideClientTrash";
  final String _keyCameraPermissionHasBeenDenied = "_keyCameraPermissionHasBeenDenied";
  final String _keyTryTimeLogin = '_keyTryTimeLogin';

  LocalDataHelper._();

  static final instance = LocalDataHelper._();

  late SharedPreferences sharedPreferences;
  final Storage _localStorage = window.localStorage;

  init() async {
    sharedPreferences = await SharedPreferences.getInstance();
  }

  clear() async {
    await Future.wait([
      sharedPreferences.remove(_keyDeliverySupportProvinceCode),
      sharedPreferences.remove(_keyDeliverySupportDistrictCode),
      sharedPreferences.remove(_keyDeliverySupportWardCode),
    ]);
  }

  setDeliverySupportProvinceCode(String value) async {
    await sharedPreferences.setString(_keyDeliverySupportProvinceCode, value);
  }

  getDeliverySupportProvinceCode() {
    return sharedPreferences.getString(_keyDeliverySupportProvinceCode);
  }

  removeDeliverySupportProvinceCode() {
    sharedPreferences.remove(_keyDeliverySupportProvinceCode);
  }

  setDeliverySupportDistrictCode(String value) async {
    await sharedPreferences.setString(_keyDeliverySupportDistrictCode, value);
  }

  getDeliverySupportDistrictCode() {
    return sharedPreferences.getString(_keyDeliverySupportDistrictCode);
  }

  removeDeliverySupportDistrictCode() {
    sharedPreferences.remove(_keyDeliverySupportDistrictCode);
  }

  setDeliverySupportWardCode(String value) async {
    await sharedPreferences.setString(_keyDeliverySupportWardCode, value);
  }

  getDeliverySupportWardCode() {
    return sharedPreferences.getString(_keyDeliverySupportWardCode);
  }

  removeDeliverySupportWardCode() {
    sharedPreferences.remove(_keyDeliverySupportWardCode);
  }

  cacheProductsOrder(MTradeProductDetailModel? product, MTradeSkuDetailModel? skuDetail) {
    if (!kIsWeb) return;
    _localStorage['products_order'] = jsonEncode([
      {
        "product": product?.toJson(),
        "skuDetail": skuDetail?.toJson(),
      }
    ]);
  }

  List<MTradeCartProductModel> getProductsOrder() {
    if (!kIsWeb || _localStorage['products_order'] == null) return [];
    List<Map<String, dynamic>> data = ObjectMapper.instance.mapArray(
      jsonDecode(_localStorage['products_order']!),
    );
    return data.map((e) {
      final product = MTradeProductDetailModel.fromJson(e['product']);
      final skuDetail = MTradeSkuDetailModel.fromJson(e['skuDetail']);
      return MTradeCartProductModel.fromProductDetail(product, skuDetail);
    }).toList();
  }

  setUsePassword(bool value) async {
    await sharedPreferences.setBool(_keyUsePassword, value);
  }

  bool? getUsePassword() {
    return sharedPreferences.getBool(_keyUsePassword);
  }

  setTryTimeLogin(int tryTime) async {
    await sharedPreferences.setInt(_keyTryTimeLogin, tryTime);
  }

  int? getTryTimeLogin() {
    return sharedPreferences.getInt(_keyTryTimeLogin);
  }

  setUseBiometric(bool value) async {
    await sharedPreferences.setBool(_keyUseBiometric, value);
  }

  bool? getUseBiometric() {
    return sharedPreferences.getBool(_keyUseBiometric);
  }

  setPassword(String value) async {
    await sharedPreferences.setString(_keyPassword, value);
  }

  String? getPassword() {
    return sharedPreferences.getString(_keyPassword);
  }

  setLoginPhone(String value) async {
    await sharedPreferences.setString(_keyLoginPhone, value);
  }

  getLoginPhone() {
    return sharedPreferences.getString(_keyLoginPhone);
  }

  void setKeyboardHeight(double value) {
    sharedPreferences.setDouble(_keyKeyboardHeight, value);
  }

  double? getKeyboardHeight() {
    return sharedPreferences.getDouble(_keyKeyboardHeight);
  }

  bool getIsOnboarding() {
    return sharedPreferences.getBool(_keyOnboarding) != true;
  }

  void setIsOnboarding() async {
    await sharedPreferences.setBool(_keyOnboarding, true);
  }

  bool getIsUserGuideHome() {
    return sharedPreferences.getBool(_keyUserGuideHome) != true;
  }

  void setIsUserGuideHome() async {
    await sharedPreferences.setBool(_keyUserGuideHome, true);
  }

  bool getIsUserGuideBanner() {
    return sharedPreferences.getBool(_keyUserGuideBanner) != true;
  }

  void setIsUserGuideBanner() async {
    await sharedPreferences.setBool(_keyUserGuideBanner, true);
  }
  bool getIsUserGuideClientDetail() {
    return sharedPreferences.getBool(_keyUserGuideClientDetail) != true;
  }

  void setIsUserGuideClientDetail() async {
    await sharedPreferences.setBool(_keyUserGuideClientDetail, true);
  }
  bool getIsUserGuideClientUnclassified() {
    return sharedPreferences.getBool(_keyUserGuideClientUnclassified) != true;
  }

  void setIsUserGuideClientUnclassified() async {
    await sharedPreferences.setBool(_keyUserGuideClientUnclassified, true);
  }
  bool getIsUserGuideClientTrash() {
    return sharedPreferences.getBool(_keyUserGuideClientTrash) != true;
  }

  void setIsUserGuideClientTrash() async {
    await sharedPreferences.setBool(_keyUserGuideClientTrash, true);
  }

  Future setUser(Map<String, dynamic> user) async {
    final data = jsonEncode(user);
    await sharedPreferences.setString(_keyUser, data);
  }

  Future removeUser() async {
    await sharedPreferences.remove(_keyUser);
  }

  UserInfoModel? getUser() {
    final responseString = sharedPreferences.getString(_keyUser);
    if (responseString != null) {
      return UserInfoModel.fromJson(jsonDecode(responseString));
    }
    return null;
  }

  Future setHomeRecentSearchedProduct(List<HomeItemModel> data) async {
    final result = jsonEncode(data.map((e) => e.toJson()).toList());
    await sharedPreferences.setString(_keyHomeRecentSearchedProducts, result);
  }

  Future<List<HomeItemModel>> getHomeRecentSearchedProduct() async {
    final responseString = sharedPreferences.getString(_keyHomeRecentSearchedProducts);
    if (responseString != null) {
      final json = jsonDecode(responseString);
      return (json as List?)?.map((e) => HomeItemModel.fromJson(e)).toList() ?? [];
    }
    return [];
  }

  clearHomeRecentSearchedProduct() async {
    await sharedPreferences.remove(_keyHomeRecentSearchedProducts);
  }

  Future<void> setCameraPermissionHasBeenDenied(bool value) async {
    await sharedPreferences.setBool(_keyCameraPermissionHasBeenDenied, value);
  }

  bool getCameraPermissionHasBeenDenied() {
    return sharedPreferences.getBool(_keyCameraPermissionHasBeenDenied) ?? false;
  }

  Future<bool> removeCameraPermissionHasBeenDenied() async {
    return await sharedPreferences.remove(_keyCameraPermissionHasBeenDenied);
  }

  ///
  Future<void> setStatisticPopup(StatisticWorkingPopupType type, bool value) async {
    await sharedPreferences.setBool(type.name, value);
  }

  bool getStatisticPopup(StatisticWorkingPopupType type) {
    return sharedPreferences.getBool(type.name) ?? false;
  }

  Future<bool> removeStatisticPopup(StatisticWorkingPopupType type) async {
    return await sharedPreferences.remove(type.name);
  }
}
