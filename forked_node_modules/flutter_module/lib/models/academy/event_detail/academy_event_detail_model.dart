import 'package:flutter_module/common/utils/datetime_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';

import '../../../common/enum/academy/event_detail_status.dart';
import 'speaker_model.dart';

/// eventName : "Event 3"
/// participantAmount : "200"
/// timeLine : "11:00 - 09/06/2023"
/// banner : "uploads/academy/event/1686197413/banner_1686197413.png"
/// location : "Online qua Ứng dụng Zoom"
/// eventID : "3"
/// eventRegisterEnd : null
/// eventInvalid : true
/// invalidMessage : "Đã kết thúc sự kiện"
/// validAmount : 199
/// duration : "10 giờ 4 phút"
/// checkin : true
/// eventStart : "2023-06-09 11:00:00"
/// speaker : {"name":"Speaker Test","description":"Desc modify","avatar":"https://appay-rc.cloudcms.vn/uploads/academy/speaker/1685004661/avatar_1685004661.png"}
/// eventDesc : "AAAAAAAAAAAA"
/// eventReason : "TTTTTTTT"
/// eventLink : "TTTTTTT"
/// eventType : "Người mới-Lãnh đạo-Hỏi đáp"
/// checkout : true

class AcademyEventDetailModel {
  AcademyEventDetailModel({
    this.eventName,
    this.participantAmount,
    this.timeLine,
    this.banner,
    this.location,
    this.eventID,
    this.eventRegisterEnd,
    this.eventInvalid,
    this.invalidMessage,
    this.validAmount,
    this.duration,
    this.register,
    this.eventStart,
    this.eventEnd,
    this.speaker,
    this.speakers,
    this.eventDesc,
    this.eventReason,
    this.eventLink,
    this.eventType,
    this.checkIn,
    this.checkOut,
    this.questionType,
  });

  AcademyEventDetailModel.fromJson(dynamic json) {
    eventName = json['eventName'];
    participantAmount = TextUtils.parseInt(json['participantAmount']);
    timeLine = json['timeLine'];
    banner = json['banner'];
    location = json['location'];
    eventID = json['eventID'];
    eventRegisterEnd = json['eventRegisterEnd']?.toString() == "true";
    eventInvalid = json['eventInvalid'];
    invalidMessage = json['invalidMessage'];
    validAmount = TextUtils.parseInt(json['validAmount']);
    duration = json['duration'];
    speaker = json['speaker'] != null ? SpeakerModel.fromJson(json['speaker']) : null;
    if (json['speakers'] != null) {
      speakers = (json['speakers'] as List).map((e) => SpeakerModel.fromJson(e)).toList();
    }
    eventDesc = json['eventDesc'];
    eventReason = json['eventReason'];
    eventLink = json['eventLink'];
    eventType = json['eventType'];
    eventStart = json['eventStart'];
    eventEnd = json['eventEnd'];
    register = json['register'];
    checkIn = json['checkin'];
    checkOut = json['checkout'];
    questionType = json['questionType'];

    ///
    // eventStart = "2023-07-05 14:40:00";
    // eventEnd = "2023-07-05 15:00:00";
    // register = true;
    // checkIn = false;
    // checkOut = false;
    // eventLink = "https://google.com";
  }

  String? eventName;
  int? participantAmount;
  String? timeLine;
  String? banner;
  String? location;
  String? eventID;
  bool? eventRegisterEnd;
  bool? eventInvalid;
  String? invalidMessage;
  num? validAmount;
  String? duration;
  bool? register;
  String? eventStart;
  String? eventEnd;
  SpeakerModel? speaker;
  List<SpeakerModel>? speakers;
  String? eventDesc;
  String? eventReason;
  String? eventLink;
  String? eventType;
  bool? checkIn;
  bool? checkOut;
  String? questionType;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['eventName'] = eventName;
    map['participantAmount'] = participantAmount;
    map['timeLine'] = timeLine;
    map['banner'] = banner;
    map['location'] = location;
    map['eventID'] = eventID;
    map['eventRegisterEnd'] = eventRegisterEnd;
    map['eventInvalid'] = eventInvalid;
    map['invalidMessage'] = invalidMessage;
    map['validAmount'] = validAmount;
    map['duration'] = duration;
    map['register'] = register;
    map['eventStart'] = eventStart;
    map['eventEnd'] = eventEnd;
    if (speaker != null) {
      map['speaker'] = speaker?.toJson();
    }
    map['eventDesc'] = eventDesc;
    map['eventReason'] = eventReason;
    map['eventLink'] = eventLink;
    map['eventType'] = eventType;
    map['checkin'] = checkIn;
    map['checkout'] = checkOut;
    map['questionType'] = questionType;
    return map;
  }

  EventDetailStatus getCurrentStatus() {
    final isRegistered = register ?? false;
    final isCheckIn = checkIn ?? false;
    final isCheckOut = checkOut ?? false;

    EventDetailStatus type = EventDetailStatus.notRegister;

    if (isRegistered && !isCheckIn && !isCheckOut) {
      type = EventDetailStatus.register;
    } else if (isRegistered && isCheckIn && !isCheckOut) {
      type = EventDetailStatus.checkIn;
    } else if (isRegistered && isCheckIn && isCheckOut) {
      type = EventDetailStatus.checkOut;
    }

    return type;
  }

  bool isOnlineEvent() {
    return eventLink != null;
  }

  bool isEventEnded() {
    return DateTimeUtil.convertStringRemainSeconds(eventEnd, isFromUtc: false) <= 0;
  }
}
