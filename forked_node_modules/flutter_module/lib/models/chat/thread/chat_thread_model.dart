// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'package:collection/collection.dart';

import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/enum/chat/thread_type.dart';
import 'package:flutter_module/models/chat/contact/chat_contact_model.dart';
import 'package:flutter_module/models/chat/message/author_model.dart';
import 'package:flutter_module/models/chat/message/chat_message_model.dart';
import 'package:flutter_module/models/chat/message/user_on_message_model.dart';
import 'package:flutter_module/models/mfast/app_info/chat_bot_model.dart';
import 'package:flutter_module/services/firebase/firebase_database/firebase_database_util.dart';

import '../../../features/chat/hive_database/entities/chat_thread/chat_thread_entity.dart';

class ChatThreadModel {
  String? uid;
  bool? isDeleted;
  int? updateTime;
  List<ThreadUserDetail>? usersDetails;
  Map<String, int>? readTimes;
  String? type;
  List<ThreadUserDetail>? users;
  int? createTime;
  String? title;
  ChatMessageModel? lastMessage;
  Map<String, bool>? typings;
  Map<String, bool>? isFavorites;
  Map<String, bool>? isNotificationOns;
  Map<String, bool>? isDeletedByUsers;
  String? adminID;
  String? photoImage;
  String? backgroundImage;

  ChatThreadModel({
    this.uid,
    this.isDeleted,
    this.updateTime,
    this.usersDetails,
    this.readTimes,
    this.type,
    this.users,
    this.createTime,
    this.title,
    this.lastMessage,
    this.typings,
    this.isFavorites,
    this.isNotificationOns,
    this.isDeletedByUsers,
    this.adminID,
    this.photoImage,
    this.backgroundImage,
  });

  factory ChatThreadModel.fromEntity(ChatThreadEntity entity) {
    return ChatThreadModel(
        uid: entity.uid,
        adminID: entity.adminID,
        backgroundImage: entity.backgroundImage,
        createTime: entity.createTime,
        isDeleted: entity.isDeleted,
        isDeletedByUsers: entity.isDeletedByUsers,
        isFavorites: entity.isFavorites,
        isNotificationOns: entity.isNotificationOns,
        photoImage: entity.photoImage,
        readTimes: entity.readTimes,
        title: entity.title,
        type: entity.type,
        typings: entity.typings,
        updateTime: entity.updateTime,
        users: entity.users?.map((e) => ThreadUserDetail.fromEntity(e)).toList(),
        usersDetails: entity.usersDetails?.map((e) => ThreadUserDetail.fromEntity(e)).toList(),
        lastMessage: entity.lastMessage != null ? ChatMessageModel.fromEntity(entity.lastMessage!) : null);
  }

  ChatThreadModel.fromJson(Map<String, dynamic> json) {
    uid = json['uid'];
    isDeleted = json['isDeleted'];
    updateTime = json['updateTime'];
    if (json['users'] is Map) {
      List<ThreadUserDetail> data = [];
      json['users'].values.forEach((e) {
        /// TODO: Bypass
        if (e is String) {
          e = {'uid': e};
        }
        data.add(ThreadUserDetail.fromJson(Map<String, dynamic>.from(e)));
      });
      users = data;
    }
    if (json['usersDetails'] is Map) {
      List<ThreadUserDetail> data = [];
      json['usersDetails'].values.forEach((e) {
        data.add(ThreadUserDetail.fromJson(Map<String, dynamic>.from(e)));
      });
      usersDetails = data;
      usersDetails = usersDetails?.where((e) => users?.map((e) => e.uid).contains(e.uid) == true).toList();
    }
    if (json['readTimes'] != null) {
      readTimes = Map<String, int>.from(json['readTimes']);
    }
    type = json['type'];
    createTime = json['createTime'];
    title = json['title'];
    if (json['typings'] != null) {
      typings = Map<String, bool>.from(json['typings']);
    }
    if (json['isFavorites'] != null) {
      isFavorites = Map<String, bool>.from(json['isFavorites']);
    }
    if (json['isNotificationOns'] != null) {
      isNotificationOns = Map<String, bool>.from(json['isNotificationOns']);
    }
    if (json['isDeletedByUsers'] != null) {
      isDeletedByUsers = Map<String, bool>.from(json['isDeletedByUsers']);
    }
    adminID = json['adminID'];
    photoImage = json['photoImage'];
    backgroundImage = json['backgroundImage'];
  }

  ChatThreadModel.fromChatBot(ChatBotModel chatBot) {
    uid = chatBot.id;
    title = chatBot.title;
    photoImage = chatBot.image;
    type = chatBot.type;
  }

  // Map<String, dynamic> toJson() {
  //   final Map<String, dynamic> data = <String, dynamic>{};
  //   data['uid'] = uid;
  //   data['isDeleted'] = isDeleted;
  //   data['updateTime'] = updateTime;
  //   if (usersDetails != null) {
  //     data['usersDetails'] = usersDetails;
  //   }
  //   if (readTimes != null) {
  //     data['readTimes'] = readTimes;
  //   }
  //   data['type'] = type;
  //   if (users != null) {
  //     data['users'] = users;
  //   }
  //   data['createTime'] = createTime;
  //   data['title'] = title;
  //   return data;
  // }

  bool isSingleThread() {
    return type == ThreadType.single.name;
  }

  bool isGroupThread() {
    return type == ThreadType.group.name;
  }

  ThreadUserDetail? getSingleThreadTargetUser() {
    if (!isSingleThread()) {
      return null;
    }

    final userId = AppData.instance.userID;
    final singleThreadTargetUser = usersDetails?.firstWhereOrNull(
      (user) => user.uid != userId,
    );
    return singleThreadTargetUser;
  }

  String getDefaultThreadTitle() {
    final targetUser = getSingleThreadTargetUser();
    return targetUser != null
        ? targetUser.fullName?.isNotEmpty == true
            ? targetUser.fullName!
            : 'No name'
        : title ?? 'Group';
  }

  int? getLastReadTime({String? userID}) {
    userID ??= AppData.instance.userID;

    int? time;

    if (readTimes?.isNotEmpty == true && userID.isNotEmpty == true) {
      final int? readTime = readTimes?[FirebaseDatabaseUtil.getFirebaseUserID(userID: userID)];
      if (readTime != null) {
        time = readTime;
      }
    }

    return time;
  }

  String? photoImageURI() {
    // single
    if (isSingleThread()) {
      final targetUser = getSingleThreadTargetUser();
      return targetUser?.avatarImage;
    }
    return photoImage;
    // group
    // if (!photoImage || photoImage.length === 0) {
    //   return photoImagePlaceholder();
    // }
    // return photoImage;
  }

  List<ThreadUserDetail> typingUsers() {
    final List<String> userIDs = typings?.keys.toList() ?? [];
    List<String> typingUserIDs = [];

    for (var userID in userIDs) {
      if (typings![userID] == true && FirebaseDatabaseUtil.getFirebaseUserID() != userID) {
        typingUserIDs.add(userID);
      }
    }

    final List<ThreadUserDetail>? users = usersDetails
        ?.where((e) => typingUserIDs.contains(FirebaseDatabaseUtil.getFirebaseUserID(userID: e.uid)))
        .toList();

    return users ?? [];
  }

  bool isFavorite() {
    return isFavorites?[FirebaseDatabaseUtil.getFirebaseUserID()] ?? false;
  }

  bool isNotificationOn() {
    return isNotificationOns?[FirebaseDatabaseUtil.getFirebaseUserID()] ?? true;
  }

  bool isDeletedByMe() {
    return (isDeletedByUsers?[FirebaseDatabaseUtil.getFirebaseUserID()] ?? false) || (isDeleted ?? false);
  }

  bool isDeletedBySomeone() {
    return isDeletedByUsers?.isNotEmpty == true || (isDeleted ?? false);
  }

  bool isLeftGroup() {
    if (isSingleThread()) {
      return false;
    }
    return !(users?.map((e) => e.uid).contains(AppData.instance.userID) == true);
  }

  bool isDisabled() {
    return [
      isLeftGroup(),
    ].any((e) => e == true);
  }

  bool isSystemThread() {
    return AppData.instance.appInfo.systemThreadId?.contains(uid) == true;
  }

  ChatThreadModel merge(ChatThreadModel b) {
    return ChatThreadModel(
      uid: b.uid ?? uid,
      isDeleted: b.isDeleted ?? isDeleted,
      updateTime: b.updateTime ?? updateTime,
      usersDetails: b.usersDetails ?? usersDetails,
      readTimes: b.readTimes ?? readTimes,
      type: b.type ?? type,
      users: b.users ?? users,
      createTime: b.createTime ?? createTime,
      title: b.title ?? title,
      lastMessage: b.lastMessage ?? lastMessage,
      typings: b.typings ?? typings,
      isFavorites: b.isFavorites ?? isFavorites,
      isNotificationOns: b.isNotificationOns ?? isNotificationOns,
      isDeletedByUsers: b.isDeletedByUsers ?? isDeletedByUsers,
      adminID: b.adminID ?? adminID,
      photoImage: b.photoImage ?? photoImage,
      backgroundImage: b.backgroundImage ?? backgroundImage,
    );
  }

  ChatThreadModel copyWith({
    String? uid,
    bool? isDeleted,
    int? updateTime,
    List<ThreadUserDetail>? usersDetails,
    Map<String, int>? readTimes,
    String? type,
    List<ThreadUserDetail>? users,
    int? createTime,
    String? title,
    ChatMessageModel? lastMessage,
    Map<String, bool>? typings,
    Map<String, bool>? isFavorites,
    Map<String, bool>? isNotificationOns,
    Map<String, bool>? isDeletedByUsers,
    String? adminID,
    String? photoImage,
    String? backgroundImage,
  }) {
    return ChatThreadModel(
      uid: uid ?? this.uid,
      isDeleted: isDeleted ?? this.isDeleted,
      updateTime: updateTime ?? this.updateTime,
      usersDetails: usersDetails ?? this.usersDetails,
      readTimes: readTimes ?? this.readTimes,
      type: type ?? this.type,
      users: users ?? this.users,
      createTime: createTime ?? this.createTime,
      title: title ?? this.title,
      lastMessage: lastMessage ?? this.lastMessage,
      typings: typings ?? this.typings,
      isFavorites: isFavorites ?? this.isFavorites,
      isNotificationOns: isNotificationOns ?? this.isNotificationOns,
      isDeletedByUsers: isDeletedByUsers ?? this.isDeletedByUsers,
      adminID: adminID ?? this.adminID,
      photoImage: photoImage ?? this.photoImage,
      backgroundImage: backgroundImage ?? this.backgroundImage,
    );
  }
}

class ThreadUserDetail {
  String? fullName;
  String? uid;
  String? avatarImage;

  ThreadUserDetail({this.fullName, this.uid, this.avatarImage});

  factory ThreadUserDetail.fromEntity(ThreadUserDetailEntity entity) {
    return ThreadUserDetail(
      uid: entity.uid,
      avatarImage: entity.avatarImage,
      fullName: entity.fullName,
    );
  }

  ThreadUserDetail.fromJson(Map<String, dynamic> json) {
    fullName = json['fullName'];
    uid = json['uid'];
    avatarImage = json['avatarImage'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['fullName'] = fullName;
    data['uid'] = uid;
    data['avatarImage'] = avatarImage;
    return data;
  }

  Map<String, dynamic> toFirebaseJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['fullName'] = fullName;
    data['uid'] = uid;
    data['avatarImage'] = avatarImage;
    return {
      uid ?? '': data,
    };
  }

  ThreadUserDetail.fromChatContact(ChatContactModel? obj) {
    uid = obj?.uid;
    fullName = obj?.fullName;
    avatarImage = obj?.avatar;
  }

  ThreadUserDetail.fromAuthor(AuthorModel? obj) {
    uid = obj?.id;
    fullName = obj?.fullName;
    avatarImage = obj?.avatar;
  }

  ThreadUserDetail.fromUserOnMessageModel(UserOnMessageModel? obj) {
    uid = obj?.id;
    fullName = obj?.fullName;
    avatarImage = obj?.avatar;
  }
}
