import 'package:collection/collection.dart';
import 'package:flutter_module/common/enum/chat/media_type.dart';
import 'package:flutter_module/features/chat/hive_database/entities/message/message_entity.dart';
import 'package:photo_manager/photo_manager.dart';

class MediaModel {
  MediaModel({
    required this.id,
    required this.path,
    required this.type,
    this.name,
    this.url,
    this.width,
    this.height,
    this.mimeType,
    this.extraData,
    this.thumbnail,
    this.duration,
  });

  factory MediaModel.fromEntity(MediaEntity entity) {
    return MediaModel(
      id: entity.uid,
      path: entity.path,
      type: entity.type,
      duration: entity.duration,
      extraData: entity.extraData,
      height: entity.height,
      mimeType: entity.mimeType,
      name: entity.name,
      thumbnail: entity.thumbnail != null ? MediaModel.fromEntity(entity) : null,
      url: entity.url,
      width: entity.width,
    );
  }

  MediaModel.fromJson(dynamic json) {
    id = json['id'];
    url = json['url'];
    path = json['path'];
    type = json['type'];
    name = json['name'];
    width = json['width'];
    height = json['height'];
    mimeType = json['mimeType'];
    extraData = json['extraData'] == null
        ? null
        : json['extraData'] is Map
            ? Map<String, dynamic>.from(json['extraData'])
            : {};
    thumbnail = json['thumbnail'] == null ? null : MediaModel.fromJson(json['thumbnail']);
    duration = json['duration'];
  }

  String? id;
  String? url;
  String? path;
  String? type;
  String? name;
  int? width;
  int? height;
  String? mimeType;
  Map<String, dynamic>? extraData;
  MediaModel? thumbnail;
  int? duration; // Duration.inMilliseconds

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['id'] = id;
    map['url'] = url;
    map['path'] = path;
    map['type'] = type;
    map['name'] = name;
    map['width'] = width;
    map['height'] = height;
    map['mimeType'] = mimeType;
    map['extraData'] = extraData;
    map['duration'] = duration;
    return map;
  }

  Map<String, dynamic> toFirebaseJson() {
    final map = <String, dynamic>{};
    map['id'] = id;
    map['url'] = url;
    map['path'] = path;
    map['type'] = type;
    map['width'] = width;
    map['height'] = height;
    map['height'] = height;
    if (extraData != null) {
      map['extraData'] = extraData;
    }
    if (thumbnail != null) {
      map['thumbnail'] = thumbnail?.toJson();
    }
    map['duration'] = duration;
    return map;
  }

  MediaModel copyWith({
    String? id,
    String? url,
    String? path,
    String? type,
    String? name,
    int? width,
    int? height,
    String? mimeType,
    Map<String, dynamic>? extraData,
    MediaModel? thumbnail,
    int? duration,
  }) {
    return MediaModel(
      id: id ?? this.id,
      url: url ?? this.url,
      path: path ?? this.path,
      type: type ?? this.type,
      name: type ?? this.name,
      width: width ?? this.width,
      height: height ?? this.height,
      mimeType: mimeType ?? this.mimeType,
      extraData: extraData ?? this.extraData,
      thumbnail: thumbnail ?? this.thumbnail,
      duration: duration ?? this.duration,
    );
  }

  MediaModel.fromAssetEntity(AssetEntity entity) {
    id = entity.id;
    name = entity.title;
    width = entity.width;
    height = entity.height;
    mimeType = entity.mimeType;
    type = MediaType.values.firstWhereOrNull((e) => e.name == entity.type.name)?.name;
    duration = type == MediaType.video.name ? entity.videoDuration.inMilliseconds : null;
  }

  String getServerURL() {
    return url ?? '';
  }

  String getLocalURI() {
    return path ?? '';
  }

  String getWaveform() {
    return extraData?['waveform'] ?? '';
  }

  MediaType? getType() {
    return MediaType.values.firstWhereOrNull((e) => e.name == type);
  }
}
