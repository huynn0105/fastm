// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:convert';

import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/utils/datetime_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';

class MFastUserMetaDataModel extends Equatable {
  String? taxNumber;
  String? fullName;
  String? mobilePhone;
  String? emailAddress;
  String? addressCurrent;
  String? gender;
  String? countryIdNumber;
  String? countryIdDateOfBirth;
  String? countryIdIssuedDate;
  String? countryIdIssuedBy;
  String? selfiePhoto;
  String? placeOfBirth;
  String? countryIdNumberHousehold;
  String? dateOfBirth;
  String? taxNumberStatus;
  String? addressCurrentDistrict;
  String? countryIdName;
  String? countryIdAddress;
  bool? paymentGatewayConfirm;
  String? taxNumberOrg;
  String? selfiePhotoWithIdNumber;
  String? fullNameAncii;
  String? potentialSkills;
  String? lastTimeLogin;
  bool? isOnline;
  String? isReviewTaxNumber;
  String? taxCommittedPhoto;
  String? taxCommittedPhotoStatus;
  String? taxCommittedPhotoMessage;
  bool? isShowHierPopup;
  String? hierarchicalPoint;
  String? hierarchicalLevel;
  String? isShowHierGuidePopup;
  String? countryOldIdNumber;
  bool? isVerifiedEmail;
  bool? ctvAgreement;
  bool? isSignedInsCertificate;
  bool? hasInsCertificate;
  String? countryIdPhotoFront;
  String? countryIdPhotoBack;
  bool? disabledPressCtv;
  bool? isBanking;
  String? countryIdHomeAddress;
  String? countryIdStatus;

  //
  bool? isLockedKyc;
  String? livenessWithIdNumberPending;
  String? livenessDocFrontUrl;
  String? livenessDocBackUrl;
  String? livenessCountryIdNumber;
  String? livenessCountryIdName;
  String? livenessGender;
  String? livenessCountryIdDateOfBirth;
  String? livenessCountryIdIssuedDate;
  String? livenessCountryIdIssuedBy;
  String? livenessCountryIdAddress;
  String? livenessCountryIdHomeAddress;
  String? livenessWithIdNumberStatus;
  String? livenessWithIdNumberNote;
  String? livenessWithIdNumberLog;

  MFastUserMetaDataModel({
    this.taxNumber,
    this.fullName,
    this.mobilePhone,
    this.emailAddress,
    this.addressCurrent,
    this.gender,
    this.countryIdNumber,
    this.countryIdDateOfBirth,
    this.countryIdIssuedDate,
    this.countryIdIssuedBy,
    this.selfiePhoto,
    this.placeOfBirth,
    this.countryIdNumberHousehold,
    this.dateOfBirth,
    this.taxNumberStatus,
    this.addressCurrentDistrict,
    this.countryIdName,
    this.countryIdAddress,
    this.paymentGatewayConfirm,
    this.taxNumberOrg,
    this.selfiePhotoWithIdNumber,
    this.fullNameAncii,
    this.potentialSkills,
    this.lastTimeLogin,
    this.isOnline,
    this.isReviewTaxNumber,
    this.taxCommittedPhoto,
    this.taxCommittedPhotoStatus,
    this.taxCommittedPhotoMessage,
    this.isShowHierPopup,
    this.hierarchicalPoint,
    this.hierarchicalLevel,
    this.isShowHierGuidePopup,
    this.countryOldIdNumber,
    this.isVerifiedEmail,
    this.ctvAgreement,
    this.isSignedInsCertificate,
    this.hasInsCertificate,
    this.countryIdPhotoFront,
    this.countryIdPhotoBack,
    this.disabledPressCtv,
    this.isBanking,
    this.countryIdHomeAddress,
    this.isLockedKyc,
    this.livenessWithIdNumberPending,
    this.livenessDocFrontUrl,
    this.livenessDocBackUrl,
    this.livenessCountryIdNumber,
    this.livenessCountryIdName,
    this.livenessGender,
    this.livenessCountryIdDateOfBirth,
    this.livenessCountryIdIssuedDate,
    this.livenessCountryIdIssuedBy,
    this.livenessCountryIdAddress,
    this.livenessCountryIdHomeAddress,
    this.livenessWithIdNumberStatus,
    this.livenessWithIdNumberNote,
    this.livenessWithIdNumberLog,
    this.countryIdStatus,
  });

  MFastUserMetaDataModel.fromJson(Map<String, dynamic> json) {
    taxNumber = json['tax_number'];
    fullName = json['full_name'];
    mobilePhone = json['mobile_phone'];
    emailAddress = json['email_address'];
    addressCurrent = json['address_current'];
    gender = json['gender'];
    countryIdNumber = json['country_id_number'];
    countryIdDateOfBirth = json['country_id_date_of_birth'];
    countryIdIssuedDate = json['country_id_issued_date'];
    countryIdIssuedBy = json['country_id_issued_by'];
    selfiePhoto = json['selfie_photo'];
    placeOfBirth = json['place_of_birth'];
    countryIdNumberHousehold = json['country_id_number_household'];
    dateOfBirth = json['date_of_birth'];
    taxNumberStatus = json['tax_number_status'];
    addressCurrentDistrict = json['address_current_district'];
    countryIdName = json['country_id_name'];
    countryIdAddress = json['country_id_address'];
    paymentGatewayConfirm = json['payment_gateway_confirm'];
    taxNumberOrg = json['tax_number_org'];
    selfiePhotoWithIdNumber = json['selfie_photo_with_id_number'];
    fullNameAncii = json['full_name_ancii'];
    potentialSkills = json['potential_skills'];
    lastTimeLogin = json['last_time_login'];
    isOnline = json['is_online'];
    isReviewTaxNumber = json['is_review_tax_number'];
    taxCommittedPhoto = json['tax_committed_photo'];
    taxCommittedPhotoStatus = json['tax_committed_photo_status'];
    taxCommittedPhotoMessage = json['tax_committed_photo_message'];
    isShowHierPopup = json['is_show_hier_popup'];
    hierarchicalPoint = json['hierarchical_point'];
    hierarchicalLevel = json['hierarchical_level'];
    isShowHierGuidePopup = json['is_show_hier_guide_popup'];
    countryOldIdNumber = json['country_old_id_number'];
    isVerifiedEmail = json['is_verified_email'];
    ctvAgreement = json['ctv_agreement'];
    isSignedInsCertificate = json['is_signed_ins_certificate'];
    hasInsCertificate = json['has_ins_certificate'];
    countryIdPhotoFront = json['country_id_photo_front'];
    countryIdPhotoBack = json['country_id_photo_back'];
    disabledPressCtv = json['disabled_press_ctv'];
    isBanking = json['is_banking'];
    countryIdHomeAddress = json['country_id_home_address'];
    isLockedKyc = json['is_locked_kyc'];
    livenessWithIdNumberPending = json['liveness_with_id_number_pending'];
    livenessDocFrontUrl = json['liveness_doc_front_url'];
    livenessDocBackUrl = json['liveness_doc_back_url'];
    livenessCountryIdNumber = json['liveness_country_id_number'];
    livenessCountryIdName = json['liveness_country_id_name'];
    livenessGender = json['liveness_gender'];
    livenessCountryIdDateOfBirth = json['liveness_country_id_date_of_birth'];
    livenessCountryIdIssuedDate = json['liveness_country_id_issued_date'];
    livenessCountryIdIssuedBy = json['liveness_country_id_issued_by'];
    livenessCountryIdAddress = json['liveness_country_id_address'];
    livenessCountryIdHomeAddress = json['liveness_country_id_home_address'];
    livenessWithIdNumberStatus = json['liveness_with_id_number_status'];
    livenessWithIdNumberNote = json['liveness_with_id_number_note'];
    livenessWithIdNumberLog = json['liveness_with_id_number_log'];
    livenessWithIdNumberLog = json['liveness_with_id_number_log'];
    if (livenessWithIdNumberLog != null) {
      try {
        final dynamic livenessLogDecode = jsonDecode(livenessWithIdNumberLog!);
        if (livenessLogDecode is List) {
          livenessWithIdNumberLog = livenessLogDecode.join("\n");
        }
      } catch (e) {}
    }
    countryIdStatus = json['country_id_status'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (taxNumber != null) {
      data['tax_number'] = taxNumber;
    }
    if (fullName != null) {
      data['full_name'] = fullName;
    }
    if (mobilePhone != null) {
      data['mobile_phone'] = mobilePhone;
    }
    if (emailAddress != null) {
      data['email_address'] = emailAddress;
    }
    if (addressCurrent != null) {
      data['address_current'] = addressCurrent;
    }
    if (gender != null) {
      data['gender'] = gender;
    }
    if (countryIdNumber != null) {
      data['country_id_number'] = countryIdNumber;
    }
    if (countryIdDateOfBirth != null) {
      data['country_id_date_of_birth'] = countryIdDateOfBirth;
    }
    if (countryIdIssuedDate != null) {
      data['country_id_issued_date'] = countryIdIssuedDate;
    }
    if (countryIdIssuedBy != null) {
      data['country_id_issued_by'] = countryIdIssuedBy;
    }
    if (selfiePhoto != null) {
      data['selfie_photo'] = selfiePhoto;
    }
    if (placeOfBirth != null) {
      data['place_of_birth'] = placeOfBirth;
    }
    if (countryIdNumberHousehold != null) {
      data['country_id_number_household'] = countryIdNumberHousehold;
    }
    if (dateOfBirth != null) {
      data['date_of_birth'] = dateOfBirth;
    }
    if (taxNumberStatus != null) {
      data['tax_number_status'] = taxNumberStatus;
    }
    if (addressCurrentDistrict != null) {
      data['address_current_district'] = addressCurrentDistrict;
    }
    if (countryIdName != null) {
      data['country_id_name'] = countryIdName;
    }
    if (countryIdAddress != null) {
      data['country_id_address'] = countryIdAddress;
    }
    if (paymentGatewayConfirm != null) {
      data['payment_gateway_confirm'] = paymentGatewayConfirm;
    }
    if (taxNumberOrg != null) {
      data['tax_number_org'] = taxNumberOrg;
    }
    if (selfiePhotoWithIdNumber != null) {
      data['selfie_photo_with_id_number'] = selfiePhotoWithIdNumber;
    }
    if (fullNameAncii != null) {
      data['full_name_ancii'] = fullNameAncii;
    }
    if (potentialSkills != null) {
      data['potential_skills'] = potentialSkills;
    }
    if (lastTimeLogin != null) {
      data['last_time_login'] = lastTimeLogin;
    }
    if (isOnline != null) {
      data['is_online'] = isOnline;
    }
    if (isReviewTaxNumber != null) {
      data['is_review_tax_number'] = isReviewTaxNumber;
    }
    if (taxCommittedPhoto != null) {
      data['tax_committed_photo'] = taxCommittedPhoto;
    }
    if (taxCommittedPhotoStatus != null) {
      data['tax_committed_photo_status'] = taxCommittedPhotoStatus;
    }
    if (taxCommittedPhotoMessage != null) {
      data['tax_committed_photo_message'] = taxCommittedPhotoMessage;
    }
    if (isShowHierPopup != null) {
      data['is_show_hier_popup'] = isShowHierPopup;
    }
    if (hierarchicalPoint != null) {
      data['hierarchical_point'] = hierarchicalPoint;
    }
    if (hierarchicalLevel != null) {
      data['hierarchical_level'] = hierarchicalLevel;
    }
    if (isShowHierGuidePopup != null) {
      data['is_show_hier_guide_popup'] = isShowHierGuidePopup;
    }
    if (countryOldIdNumber != null) {
      data['country_old_id_number'] = countryOldIdNumber;
    }
    if (isVerifiedEmail != null) {
      data['is_verified_email'] = isVerifiedEmail;
    }
    if (ctvAgreement != null) {
      data['ctv_agreement'] = ctvAgreement;
    }
    if (isSignedInsCertificate != null) {
      data['is_signed_ins_certificate'] = isSignedInsCertificate;
    }
    if (hasInsCertificate != null) {
      data['has_ins_certificate'] = hasInsCertificate;
    }
    if (countryIdPhotoFront != null) {
      data['country_id_photo_front'] = countryIdPhotoFront;
    }
    if (countryIdPhotoBack != null) {
      data['country_id_photo_back'] = countryIdPhotoBack;
    }
    if (disabledPressCtv != null) {
      data['disabled_press_ctv'] = disabledPressCtv;
    }
    if (isBanking != null) {
      data['is_banking'] = isBanking;
    }
    if (countryIdHomeAddress != null) {
      data['country_id_home_address'] = countryIdHomeAddress;
    }
    if (isLockedKyc != null) {
      data['is_locked_kyc'] = isLockedKyc;
    }
    if (livenessWithIdNumberPending != null) {
      data['liveness_with_id_number_pending'] = livenessWithIdNumberPending;
    }
    if (livenessDocFrontUrl != null) {
      data['liveness_doc_front_url'] = livenessDocFrontUrl;
    }
    if (livenessDocBackUrl != null) {
      data['liveness_doc_back_url'] = livenessDocBackUrl;
    }
    if (livenessCountryIdNumber != null) {
      data['liveness_country_id_number'] = livenessCountryIdNumber;
    }
    if (livenessCountryIdName != null) {
      data['liveness_country_id_name'] = livenessCountryIdName;
    }
    if (livenessGender != null) {
      data['liveness_gender'] = livenessGender;
    }
    if (livenessCountryIdDateOfBirth != null) {
      data['liveness_country_id_date_of_birth'] = livenessCountryIdDateOfBirth;
    }
    if (livenessCountryIdIssuedDate != null) {
      data['liveness_country_id_issued_date'] = livenessCountryIdIssuedDate;
    }
    if (livenessCountryIdIssuedBy != null) {
      data['liveness_country_id_issued_by'] = livenessCountryIdIssuedBy;
    }
    if (livenessCountryIdAddress != null) {
      data['liveness_country_id_address'] = livenessCountryIdAddress;
    }
    if (livenessCountryIdHomeAddress != null) {
      data['liveness_country_id_home_address'] = livenessCountryIdHomeAddress;
    }
    if (livenessWithIdNumberStatus != null) {
      data['liveness_with_id_number_status'] = livenessWithIdNumberStatus;
    }
    if (livenessWithIdNumberNote != null) {
      data['liveness_with_id_number_note'] = livenessWithIdNumberNote;
    }
    if (livenessWithIdNumberLog != null) {
      data['liveness_with_id_number_log'] = livenessWithIdNumberLog;
    }
    if (countryIdStatus != null) {
      data['country_id_status'] = countryIdStatus;
    }

    return data;
  }

  String? frontCardImage() {
    return countryIdPhotoFront ?? livenessDocFrontUrl;
  }

  String? backCardImage() {
    return countryIdPhotoBack ?? livenessDocBackUrl;
  }

  String? selfieImage() {
    return selfiePhoto ?? livenessWithIdNumberPending;
  }

  bool isCMND() {
    return (countryIdNumber?.length ?? 0) == 9;
  }

  bool isRequiredOldNumberId() {
    final dob = DateTimeUtil.getDate(countryIdDateOfBirth!, format: DateTimeFormat.dd_MM_yyyy);
    final isRequired = (dob?.year ?? 0) <= 1996;

    return isRequired && !isCMND();
  }

  bool validYearOld() {
    final isInvalidNotRequired =
        !isRequiredOldNumberId() && TextUtils.isNotEmpty(countryOldIdNumber) && (countryOldIdNumber?.length ?? 0) < 9;

    final isInvalidRequired =
        isRequiredOldNumberId() && (TextUtils.isNotEmpty(countryOldIdNumber) || (countryOldIdNumber?.length ?? 0) < 9);

    return !isInvalidRequired && !isInvalidNotRequired;
  }

  bool isValidOldNumberId() {
    return validYearOld() ||
        isCMND() ||
        (TextUtils.isNotEmpty(countryOldIdNumber) && (countryOldIdNumber?.length ?? 0) == 9);
  }

  Map<String, dynamic> toUpdateJson() {
    final Map<String, dynamic> data = <String, dynamic>{};

    return data;
  }

  MFastUserMetaDataModel copyWith({
    String? taxNumber,
    String? fullName,
    String? mobilePhone,
    String? emailAddress,
    String? addressCurrent,
    String? gender,
    String? countryIdNumber,
    String? countryIdDateOfBirth,
    String? countryIdIssuedDate,
    String? countryIdIssuedBy,
    String? selfiePhoto,
    String? placeOfBirth,
    String? countryIdNumberHousehold,
    String? dateOfBirth,
    String? taxNumberStatus,
    String? addressCurrentDistrict,
    String? countryIdName,
    String? countryIdAddress,
    bool? paymentGatewayConfirm,
    String? taxNumberOrg,
    String? selfiePhotoWithIdNumber,
    String? fullNameAncii,
    String? potentialSkills,
    String? lastTimeLogin,
    bool? isOnline,
    String? isReviewTaxNumber,
    String? taxCommittedPhoto,
    String? taxCommittedPhotoStatus,
    String? taxCommittedPhotoMessage,
    bool? isShowHierPopup,
    String? hierarchicalPoint,
    String? hierarchicalLevel,
    String? isShowHierGuidePopup,
    String? countryOldIdNumber,
    bool? isVerifiedEmail,
    bool? ctvAgreement,
    bool? isSignedInsCertificate,
    bool? hasInsCertificate,
    String? countryIdPhotoFront,
    String? countryIdPhotoBack,
    bool? disabledPressCtv,
    bool? isBanking,
    String? countryIdHomeAddress,
    String? countryIdStatus,
    bool? isLockedKyc,
    String? livenessWithIdNumberPending,
    String? livenessDocFrontUrl,
    String? livenessDocBackUrl,
    String? livenessCountryIdNumber,
    String? livenessCountryIdName,
    String? livenessGender,
    String? livenessCountryIdDateOfBirth,
    String? livenessCountryIdIssuedDate,
    String? livenessCountryIdIssuedBy,
    String? livenessCountryIdAddress,
    String? livenessCountryIdHomeAddress,
    String? livenessWithIdNumberStatus,
    String? livenessWithIdNumberNote,
    String? livenessWithIdNumberLog,
  }) {
    return MFastUserMetaDataModel(
      taxNumber: taxNumber ?? this.taxNumber,
      fullName: fullName ?? this.fullName,
      mobilePhone: mobilePhone ?? this.mobilePhone,
      emailAddress: emailAddress ?? this.emailAddress,
      addressCurrent: addressCurrent ?? this.addressCurrent,
      gender: gender ?? this.gender,
      countryIdNumber: countryIdNumber ?? this.countryIdNumber,
      countryIdDateOfBirth: countryIdDateOfBirth ?? this.countryIdDateOfBirth,
      countryIdIssuedDate: countryIdIssuedDate ?? this.countryIdIssuedDate,
      countryIdIssuedBy: countryIdIssuedBy ?? this.countryIdIssuedBy,
      selfiePhoto: selfiePhoto ?? this.selfiePhoto,
      placeOfBirth: placeOfBirth ?? this.placeOfBirth,
      countryIdNumberHousehold: countryIdNumberHousehold ?? this.countryIdNumberHousehold,
      dateOfBirth: dateOfBirth ?? this.dateOfBirth,
      taxNumberStatus: taxNumberStatus ?? this.taxNumberStatus,
      addressCurrentDistrict: addressCurrentDistrict ?? this.addressCurrentDistrict,
      countryIdName: countryIdName ?? this.countryIdName,
      countryIdAddress: countryIdAddress ?? this.countryIdAddress,
      paymentGatewayConfirm: paymentGatewayConfirm ?? this.paymentGatewayConfirm,
      taxNumberOrg: taxNumberOrg ?? this.taxNumberOrg,
      selfiePhotoWithIdNumber: selfiePhotoWithIdNumber ?? this.selfiePhotoWithIdNumber,
      fullNameAncii: fullNameAncii ?? this.fullNameAncii,
      potentialSkills: potentialSkills ?? this.potentialSkills,
      lastTimeLogin: lastTimeLogin ?? this.lastTimeLogin,
      isOnline: isOnline ?? this.isOnline,
      isReviewTaxNumber: isReviewTaxNumber ?? this.isReviewTaxNumber,
      taxCommittedPhoto: taxCommittedPhoto ?? this.taxCommittedPhoto,
      taxCommittedPhotoStatus: taxCommittedPhotoStatus ?? this.taxCommittedPhotoStatus,
      taxCommittedPhotoMessage: taxCommittedPhotoMessage ?? this.taxCommittedPhotoMessage,
      isShowHierPopup: isShowHierPopup ?? this.isShowHierPopup,
      hierarchicalPoint: hierarchicalPoint ?? this.hierarchicalPoint,
      hierarchicalLevel: hierarchicalLevel ?? this.hierarchicalLevel,
      isShowHierGuidePopup: isShowHierGuidePopup ?? this.isShowHierGuidePopup,
      countryOldIdNumber: countryOldIdNumber ?? this.countryOldIdNumber,
      isVerifiedEmail: isVerifiedEmail ?? this.isVerifiedEmail,
      ctvAgreement: ctvAgreement ?? this.ctvAgreement,
      isSignedInsCertificate: isSignedInsCertificate ?? this.isSignedInsCertificate,
      hasInsCertificate: hasInsCertificate ?? this.hasInsCertificate,
      countryIdPhotoFront: countryIdPhotoFront ?? this.countryIdPhotoFront,
      countryIdPhotoBack: countryIdPhotoBack ?? this.countryIdPhotoBack,
      disabledPressCtv: disabledPressCtv ?? this.disabledPressCtv,
      isBanking: isBanking ?? this.isBanking,
      countryIdHomeAddress: countryIdHomeAddress ?? this.countryIdHomeAddress,
      countryIdStatus: countryIdStatus ?? this.countryIdStatus,
      isLockedKyc: isLockedKyc ?? this.isLockedKyc,
      livenessWithIdNumberPending: livenessWithIdNumberPending ?? this.livenessWithIdNumberPending,
      livenessDocFrontUrl: livenessDocFrontUrl ?? this.livenessDocFrontUrl,
      livenessDocBackUrl: livenessDocBackUrl ?? this.livenessDocBackUrl,
      livenessCountryIdNumber: livenessCountryIdNumber ?? this.livenessCountryIdNumber,
      livenessCountryIdName: livenessCountryIdName ?? this.livenessCountryIdName,
      livenessGender: livenessGender ?? this.livenessGender,
      livenessCountryIdDateOfBirth: livenessCountryIdDateOfBirth ?? this.livenessCountryIdDateOfBirth,
      livenessCountryIdIssuedDate: livenessCountryIdIssuedDate ?? this.livenessCountryIdIssuedDate,
      livenessCountryIdIssuedBy: livenessCountryIdIssuedBy ?? this.livenessCountryIdIssuedBy,
      livenessCountryIdAddress: livenessCountryIdAddress ?? this.livenessCountryIdAddress,
      livenessCountryIdHomeAddress: livenessCountryIdHomeAddress ?? this.livenessCountryIdHomeAddress,
      livenessWithIdNumberStatus: livenessWithIdNumberStatus ?? this.livenessWithIdNumberStatus,
      livenessWithIdNumberNote: livenessWithIdNumberNote ?? this.livenessWithIdNumberNote,
      livenessWithIdNumberLog: livenessWithIdNumberLog ?? this.livenessWithIdNumberLog,
    );
  }

  @override
  List<Object?> get props {
    return [
      taxNumber,
      fullName,
      mobilePhone,
      emailAddress,
      addressCurrent,
      gender,
      countryIdNumber,
      countryIdDateOfBirth,
      countryIdIssuedDate,
      countryIdIssuedBy,
      selfiePhoto,
      placeOfBirth,
      countryIdNumberHousehold,
      dateOfBirth,
      taxNumberStatus,
      addressCurrentDistrict,
      countryIdName,
      countryIdAddress,
      paymentGatewayConfirm,
      taxNumberOrg,
      selfiePhotoWithIdNumber,
      fullNameAncii,
      potentialSkills,
      lastTimeLogin,
      isOnline,
      isReviewTaxNumber,
      taxCommittedPhoto,
      taxCommittedPhotoStatus,
      taxCommittedPhotoMessage,
      isShowHierPopup,
      hierarchicalPoint,
      hierarchicalLevel,
      isShowHierGuidePopup,
      countryOldIdNumber,
      isVerifiedEmail,
      ctvAgreement,
      isSignedInsCertificate,
      hasInsCertificate,
      countryIdPhotoFront,
      countryIdPhotoBack,
      disabledPressCtv,
      isBanking,
      countryIdHomeAddress,
      countryIdStatus,
      isLockedKyc,
      livenessWithIdNumberPending,
      livenessDocFrontUrl,
      livenessDocBackUrl,
      livenessCountryIdNumber,
      livenessCountryIdName,
      livenessGender,
      livenessCountryIdDateOfBirth,
      livenessCountryIdIssuedDate,
      livenessCountryIdIssuedBy,
      livenessCountryIdAddress,
      livenessCountryIdHomeAddress,
      livenessWithIdNumberStatus,
      livenessWithIdNumberNote,
      livenessWithIdNumberLog,
    ];
  }
}
