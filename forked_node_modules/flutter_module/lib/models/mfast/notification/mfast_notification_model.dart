// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:convert';

import 'package:collection/collection.dart';
import 'package:flutter_module/common/enum/mfast/notification_type.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/models/chat/message/author_model.dart';

class MFastNotificationModel {
  int? createdDate;
  MFastNotificationDataModel? data;
  Notification? notification;

  MFastNotificationModel({this.createdDate, this.data, this.notification});

  MFastNotificationModel.fromJson(Map<String, dynamic> json) {
    createdDate = TextUtils.parseInt(json['createdDate']);
    data = json['data'] != null ? MFastNotificationDataModel.fromJson(json['data']) : null;
    notification = json['notification'] != null ? Notification.fromJson(json['notification']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['createdDate'] = createdDate;
    if (this.data != null) {
      data['data'] = this.data!.toJson();
    }
    if (notification != null) {
      data['notification'] = notification!.toJson();
    }
    return data;
  }

  MFastNotificationModel copyWith({
    int? createdDate,
    MFastNotificationDataModel? data,
    Notification? notification,
  }) {
    return MFastNotificationModel(
      createdDate: createdDate ?? this.createdDate,
      data: data ?? this.data,
      notification: notification ?? this.notification,
    );
  }
}

class MFastNotificationDataModel {
  String? category;
  int? createdDate;
  ExtraData? extraData;
  String? notificationId;
  String? type;
  bool? read;
  bool? flag;

  MFastNotificationDataModel({
    this.category,
    this.createdDate,
    this.extraData,
    this.notificationId,
    this.type,
    this.read,
    this.flag,
  });

  MFastNotificationDataModel.fromJson(Map<String, dynamic> json) {
    category = json['category'];
    createdDate = TextUtils.parseInt(json['createdDate']);
    extraData = json['extra_data'] != null ? ExtraData.fromJson(json['extra_data']) : null;
    notificationId = json['notification_id'];
    type = json['type']?.toString();
    read = json['read'];
    flag = json['flag'];
  }

  MFastNotificationDataModel.fromPushNotificationJson(Map<String, dynamic> json) {
    category = json['category'];
    createdDate = TextUtils.parseInt(json['createdDate']);
    extraData = json['extra_data'] != null ? ExtraData.fromJson(jsonDecode(json['extra_data'])) : null;
    notificationId = json['notification_id'];
    type = json['type']?.toString();
    read = json['read'];
    flag = json['flag'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['category'] = category;
    data['createdDate'] = createdDate;
    if (extraData != null) {
      data['extra_data'] = extraData!.toJson();
    }
    data['notification_id'] = notificationId;
    data['type'] = type;
    data['read'] = read;
    data['flag'] = flag;
    return data;
  }

  MFastNotificationDataModel copyWith({
    String? category,
    int? createdDate,
    ExtraData? extraData,
    String? notificationId,
    String? type,
    bool? read,
    bool? flag,
  }) {
    return MFastNotificationDataModel(
      category: category ?? this.category,
      createdDate: createdDate ?? this.createdDate,
      extraData: extraData ?? this.extraData,
      notificationId: notificationId ?? this.notificationId,
      type: type ?? this.type,
      read: read ?? this.read,
      flag: flag ?? this.flag,
    );
  }

  NotificationType? getType() {
    return NotificationType.values.firstWhereOrNull((e) => e.name == type);
  }
}

class ExtraData {
  String? title;
  String? body;
  String? url;
  String? screenTitle;
  AuthorModel? user;
  List<String>? urlsStack;
  List<String>? unbackableURLs;
  String? action; // used: shipper
  String? deliveryOrderCode; // used: shipper

  ExtraData({
    this.title,
    this.body,
    this.url,
    this.screenTitle,
    this.user,
    this.urlsStack,
    this.unbackableURLs,
    this.action,
    this.deliveryOrderCode,
  });

  ExtraData.fromJson(Map<String, dynamic> json) {
    title = json['title'];
    body = json['body'];
    url = json['url'];
    screenTitle = json['screen_title'] ?? json['alert_title'];
    if (json['user'] is Map) {
      user = AuthorModel.fromUserLoginJson(json['user']);
    }
    urlsStack = json['urls_stack'] != null ? json['urls_stack'].cast<String>() : [];
    unbackableURLs = json['unbackable_urls'] != null ? json['unbackable_urls'].cast<String>() : [];
    action = json['action'];
    deliveryOrderCode = json['deliveryOrderCode'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['title'] = title;
    data['body'] = body;
    data['url'] = url;
    data['screen_title'] = screenTitle;
    data['urls_stack'] = urlsStack;
    data['unbackable_urls'] = unbackableURLs;
    data['action'] = action;
    data['deliveryOrderCode'] = deliveryOrderCode;
    return data;
  }

  ExtraData copyWith({
    String? title,
    String? body,
    String? url,
    String? screenTitle,
    List<String>? urlsStack,
    List<String>? unbackableURLs,
    String? action,
    String? deliveryOrderCode,
  }) {
    return ExtraData(
      title: title ?? this.title,
      body: body ?? this.body,
      url: url ?? this.url,
      screenTitle: screenTitle ?? this.screenTitle,
      urlsStack: urlsStack ?? this.urlsStack,
      unbackableURLs: unbackableURLs ?? this.unbackableURLs,
      action: action ?? this.action,
      deliveryOrderCode: deliveryOrderCode ?? this.deliveryOrderCode,
    );
  }
}

class Notification {
  String? title;
  String? body;
  String? sound;
  Map<String, dynamic>? data;

  Notification({
    this.title,
    this.body,
    this.sound,
    this.data,
  });

  Notification.fromJson(Map<String, dynamic> json) {
    title = json['title'];
    body = json['body'];
    sound = json['sound'];
    data = json['data'] == null ? json['data'] : Map<String, dynamic>.from(json['data']);
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['title'] = title;
    data['body'] = body;
    data['sound'] = sound;
    data['data'] = data;
    return data;
  }

  Notification copyWith({
    String? title,
    String? body,
    String? sound,
    Map<String, dynamic>? data,
  }) {
    return Notification(
      title: title ?? this.title,
      body: body ?? this.body,
      sound: sound ?? this.sound,
      data: data ?? this.data,
    );
  }
}
