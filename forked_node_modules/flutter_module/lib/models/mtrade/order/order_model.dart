import '../../../common/utils/text_util.dart';
import 'order_item_model.dart';
import 'process_state_order.dart';
import 'tracking_partner_model.dart';

/// itemIDs : "284"
/// ID : "276"
/// orderID : "1678085671674438"
/// amountAfterTax : "2000000.00"
/// createdDate : "2023-03-06 13:54:32"
/// paymentID : "1240804301"
/// updatedDate : "2023-03-06 13:54:44"
/// status : "processing"
/// processID : "5"
/// processText : "Tiếp nhận đơn hàng"
/// note : null
/// appID : null
/// mplToken : null
/// icon : "https://appay-rc.cloudcms.vn/mfast_assets/img/icons/mtrade-order-1.png"
/// fullName : "Sifjefa"
/// mobilePhone : "0789301100"
/// sum_bonus : 0
/// items : [{"productName":"Iphone 14","quantity":"1","amount":"2000000.00","createdDate":"2023-03-06 13:54:32","updatedDate":"2023-03-06 13:54:44","itemID":"284","processID":"5","processText":"Tiếp nhận đơn hàng","addressFull":"12345, Phường Thanh Nhàn, Quận Hai Bà Trưng, Hà Nội","image":"https://los-dev.s3-sgn09.fptcloud.com/mfast/image/91386ae8-848b-4d04-b33f-e17d282a5fb4.png"}]
/// trackingPartner : {"trackingCode":null,"addressFull":null}
/// urlDetail : "https://appay-rc.cloudcms.vn/payment?orderID="

class OrderModel {
  OrderModel({
    this.itemIDs,
    this.id,
    this.orderID,
    this.amountAfterTax,
    this.createdDate,
    this.paymentID,
    this.updatedDate,
    this.status,
    this.processID,
    this.processText,
    this.note,
    this.appID,
    this.mplToken,
    this.icon,
    this.fullName,
    this.mobilePhone,
    this.sumBonus,
    this.items,
    this.trackingPartner,
    this.urlDetail,
    this.objectType,
    this.paymentMethod,
    this.prepayAmount,
    this.loanAmount,
    this.pendingStateOrder,
    this.paymentMethodText,
    this.conversationFeeAmount,
  });

  OrderModel.fromJson(dynamic json) {
    itemIDs = json['itemIDs'];
    id = json['ID'];
    orderID = json['orderID'];
    amountAfterTax = TextUtils.parseInt(json['amountAfterTax']);
    createdDate = json['createdDate'];
    paymentID = json['paymentID'];
    updatedDate = json['updatedDate'];
    status = json['status'];
    processID = json['processID'];
    processText = json['processText'];
    note = json['note'];
    appID = json['appID'];
    mplToken = json['mplToken'];
    icon = json['icon'];
    fullName = json['fullName'];
    mobilePhone = json['mobilePhone'];
    sumBonus = TextUtils.parseInt(json['sum_bonus']);
    if (json['items'] != null) {
      items = [];
      json['items'].forEach((v) {
        items?.add(OrderItemModel.fromJson(v));
      });
    }
    trackingPartner = json['trackingPartner'] != null
        ? TrackingPartnerModel.fromJson(json['trackingPartner'])
        : null;
    urlDetail = json['urlDetail'];
    objectType = json['objectType'];
    paymentMethod = json['paymentMethod'];
    prepayAmount = TextUtils.parseInt(json['prepayAmount']);
    loanAmount = TextUtils.parseInt(json['loanAmount']);
    pendingStateOrder = json['pending_state_order'] != null
        ? ProcessStateOrder.fromJson(json['pending_state_order'])
        : null;
    paymentMethodText = json['paymentMethodText'];
    conversationFeeAmount = TextUtils.parseDouble(json['conversationFeeAmount']);
  }

  String? itemIDs;
  String? id;
  String? orderID;
  int? amountAfterTax;
  String? createdDate;
  String? paymentID;
  String? updatedDate;
  String? status;
  String? processID;
  String? processText;
  String? note;
  String? appID;
  String? mplToken;
  String? icon;
  String? fullName;
  String? mobilePhone;
  int? sumBonus;
  List<OrderItemModel>? items;
  TrackingPartnerModel? trackingPartner;
  String? urlDetail;
  String? objectType;
  String? paymentMethod;
  int? prepayAmount;
  int? loanAmount;
  ProcessStateOrder? pendingStateOrder;
  String? paymentMethodText;
  double? conversationFeeAmount;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['itemIDs'] = itemIDs;
    map['ID'] = id;
    map['orderID'] = orderID;
    map['amountAfterTax'] = amountAfterTax;
    map['createdDate'] = createdDate;
    map['paymentID'] = paymentID;
    map['updatedDate'] = updatedDate;
    map['status'] = status;
    map['processID'] = processID;
    map['processText'] = processText;
    map['note'] = note;
    map['appID'] = appID;
    map['mplToken'] = mplToken;
    map['icon'] = icon;
    map['fullName'] = fullName;
    map['mobilePhone'] = mobilePhone;
    map['sum_bonus'] = sumBonus;
    if (items != null) {
      map['items'] = items?.map((v) => v.toJson()).toList();
    }
    if (trackingPartner != null) {
      map['trackingPartner'] = trackingPartner?.toJson();
    }
    map['urlDetail'] = urlDetail;
    map['objectType'] = objectType;
    map['paymentMethod'] = paymentMethod;
    map['prepayAmount'] = prepayAmount;
    map['loanAmount'] = loanAmount;
    if (pendingStateOrder != null) {
      map['pending_state_order'] = pendingStateOrder?.toJson();
    }
    map['paymentMethodText'] = paymentMethodText;
    map['conversationFeeAmount'] = conversationFeeAmount;
    return map;
  }
}
