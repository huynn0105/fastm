import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/models/mtrade/pay_later/mtrade_variation_model.dart';
import 'package:flutter_module/models/mtrade/product_detail/comm_model.dart';
import 'package:flutter_module/models/mtrade/product_detail/mtrade_sku_detail_model.dart';
import 'package:flutter_module/models/mtrade/promotion/mtrade_promotion_data_model.dart';

import '../../../common/extension/list_extension.dart';
import '../product_detail/mtrade_product_detail_model.dart';

/// ID : "32"
/// merchantCode : "UMBALA"
/// name : "Quạt điện - Xanh"
/// price : 3000000
/// productCode : "QĐ9187238"
/// productID : "255"
/// productImg : "https://los-dev.s3-sgn09.fptcloud.com/mfast/image/f1cdd673-f77c-47e9-93fb-2296c92a5e33.jpg"
/// productInvalid : false
/// quantity : 1
/// sku : "QĐ9187238."

class MTradeCartProductModel {
  MTradeCartProductModel({
    this.id,
    this.orderID,
    this.transactionID,
    this.merchantCode,
    this.name,
    this.price,
    this.productCode,
    this.productID,
    this.productImg,
    this.productInvalid,
    this.productOutOfStock,
    this.quantity,
    this.sku,
    this.payNow,
    this.payLater,
    this.variation,
    this.productCategoryName,
    this.productMerchantCode,
    this.productMerchantName,
    this.productMerchantLogo,
    this.partnerProductID,
    this.comparePrice,
    this.riskLevel,
    this.productCategory,
    this.promotions,
    this.promotionPrice,
    this.productPriceId,
    this.productPriceItemId,
  });

  MTradeCartProductModel.fromJson(dynamic json) {
    id = json['ID'];
    orderID = json['orderID'];
    transactionID = json['transactionID'];
    merchantCode = json['merchantCode'];
    name = json['name'];
    price = json['price'];
    productCode = json['productCode'];
    productID = json['productID'];
    productImg = json['productImg'];
    productInvalid = json['productInvalid'];
    productOutOfStock = json['product_out_of_stock'];
    quantity = json['quantity'];
    sku = json['sku'];
    payNow = TextUtils.parseInt(json['payNow']);
    payLater = TextUtils.parseInt(json['payLater']);
    if (json['comparePrice'] != null) {
      comparePrice = [];
      json['comparePrice'].forEach((v) {
        comparePrice?.add(ValueModel.fromJson(v));
      });
    }
    riskLevel = json['riskLevel'];
    productCategory = json['productCategory'];
  }

  MTradeCartProductModel.fromPreScreen(dynamic json) {
    id = json['ID'];
    orderID = json['orderID'];
    transactionID = json['transactionID'];
    merchantCode = json['merchantCode'];
    productCode = json['productCode'];
    productID = json['productID']?.toString();
    productImg = json['productImage'];
    quantity = TextUtils.parseInt(json['quantity']);

    partnerProductID = TextUtils.parseInt(json['partnerProductID']);
    productCategoryName = json['categoryName'];
    productMerchantCode = json['productMerchantCode'];
    productMerchantName = json['brandName'];
    productMerchantLogo = json['brandLogo'];
    if (json['comparePrice'] != null) {
      comparePrice = [];
      json['comparePrice'].forEach((v) {
        comparePrice?.add(ValueModel.fromJson(v));
      });
    }

    //
    variation = json['variation'] == null ? null : MTradeVariationModel.fromJson(json['variation']);
    sku = variation?.sku;
    price = variation?.price;
    name = '${json['productName']} - ${variation?.variationValue ?? ''}';
    productPriceId = json['product_price_id'];
    productPriceItemId = json['product_price_item_id'];
  }

  String? id;
  String? orderID;
  String? transactionID;
  String? merchantCode;
  String? name;
  int? price;
  String? productCode;
  String? productID;
  String? productImg;
  bool? productInvalid;
  bool? productOutOfStock;
  int? quantity;
  String? sku;
  int? payNow;
  int? payLater;
  MTradeVariationModel? variation;
  String? productCategoryName;
  String? productMerchantCode;
  String? productMerchantName;
  String? productMerchantLogo;
  int? partnerProductID;
  List<ValueModel>? comparePrice;
  String? riskLevel;
  String? productCategory;
  List<OmsPromotionCodes>? promotions;
  double? promotionPrice;
  String? productPriceId;
  String? productPriceItemId;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['ID'] = id;
    map['orderID'] = orderID;
    map['transactionID'] = transactionID;
    map['merchantCode'] = merchantCode;
    map['name'] = name;
    map['price'] = price;
    map['productCode'] = productCode;
    map['productID'] = productID;
    map['productImg'] = productImg;
    map['productInvalid'] = productInvalid;
    map['product_out_of_stock'] = productOutOfStock;
    map['quantity'] = quantity;
    map['sku'] = sku;
    map['payNow'] = payNow;
    map['payLater'] = payLater;
    map['productCategoryName'] = productCategoryName;
    map['productMerchantCode'] = productMerchantCode;
    map['productMerchantName'] = productMerchantName;
    map['productMerchantLogo'] = productMerchantLogo;
    map['partnerProductID'] = partnerProductID;
    if (comparePrice != null) {
      map['comparePrice'] = comparePrice?.map((v) => v.toJson()).toList();
    }
    map['riskLevel'] = riskLevel;
    map['productCategory'] = productCategory;
    return map;
  }

  Map<String, dynamic> toJsonInsurancePayload() {
    final map = <String, dynamic>{};
    map['orderID'] = orderID;
    map['transactionID'] = transactionID;
    return map;
  }

  Map<String, dynamic> toJsonPreScreenPayload() {
    final map = <String, dynamic>{};
    map['quantity'] = quantity;
    map['sku'] = sku;
    return map;
  }

  Map<String, dynamic> toJsonGenProductSchemePayload() {
    final map = <String, dynamic>{};
    map['productID'] = TextUtils.parseInt(productID);
    map['productName'] = name;
    map['sku'] = sku;
    map['productPrice'] = price;
    map['quantity'] = quantity;
    map['productImage'] = productImg;
    map['productCategoryName'] = productCategoryName;
    map['productMerchantCode'] = productMerchantCode;
    map['productMerchantName'] = productMerchantName;
    map['productMerchantLogo'] = productMerchantLogo;
    map['partnerProductID'] = partnerProductID;
    if (promotions != null) {
      map['promotions'] = promotions?.map((v) => v.toJson()).toList();
    }
    if (promotionPrice != null) {
      map['promotionPrice'] = promotionPrice;
    }
    map['product_price_id'] = productPriceId;
    map['product_price_item_id'] = productPriceItemId;
    return map;
  }

  MTradeCartProductModel.fromProductDetail(MTradeProductDetailModel? detail, MTradeSkuDetailModel? skuDetail) {
    merchantCode = detail?.merchantCode;
    name = detail?.getNameWithSku(skuDetail?.options);
    productCode = detail?.code;
    productID = detail?.productID;
    productImg = detail?.productImages?.valueAt(0);
    quantity = 1;
    //
    price = skuDetail?.price;
    sku = skuDetail?.sku;
    productInvalid = skuDetail?.productInvalid;
    productOutOfStock = skuDetail?.productOutOfStock;
    payNow = skuDetail?.payNow != null ? 1 : 0;
    payLater = skuDetail?.payLater != null ? 1 : 0;
    comparePrice = skuDetail?.comparePrice;
  }

  MTradeCartProductModel.fromDeeplink(dynamic json) {
    merchantCode = json['merchantCode'];
    name = json['skuDetail'];
    productCode = json['code'];
    productID = json['productID'];
    productImg = json['productImages'];
    quantity = json['quantity'];
    //
    price = json['price'];
    sku = json['sku'];
    productInvalid = json['productInvalid'];
    productOutOfStock = json['productOutOfStock'];
    payNow = 0;
    payLater = 1;
    comparePrice = json['comparePrice'];
  }

  MTradeCartProductModel copyWith({
    String? id,
    String? orderID,
    String? transactionID,
    String? merchantCode,
    String? name,
    int? price,
    String? productCode,
    String? productID,
    String? productImg,
    bool? productInvalid,
    bool? productOutOfStock,
    int? quantity,
    String? sku,
    int? payNow,
    int? payLater,
    MTradeVariationModel? variation,
    String? productCategoryName,
    String? productMerchantCode,
    String? productMerchantName,
    String? productMerchantLogo,
    int? partnerProductID,
    List<ValueModel>? comparePrice,
    String? riskLevel,
    String? productCategory,
    List<OmsPromotionCodes>? promotions,
    double? promotionPrice,
    String? productPriceId,
    String? productPriceItemId,
  }) {
    return MTradeCartProductModel(
      id: id ?? this.id,
      orderID: orderID ?? this.orderID,
      transactionID: transactionID ?? this.transactionID,
      merchantCode: merchantCode ?? this.merchantCode,
      name: name ?? this.name,
      price: price ?? this.price,
      productCode: productCode ?? this.productCode,
      productID: productID ?? this.productID,
      productImg: productImg ?? this.productImg,
      productInvalid: productInvalid ?? this.productInvalid,
      productOutOfStock: productOutOfStock ?? this.productOutOfStock,
      quantity: quantity ?? this.quantity,
      sku: sku ?? this.sku,
      payNow: payNow ?? this.payNow,
      payLater: payLater ?? this.payLater,
      variation: variation ?? this.variation,
      productCategoryName: productCategoryName ?? this.productCategoryName,
      productMerchantCode: productMerchantCode ?? this.productMerchantCode,
      productMerchantName: productMerchantName ?? this.productMerchantName,
      productMerchantLogo: productMerchantLogo ?? this.productMerchantLogo,
      partnerProductID: partnerProductID ?? this.partnerProductID,
      comparePrice: comparePrice ?? this.comparePrice,
      riskLevel: riskLevel ?? this.riskLevel,
      productCategory: productCategory ?? this.productCategory,
      promotions: promotions ?? this.promotions,
      promotionPrice: promotionPrice ?? this.promotionPrice,
      productPriceId: productPriceId ?? this.productPriceId,
      productPriceItemId: productPriceItemId ?? this.productPriceItemId,
    );
  }
}
