import 'package:flutter_module/common/extension/list_extension.dart';

import '../../../common/enum/mtrade/payment_type.dart';
import '../../../common/utils/text_util.dart';
import '../product_detail/comm_model.dart';
import 'promotion_product_model.dart';

/// name : "Điện thoại OPPO Reno8"
/// keyword : "productCode"
/// code : "Reno8"
/// image : "https://los-dev.s3-sgn09.fptcloud.com/mfast/image/076cb04c-0ea2-40ec-9b34-7b163226c155.jpg"
/// price : 5800000
/// comm : "4.2"
/// contest : ""
/// paymentMethod : {"paynow":1,"paylater":1}

class MTradeProductModel {
  MTradeProductModel({
    this.name,
    this.keyword,
    this.code,
    this.image,
    this.price,
    this.comm,
    this.contest,
    this.paymentMethod,
    this.highlight,
    this.hideComm,
    this.hideMessage,
    this.comparePrice,
    this.mfastShipping,
    this.promotion,
    this.productIcon,
  });

  MTradeProductModel.fromJson(dynamic json) {
    name = json['name'];
    keyword = json['keyword'];
    code = json['code'];
    image = json['image'];
    price = TextUtils.parseInt(json['price']);
    comm = TextUtils.parseDouble(json['comm']);
    currency = json['currency'];
    contest = json['contest'];
    paymentMethod = json['paymentMethod'] != null ? PaymentMethod.fromJson(json['paymentMethod']) : null;
    highlight = json['highlight'];
    hideComm = json['hideComm'];
    hideMessage = json['hideMessage'];
    if (json['comparePrice'] != null) {
      comparePrice = [];
      json['comparePrice'].forEach((v) {
        comparePrice?.add(ValueModel.fromJson(v));
      });
    }
    mfastShipping = json['mfastShipping'];
    promotion = json['promotion'] != null ? PromotionProductModel.fromJson(json['promotion']) : null;
    productIcon = json['productIcon'] != null ? json['productIcon'].cast<String>() : [];
  }

  MTradeProductModel.fromJsonSuggestedProduct(dynamic json) {
    name = json['name'];
    code = json['code'];
    image = (json['productImg'] as List?)?.valueAt(0);
    price = TextUtils.parseInt(json['price']);
    if (json['comparePrice'] != null) {
      comparePrice = [];
      json['comparePrice'].forEach((v) {
        comparePrice?.add(ValueModel.fromJson(v));
      });
    }
    mfastShipping = json['mfastShipping'];
    promotion = json['promotion'] != null ? PromotionProductModel.fromJson(json['promotion']) : null;
  }

  String? name;
  String? keyword;
  String? code;
  String? image;
  int? price;
  double? comm;
  String? currency;
  String? contest;
  PaymentMethod? paymentMethod;
  bool? highlight;
  bool? hideComm;
  String? hideMessage;
  List<ValueModel>? comparePrice;
  bool? mfastShipping;
  PromotionProductModel? promotion;
  List<String>? productIcon;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['keyword'] = keyword;
    map['code'] = code;
    map['image'] = image;
    map['price'] = price;
    map['comm'] = comm;
    map['currency'] = currency;
    map['contest'] = contest;
    if (paymentMethod != null) {
      map['paymentMethod'] = paymentMethod?.toJson();
    }
    map['highlight'] = highlight;
    map['hideComm'] = hideComm;
    map['hideMessage'] = hideMessage;
    if (comparePrice != null) {
      map['comparePrice'] = comparePrice?.map((v) => v.toJson()).toList();
    }
    map['mfastShipping'] = mfastShipping;
    if (promotion != null) {
      map['promotion'] = promotion?.toJson();
    }
    map['productIcon'] = productIcon;
    return map;
  }

  double getPromotionDiscount() {
    return promotion?.getPromotionDiscount((price ?? 0).toDouble()) ?? 0;
  }

  String getPromotionUnitCurrency() {
    return promotion?.getPromotionUnitCurrency() ?? "";
  }
}

/// paynow : 1
/// paylater : 1

class PaymentMethod {
  PaymentMethod({
    this.paynow,
    this.paylater,
  });

  PaymentMethod.fromJson(dynamic json) {
    paynow = json['paynow'];
    paylater = json['paylater'];
  }
  int? paynow;
  int? paylater;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['paynow'] = paynow;
    map['paylater'] = paylater;
    return map;
  }

  List<MTradePaymentType> convertPaymentType() {
    return [
      if (paynow == 1) MTradePaymentType.now,
      if (paylater == 1) MTradePaymentType.later,
    ];
  }
}
