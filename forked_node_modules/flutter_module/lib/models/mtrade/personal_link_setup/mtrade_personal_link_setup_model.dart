// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:convert';

import 'package:flutter_module/common/enum/client/ad_link_tab_type.dart';
import 'package:flutter_module/common/enum/mtrade/social_contact_type.dart';

class MTradePersonalLinkSetupModel {
  String? link;
  UserLinkSetup? user;
  DetailLinkSetup? detail;
  List<InsuranceLinkSetup>? listInsurance;
  bool? discountCustomizable;

  MTradePersonalLinkSetupModel({
    this.link,
    this.user,
    this.detail,
    this.listInsurance,
    this.discountCustomizable,
  });

  MTradePersonalLinkSetupModel.fromJson(Map<String, dynamic> json) {
    if (json['listInsurance'] is Map) {
      listInsurance = (json['listInsurance'] as Map).values.map((e) => InsuranceLinkSetup.fromJson(e)).toList();
    }
    user = json['user'] != null ? UserLinkSetup.fromJson(json['user']) : null;
    detail = json['detail'] != null ? DetailLinkSetup.fromJson(json['detail']) : null;
    link = json['link'] ?? detail?.actionLink;
    discountCustomizable = json['discount_customizable'];

    if (listInsurance?.isNotEmpty == true) {
      detail ??= DetailLinkSetup();
      Map<String, String> insuranceDiscount = {};
      listInsurance?.forEach((element) {
        final id = element.iD ?? "";
        insuranceDiscount[id] = detail?.insuranceConfigArr?[id] ?? "0";
      });
      detail = detail!.copyWith(
        insuranceDiscount: insuranceDiscount,
      );
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['link'] = link;
    if (user != null) {
      data['user'] = user!.toJson();
    }
    if (detail != null) {
      data['detail'] = detail!.toJson();
    }
    return data;
  }

  MTradePersonalLinkSetupModel copyWith({
    String? link,
    UserLinkSetup? user,
    DetailLinkSetup? detail,
    List<InsuranceLinkSetup>? listInsurance,
    bool? discountCustomizable,
  }) {
    return MTradePersonalLinkSetupModel(
      link: link ?? this.link,
      user: user ?? this.user,
      detail: detail ?? this.detail,
      listInsurance: listInsurance ?? this.listInsurance,
      discountCustomizable: discountCustomizable ?? this.discountCustomizable,
    );
  }
}

class UserLinkSetup {
  String? fullName;
  String? mobilePhone;

  UserLinkSetup({this.fullName, this.mobilePhone});

  UserLinkSetup.fromJson(Map<String, dynamic> json) {
    fullName = json['fullName'];
    mobilePhone = json['mobilePhone'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['fullName'] = fullName;
    data['mobilePhone'] = mobilePhone;
    return data;
  }

  UserLinkSetup copyWith({
    String? fullName,
    String? mobilePhone,
  }) {
    return UserLinkSetup(
      fullName: fullName ?? this.fullName,
      mobilePhone: mobilePhone ?? this.mobilePhone,
    );
  }
}

class DetailLinkSetup {
  String? id;
  String? userId;
  String? pageId;
  String? active;
  String? description;
  String? customerLabel;
  String? finance;
  String? insurrance;
  String? views;
  String? total;
  String? deleted;
  String? boughtIns;
  String? fullName;
  String? socialPhone;
  String? socialZalo;
  String? socialFacebook;
  List<String>? social;
  String? refCode;
  String? itemLinks;
  String? createdAt;
  String? updatedAt;
  String? insuranceConfig;
  String? nextHandler;
  String? showContact;
  List<String>? socialArray;
  Map<String, String>? insuranceConfigArr;
  List<String>? insuranceActiveArr;
  Map<String, String>? insuranceDiscount;
  String? actionLink;
  int? totalFollow;
  int? totalAttended;
  int? totalSuccess;

  DetailLinkSetup(
      {this.id,
      this.userId,
      this.pageId,
      this.active,
      this.description,
      this.customerLabel,
      this.finance,
      this.insurrance,
      this.views,
      this.total,
      this.deleted,
      this.boughtIns,
      this.fullName,
      this.socialPhone,
      this.socialZalo,
      this.socialFacebook,
      this.social,
      this.refCode,
      this.itemLinks,
      this.createdAt,
      this.updatedAt,
      this.insuranceConfig,
      this.nextHandler,
      this.showContact,
      this.socialArray,
      this.insuranceConfigArr,
      this.insuranceActiveArr,
      this.insuranceDiscount,
      this.actionLink,
      this.totalFollow,
      this.totalAttended,
      this.totalSuccess});

  DetailLinkSetup.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    userId = json['user_id'];
    pageId = json['page_id'];
    active = json['active'];
    description = json['description'];
    customerLabel = json['customer_label'];
    finance = json['finance'];
    insurrance = json['insurrance'];
    views = json['views'];
    total = json['total'];
    deleted = json['deleted'];
    boughtIns = json['boughtIns'];
    fullName = json['full_name'];
    socialPhone = json['social_phone'];
    socialZalo = json['social_zalo'];
    socialFacebook = json['social_facebook'];
    social =
        json['social'] is String ? (jsonDecode(json['social']) as List).whereType<String>().toList() : json['social'];
    refCode = json['refCode'];
    itemLinks = json['itemLinks'];
    createdAt = json['created_at'];
    updatedAt = json['updated_at'];
    insuranceConfig = json['insurance_config'];
    nextHandler = json['next_handler'];
    showContact = json['show_contact'];
    if (json['social_array'] != null) {
      socialArray = json['social_array'].cast<String>();
    }
    if (json['insurance_config_arr'] is Map) {
      insuranceConfigArr = json['insurance_config_arr']
          .map<String, String>((key, value) => MapEntry<String, String>(key.toString(), value.toString()));
      insuranceActiveArr = insuranceConfigArr?.keys.toList();
    }
    insuranceDiscount = json['insurance_discount'];
    actionLink = json['action_link'];
    totalFollow = json['total_follow'];
    totalAttended = json['total_attended'];
    totalSuccess = json['total_success'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['id'] = id;
    data['user_id'] = userId;
    data['page_id'] = pageId;
    data['active'] = active;
    data['description'] = description;
    data['customer_label'] = customerLabel;
    data['finance'] = finance;
    data['insurrance'] = insurrance;
    data['views'] = views;
    data['total'] = total;
    data['deleted'] = deleted;
    data['boughtIns'] = boughtIns;
    data['full_name'] = fullName;
    data['social_phone'] = socialPhone;
    data['social_zalo'] = socialZalo;
    data['social_facebook'] = socialFacebook;
    data['social'] = social;
    data['refCode'] = refCode;
    data['itemLinks'] = itemLinks;
    data['created_at'] = createdAt;
    data['updated_at'] = updatedAt;
    data['insurance_config'] = insuranceConfig;
    data['next_handler'] = nextHandler;
    data['show_contact'] = showContact;
    data['social_array'] = socialArray;
    data['insurance_config_arr'] = insuranceConfigArr;
    data['insurance_discount'] = insuranceDiscount;
    data['action_link'] = actionLink;
    data['total_follow'] = totalFollow;
    data['total_attended'] = totalAttended;
    data['total_success'] = totalSuccess;
    return data;
  }

  Map<String, dynamic> toInsuranceJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['ID'] = id;
    data['necessity'] = finance == '1' ? AdLinkTabType.finance.name : AdLinkTabType.insurance.name;
    data['active'] = active;
    data['customer_label'] = customerLabel;
    data['full_name'] = fullName;
    data['social'] = social;
    data['description'] = description;
    data['social_zalo'] = socialZalo;
    data['social_facebook'] = socialFacebook;
    data['insurance_discount'] = insuranceDiscount;
    data['insurance_list'] = insuranceActiveArr;

    return data;
  }

  Map<String, dynamic> toCreateJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['ID'] = id;
    data['necessity'] = finance == '1' ? AdLinkTabType.finance.name : AdLinkTabType.insurance.name;
    data['active'] = "1";
    data['customer_label'] = customerLabel;
    data['full_name'] = fullName;
    data['social'] = social;
    data['description'] = description;
    data['social_zalo'] = socialZalo;
    data['social_facebook'] = socialFacebook;
    data['insurance_discount'] = insuranceDiscount;
    data['insurance_list'] = insuranceActiveArr;

    return data;
  }

  bool isShowContact() {
    if (showContact == '1') {
      return true;
    }

    return false;
  }

  bool isActiveLink() {
    return active == '1';
  }

  bool isShowSocialContact() {
    return showContact == '1';
  }

  bool isPhone() {
    return social?.contains(SocialContactType.phone.name) ?? false;
  }

  bool isZalo() {
    return social?.contains(SocialContactType.zalo.name) ?? false;
  }

  bool isFacebook() {
    return social?.contains(SocialContactType.facebook.name) ?? false;
  }

  bool isDisabled() {
    if (isZalo() && (socialZalo == null || socialZalo?.isEmpty == true)) {
      return true;
    }
    if (isFacebook() && (socialFacebook == null || socialFacebook?.isEmpty == true)) {
      return true;
    }

    return false;
  }

  bool isFinance() {
    return finance == '1';
  }

  bool isInsurance() {
    return !isFinance();
  }

  DetailLinkSetup copyWith({
    String? id,
    String? userId,
    String? pageId,
    String? active,
    String? description,
    String? customerLabel,
    String? finance,
    String? insurrance,
    String? views,
    String? total,
    String? deleted,
    String? boughtIns,
    String? fullName,
    String? socialPhone,
    String? socialZalo,
    String? socialFacebook,
    List<String>? social,
    String? refCode,
    String? itemLinks,
    String? createdAt,
    String? updatedAt,
    String? insuranceConfig,
    String? nextHandler,
    String? showContact,
    List<String>? socialArray,
    Map<String, String>? insuranceConfigArr,
    List<String>? insuranceActiveArr,
    Map<String, String>? insuranceDiscount,
    String? actionLink,
    int? totalFollow,
    int? totalAttended,
    int? totalSuccess,
  }) {
    return DetailLinkSetup(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      pageId: pageId ?? this.pageId,
      active: active ?? this.active,
      description: description ?? this.description,
      customerLabel: customerLabel ?? this.customerLabel,
      finance: finance ?? this.finance,
      insurrance: insurrance ?? this.insurrance,
      views: views ?? this.views,
      total: total ?? this.total,
      deleted: deleted ?? this.deleted,
      boughtIns: boughtIns ?? this.boughtIns,
      fullName: fullName ?? this.fullName,
      socialPhone: socialPhone ?? this.socialPhone,
      socialZalo: socialZalo ?? this.socialZalo,
      socialFacebook: socialFacebook ?? this.socialFacebook,
      social: social ?? this.social,
      refCode: refCode ?? this.refCode,
      itemLinks: itemLinks ?? this.itemLinks,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      insuranceConfig: insuranceConfig ?? this.insuranceConfig,
      nextHandler: nextHandler ?? this.nextHandler,
      showContact: showContact ?? this.showContact,
      socialArray: socialArray ?? this.socialArray,
      insuranceConfigArr: insuranceConfigArr ?? this.insuranceConfigArr,
      insuranceActiveArr: insuranceActiveArr ?? this.insuranceActiveArr,
      insuranceDiscount: insuranceDiscount ?? this.insuranceDiscount,
      actionLink: actionLink ?? this.actionLink,
      totalFollow: totalFollow ?? this.totalFollow,
      totalAttended: totalAttended ?? this.totalAttended,
      totalSuccess: totalSuccess ?? this.totalSuccess,
    );
  }
}

class InsuranceLinkSetup {
  String? iD;
  String? name;
  String? alias;
  String? itemTableName;
  String? brand;
  String? category;
  String? webviewURL;
  String? iconURL;
  String? iconURL2;
  String? iconURLProvider;
  String? description;
  String? status;
  String? position;
  String? accpetPaymetMethods;
  String? dbModelName;
  String? commRateID;
  String? isFeatured;
  String? platform;
  String? mfastGroup;
  String? groupName;
  String? groupPosition;
  String? isPlCrossSelling;
  String? extraConfig;
  String? backOfficeDiscount;
  String? commRateIDs;
  String? imgThumbnail;
  String? isHavePayment;
  String? isLocalModel;
  String? linkDocument;
  String? commPercent;
  bool? isDisable;

  InsuranceLinkSetup(
      {this.iD,
      this.name,
      this.alias,
      this.itemTableName,
      this.brand,
      this.category,
      this.webviewURL,
      this.iconURL,
      this.iconURL2,
      this.iconURLProvider,
      this.description,
      this.status,
      this.position,
      this.accpetPaymetMethods,
      this.dbModelName,
      this.commRateID,
      this.isFeatured,
      this.platform,
      this.mfastGroup,
      this.groupName,
      this.groupPosition,
      this.isPlCrossSelling,
      this.backOfficeDiscount,
      this.commRateIDs,
      this.imgThumbnail,
      this.isHavePayment,
      this.isLocalModel,
      this.linkDocument,
      this.commPercent,
      this.isDisable});

  InsuranceLinkSetup.fromJson(Map<String, dynamic> json) {
    iD = json['ID'];
    name = json['name'];
    alias = json['alias'];
    itemTableName = json['item_table_name'];
    brand = json['brand'];
    category = json['category'];
    webviewURL = json['webviewURL'];
    iconURL = json['iconURL'];
    iconURL2 = json['iconURL2'];
    iconURLProvider = json['iconURLProvider'];
    description = json['description'];
    status = json['status'];
    position = json['position'];
    accpetPaymetMethods = json['accpetPaymetMethods'];
    dbModelName = json['dbModelName'];
    commRateID = json['commRateID'];
    isFeatured = json['isFeatured'];
    platform = json['platform'];
    mfastGroup = json['mfastGroup'];
    groupName = json['groupName'];
    groupPosition = json['groupPosition'];
    isPlCrossSelling = json['is_pl_cross_selling'];
    extraConfig = json['extra_config'];
    backOfficeDiscount = json['back_office_discount'];
    commRateIDs = json['commRateIDs'];
    imgThumbnail = json['imgThumbnail'];
    isHavePayment = json['isHavePayment'];
    isLocalModel = json['is_local_model'];
    linkDocument = json['link_document'];
    commPercent = json['comm_percent'];
    isDisable = json['is_disable'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['ID'] = iD;
    data['name'] = name;
    data['alias'] = alias;
    data['item_table_name'] = itemTableName;
    data['brand'] = brand;
    data['category'] = category;
    data['webviewURL'] = webviewURL;
    data['iconURL'] = iconURL;
    data['iconURL2'] = iconURL2;
    data['iconURLProvider'] = iconURLProvider;
    data['description'] = description;
    data['status'] = status;
    data['position'] = position;
    data['accpetPaymetMethods'] = accpetPaymetMethods;
    data['dbModelName'] = dbModelName;
    data['commRateID'] = commRateID;
    data['isFeatured'] = isFeatured;
    data['platform'] = platform;
    data['mfastGroup'] = mfastGroup;
    data['groupName'] = groupName;
    data['groupPosition'] = groupPosition;
    data['is_pl_cross_selling'] = isPlCrossSelling;
    data['extra_config'] = extraConfig;
    data['back_office_discount'] = backOfficeDiscount;
    data['commRateIDs'] = commRateIDs;
    data['imgThumbnail'] = imgThumbnail;
    data['isHavePayment'] = isHavePayment;
    data['is_local_model'] = isLocalModel;
    data['link_document'] = linkDocument;
    data['comm_percent'] = commPercent;
    data['is_disable'] = isDisable;
    return data;
  }
}
