import 'package:flutter_module/common/enum/mtrade/promotion_implementation_method.dart';

import '../../../common/enum/mtrade/promotion_applicable_type.dart';
import '../../../common/enum/mtrade/promotion_discount_type.dart';
import '../../../common/extension/list_extension.dart';
import '../../../common/utils/datetime_util.dart';
import '../../../common/utils/format_util.dart';
import 'mtrade_promotion_data_model.dart';

class MTradePromotionModel {
  String? code;
  String? description;
  String? id;
  MasterObjectType? masterObjectType;
  MasterObjectType? masterPromotionApplicable;
  MasterObjectType? masterPromotionImplementationMethod;
  MasterObjectType? masterPromotionStatus;
  String? name;
  List<OmsPromotionCodes>? omsPromotionCodes;
  List<OmsPromotionConditions>? omsPromotionConditions;
  List<OmsPromotionDocuments>? omsPromotionDocuments;
  int? orderQuantity;
  int? orderQuantityAvailable;
  int? totalVoucherGenerated;
  int? totalVoucherGeneratedAvailable;
  int? status;
  String? timeEnd;
  String? timeStart;
  String? errorMessage;
  int? selectedCount;

  MTradePromotionModel({
    this.code,
    this.description,
    this.id,
    this.masterObjectType,
    this.masterPromotionApplicable,
    this.masterPromotionStatus,
    this.name,
    this.omsPromotionCodes,
    this.omsPromotionConditions,
    this.omsPromotionDocuments,
    this.orderQuantity,
    this.orderQuantityAvailable,
    this.totalVoucherGenerated,
    this.totalVoucherGeneratedAvailable,
    this.status,
    this.timeEnd,
    this.timeStart,
    this.errorMessage,
    this.selectedCount,
  });

  MTradePromotionModel.fromJson(Map<String, dynamic> json) {
    code = json['code'];
    description = json['description'];
    id = json['id'];
    masterObjectType =
        json['master_object_type'] != null ? MasterObjectType.fromJson(json['master_object_type']) : null;
    masterPromotionApplicable = json['master_promotion_applicable'] != null
        ? MasterObjectType.fromJson(json['master_promotion_applicable'])
        : null;
    masterPromotionImplementationMethod = json['master_promotion_implementation_method'] != null
        ? MasterObjectType.fromJson(json['master_promotion_implementation_method'])
        : null;
    masterPromotionStatus =
        json['master_promotion_status'] != null ? MasterObjectType.fromJson(json['master_promotion_status']) : null;
    name = json['name'];
    if (json['oms_promotion_codes'] != null) {
      omsPromotionCodes = <OmsPromotionCodes>[];
      json['oms_promotion_codes'].forEach((v) {
        omsPromotionCodes!.add(OmsPromotionCodes.fromJson(v));
      });
    }
    if (json['oms_promotion_conditions'] != null) {
      omsPromotionConditions = <OmsPromotionConditions>[];
      json['oms_promotion_conditions'].forEach((v) {
        omsPromotionConditions!.add(OmsPromotionConditions.fromJson(v));
      });
    }
    if (json['oms_promotion_documents'] != null) {
      omsPromotionDocuments = <OmsPromotionDocuments>[];
      json['oms_promotion_documents'].forEach((v) {
        omsPromotionDocuments!.add(OmsPromotionDocuments.fromJson(v));
      });
    }
    orderQuantity = json['order_quantity'];
    orderQuantityAvailable = json['order_quantity_available'];
    totalVoucherGenerated = json['total_voucher_generated'];
    totalVoucherGeneratedAvailable = json['total_voucher_generated_available'];
    status = json['status'];
    timeEnd = json['time_end'];
    timeStart = json['time_start'];
    errorMessage = json['error_message'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['code'] = code;
    data['description'] = description;
    data['id'] = id;
    if (masterObjectType != null) {
      data['master_object_type'] = masterObjectType!.toJson();
    }
    if (masterPromotionApplicable != null) {
      data['master_promotion_applicable'] = masterPromotionApplicable!.toJson();
    }
    if (masterPromotionImplementationMethod != null) {
      data['master_promotion_implementation_method'] = masterPromotionImplementationMethod!.toJson();
    }
    if (masterPromotionStatus != null) {
      data['master_promotion_status'] = masterPromotionStatus!.toJson();
    }
    data['name'] = name;
    if (omsPromotionCodes != null) {
      data['oms_promotion_codes'] = omsPromotionCodes!.map((v) => v.toJson()).toList();
    }
    if (omsPromotionConditions != null) {
      data['oms_promotion_conditions'] = omsPromotionConditions!.map((v) => v.toJson()).toList();
    }
    if (omsPromotionDocuments != null) {
      data['oms_promotion_documents'] = omsPromotionDocuments!.map((v) => v.toJson()).toList();
    }
    data['order_quantity'] = orderQuantity;
    data['order_quantity_available'] = orderQuantityAvailable;
    data['total_voucher_generated'] = totalVoucherGenerated;
    data['total_voucher_generated_available'] = totalVoucherGeneratedAvailable;
    data['status'] = status;
    data['time_end'] = timeEnd;
    data['time_start'] = timeStart;
    data['error_message'] = errorMessage;
    return data;
  }

  MTradePromotionModel copyWith({
    String? code,
    String? description,
    String? id,
    MasterObjectType? masterObjectType,
    MasterObjectType? masterPromotionApplicable,
    MasterObjectType? masterPromotionStatus,
    String? name,
    List<OmsPromotionCodes>? omsPromotionCodes,
    List<OmsPromotionConditions>? omsPromotionConditions,
    List<OmsPromotionDocuments>? omsPromotionDocuments,
    int? orderQuantity,
    int? orderQuantityAvailable,
    int? status,
    String? timeEnd,
    String? timeStart,
    String? errorMessage,
    bool? disabled,
    int? selectedCount,
  }) {
    return MTradePromotionModel(
      code: code ?? this.code,
      description: description ?? this.description,
      id: id ?? this.id,
      masterObjectType: masterObjectType ?? this.masterObjectType,
      masterPromotionApplicable: masterPromotionApplicable ?? this.masterPromotionApplicable,
      masterPromotionStatus: masterPromotionStatus ?? this.masterPromotionStatus,
      name: name ?? this.name,
      omsPromotionCodes: omsPromotionCodes ?? this.omsPromotionCodes,
      omsPromotionConditions: omsPromotionConditions ?? this.omsPromotionConditions,
      omsPromotionDocuments: omsPromotionDocuments ?? this.omsPromotionDocuments,
      orderQuantity: orderQuantity ?? this.orderQuantity,
      orderQuantityAvailable: orderQuantityAvailable ?? this.orderQuantityAvailable,
      status: status ?? this.status,
      timeEnd: timeEnd ?? this.timeEnd,
      timeStart: timeStart ?? this.timeStart,
      errorMessage: errorMessage ?? this.errorMessage,
      selectedCount: selectedCount ?? this.selectedCount,
    );
  }

  int getRemainTime() {
    return DateTimeUtil.convertStringRemainSeconds(
      timeEnd ?? "",
      format: DateTimeFormat.yyyy_MM_ddTHH_mm_ssSS,
      isFromUtc: true,
    );
  }

  bool isExpired() {
    return getRemainTime() <= 0;
  }

  String formatRemain() {
    return DateTimeUtil.formatRemainSecond(
      getRemainTime(),
      showRemainHourPerDay: true,
      showRemainHourPerHour: true,
    );
  }

  double getUsedPercent() {
    if (totalVoucherGenerated == null) {
      return 0;
    }
    return 1 - (totalVoucherGeneratedAvailable ?? 0) / (totalVoucherGenerated ?? 1);
  }

  bool isDisabled(List<String?> skus) {
    bool unselected = selectedCount == null || selectedCount == 0;
    OmsPromotionConditionItems? promotionConditionItem;
    for (var element in omsPromotionConditions ?? []) {
      for (var item in element.omsPromotionConditionItems) {
        if (skus.contains(item.omsProductVariation?.sku)) {
          promotionConditionItem = item;
          break;
        }
      }
      if (promotionConditionItem != null) break;
    }
    int? limit = promotionConditionItem?.limitQuantityAvailable;
    bool isLimit = limit != null && limit == 0;
    bool autoSelected =
        !isLimit && masterPromotionImplementationMethod?.code == PromotionImplementationMethod.AUTO_PROMOTION.name;
    return errorMessage?.isNotEmpty == true || (unselected && !autoSelected);
  }

  bool isSelected() {
    return selectedCount != null && selectedCount! > 0;
  }

  double getDiscount(List<String> skus) {
    double discount = 0;

    omsPromotionConditions?.getFirst()?.omsPromotionConditionItems?.forEach((e) {
      if (skus.contains(e.omsProductVariation?.sku)) {
        double promotionValue = e.promotionValue ?? 0;
        double productPrice = e.omsProductVariation?.price ?? 0;
        double promotionPrice = e.masterCollectTransactionType?.code == 'PERCENT'
            ? (promotionValue * productPrice / 100).ceilToDouble()
            : promotionValue;
        discount += promotionPrice;
      }
    });

    return discount;
  }

  bool isApplyMulti() {
    return masterPromotionApplicable?.code == PromotionApplicableType.applyMulti.value;
  }

  List<String> getTicketCodes() {
    if (omsPromotionCodes == null) {
      return [];
    }
    return omsPromotionCodes!.map((e) => e.code ?? "").toList();
  }

  String getPromotionConditionId() {
    return omsPromotionConditions.getFirst()?.id ?? '';
  }

  String getCurrency(List<String> skus) {
    var value =
        omsPromotionConditions?.getFirst()?.omsPromotionConditionItems?.getFirst()?.masterCollectTransactionType?.code;
    return value ?? "";
  }

  String getPromotionCurrencyTag(List<String> skus) {
    String result = "";
    final promotionValue = getPromotionValue();
    if (getCurrency(skus) == PromotionDiscountType.vnd.code) {
      result = FormatUtil.numberFormat(promotionValue);
    } else {
      result = "${FormatUtil.doubleFormat(promotionValue)}%";
    }
    return result;
  }

  double getPromotionValue() {
    var value = omsPromotionConditions?.getFirst()?.omsPromotionConditionItems?.getFirst()?.promotionValue;
    return value ?? 0;
  }

  double getPromotionPriceByQuantity(int? quantity, {required String sku}) {
    return getDiscount([sku]) * (quantity ?? 0);
  }

  String getPromotionCategory() {
    var value = omsPromotionConditions?.getFirst()?.masterPromotionCategory?.name;
    return value ?? "";
  }

  String getApplicablePromotion() {
    var value = masterObjectType?.code;
    return value ?? "";
  }

  List<String> getApplicableSkus() {
    var value = omsPromotionConditions
        ?.getFirst()
        ?.omsPromotionConditionItems
        ?.map((e) => e.omsProductVariation?.sku ?? "")
        .toList();
    return value ?? [];
  }
}
