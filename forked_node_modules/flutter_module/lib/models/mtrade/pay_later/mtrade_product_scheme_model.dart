import 'package:flutter_module/common/extension/int_extension.dart';
import 'package:flutter_module/common/utils/calculate_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/models/mtrade/pay_later/down_payment_model.dart';

import '../../../common/utils/format_util.dart';
import 'tenor_conversion_fee_model.dart';

/// value : 130
/// text : "Goi vay nhan vien"
/// originalName : "Gói trả chậm Nhân viên"
/// InterestRate : 0
/// ageMax : 60
/// ageMin : 20
/// conversationFee : null
/// coolingOff : 0
/// createdDate : "2023-03-13T10:49:14.72774+00:00"
/// downPaymentMax : 90
/// downPaymentMin : 10
/// downPaymentStep : 10
/// earlyRepaymentCharge : 1
/// fiPartner : ""
/// financialServices : 1
/// insurance : null
/// loanAmountMax : 30000000
/// loanAmountMin : 1000000
/// merchant : 2
/// overdueInterest : 0
/// productID : null
/// subventionFee : null
/// tenorMax : 10
/// tenorMin : 1
/// tenorStep : 1
/// status : "active"
/// objectType : "STAFF"

class MTradeProductSchemeModel {
  MTradeProductSchemeModel({
    this.schemeID,
    this.schemeName,
    this.text,
    this.originalName,
    this.interestRate,
    this.ageMax,
    this.ageMin,
    this.conversationFee,
    this.coolingOff,
    this.createdDate,
    this.downPaymentMax,
    this.downPaymentMin,
    this.downPaymentStep,
    this.earlyRepaymentCharge,
    this.fiPartner,
    this.financialServices,
    this.requireInsurance,
    this.insurance,
    this.loanAmountMax,
    this.loanAmountMin,
    this.merchant,
    this.overdueInterest,
    this.productID,
    this.subventionFee,
    this.tenorMax,
    this.tenorMin,
    this.tenorStep,
    this.status,
    this.objectType,
    this.loanPurpose,
    this.tenorConversionFees,
  });

  MTradeProductSchemeModel.fromJson(dynamic json) {
    schemeID = TextUtils.parseInt(json['schemeID']);
    schemeName = json['schemeName'];
    text = json['text'];
    originalName = json['originalName'];
    interestRate = TextUtils.parseDouble(json['InterestRate']);
    ageMax = TextUtils.parseInt(json['ageMax']);
    ageMin = TextUtils.parseInt(json['ageMin']);
    conversationFee = json['conversationFee'];
    coolingOff = TextUtils.parseInt(json['ageMin']);
    createdDate = json['createdDate'];
    downPaymentMax = TextUtils.parseDouble(json['downPaymentMax']);
    downPaymentMin = TextUtils.parseDouble(json['downPaymentMin']);
    downPaymentStep = TextUtils.parseDouble(json['downPaymentStep']);
    earlyRepaymentCharge = TextUtils.parseInt(json['earlyRepaymentCharge']);
    fiPartner = json['fiPartner'];
    financialServices = TextUtils.parseInt(json['financialServices']);
    requireInsurance = TextUtils.parseInt(json['requireInsurance']);
    insurance = TextUtils.parseDouble(json['insurance']);
    loanAmountMax = TextUtils.parseDouble(json['loanAmountMax']);
    loanAmountMin = TextUtils.parseDouble(json['loanAmountMin']);
    merchant = TextUtils.parseInt(json['merchant']);
    overdueInterest = TextUtils.parseInt(json['overdueInterest']);
    productID = TextUtils.parseInt(json['productID']);
    subventionFee = json['subventionFee'];
    tenorMax = TextUtils.parseInt(json['tenorMax']);
    tenorMin = TextUtils.parseInt(json['tenorMin']);
    tenorStep = TextUtils.parseInt(json['tenorStep']);
    status = json['status'];
    objectType = json['objectType'];
    loanPurpose = json['loanPurpose'];
    if (json['conversation_fee'] != null && (json['conversation_fee'] as List).isNotEmpty) {
      tenorConversionFees = [];
      json['conversation_fee'].forEach((v) {
        tenorConversionFees?.add(TenorConversionFeeSchemeModel.fromJson(v));
      });
      tenorConversionFees?.sort((a, b) {
        int tenorA = a.tenor ?? 0;
        int tenorB = b.tenor ?? 0;
        return tenorA.compareTo(tenorB);
      });
    }

    ///
    // tenorMax = 10;
    // tenorMin = 1;
    // tenorStep = 2;
    // tenorConversionFees = [];
  }

  int? schemeID;
  String? schemeName;
  String? text;
  String? originalName;
  double? interestRate;
  int? ageMax;
  int? ageMin;
  dynamic conversationFee;
  int? coolingOff;
  String? createdDate;
  double? downPaymentMax;
  double? downPaymentMin;
  double? downPaymentStep;
  int? earlyRepaymentCharge;
  String? fiPartner;
  int? financialServices;
  int? requireInsurance;
  double? insurance;
  double? loanAmountMax;
  double? loanAmountMin;
  int? merchant;
  int? overdueInterest;
  int? productID;
  dynamic subventionFee;
  int? tenorMax;
  int? tenorMin;
  int? tenorStep;
  String? status;
  String? objectType;
  String? loanPurpose;
  List<TenorConversionFeeSchemeModel>? tenorConversionFees;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['schemeID'] = schemeID;
    map['text'] = text;
    map['originalName'] = originalName;
    map['InterestRate'] = interestRate;
    map['ageMax'] = ageMax;
    map['ageMin'] = ageMin;
    map['conversationFee'] = conversationFee;
    map['coolingOff'] = coolingOff;
    map['createdDate'] = createdDate;
    map['downPaymentMax'] = downPaymentMax;
    map['downPaymentMin'] = downPaymentMin;
    map['downPaymentStep'] = downPaymentStep;
    map['earlyRepaymentCharge'] = earlyRepaymentCharge;
    map['fiPartner'] = fiPartner;
    map['financialServices'] = financialServices;
    map['requireInsurance'] = requireInsurance;
    map['insurance'] = insurance;
    map['loanAmountMax'] = loanAmountMax;
    map['loanAmountMin'] = loanAmountMin;
    map['merchant'] = merchant;
    map['overdueInterest'] = overdueInterest;
    map['productID'] = productID;
    map['subventionFee'] = subventionFee;
    map['tenorMax'] = tenorMax;
    map['tenorMin'] = tenorMin;
    map['tenorStep'] = tenorStep;
    map['status'] = status;
    map['objectType'] = objectType;
    map['loanPurpose'] = loanPurpose;
    if (tenorConversionFees != null) {
      map['conversation_fee'] = tenorConversionFees?.map((v) => v.toJson()).toList();
    }
    return map;
  }

  bool hasDownPayment() {
    final dpMax = downPaymentMax ?? 0;
    return dpMax > 0;
  }

  List<DownPaymentModel> getListDownPayment({required double? totalPrice}) {
    final dpMin = downPaymentMin ?? 0;
    final dpMax = downPaymentMax ?? 0;
    final dpStep = downPaymentStep ?? 0;
    final dpDistance = dpMax - dpMin;

    final List<DownPaymentModel> listDownPayment = List.generate(
      dpStep == 0 ? 1 : (dpDistance ~/ dpStep) + 1,
      (index) {
        final percent = dpMin + (dpStep * index);
        double downPaymentAmount = CalculateUtil.getPrice(
          price: totalPrice,
          percent: percent,
        );
        downPaymentAmount = downPaymentAmount.roundToThousands().toDouble();
        return DownPaymentModel(
          percent: percent,
          amount: downPaymentAmount,
          name: "${FormatUtil.doubleFormat(percent)}% (${FormatUtil.currencyDoubleFormat(downPaymentAmount)})",
        );
      },
    );

    return listDownPayment;
  }

  List<TenorConversionFeeSchemeModel> getListLoanTenor() {
    if (tenorConversionFees?.isNotEmpty ?? false) {
      return tenorConversionFees!;
    }

    final tenorMax = this.tenorMax ?? 0;
    final tenorMin = this.tenorMin ?? 0;
    final tenorStep = this.tenorStep ?? 0;
    final tenorDistance = tenorMax - tenorMin;

    final List<TenorConversionFeeSchemeModel> listLoanTenor = List.generate(
      tenorStep == 0 ? 1 : (tenorDistance ~/ tenorStep) + 1,
      (index) {
        final month = tenorMin + (tenorStep * index);
        return TenorConversionFeeSchemeModel(
          conversionFee: 0,
          tenor: month,
          name: "$month tháng",
        );
      },
    );

    return listLoanTenor;
  }
}
