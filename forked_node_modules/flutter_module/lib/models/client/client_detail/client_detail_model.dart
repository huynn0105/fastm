import 'package:flutter_module/common/extension/map_extension.dart';
import 'package:flutter_module/models/client/client_detail/client_document_model.dart';
import 'package:flutter_module/models/client/client_detail/client_project_model.dart';
import 'package:flutter_module/models/client/client_detail/client_project_waiting_model.dart';

/// ID : "22"
/// userID : "1240469574"
/// fullName : "NGUYỄN THỊ 9"
/// gender : null
/// dob : null
/// idNumber : "232692429"
/// mobilePhone : "0978523656"
/// email : null
/// province : null
/// district : null
/// ward : null
/// address : null
/// avatar : null
/// note : null
/// status : "1"
/// isPrioritized : "0"
/// isActive : "1"
/// createdDate : "2021-10-26 00:00:00"
/// updatedDate : "2023-12-08 16:29:53"
/// updatedBy : null
/// createdBy : null
/// projects : [{"ID":"1684","userCustomerID":"22","category":"pl","applicationID":"3094107","projectAlias":"cash24","appTableName":"main_apps","status":"1","isActive":"1","createdDate":"2021-10-26 00:00:00","createdBy":null,"updatedDate":"2021-10-26 00:00:00","updatedBy":null,"projectName":"Cash24","iconURL":"https://appay.cloudcms.vn/assets/img/project_logo/Cash24.png","webviewURL":"","url_detail":"https://appay-rc.cloudcms.vn/mfast/customer/appDetail?appID=1684","status_text":"Thành công"},{"ID":"1806","userCustomerID":"22","category":"pl","applicationID":"3094350","projectAlias":"cash24","appTableName":"main_apps","status":"1","isActive":"1","createdDate":"2021-10-26 00:00:00","createdBy":null,"updatedDate":"2021-10-26 00:00:00","updatedBy":null,"projectName":"Cash24","iconURL":"https://appay.cloudcms.vn/assets/img/project_logo/Cash24.png","webviewURL":"","url_detail":"https://appay-rc.cloudcms.vn/mfast/customer/appDetail?appID=1806","status_text":"Thành công"}]
/// district_name : ""
/// province_name : ""
/// documents : []
/// total_document : 0
/// from_text : "Đến từ hồ sơ tài chính"
/// projects_waiting : []
/// requirements : []
/// hideActions : true

class ClientDetailModel {
  ClientDetailModel({
    this.id,
    this.userID,
    this.fullName,
    this.gender,
    this.dob,
    this.idNumber,
    this.mobilePhone,
    this.email,
    this.province,
    this.district,
    this.ward,
    this.address,
    this.avatar,
    this.note,
    this.status,
    this.isPrioritized,
    this.isActive,
    this.createdDate,
    this.updatedDate,
    this.updatedBy,
    this.createdBy,
    this.projects,
    this.districtName,
    this.provinceName,
    this.documents,
    this.totalDocument,
    this.fromText,
    this.projectsWaiting,
    this.requirements,
    this.hideActions,
    this.iconURL,
    this.statusText,
    this.group,
  });

  ClientDetailModel.fromJson(dynamic json) {
    id = json['ID'];
    userID = json['userID'];
    fullName = json['fullName'];
    gender = json['gender'];
    dob = json['dob'];
    idNumber = json['idNumber'];
    mobilePhone = json['mobilePhone'];
    email = json['email'];
    province = json['province'];
    district = json['district'];
    ward = json['ward'];
    address = json['address'];
    avatar = json['avatar'];
    note = json['note'];
    status = json['status'];
    isPrioritized = json['isPrioritized'];
    isActive = json['isActive'];
    createdDate = json['createdDate'];
    updatedDate = json['updatedDate'];
    updatedBy = json['updatedBy'];
    createdBy = json['createdBy'];
    if (json['projects'] != null) {
      projects = [];
      json['projects'].forEach((v) {
        projects?.add(ClientProjectModel.fromJson(v));
      });
    }
    districtName = json['district_name'];
    provinceName = json['province_name'];
    if (json['documents'] != null) {
      documents = [];
      json['documents'].forEach((v) {
        documents?.add(ClientDocumentModel.fromJson(v));
      });
    }
    totalDocument = json['total_document'];
    fromText = json['from_text'];
    if (json['projects_waiting'] != null) {
      projectsWaiting = [];
      json['projects_waiting'].forEach((v) {
        projectsWaiting?.add(ClientProjectWaitingModel.fromJson(v));
      });
    }
    // if (json['requirements'] != null) {
    //   requirements = [];
    //   json['requirements'].forEach((v) {
    //     requirements?.add(Dynamic.fromJson(v));
    //   });
    // }
    hideActions = json['hideActions'];
    iconURL = json['iconURL'];
    statusText = json['statusText'];
    group = json['group'];
  }

  String? id;
  String? userID;
  String? fullName;
  String? gender;
  String? dob;
  String? idNumber;
  String? mobilePhone;
  String? email;
  String? province;
  String? district;
  String? ward;
  String? address;
  String? avatar;
  String? note;
  String? status;
  String? isPrioritized;
  String? isActive;
  String? createdDate;
  String? updatedDate;
  String? updatedBy;
  String? createdBy;
  List<ClientProjectModel>? projects;
  String? districtName;
  String? provinceName;
  List<ClientDocumentModel>? documents;
  int? totalDocument;
  String? fromText;
  List<ClientProjectWaitingModel>? projectsWaiting;
  List<dynamic>? requirements;
  bool? hideActions;
  String? iconURL;
  String? statusText;
  String? group;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['ID'] = id;
    map['userID'] = userID;
    map['fullName'] = fullName;
    map['gender'] = gender;
    map['dob'] = dob;
    map['idNumber'] = idNumber;
    map['mobilePhone'] = mobilePhone;
    map['email'] = email;
    map['province'] = province;
    map['district'] = district;
    map['ward'] = ward;
    map['address'] = address;
    map['avatar'] = avatar;
    map['note'] = note;
    map['status'] = status;
    map['isPrioritized'] = isPrioritized;
    map['isActive'] = isActive;
    map['createdDate'] = createdDate;
    map['updatedDate'] = updatedDate;
    map['updatedBy'] = updatedBy;
    map['createdBy'] = createdBy;
    if (projects != null) {
      map['projects'] = projects?.map((v) => v.toJson()).toList();
    }
    map['district_name'] = districtName;
    map['province_name'] = provinceName;
    if (documents != null) {
      map['documents'] = documents?.map((v) => v.toJson()).toList();
    }
    map['total_document'] = totalDocument;
    map['from_text'] = fromText;
    if (projectsWaiting != null) {
      map['projects_waiting'] = projectsWaiting?.map((v) => v.toJson()).toList();
    }
    if (requirements != null) {
      map['requirements'] = requirements?.map((v) => v.toJson()).toList();
    }
    map['hideActions'] = hideActions;
    map['iconURL'] = iconURL;
    map['statusText'] = statusText;
    map['group'] = group;
    return map;
  }

  ClientDetailModel copyWith({
    String? id,
    String? userID,
    String? fullName,
    String? gender,
    String? dob,
    String? idNumber,
    String? mobilePhone,
    String? email,
    String? province,
    String? district,
    String? ward,
    String? address,
    String? avatar,
    String? note,
    String? status,
    String? isPrioritized,
    String? isActive,
    String? createdDate,
    String? updatedDate,
    String? updatedBy,
    String? createdBy,
    List<ClientProjectModel>? projects,
    String? districtName,
    String? provinceName,
    List<ClientDocumentModel>? documents,
    int? totalDocument,
    String? fromText,
    List<ClientProjectWaitingModel>? projectsWaiting,
    List<dynamic>? requirements,
    bool? hideActions,
    String? iconURL,
    String? statusText,
    String? group,
  }) {
    return ClientDetailModel(
      id: id ?? this.id,
      userID: userID ?? this.userID,
      fullName: fullName ?? this.fullName,
      gender: gender ?? this.gender,
      dob: dob ?? this.dob,
      idNumber: idNumber ?? this.idNumber,
      mobilePhone: mobilePhone ?? this.mobilePhone,
      email: email ?? this.email,
      province: province ?? this.province,
      district: district ?? this.district,
      ward: ward ?? this.ward,
      address: address ?? this.address,
      avatar: avatar ?? this.avatar,
      note: note ?? this.note,
      status: status ?? this.status,
      isPrioritized: isPrioritized ?? this.isPrioritized,
      isActive: isActive ?? this.isActive,
      createdDate: createdDate ?? this.createdDate,
      updatedDate: updatedDate ?? this.updatedDate,
      updatedBy: updatedBy ?? this.updatedBy,
      createdBy: createdBy ?? this.createdBy,
      projects: projects ?? this.projects,
      districtName: districtName ?? this.districtName,
      provinceName: provinceName ?? this.provinceName,
      documents: documents ?? this.documents,
      totalDocument: totalDocument ?? this.totalDocument,
      fromText: fromText ?? this.fromText,
      projectsWaiting: projectsWaiting ?? this.projectsWaiting,
      requirements: requirements ?? this.requirements,
      hideActions: hideActions ?? this.hideActions,
      iconURL: iconURL ?? this.iconURL,
      statusText: statusText ?? this.statusText,
      group: group ?? this.group,
    );
  }

  ClientDetailModel merge(ClientDetailModel? obj) {
    final json = {
      ...toJson().removeFalsyValue(),
      ...?(obj?.toJson().removeFalsyValue()),
    };
    return ClientDetailModel.fromJson(json);
  }

  bool getIsPriority() {
    return isPrioritized == '1';
  }
}
