// ignore_for_file: public_member_api_docs, sort_constructors_first
class FilterClientModel {
  FilterTotal? total;
  List<FilterData>? data;

  FilterClientModel({this.total, this.data});

  FilterClientModel.fromJson(Map<String, dynamic> json) {
    total = json['total'] != null ? FilterTotal.fromJson(json['total']) : null;
    if (json['data'] != null) {
      data = <FilterData>[];
      json['data'].forEach((v) {
        data!.add(FilterData.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (total != null) {
      data['total'] = total!.toJson();
    }
    if (this.data != null) {
      data['data'] = this.data!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class FilterTotal {
  int? pl;
  int? insurance;
  int? priority;
  int? pageQc;
  int? daa;
  int? credit;
  int? mpl;
  int? trash;

  FilterTotal({this.pl, this.insurance, this.priority, this.pageQc, this.daa, this.credit, this.mpl, this.trash});

  FilterTotal.fromJson(Map<String, dynamic> json) {
    pl = json['pl'];
    insurance = json['insurance'];
    priority = json['priority'];
    pageQc = json['page_qc'];
    daa = json['daa'];
    credit = json['credit'];
    mpl = json['mpl'];
    trash = json['trash'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['pl'] = pl;
    data['insurance'] = insurance;
    data['priority'] = priority;
    data['page_qc'] = pageQc;
    data['daa'] = daa;
    data['credit'] = credit;
    data['mpl'] = mpl;
    data['trash'] = trash;
    return data;
  }
}

extension ExFilterTotal on FilterTotal {
  int getValue(String key) {
    switch (key) {
      case 'pl':
        return pl ?? 0;
      case 'insurance':
        return insurance ?? 0;
      case 'priority':
        return priority ?? 0;
      case 'page_qc':
        return pageQc ?? 0;
      case 'daa':
        return daa ?? 0;
      case 'credit':
        return credit ?? 0;
      case 'mpl':
        return mpl ?? 0;
      case 'trash':
        return trash ?? 0;
      case 'all':
        return (pl ?? 0) + (insurance ?? 0) + (priority ?? 0) + (pageQc ?? 0) + (daa ?? 0) + (credit ?? 0) + (mpl ?? 0);
      default:
        return 0;
    }
  }
}

class FilterData {
  List<String>? type;
  String? keyFilter;
  String? title;
  bool? isMultiSelect;
  List<FilterProjects>? projects;

  FilterData({this.type, this.keyFilter, this.title, this.isMultiSelect, this.projects});

  FilterData.fromJson(Map<String, dynamic> json) {
    type = json['type'].cast<String>();
    keyFilter = json['key_filter'];
    title = json['title'];
    isMultiSelect = json['isMultiSelect'];
    if (json['projects'] != null) {
      projects = <FilterProjects>[];
      json['projects'].forEach((v) {
        projects!.add(FilterProjects.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['type'] = type;
    data['key_filter'] = keyFilter;
    data['title'] = title;
    data['isMultiSelect'] = isMultiSelect;
    if (projects != null) {
      data['projects'] = projects!.map((v) => v.toJson()).toList();
    }
    return data;
  }

  FilterData copyWith({
    List<String>? type,
    String? keyFilter,
    String? title,
    bool? isMultiSelect,
    List<FilterProjects>? projects,
  }) {
    return FilterData(
      type: type ?? this.type,
      keyFilter: keyFilter ?? this.keyFilter,
      title: title ?? this.title,
      isMultiSelect: isMultiSelect ?? this.isMultiSelect,
      projects: projects ?? this.projects,
    );
  }
}

class FilterProjects {
  String? iD;
  String? projectName;
  String? projectAlias;
  String? name;
  String? alias;
  String? desc;
  String? group;
  String? image;
  String? extraConfig;
  String? supGroupId;
  String? createdDate;
  String? updatedDate;
  String? id;
  String? userId;
  String? customerLabel;
  String? pageId;
  String? active;
  String? views;
  String? finance;
  String? insurrance;
  String? title;

  FilterProjects(
      {this.iD,
      this.projectName,
      this.projectAlias,
      this.name,
      this.alias,
      this.desc,
      this.group,
      this.image,
      this.extraConfig,
      this.supGroupId,
      this.createdDate,
      this.updatedDate,
      this.id,
      this.userId,
      this.customerLabel,
      this.pageId,
      this.active,
      this.views,
      this.finance,
      this.insurrance,
      this.title});

  FilterProjects.fromJson(Map<String, dynamic> json) {
    iD = json['ID'].toString();
    projectName = json['projectName'];
    projectAlias = json['projectAlias'];
    name = json['name'];
    alias = json['alias'];
    desc = json['desc'];
    group = json['group'];
    image = json['image'];
    extraConfig = json['extra_config'];
    supGroupId = json['sup_group_id'];
    createdDate = json['createdDate'];
    updatedDate = json['updatedDate'];
    id = json['id'];
    userId = json['user_id'];
    customerLabel = json['customer_label'];
    pageId = json['page_id'];
    active = json['active'];
    views = json['views'];
    finance = json['finance'];
    insurrance = json['insurrance'];
    title = json['title'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['ID'] = iD;
    data['projectName'] = projectName;
    data['projectAlias'] = projectAlias;
    data['name'] = name;
    data['alias'] = alias;
    data['desc'] = desc;
    data['group'] = group;
    data['image'] = image;
    data['extra_config'] = extraConfig;
    data['sup_group_id'] = supGroupId;
    data['createdDate'] = createdDate;
    data['updatedDate'] = updatedDate;
    data['id'] = id;
    data['user_id'] = userId;
    data['customer_label'] = customerLabel;
    data['page_id'] = pageId;
    data['active'] = active;
    data['views'] = views;
    data['finance'] = finance;
    data['insurrance'] = insurrance;
    data['title'] = title;
    return data;
  }
}
