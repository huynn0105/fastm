import 'package:flutter_module/common/enum/shipper/delivery_image_type.dart';
import 'package:flutter_module/common/utils/datetime_util.dart';
import 'package:flutter_module/models/shipper/order/oms_order_history.dart';

import '../../../common/enum/mtrade/payment_type.dart';
import '../../general_object.dart';
import 'oms_customer.dart';
import 'oms_order_documents.dart';
import 'oms_order_items.dart';

class OrderDetail {
  OrderDetail({
    this.id,
    this.code,
    this.orderDeliveryCode,
    this.employee,
    this.deliveryStatus,
    this.deliveryFee,
    this.note,
    this.customer,
    this.created,
    this.merchant,
    this.orderDate,
    this.paymentDate,
    this.orderStatus,
    this.paymentMethod,
    this.paymentStatus,
    this.prepaymentAmount,
    this.sumOrder,
    this.unitDelivery,
    this.unitSales,
    this.updated,
    this.warehouse,
    this.masterDeliveryStatus,
    this.masterPaymentsStatus,
    this.masterOrderStatus,
    this.unitSale,
    this.processBy,
    this.omsOrderDocuments,
    this.omsCustomer,
    this.masterUnitDelivery,
    this.masterWarehouse,
    this.omsOrderItems,
    this.omsOrderHistories,
    this.paymentTransactionId,
    this.paymentType,
    this.paymentLink,
    this.systemNotUpdatePaid,
    this.errorGatewayCode,
  });

  OrderDetail.fromJson(dynamic json) {
    id = json['id'];
    code = json['code'];
    orderDeliveryCode = json['order_delivery_code'];
    employee = json['employee'];
    deliveryStatus = json['delivery_status'];
    deliveryFee = json['delivery_fee'];
    note = json['note'];
    customer = json['customer'];
    created = json['created'];
    merchant = json['merchant'];
    orderDate = json['order_date'];
    paymentDate = json['payment_date'];
    orderStatus = json['order_status'];
    paymentStatus = json['payment_status'];
    prepaymentAmount = json['prepayment_amount'];
    sumOrder = json['sum_order'];
    unitDelivery = json['unit_delivery'];
    unitSales = json['unit_sales'];
    updated = json['updated'];
    warehouse = json['warehouse'];
    paymentMethod =
      json['master_payment_method'] != null ? GeneralObject.fromJson(json['master_payment_method']) : null;
    masterDeliveryStatus =
        json['master_delivery_status'] != null ? GeneralObject.fromJson(json['master_delivery_status']) : null;
    masterPaymentsStatus =
        json['master_payments_status'] != null ? GeneralObject.fromJson(json['master_payments_status']) : null;
    masterOrderStatus =
        json['master_order_status'] != null ? GeneralObject.fromJson(json['master_order_status']) : null;
    unitSale = json['unit_sale'];
    processBy = json['process_by'];
    if (json['oms_order_documents'] != null) {
      omsOrderDocuments = [];
      json['oms_order_documents'].forEach((v) {
        omsOrderDocuments?.add(OmsOrderDocuments.fromJson(v));
      });
    }
    omsCustomer = json['oms_customer'] != null ? OmsCustomer.fromJson(json['oms_customer']) : null;
    masterUnitDelivery = json['master_unit_delivery'];
    masterWarehouse = json['master_warehouse'] != null ? GeneralObject.fromJson(json['master_warehouse']) : null;
    if (json['oms_order_items'] != null) {
      omsOrderItems = [];
      json['oms_order_items'].forEach((v) {
        omsOrderItems?.add(OmsOrderItems.fromJson(v));
      });
    }
    if (json['oms_order_histories'] != null) {
      omsOrderHistories = [];
      json['oms_order_histories'].forEach((v) {
        omsOrderHistories?.add(OmsOrderHistory.fromJson(v));
      });
      omsOrderHistories!.sort((a, b) {
        DateTime? dateA = DateTimeUtil.getDate(
          a.operationDate ?? '',
          format: DateTimeFormat.yyyy_MM_ddTHH_mm_ssSS,
        );
        DateTime? dateB = DateTimeUtil.getDate(
          b.operationDate ?? '',
          format: DateTimeFormat.yyyy_MM_ddTHH_mm_ssSS,
        );
        int intA = dateA?.millisecondsSinceEpoch ?? 0;
        int intB = dateB?.millisecondsSinceEpoch ?? 0;
        return intB.compareTo(intA);
      });
    }
    isMpl = json['isMpl'];
    paymentTransactionId = json['payment_transaction_id'];
    paymentType =
    json['master_payment_type'] != null ? GeneralObject.fromJson(json['master_payment_type']) : null;
    final paymentJson = json['oms_link_payment_on_deliveries'] ?? [];
    paymentLink = paymentJson is List && paymentJson.isNotEmpty ? paymentJson.first['link'] : null;
    systemNotUpdatePaid = json['system_not_update_paid'];
    errorGatewayCode = json['error_pod_payment_gateway_code'];
  }

  String? id;
  String? code;
  String? orderDeliveryCode;
  dynamic employee;
  dynamic deliveryStatus;
  dynamic deliveryFee;
  dynamic note;
  String? customer;
  String? created;
  String? merchant;
  String? orderDate;
  String? paymentDate;
  int? orderStatus;
  GeneralObject? paymentMethod;
  int? paymentStatus;
  int? prepaymentAmount;
  int? sumOrder;
  dynamic unitDelivery;
  dynamic unitSales;
  dynamic updated;
  int? warehouse;
  GeneralObject? masterDeliveryStatus;
  GeneralObject? masterPaymentsStatus;
  GeneralObject? masterOrderStatus;
  dynamic unitSale;
  dynamic processBy;
  List<OmsOrderDocuments>? omsOrderDocuments;
  OmsCustomer? omsCustomer;
  dynamic masterUnitDelivery;
  GeneralObject? masterWarehouse;
  List<OmsOrderItems>? omsOrderItems;
  List<OmsOrderHistory>? omsOrderHistories;
  bool? isMpl;
  String? paymentTransactionId;
  GeneralObject? paymentType;
  String? paymentLink;
  String? errorGatewayCode;
  bool? systemNotUpdatePaid;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['id'] = id;
    map['code'] = code;
    map['order_delivery_code'] = orderDeliveryCode;
    map['employee'] = employee;
    map['delivery_status'] = deliveryStatus;
    map['delivery_fee'] = deliveryFee;
    map['note'] = note;
    map['customer'] = customer;
    map['created'] = created;
    map['merchant'] = merchant;
    map['order_date'] = orderDate;
    map['payment_date'] = paymentDate;
    map['order_status'] = orderStatus;
    map['payment_status'] = paymentStatus;
    map['prepayment_amount'] = prepaymentAmount;
    map['sum_order'] = sumOrder;
    map['unit_delivery'] = unitDelivery;
    map['unit_sales'] = unitSales;
    map['updated'] = updated;
    map['warehouse'] = warehouse;
    map['master_delivery_status'] = masterDeliveryStatus;
    if (paymentMethod != null) {
      map['master_payment_method'] = paymentMethod?.toJson();
    }
    if (masterPaymentsStatus != null) {
      map['master_payments_status'] = masterPaymentsStatus?.toJson();
    }
    if (masterOrderStatus != null) {
      map['master_order_status'] = masterOrderStatus?.toJson();
    }
    map['unit_sale'] = unitSale;
    map['process_by'] = processBy;
    if (omsOrderDocuments != null) {
      map['oms_order_documents'] = omsOrderDocuments?.map((v) => v.toJson()).toList();
    }
    if (omsCustomer != null) {
      map['oms_customer'] = omsCustomer?.toJson();
    }
    map['master_unit_delivery'] = masterUnitDelivery;
    if (masterWarehouse != null) {
      map['master_warehouse'] = masterWarehouse?.toJson();
    }
    if (omsOrderItems != null) {
      map['oms_order_items'] = omsOrderItems?.map((v) => v.toJson()).toList();
    }
    if (omsOrderHistories != null) {
      map['oms_order_histories'] = omsOrderHistories?.map((v) => v.toJson()).toList();
    }
    if (isMpl != null) {
      map['isMpl'] = isMpl;
    }
    if (paymentTransactionId != null) {
      map['payment_transaction_id'] = paymentTransactionId;
    }
    if (paymentType != null) {
      map['master_payment_type'] = paymentType?.toJson();
    }
    if (systemNotUpdatePaid != null) {
      map['system_not_update_paid'] = systemNotUpdatePaid;
    }
    if (errorGatewayCode != null) {
      map['error_pod_payment_gateway_code'] = errorGatewayCode;
    }
    return map;
  }

  GeneralObject? getRiskLevel() {
    List<GeneralObject?> riskLevels =
        omsOrderItems?.map((v) => v.omsProductVariation?.omsProduct?.riskLevel).toList() ?? [];
    riskLevels.sort((a, b) {
      int aId = a?.id ?? 0;
      int bId = b?.id ?? 0;
      return aId.compareTo(bId);
    });
    if (riskLevels.isEmpty) return null;
    return riskLevels.first;
  }

  List<OmsOrderDocuments> getImageDocuments(DeliveryImageType type) {
    return omsOrderDocuments?.where((element) => element.masterDocumentType?.code == type.name).toList() ?? [];
  }

  bool isPaymentOnDelivery() {
    return paymentType?.code == MTradePaymentType.onDelivery.code;
  }
}
