import 'package:flutter_module/common/utils/text_util.dart';

class HistoryIncomeItemModel {
  String? id;
  dynamic transCode;
  String? transTitle;
  String? transDate;
  double? creditAmount;
  dynamic fromSubscriptionId;
  String? toUserId;
  dynamic toUserIdUnder1;
  dynamic toUserIdPath;
  dynamic fromUserIdRefLevel;
  String? status;
  double? newBalance;
  dynamic financeNote;
  String? isBanking;
  String? amountWithdrawal;
  String? amountWithdrawalInMonth;
  String? totalTaxInMonth;
  String? taxPrevious;
  String? netAmount;
  dynamic shopId;
  dynamic dealerId;
  dynamic taxFee;
  dynamic referralId;
  dynamic financeBy;
  dynamic productName;
  dynamic internalNote;
  String? isTaxIncome;
  dynamic bankIdNumber;
  String? crontab;
  String? taxIncome;
  dynamic productId;
  String? staffType;
  String? taxMonth;
  String? isDept;
  dynamic bankingId;
  String? category;
  String? referralItemId;
  dynamic refundTransId;
  String? model;
  String? subs;
  String? source;
  String? projectAlias;
  String? beforeTax;
  String? sourceCate;
  dynamic rowSession;
  dynamic contestDpId;
  dynamic expiredDateHolding;
  dynamic typeHolding;
  dynamic amountCommHolding;

  HistoryIncomeItemModel(
      {this.id,
      this.transCode,
      this.transTitle,
      this.transDate,
      this.creditAmount,
      this.fromSubscriptionId,
      this.toUserId,
      this.toUserIdUnder1,
      this.toUserIdPath,
      this.fromUserIdRefLevel,
      this.status,
      this.newBalance,
      this.financeNote,
      this.isBanking,
      this.amountWithdrawal,
      this.amountWithdrawalInMonth,
      this.totalTaxInMonth,
      this.taxPrevious,
      this.netAmount,
      this.shopId,
      this.dealerId,
      this.taxFee,
      this.referralId,
      this.financeBy,
      this.productName,
      this.internalNote,
      this.isTaxIncome,
      this.bankIdNumber,
      this.crontab,
      this.taxIncome,
      this.productId,
      this.staffType,
      this.taxMonth,
      this.isDept,
      this.bankingId,
      this.category,
      this.referralItemId,
      this.refundTransId,
      this.model,
      this.subs,
      this.source,
      this.projectAlias,
      this.beforeTax,
      this.sourceCate,
      this.rowSession,
      this.contestDpId,
      this.expiredDateHolding,
      this.typeHolding,
      this.amountCommHolding});

  HistoryIncomeItemModel.fromJson(Map<String, dynamic> json) {
    id = json["ID"];
    transCode = json["transCode"];
    transTitle = json["transTitle"];
    transDate = json["transDate"];
    creditAmount = TextUtils.parseDouble(json["creditAmount"]);
    fromSubscriptionId = json["fromSubscriptionID"];
    toUserId = json["toUserID"];
    toUserIdUnder1 = json["toUserID_under1"];
    toUserIdPath = json["toUserID_path"];
    fromUserIdRefLevel = json["fromUserID_refLevel"];
    status = json["status"];
    newBalance = TextUtils.parseDouble(json["newBalance"]);
    financeNote = json["finance_note"];
    isBanking = json["is_banking"];
    amountWithdrawal = json["amount_withdrawal"];
    amountWithdrawalInMonth = json["amount_withdrawal_in_month"];
    totalTaxInMonth = json["total_tax_in_month"];
    taxPrevious = json["tax_previous"];
    netAmount = json["net_amount"];
    shopId = json["shopID"];
    dealerId = json["dealerID"];
    taxFee = json["tax_fee"];
    referralId = json["referralID"];
    financeBy = json["finance_by"];
    productName = json["productName"];
    internalNote = json["internal_note"];
    isTaxIncome = json["is_tax_income"];
    bankIdNumber = json["bank_idNumber"];
    crontab = json["crontab"];
    taxIncome = json["tax_income"];
    productId = json["productID"];
    staffType = json["staff_type"];
    taxMonth = json["tax_month"];
    isDept = json["is_dept"];
    bankingId = json["bankingID"];
    category = json["category"];
    referralItemId = json["referralItemID"];
    refundTransId = json["refundTransID"];
    model = json["model"];
    subs = json["subs"];
    source = json["source"];
    projectAlias = json["projectAlias"];
    beforeTax = json["beforeTax"];
    sourceCate = json["sourceCate"];
    rowSession = json["row_session"];
    contestDpId = json["contest_dp_id"];
    expiredDateHolding = json["expiredDateHolding"];
    typeHolding = json["typeHolding"];
    amountCommHolding = json["amountCommHolding"];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data["ID"] = id;
    data["transCode"] = transCode;
    data["transTitle"] = transTitle;
    data["transDate"] = transDate;
    data["creditAmount"] = creditAmount;
    data["fromSubscriptionID"] = fromSubscriptionId;
    data["toUserID"] = toUserId;
    data["toUserID_under1"] = toUserIdUnder1;
    data["toUserID_path"] = toUserIdPath;
    data["fromUserID_refLevel"] = fromUserIdRefLevel;
    data["status"] = status;
    data["newBalance"] = newBalance;
    data["finance_note"] = financeNote;
    data["is_banking"] = isBanking;
    data["amount_withdrawal"] = amountWithdrawal;
    data["amount_withdrawal_in_month"] = amountWithdrawalInMonth;
    data["total_tax_in_month"] = totalTaxInMonth;
    data["tax_previous"] = taxPrevious;
    data["net_amount"] = netAmount;
    data["shopID"] = shopId;
    data["dealerID"] = dealerId;
    data["tax_fee"] = taxFee;
    data["referralID"] = referralId;
    data["finance_by"] = financeBy;
    data["productName"] = productName;
    data["internal_note"] = internalNote;
    data["is_tax_income"] = isTaxIncome;
    data["bank_idNumber"] = bankIdNumber;
    data["crontab"] = crontab;
    data["tax_income"] = taxIncome;
    data["productID"] = productId;
    data["staff_type"] = staffType;
    data["tax_month"] = taxMonth;
    data["is_dept"] = isDept;
    data["bankingID"] = bankingId;
    data["category"] = category;
    data["referralItemID"] = referralItemId;
    data["refundTransID"] = refundTransId;
    data["model"] = model;
    data["subs"] = subs;
    data["source"] = source;
    data["projectAlias"] = projectAlias;
    data["beforeTax"] = beforeTax;
    data["sourceCate"] = sourceCate;
    data["row_session"] = rowSession;
    data["contest_dp_id"] = contestDpId;
    data["expiredDateHolding"] = expiredDateHolding;
    data["typeHolding"] = typeHolding;
    data["amountCommHolding"] = amountCommHolding;
    return data;
  }
}
