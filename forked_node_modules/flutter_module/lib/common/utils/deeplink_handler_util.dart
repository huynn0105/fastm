import 'package:app_settings/app_settings.dart';
import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/enum/deeplink_path.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/log_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/env_data.dart';
import 'package:flutter_module/features/home/repository/home_repository.dart';
import 'package:flutter_module/routes/route_path.dart';
import 'package:flutter_module/routes/routes.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:flutter_module/services/api/home_data/payload/gen_project_link_payload.dart';
import 'package:flutter_module/services/bridge/bridge_service.dart';
import 'package:url_launcher/url_launcher_string.dart';

class DeepLinkHandlerUtil {
  DeepLinkHandlerUtil._();

  ///
  static Map<String, dynamic> decodeURL(String url) {
    String decodedURL = Uri.decodeComponent(url.replaceAll(RegExp(r'\+'), '%20'));
    // replace {{br}} to \n
    decodedURL = decodedURL.replaceAll('{{br}}', '\n');
    // -
    String path = '';
    dynamic params;
    // --
    int queryIndex = decodedURL.indexOf('?');
    if (queryIndex < 0) {
      path = decodedURL;
      params = {};
    } else {
      path = decodedURL.substring(0, queryIndex);
      String paramsString = decodedURL.substring(queryIndex + 1);
      if (path == DeepLinkPath.share.getPath()) {
        int contentIndex = paramsString.indexOf('=');
        params = {
          'content': paramsString.substring(contentIndex + 1),
        };
      } else if (path == DeepLinkPath.copy.getPath()) {
        int contentIndex = paramsString.indexOf('=');
        params = {
          'text': paramsString.substring(contentIndex + 1),
        };
      } else if (path == DeepLinkPath.browserOpen.getPath()) {
        int contentIndex = paramsString.indexOf('=');
        params = {
          'url': paramsString.substring(contentIndex + 1),
        };
      } else {
        List<String> paramsList = paramsString.split('&');
        params = paramsList.fold({}, (acc, item) {
          List<String> pairs = item.split('=');
          if (pairs.length < 2) {
            return acc;
          }
          if (pairs.length == 2) {
            acc[pairs[0]] = pairs[1];
          }
          // case contain = into value lparis
          if (pairs.length > 2) {
            List<String> pairString = [...pairs];
            pairString.removeAt(0);
            String value = pairString.join('=');
            acc[pairs[0]] = value;
          }
          // fix missing signer char + (CIMB)
          if (acc['injectFunc'] != null) {
            acc['injectFunc'] = acc['injectFunc'].replaceAll(RegExp(r'\s'), '+');
          }
          return acc;
        });

        if (params['view'] == 'webview') {
          params['url'] = Uri.decodeFull(params['url']);
        }

        // retry map params into url
        if (params != null && params['url'] != null) {
          String originUrl = params['url'];
          String query = '';
          params.forEach((key, value) {
            if (key != 'url' && key != 'injectFunc' && key != 'view' && key != 'title' && value != null) {
              query = '$query&$key=$value';
            }
          });
          if (query.isNotEmpty) {
            if (originUrl.contains('?')) {
              originUrl += '$originUrl&$query';
            } else {
              originUrl += '$originUrl?$query';
            }
          }
          params['url'] = originUrl;
        }
      }
    }
    // --
    return {
      'path': path,
      'params': params,
    };
  }

  static void handleURL({
    required String raw,
  }) {
    raw = raw.replaceAll(AppConstants.appayDeeplinkScheme, EnvData.instance.deepLinkBaseUrl);

    AppLog.d('DeepLinkUtil', 'raw: $raw');

    final context = getItInstance.get<AppRouter>().navigatorKey.currentContext;

    ///
    Map<String, dynamic> json = decodeURL(raw);
    String path = json['path'] ?? '';
    Map<String, dynamic> params = Map<String, dynamic>.from(json['params'] ?? {});

    /// mfastmobiledev://chat/single?userID=2049610768
    if (path == DeepLinkPath.singleChat.getPath()) {
      _onOpenSingleChat(context, params);
      return;
    }

    /// mfastmobiledev://chat/group?threadID=-Nl6mpeSQFnlfYdzvRGX
    if (path == DeepLinkPath.groupChat.getPath()) {
      _onOpenGroupChat(context, params);
      return;
    }

    ///
    if (path == DeepLinkPath.joinGroup.getPath()) {
      _onJoinGroupChat(context, params);
      return;
    }

    /// mfastmobiledev://callsip/?num=012345678&hideNum=true&name=LEVANA&param1=abc
    if (path == DeepLinkPath.sipCall.getPath()) {
      _onOpenSipCall(context, params);
      return;
    }

    /// mfastmobiledev://callsip?url=012345678
    if (path == DeepLinkPath.sipCallSupport.getPath()) {
      _onOpenSipCallSupport(context, params);
      return;
    }

    /// mfastmobiledev://copy/?text=abc
    if (path == DeepLinkPath.copy.getPath()) {
      _onCopy(context, params);
      return;
    }

    /// mfastmobiledev://goback
    if (path == DeepLinkPath.goBack.getPath()) {
      _onGoBack(context, params);
      return;
    }

    /// mfastmobiledev://open?view=os_setting
    /// mfastmobiledev://open?view=user_point
    if (path == DeepLinkPath.open.getPath()) {
      _onOpenView(context, params);
      return;
    }

    /// mfastmobiledev://sms?number=123456789&body=hello
    if (path == DeepLinkPath.sms.getPath()) {
      _onOpenSMS(context, params);
      return;
    }

    /// mfastmobiledev://open_ctv
    if (path == DeepLinkPath.openCtv.getPath()) {
      _onOpenCTV(context, params);
      return;
    }

    /// mfastmobiledev://event?type=type&product=product
    if (path == DeepLinkPath.event.getPath()) {
      _onLogEvent(context, params);
      return;
    }

    /// mfastmobiledev://share?content=https://mfast.vn/abc?abc=ynx
    if (path == DeepLinkPath.share.getPath()) {
      _onShare(context, params);
      return;
    }

    ///
    if (path == DeepLinkPath.genLinkRefAndShare.getPath()) {
      _onGenLinkAndShare(context, params);
      return;
    }

    ///
    if (path == DeepLinkPath.inAppReview.getPath()) {
      _onInAppReview(context, params);
      return;
    }

    ///
    if (path == DeepLinkPath.browserOpen.getPath()) {
      _onOpenBrowser(context, params);
      return;
    }

    ///
    if (path == DeepLinkPath.vnPay.getPath()) {
      _onOpenVNPay(context, params);
      return;
    }

    /// mfastmobiledev://popToTop
    if (path == DeepLinkPath.popToTop.getPath()) {
      _onPopToTop(context, params);
      return;
    }
  }

  static void _onOpenSingleChat(BuildContext? context, Map<String, dynamic> params) {
    final userID = params['userID'] ?? '';
    if (TextUtils.isEmpty(userID)) {
      return;
    }
    getItInstance.get<AppRouter>().push(ChatRoute(chatUserID: userID));
  }

  static void _onOpenGroupChat(BuildContext? context, Map<String, dynamic> params) {
    final threadID = params['threadID'];
    if (TextUtils.isEmpty(threadID)) {
      return;
    }
    getItInstance.get<AppRouter>().push(ChatRoute(threadID: threadID));
  }

  static void _onJoinGroupChat(BuildContext? context, Map<String, dynamic> params) {
    final threadID = params['threadID'];
    if (TextUtils.isEmpty(threadID)) {
      return;
    }
    // TODO: handle
  }

  static void _onOpenSipCall(BuildContext? context, Map<String, dynamic> params) {
    // String num = params['num'] ?? '';
    // String hideNum = params['hideNum'] ?? '';
    // String name = params['name'] ?? '';
    // String param1 = params['param1'] ?? '';
    // String param2 = params['param2'] ?? '';
    // String param3 = params['param3'] ?? '';
    // String param4 = params['param4'] ?? '';
    // String param5 = params['param5'] ?? '';

    // if (TextUtils.isEmpty(num)) {
    //   return;
    // }

    // TODO: handle
  }

  static void _onOpenSipCallSupport(BuildContext? context, Map<String, dynamic> params) {
    // TODO: handle
  }

  static void _onCopy(BuildContext? context, Map<String, dynamic> params) {
    final text = params['text'] ?? '';
    if (TextUtils.isEmpty(text)) {
      return;
    }
    GlobalFunction.copyText(text);
    if (context != null && context.mounted) {
      ToastProvider.instance.showCopy(context: context);
    }
  }

  static void _onGoBack(BuildContext? context, Map<String, dynamic> params) {
    final router = getItInstance.get<AppRouter>();
    if (router.canPop()) {
      router.pop();
    }
  }

  static void _onOpenView(BuildContext? context, Map<String, dynamic> params) {
    var innerView = params['view'];
    var innerParams = Map<String, String>.from(params)..removeWhere((key, value) => key == 'view');

    final viewType = DeepLinkView.values.firstWhereOrNull((e) => e.value == innerView);

    switch (viewType) {
      case DeepLinkView.osSetting:
        AppSettings.openAppSettings();
        return;
      case DeepLinkView.userPoint:
        final title = params['title'] ?? '';
        final url = '${EnvData.instance.baseUrl}/history/point';
        getItInstance.get<AppRouter>().push(WebViewRoute(title: title, url: url));
        return;
      case DeepLinkView.homeShop:
        // TODO: handle -> not implement ShopPage -> App didn't used
        return;
      case DeepLinkView.webview:
        final title = params['title'] ?? '';
        final url = params['url'] ?? '';
        final injectFunc = params['injectFunc'] ?? '';
        getItInstance.get<AppRouter>().push(WebViewRoute(title: title, url: url, injectFunc: injectFunc));
        return;
      case DeepLinkView.survey:
        // TODO: handle -> not implement SurveyPage
        return;
      case DeepLinkView.services:
        // TODO: handle -> not implement ServicePage -> App didn't used
        return;
      case DeepLinkView.news:
        final focusedTabIndex = params['focusedTabIndex'] ?? '';
        final newsTabIndex = params['newsTabIndex'] ?? '';
        getItInstance.get<AppRouter>().push(NewsRoute(focusedTabIndex: focusedTabIndex, newsTabIndex: newsTabIndex));
        return;
      case DeepLinkView.osTicket:
        getItInstance.get<AppRouter>().push(ChatRoute());
        return;
      case DeepLinkView.customer:
        // TODO: handle
        return;
      default:
        break;
    }

    if (innerView == 'Flutter') {
      innerView = (params['path'] ?? innerParams['name'] ?? '') as String;
      innerView = innerView.replaceAll('/', '');
      innerParams.removeWhere(
        (key, value) => [
          'name',
          'path',
        ].contains(key),
      );
    }

    var innerURI = Uri.parse('/$innerView');
    var uri = innerURI.replace(queryParameters: {...innerURI.queryParameters, ...innerParams});
    if (uri.path == RoutePath.mtrade.toLowerCase()) {
      uri = uri.replace(path: RoutePath.mtrade);
    }
    var result = uri.path == RoutePath.webview ? uri.toString() : Uri.decodeFull(uri.toString());

    if (result.isNotEmpty) {
      getItInstance.get<AppRouter>().pushNamed(result);
    }
  }

  static void _onOpenSMS(BuildContext? context, Map<String, dynamic> params) {
    final number = params['number'] ?? '';
    final body = Uri.decodeComponent(params['body'] ?? '');

    if (TextUtils.isEmpty(number) || TextUtils.isEmpty(body)) {
      return;
    }

    GlobalFunction.launchSMS(
      phoneNumbers: [number],
      body: body,
    );
  }

  static void _onOpenCTV(BuildContext? context, Map<String, dynamic> params) {
    // TODO: handle -> Not implement SupporterApprovedWaitingDetailPage
  }

  static void _onLogEvent(BuildContext? context, Map<String, dynamic> params) {
    // TODO: handle -> RN not used
  }

  static void _onShare(BuildContext? context, Map<String, dynamic> params) {
    final content = params['content'] ?? '';
    if (TextUtils.isEmpty(content)) {
      return;
    }
    GlobalFunction.shareText(content);
    if (context != null && context.mounted) {
      ToastProvider.instance.showSuccess(context: context, message: 'Chia sẻ thành công $content');
    }
  }

  static void _onGenLinkAndShare(BuildContext? context, Map<String, dynamic> params) async {
    final projectID = params['projectID'] ?? '';
    if (TextUtils.isEmpty(projectID)) {
      return;
    }
    final result = await HomeRepository().genProjectLink(
      GenProjectLinkPayload(
        projectID: projectID,
      ),
    );
    final url = result.data ?? '';
    if (result.status && TextUtils.isNotEmpty(url)) {
      GlobalFunction.shareText(url);
      if (context != null && context.mounted) {
        ToastProvider.instance.showSuccess(context: context, message: 'Chia sẻ thành công $url');
      }
    } else {}
  }

  static void _onInAppReview(BuildContext? context, Map<String, dynamic> params) {
    GlobalFunction.showInAppReview();
  }

  static void _onOpenBrowser(BuildContext? context, Map<String, dynamic> params) {
    final url = params['url'] ?? '';
    if (TextUtils.isEmpty(url)) {
      return;
    }
    GlobalFunction.launchScheme(url, mode: LaunchMode.externalApplication);
  }

  static void _onOpenVNPay(BuildContext? context, Map<String, dynamic> params) {
    BridgeService.instance.openVNPayFromWebView(
      json: {"data": params},
      title: 'VNPAY',
    );
  }

  static void _onPopToTop(BuildContext? context, Map<String, dynamic> params) {
    getItInstance.get<AppRouter>().popUntilRoot();
  }
}
