import 'dart:async';

import 'package:app_links/app_links.dart' as app_links;
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/common/utils/deeplink_handler_util.dart';
import 'package:flutter_module/common/utils/log_util.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/env_data.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/routes/routes.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:url_launcher/url_launcher_string.dart';

class DeepLinkUtil {
  DeepLinkUtil._();

  static final instance = DeepLinkUtil._();

  late final app_links.AppLinks _appLinks = app_links.AppLinks();
  late final StreamSubscription _appLinksSubscription;

  Future init({
    required Function(String?) onGetInitialURI,
  }) async {
    await getInitialURI().then(onGetInitialURI.call);
  }

  void dispose() {
    _appLinksSubscription.cancel();
  }

  Future<String?> getInitialURI() async {
    final initURI = await _appLinks.getInitialAppLink().onError((error, stackTrace) => _handleError(error));
    return _handleInitialURI(initURI);
  }

  Future<void> listenIncomingURI() async {
    _appLinksSubscription = _appLinks.uriLinkStream.listen(_handleListenURI, onError: _handleError);
  }

  _handleError(dynamic error) {
    AppLog.d('DeepLinkUtil', 'Error: $error');
  }

  String? _handleInitialURI(Uri? uri) {
    // AppLog.d('DeepLinkUtil', 'raw: $uri');
    // if (uri == null) {
    //   return null;
    // }
    // return getRoutePath(uri.toString());
    return null;
  }

  _handleListenURI(Uri? uri) {
    AppLog.d('DeepLinkUtil', 'raw: $uri');

    if (uri == null) {
      return;
    }

    // final path = getRoutePath(uri.toString());
    // if (path.isNotEmpty) {
    //   getItInstance.get<AppRouter>().pushNamed(path);
    // }

    DeepLinkHandlerUtil.handleURL(raw: uri.toString());
  }

  /// Static
  static open(
    String? url, {
    String? title,
    bool forceOpenDeeplink = false,
    bool requiredLogin = false,
  }) {
    if (TextUtils.isEmpty(url)) {
      return;
    }
    url = url!.replaceAll(AppConstants.appayDeeplinkScheme, EnvData.instance.deepLinkBaseUrl);
    AppLog.d('DeepLinkUtil', 'raw: $url');
    if (TextUtils.isDeeplink(url) || forceOpenDeeplink) {
      if (url.contains("view=MTrade") || requiredLogin) {
        final hasLoggedIn = getItInstance.get<AuthCubit>().state.hasLoggedIn;
        if (!hasLoggedIn) {
          RedirectUtil.backToMFast();
          getItInstance.get<AppRouter>().push(LoginRoute(onSuccess: () {
            GlobalFunction.launchScheme(url!, mode: LaunchMode.externalApplication);
          }));
          return;
        }
      }
      GlobalFunction.launchScheme(url, mode: LaunchMode.externalApplication);
      return;
    }
    getItInstance.get<AppRouter>().push(WebViewRoute(title: title, url: url));
  }

  // static String getRoutePath(String raw) {
  //   raw = raw.replaceAll(AppConstants.appayDeeplinkScheme, EnvData.instance.deepLinkBaseUrl);
  //
  //   AppLog.d('DeepLinkUtil', 'raw: $raw');
  //
  //   ///
  //   var result = '';
  //   var json = DeepLinkHandlerUtil.decodeURL(raw);
  //   var path = json['path'] ?? '';
  //   var params = Map<String, dynamic>.from(json['params'] ?? {});
  //
  //   ///
  //   if (path == DeepLinkPath.open.getPath()) {
  //     var innerView = params['view'];
  //     var innerParams = Map<String, String>.from(params)..removeWhere((key, value) => key == 'view');
  //     if (innerView == 'Flutter') {
  //       innerView = (params['path'] ?? innerParams['name'] ?? '') as String;
  //       innerView = innerView.replaceAll('/', '');
  //       innerParams.removeWhere(
  //         (key, value) => [
  //           'name',
  //           'path',
  //         ].contains(key),
  //       );
  //     }
  //     var uri = Uri(path: '/$innerView', queryParameters: innerParams.isEmpty ? null : innerParams);
  //     result = uri.toString();
  //   }
  //
  //   ///
  //   AppLog.d('DeepLinkUtil', 'uri: $result');
  //   return result;
  // }
}
