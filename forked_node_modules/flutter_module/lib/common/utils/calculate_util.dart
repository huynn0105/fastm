import 'package:flutter_module/common/extension/int_extension.dart';

class CalculateUtil {
  CalculateUtil._();

  // amount: Số tiền vay
  // tenor: Thời hạn vay (tháng)
  // rate: lãi suất theo NĂM
  // insurance: %bao hiểm
  static double getAnnuity(double amount, double rate, int tenor, double insurance) {
    if (rate > 1.5) {
      rate = rate / 100;
    }

    if (tenor == 0.0) {
      return 0.0;
    }

    final anu = _computeAnnuity(insurance / 100, amount, rate, tenor);
    return anu.toDouble();
  }

  static int _computeAnnuity(double insurance, double requestAmount, double rate, int tenor) {
    double annu =
        requestAmount * (1 + insurance) / _computeAnnuityFactor(rate, tenor);
    int result = (annu / 1000).ceil() * 1000;
    return result;
  }

  static double _computeAnnuityFactor(rate, tenor) {
    final d = DateTime.now();
    int curMonth = d.month + 1;

    final startYear = d.year;
    final yearNumDay = _leapYear(startYear) ? 366 : 365;
    final dayRate = rate / yearNumDay;
    Map<String, double> factorObj = {};
    double af = 0;
    factorObj['m1'] = 1;
    for (var i = 0; i < tenor; i++) {
      final numMonthDay = _getNumDayNextMonth(curMonth, startYear);

      final monthRate = dayRate * numMonthDay;

      final curM = 'm${(i + 1)}';
      final nextM = 'm${(i + 2)}';
      factorObj[nextM] = factorObj[curM]! / (monthRate + 1);

      af += factorObj[nextM]!;
      curMonth = curMonth < 12 ? curMonth + 1 : 1;
    }

    return af;
  }

  static bool _leapYear(year) {
    return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);
  }

  static int _getNumDayNextMonth(curMonth, curYear) {
    const g31 = [1, 3, 5, 7, 8, 10, 12];
    const g30 = [4, 6, 9, 11];
    if (g31.contains(curMonth)) {
      return 31;
    }
    if (g30.contains(curMonth)) {
      return 30;
    }
    if (_leapYear(curYear) && curMonth == 2) {
      return 29;
    }
    return 28;
  }

  static double getPrice({
    required double? price,
    required double? percent,
  }) {
    return (price ?? 0) * (percent ?? 0) / 100;
  }

  static double getRemainingPrice({
    required double? price,
    required double? percent,
  }) {
    return (price ?? 0) - getPrice(price: price, percent: percent);
  }
}
