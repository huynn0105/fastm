import 'dart:io';

import 'package:app_settings/app_settings.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:image_picker/image_picker.dart';
import 'package:permission_handler/permission_handler.dart';

enum PickResourceType {
  camera('Camera'),
  gallery('Thư viện ảnh');

  const PickResourceType(this.label);

  final String label;
}

class ImagePickerUtils {
  ImagePickerUtils._();

  static _showOpenAppSettingsDialog(BuildContext context, PickResourceType type) {
    DialogProvider.instance.showConfirmDialog(
      context,
      title: 'Thông báo',
      message: 'Vui lòng cho phép Quyền truy cập ${type.label} để sử dụng chức năng này!',
      negativeTitle: 'Hủy',
      positiveTitle: 'Đồng ý',
      positiveCallback: () {
        AppSettings.openAppSettings();
      },
    );
  }

  static Future<bool> _checkPermissions(BuildContext context, PickResourceType type) async {
    PermissionStatus? result;

    if (type == PickResourceType.camera) {
      result = await Permission.camera.request();
    } else {
      /// https://github.com/Baseflow/flutter-permission-handler/issues/944#issuecomment-1457608353
      if (Platform.isAndroid && AppData.instance.androidSDKLevel <= 32) {
        result = await Permission.storage.request();
      } else {
        result = await Permission.photos.request();
      }
    }

    // ToastProvider.instance.display('$result');

    if (result.isPermanentlyDenied || result.isDenied) {
      if (result.isPermanentlyDenied && context.mounted) {
        _showOpenAppSettingsDialog(context, type);
      }
      return false;
    }
    return true;
  }

  static Future<File?> pickImage({
    required BuildContext context,
    PickResourceType type = PickResourceType.camera,
    int count = 1,
  }) async {
    try {
      XFile? result;

      final hasPermission = await _checkPermissions(context, type);
      if (!hasPermission) {
        return null;
      }
      if (type == PickResourceType.camera) {
        result = await ImagePicker().pickImage(source: ImageSource.camera);
      } else {
        result = await ImagePicker().pickImage(source: ImageSource.gallery);
      }

      return result?.path != null ? File(result!.path) : null;
    } on Exception catch (_) {
      return null;
    }
  }

  static Future<XFile?> pickXFileImage({
    required BuildContext context,
    PickResourceType type = PickResourceType.camera,
    int count = 1,
  }) async {
    try {
      XFile? result;

      final hasPermission = await _checkPermissions(context, type);
      if (!hasPermission) {
        return null;
      }

      if (type == PickResourceType.camera) {
        result = await ImagePicker().pickImage(source: ImageSource.camera);
      } else {
        result = await ImagePicker().pickImage(source: ImageSource.gallery);
      }

      return result;
    } on Exception catch (_) {
      return null;
    }
  }
}
