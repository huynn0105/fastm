import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/legendary/legendary_rank_level.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter/services.dart';
import 'package:flutter_module/common/utils/vietnamese_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/env_data.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/check_project_code/mtrade_check_project_code_cubit.dart';
import 'package:flutter_module/features/app_cubit.dart';
import 'package:in_app_review/in_app_review.dart';
import 'package:share_plus/share_plus.dart' as share_plus;
import 'package:universal_html/html.dart' as html;
import 'package:url_launcher/url_launcher_string.dart';
import 'package:url_launcher/url_launcher.dart' as launcher;

import '../features/mtrade/cubit/select_promotion/mtrade_select_promotion_cubit.dart';
import '../models/mtrade/promotion/data_product_variations_model.dart';
import '../routes/routes.gr.dart';
import 'utils/log_util.dart';

class GlobalFunction {
  GlobalFunction._();

  static void addWebParam(Map<String, String> param) {
    Map<String, String> queryParameters = Map.from(Uri.base.queryParameters);
    String path = Uri.base.toString();
    queryParameters.addAll(param);
    var uri = Uri.parse(path).replace(queryParameters: queryParameters);
    html.window.history.pushState({path: uri.toString()}, '', uri.toString());
  }

  static Future<bool> _launch(
    Uri uri, {
    LaunchMode mode = LaunchMode.platformDefault,
  }) async {
    try {
      return launcher.launchUrl(uri, mode: mode);
    } catch (e) {
      AppLog.i("Launch", "Your device is not supported");
      return false;
    }
  }

  static Future<bool> launchPhone(String phone) async {
    final uri = Uri(
      scheme: "tel",
      path: phone,
    );
    return _launch(uri, mode: LaunchMode.externalApplication);
  }

  static Future<bool> launchSMS({
    required List<String> phoneNumbers,
    required String body,
  }) async {
    final uri = Uri(
      scheme: "sms",
      path: phoneNumbers.join(';'),
      queryParameters: <String, String>{
        'body': Uri.encodeComponent(body),
      },
    );
    return _launch(uri, mode: LaunchMode.externalApplication);
  }

  static Future<bool> launchScheme(
    String scheme, {
    LaunchMode mode = LaunchMode.platformDefault,
  }) async {
    final uri = Uri.tryParse(scheme);
    if (uri == null) {
      AppLog.i("Launch", "Your device is not supported");
      return false;
    }
    return _launch(uri, mode: mode);
  }

  static Future<void> shareText(
    String text, {
    String? subject,
    Rect? sharePositionOrigin,
  }) async {
    return share_plus.Share.share(
      text,
      subject: subject,
      sharePositionOrigin: sharePositionOrigin,
    );
  }

  static Future<share_plus.ShareResult> shareFiles({
    List<String> paths = const [],
    String? text,
    String? subject,
    Rect? sharePositionOrigin,
  }) async {
    final files = <share_plus.XFile>[];
    for (var i = 0; i < paths.length; i++) {
      files.add(
        share_plus.XFile(
          paths[i],
        ),
      );
    }
    return share_plus.Share.shareXFiles(
      files,
      text: text,
      subject: subject,
      sharePositionOrigin: sharePositionOrigin,
    );
  }

  static Future<void> copyText(String text) async {
    return Clipboard.setData(ClipboardData(text: text));
  }

  static Future pushWebView({
    required BuildContext context,
    required String url,
    String title = "MTrade",
    bool showTitle = true,
  }) async {
    if (kIsWeb) {
      return RedirectUtil.openUrl(url);
      // launchScheme(
      //   url,
      //   mode: LaunchMode.externalApplication,
      // );
    } else {
      return context.pushRoute(
        WebViewRoute(
          url: TextUtils.convertPrivateUrl(url),
          title: title,
          showTitle: showTitle,
        ),
      );
    }
  }

  static void replaceWebView({
    required BuildContext context,
    required String url,
    String title = "MTrade",
    bool showTitle = true,
  }) {
    if (kIsWeb) {
      RedirectUtil.openUrl(url);
      // launchScheme(
      //   url,
      //   mode: LaunchMode.externalApplication,
      // );
    } else {
      context.replaceRoute(
        WebViewRoute(
          url: TextUtils.convertPrivateUrl(url),
          title: title,
          showTitle: showTitle,
        ),
      );
    }
  }

  static void popAndPushWebView({
    required BuildContext context,
    required String url,
    String title = "MTrade",
    bool showTitle = true,
  }) {
    if (kIsWeb) {
      RedirectUtil.openUrl(url);
      // launchScheme(
      //   url,
      //   mode: LaunchMode.externalApplication,
      // );
    } else {
      context.router.popAndPush(
        WebViewRoute(
          url: TextUtils.convertPrivateUrl(url),
          title: title,
          showTitle: showTitle,
        ),
      );
    }
  }

  static void action({
    required BuildContext context,
    required Function() onTap,
    bool forceCheckLogin = true,
    bool forceCheckPayNow = true,
    bool forceCheckPayLater = false,
  }) async {
    if (forceCheckLogin) {
      final cubit = getItInstance.get<AuthCubit>();
      final status = !cubit.state.hasLoggedIn;
      if (status) {
        DialogProvider.instance.showMTradeLoginDialog(
          context: context,
          onLogin: () {
            RedirectUtil.backToMFast();
            GlobalFunction.launchScheme(
              "${EnvData.instance.deepLinkBaseUrl}://open?view=LoginModal",
              mode: LaunchMode.externalApplication,
            );
          },
        );
        return;
      }
      if (forceCheckPayNow) {
        final projectCodeCubit = getItInstance.get<MTradeCheckProjectCodeCubit>();
        final projectCodeStatus = await projectCodeCubit.checkPayNow(
          onFailure: (code) {
            DialogProvider.instance.showMTradeProjectCodeDialog(
              context: context,
              message: code?.message ?? "",
              url: code?.url ?? "",
            );
          },
        );
        if (!projectCodeStatus) {
          return;
        }
      }
      if (forceCheckPayLater) {
        final projectCodeCubit = getItInstance.get<MTradeCheckProjectCodeCubit>();
        final projectCodeStatus = await projectCodeCubit.checkPayLater(
          onFailure: (code) {
            DialogProvider.instance.showMTradeProjectCodeDialog(
              context: context,
              message: code?.message ?? "",
              url: code?.url ?? "",
            );
          },
        );
        if (!projectCodeStatus) {
          return;
        }
      }
      onTap();
    }
  }

  static void checkPromotion(BuildContext context, Function() onAction) {
    final selectPromotionCubit = context.read<MTradeSelectPromotionCubit>();
    final promotions = GlobalFunction.flatPromotionCode(selectPromotionCubit.state.promotions);
    if (promotions.isNotEmpty) {
      DialogProvider.instance.showMTradeDialog(
        context: context,
        asset: "ic_mtrade_mascot_happy_waiting",
        title: "Xác nhận thay đổi giỏ hàng",
        message: "Mã ưu đãi sẽ bị hủy nếu thông tin giỏ hàng bị thay đổi, bạn có chắc muốn tiếp tục thao tác?",
        positiveTitle: "Kiểm tra lại",
        negativeTitle: "Bỏ ưu đãi",
        positiveCallback: () {},
        negativeCallback: () {
          onAction();
        },
      );
    } else {
      onAction();
    }
  }

  static List<PromotionCode> flatPromotionCode(List<DataProductVariationsModel> data) {
    List<PromotionCode> result = [];
    for (var element in data) {
      for (PromotionCode promotion in element.codes ?? []) {
        promotion.discount = promotion.promotion?.getDiscount([element.sku!]) ?? 0;
      }
      result = [...result, ...element.codes ?? []];
    }
    return result;
  }

  static Color getProgressColor(double percent) {
    if (percent < 60) {
      return UIColors.accentRed;
    }
    if (percent <= 79) {
      return UIColors.accentOrange;
    }
    return UIColors.accentGreen;
  }

  static void showFullscreenNetworkImage(
    BuildContext context, {
    String? image,
  }) {
    showDialog(
      context: context,
      barrierDismissible: true,
      barrierColor: UIColors.blurBackground,
      builder: (BuildContext context) {
        return AlertDialog(
          elevation: 0,
          contentPadding: EdgeInsets.zero,
          insetPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 32),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
          backgroundColor: Colors.transparent,
          content: SafeArea(
            child: Column(
              children: [
                Expanded(
                  child: Container(
                    alignment: Alignment.center,
                    width: AppSize.instance.width,
                    height: AppSize.instance.height,
                    decoration: BoxDecoration(
                      color: UIColors.background,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: TextUtils.isEmpty(image)
                        ? const Center(
                            child: AppImage.asset(
                              asset: 'ic_error_image',
                              width: 40,
                              height: 40,
                              fit: BoxFit.contain,
                            ),
                          )
                        : ClipRRect(
                            borderRadius: BorderRadius.circular(8),
                            child: CachedNetworkImage(
                              imageUrl: image ?? '',
                              fit: BoxFit.cover,
                              width: AppSize.instance.width,
                              progressIndicatorBuilder: (context, url, downloadProgress) {
                                return const Center(
                                  child: CupertinoActivityIndicator(),
                                );
                              },
                              errorWidget: (context, url, error) {
                                return const Center(
                                  child: AppImage.asset(
                                    asset: 'ic_error_image',
                                    width: 40,
                                    height: 40,
                                    fit: BoxFit.contain,
                                  ),
                                );
                              },
                            ),
                          ),
                  ),
                ),
                const SizedBox(
                  height: 35,
                ),
                AppSplashButton(
                  onTap: Navigator.of(context).pop,
                  child: const AppImage.asset(
                    asset: 'ic_close_circle',
                    height: 65,
                    width: 65,
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  static showInAppReview({
    Function()? onSuccess,
    Function()? onFailure,
  }) async {
    final InAppReview inAppReview = InAppReview.instance;
    inAppReview.isAvailable().then((result) {
      if (result) {
        inAppReview.requestReview().then((value) => onSuccess?.call()).catchError((error) => onFailure?.call());
      }
    });
  }

  static String getRankingMascotAssetImage(
    String? rawGender,
    String? rawLevel, {
    bool isHeadAsset = true,
  }) {
    ///
    String convertGender(String? rawGender) {
      final gender = VietnameseUtils.toEnglish(rawGender?.toLowerCase() ?? '');
      switch (gender) {
        case 'female':
        case 'nu':
        case 'f':
          return 'female';
        default:
          return 'male';
      }
    }

    ///
    String convertLevel(String? rawLevel) {
      final level = LegendaryRankLevel.values.firstWhereOrNull((e) => e.code == rawLevel);

      switch (level) {
        case LegendaryRankLevel.HEAD:
          return 'diamond';
        case LegendaryRankLevel.FIX_RSM:
        case LegendaryRankLevel.KPI_RSM:
        case LegendaryRankLevel.VAR_RSM:
          return 'gold';
        case LegendaryRankLevel.FIX_RSA:
        case LegendaryRankLevel.KPI_RSA:
        case LegendaryRankLevel.VAR_RSA:
          return 'silver';
        default:
          return 'stone';
      }
    }

    /// ic_mascot_head_male_diamond
    String gender = convertGender(rawGender);
    String level = convertLevel(rawLevel);

    List<String> groups = [
      if (isHeadAsset) 'head',
      gender,
      level,
    ];

    String result = 'ic_mascot_${groups.join('_')}';
    return result;
  }
}
