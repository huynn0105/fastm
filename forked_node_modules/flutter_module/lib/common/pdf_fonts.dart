import 'package:flutter/services.dart';
import 'package:flutter_module/env_data.dart';
import 'package:syncfusion_flutter_pdf/pdf.dart';

import '../app_data.dart';

class PdfFonts {
  PdfFonts._();

  static late List<int> regularListInt;
  static late List<int> mediumListInt;
  static late List<int> boldListInt;
  static late ByteData pdfFont;
  static late ByteData pdfItalicFont;
  static late ByteData pdfMediumFont;
  static late ByteData pdfSemiBoldFont;
  static late ByteData pdfBoldFont;

  static initPdfFont() async {
    String package = EnvData.instance.package != null ? 'packages/${EnvData.instance.package}/' : '';
    final regularTff = await rootBundle.load('${package}assets/fonts/Roboto-Regular.ttf');
    Uint8List regularUint8List = regularTff.buffer.asUint8List(regularTff.offsetInBytes, regularTff.lengthInBytes);
    regularListInt = regularUint8List.cast<int>();
    final mediumTff = await rootBundle.load('${package}assets/fonts/Roboto-Medium.ttf');
    Uint8List mediumUint8List = mediumTff.buffer.asUint8List(mediumTff.offsetInBytes, mediumTff.lengthInBytes);
    mediumListInt = mediumUint8List.cast<int>();
    final boldTff = await rootBundle.load('${package}assets/fonts/Roboto-Bold.ttf');
    Uint8List boldUint8List = boldTff.buffer.asUint8List(boldTff.offsetInBytes, boldTff.lengthInBytes);
    boldListInt = boldUint8List.cast<int>();
    pdfFont = await rootBundle.load('${package}assets/fonts/Roboto-Regular.ttf');
    pdfItalicFont = await rootBundle.load('${package}assets/fonts/Roboto-MediumItalic.ttf');
    pdfMediumFont = await rootBundle.load('${package}assets/fonts/Roboto-Medium.ttf');
    pdfSemiBoldFont = await rootBundle.load('${package}assets/fonts/Roboto-Medium.ttf');
    pdfBoldFont = await rootBundle.load('${package}assets/fonts/Roboto-Bold.ttf');
  }

  static regular({double? fontSize}) {
    return PdfTrueTypeFont(
      regularListInt,
      fontSize ?? 16,
    );
  }

  static medium({double? fontSize}) {
    return PdfTrueTypeFont(
      mediumListInt,
      fontSize ?? 16,
    );
  }

  static bold({double? fontSize}) {
    return PdfTrueTypeFont(
      boldListInt,
      fontSize ?? 16,
    );
  }
}
