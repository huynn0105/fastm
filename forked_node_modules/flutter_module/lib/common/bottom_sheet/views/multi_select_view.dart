import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';

import '../../widgets/checkbox.dart';
import '../../../features/mtrade/page/mtrade/widgets/mtrade_text_field.dart';
import '../../utils/vietnamese_util.dart';
import '../../widgets/buttons.dart';
import '../wrapper/data_wrapper.dart';
import 'bottom_sheet_view.dart';

class MultiSelectView extends StatefulWidget {
  const MultiSelectView({
    Key? key,
    required this.title,
    required this.data,
    required this.selectedData,
    this.showSearchInput = false,
    this.allOptionTitle = 'Tất cả',
    this.enabledOnDone = false,
    this.forceDisableWhenSelectAll = false,
  }) : super(key: key);

  final String title;
  final List<DataWrapper> data;
  final List<DataWrapper> selectedData;
  final bool showSearchInput;
  final String allOptionTitle;
  final bool enabledOnDone;
  final bool forceDisableWhenSelectAll;

  @override
  State<MultiSelectView> createState() => _MultiSelectViewState();
}

class _MultiSelectViewState extends State<MultiSelectView> {
  double size = 45.0;

  late List<DataWrapper> raw;
  late List<DataWrapper> data;
  late List<DataWrapper> selectedData;

  late final ScrollController _scrollController;
  late final TextEditingController _searchController;

  late final DataWrapper allOptionWrapper = DataWrapper(id: 'ALL', value: widget.allOptionTitle);

  @override
  void initState() {
    super.initState();
    raw = [...widget.data];
    data = [...widget.data];

    selectedData = data.where((e) => widget.selectedData.map((e) => e.id).contains(e.id)).toList();
    if (selectedData.length == data.length) {
      selectedData.insert(0, allOptionWrapper);
      if(widget.forceDisableWhenSelectAll){
        _isDisableItem = true;
      }
    }
    data.insert(0, allOptionWrapper);

    _searchController = TextEditingController();
    _scrollController = ScrollController();
  }

  @override
  void dispose() {
    _scrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  bool _isDisableItem = false;

  @override
  Widget build(BuildContext context) {
    return BottomSheetView(
      title: widget.title,
      enabledOnDone: widget.enabledOnDone || enabledOnDone(),
      onDone: () {
        Navigator.of(context).pop(selectedData);
      },
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Visibility(
            visible: widget.showSearchInput,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: MTradeSearchTextField(
                controller: _searchController,
                hintText: "Tìm kiếm",
                textAlign: TextAlign.center,
                onChanged: onChanged,
              ),
            ),
          ),
          Flexible(
            child: SizedBox(
              height: 360,
              child: ListView.builder(
                controller: _scrollController,
                itemExtent: size,
                physics: const ClampingScrollPhysics(),
                padding: EdgeInsets.only(top: widget.showSearchInput ? 0 : 20, bottom: AppSize.instance.safeBottom),
                scrollDirection: Axis.vertical,
                itemBuilder: (context, index) {
                  final item = data[index];
                  final title = item.value ?? '';
                  final isSelected = selectedData.map((e) => e.id).contains(item.id);

                  bool isDisable = widget.forceDisableWhenSelectAll ? (!_isAll(item) && _isDisableItem) : false;
                  return AppSplashButton(
                    onTap: () => onSelected(item),
                    isDisable: isDisable,
                    child: Container(
                      alignment: Alignment.center,
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: IgnorePointer(
                        ignoring: true,
                        child: Row(
                          children: [
                            AppCheckbox.rectangle(
                              value: isSelected,
                              onChanged: (_) {},
                              customBackgroundColor: isDisable ? UIColors.gray : null,
                            ),
                            const SizedBox(
                              width: 12,
                            ),
                            AnimatedDefaultTextStyle(
                              duration: const Duration(milliseconds: 100),
                              style: !isDisable
                                  ? isSelected
                                      ? UITextStyle.medium.copyWith(
                                          color: UIColors.defaultText,
                                          fontSize: 16,
                                        )
                                      : UITextStyle.regular.copyWith(
                                          color: UIColors.defaultText,
                                          fontSize: 16,
                                        )
                                  : UITextStyle.regular.copyWith(
                                      color: UIColors.grayBackground,
                                      fontSize: 16,
                                    ),
                              child: Text(title),
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                },
                itemCount: data.length,
              ),
            ),
          ),
        ],
      ),
    );
  }

  onChanged(String value) {
    if (value.isNotEmpty) {
      setState(() {
        data = raw.where((e) {
          String query = VietnameseUtils.toEnglish(value).toLowerCase();
          String data = VietnameseUtils.toEnglish(e.value).toLowerCase();
          return data.contains(query);
        }).toList();
      });
    } else {
      setState(() {
        data = [...widget.data]..insert(0, allOptionWrapper);
      });
    }
  }

  onSelected(DataWrapper item) {
    bool isAll = _isAll(item);
    bool isSelected = selectedData.firstWhereOrNull((e) => e.id == item.id) != null;

    ///
    if (isAll) {
      if (widget.forceDisableWhenSelectAll) {
        _isDisableItem = !isSelected;
      }
      onAllSelected(item, isSelected);
    } else {
      onSingleSelected(item, isSelected);
    }
  }

  bool _isAll(DataWrapper item) => item.id == allOptionWrapper.id;

  onAllSelected(DataWrapper item, bool isSelected) {
    setState(() {
      if (isSelected) {
        if (widget.forceDisableWhenSelectAll) {
          selectedData.clear();
        } else {
          selectedData.removeWhere((e) => e.id == item.id);
        }
      } else {
        selectedData = [...data];
      }
    });
  }

  onSingleSelected(DataWrapper item, bool isSelected) {
    setState(() {
      if (isSelected) {
        selectedData.removeWhere((e) => e.id == item.id);
        if (selectionContainAll()) {
          selectedData.removeWhere((e) => e.id == allOptionWrapper.id);
        }
      } else {
        selectedData.add(item);
        if (selectedData.length == raw.length && !selectionContainAll() && !widget.forceDisableWhenSelectAll) {
          selectedData.add(allOptionWrapper);
        }
      }
    });
  }

  bool selectionContainAll() {
    return selectedData.where((e) => e.id == allOptionWrapper.id).isNotEmpty;
  }

  bool enabledOnDone() {
    return selectedData.isNotEmpty;
    // final selectionNonAll = selectedData.where((e) => e.id != allOptionWrapper.id);
    // return selectedData.isNotEmpty && selectionNonAll.length != widget.selectedData.length;
  }
}


Future<List<DataWrapper>?> showMultiSelectList(
  BuildContext context, {
  required String title,
  required String allOptionTitle,
  required List<DataWrapper> data,
  required List<DataWrapper> selectedData,
  bool showSearchInput = false,
}) {
  return showModalBottomSheet(
    context: context,
    isScrollControlled: true,
    isDismissible: true,
    enableDrag: true,
    backgroundColor: Colors.transparent,
    barrierColor: UIColors.blurBackground,
    builder: (_) {
      return MultiSelectView(
        title: title,
        allOptionTitle: allOptionTitle,
        data: data,
        selectedData: selectedData,
        showSearchInput: showSearchInput,
      );
    },
  );
}
