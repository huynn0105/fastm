import 'dart:convert';
import 'dart:math';

import 'package:collection/collection.dart';
import 'package:expandable/expandable.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';

import '../../size.dart';
import '../../widgets/checkbox.dart';
import '../../../features/mtrade/page/mtrade/widgets/mtrade_text_field.dart';
import '../../utils/vietnamese_util.dart';
import '../../widgets/buttons.dart';
import '../wrapper/data_wrapper.dart';
import 'bottom_sheet_view.dart';

class MultiSelectGroupSearchView extends StatefulWidget {
  const MultiSelectGroupSearchView({
    Key? key,
    required this.title,
    required this.ids,
    this.hintSearch,
    this.data = const [],
    this.groupedData = const [],
  }) : super(key: key);

  final String title;
  final List<String?> ids;
  final List<DataWrapper> data;
  final List<GroupDataWrapper> groupedData;
  final String? hintSearch;

  @override
  State<MultiSelectGroupSearchView> createState() => _MultiSelectGroupSearchViewState();
}

class _MultiSelectGroupSearchViewState extends State<MultiSelectGroupSearchView> {
  double itemSize = 40.0;
  double titleSize = 45.0;

  late List<DataWrapper> raw;
  late List<DataWrapper> data;
  late List<DataWrapper> selectedData;
  late List<GroupDataWrapper> groupedData;

  late final ScrollController _scrollController;
  late final TextEditingController _searchController;

  @override
  void initState() {
    super.initState();

    _searchController = TextEditingController();
    _scrollController = ScrollController();

    if (widget.groupedData.isNotEmpty) {
      groupedData = [...widget.groupedData];
      raw = groupedData.map((e) => e.children ?? []).expand((e) => e).toList();
      data = [...raw];
      selectedData = groupedData
          .map((e) => e.children ?? [])
          .expand((e) => e)
          .whereType<DataWrapper>()
          .where((e) => widget.ids.contains(e.id))
          .toList();
    } else {
      raw = [...widget.data];
      data = [...widget.data];
      selectedData = data.where((e) => widget.ids.contains(e.id)).toList();
      final temp = groupBy(data, (e) {
        return e.parent?.toJsonString() ?? "";
      });
      groupedData = temp.entries.map((e) {
        return GroupDataWrapper(
          group: DataWrapper.fromJson(jsonDecode(e.key)),
          children: e.value,
        );
      }).toList();
    }
  }

  @override
  void dispose() {
    _scrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      constraints: BoxConstraints(maxHeight: AppSize.instance.height * 0.85),
      child: BottomSheetView(
        title: widget.title,
        enabledOnDone: enabledOnDone,
        enabledSafeBottom: false,
        onDone: () {
          Navigator.of(context).pop(selectedData);
        },
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Padding(
              padding: const EdgeInsets.all(16),
              child: MTradeSearchTextField(
                controller: _searchController,
                hintText: widget.hintSearch ?? "Tìm kiếm",
                textAlign: TextAlign.center,
                onChanged: onChanged,
                showClearButton: _searchController.text.isNotEmpty,
                autoClear: true,
                onCleared: () {
                  setState(() {});
                },
              ),
            ),
            Flexible(
              child: Stack(
                children: [
                  Visibility(
                    visible: _searchController.text.isEmpty,
                    child: Container(
                      color: UIColors.background,
                      height: AppSize.instance.bottomSheetHeight,
                      child: ListView.separated(
                        controller: _scrollController,
                        physics: const ClampingScrollPhysics(),
                        padding: const EdgeInsets.only(bottom: 100),
                        scrollDirection: Axis.vertical,
                        itemBuilder: (context, index) {
                          final groupItem = groupedData[index];
                          final children = groupItem.children ?? [];
                          final initialExpanded = children.any((e) => selectedData.map((e) => e.id).contains(e.id));
                          final maxLengthToShow = children.length > 4;

                          return Theme(
                            data: ThemeData(
                              primarySwatch: Colors.green,
                              scrollbarTheme: ScrollbarThemeData(
                                radius: const Radius.circular(4),
                                thickness: MaterialStateProperty.all(4),
                                thumbVisibility: MaterialStateProperty.all(maxLengthToShow),
                                thumbColor: MaterialStateProperty.all(UIColors.gray),
                                trackVisibility: MaterialStateProperty.all(maxLengthToShow),
                                trackColor: MaterialStateProperty.all(UIColors.white),
                                trackBorderColor: MaterialStateProperty.all(Colors.transparent),
                              ),
                            ),
                            child: ExpandableNotifier(
                              initialExpanded: initialExpanded,
                              child: ScrollOnExpand(
                                scrollOnExpand: false,
                                scrollOnCollapse: false,
                                child: ExpandablePanel(
                                  theme: const ExpandableThemeData(
                                    crossFadePoint: 0,
                                    iconRotationAngle: pi / 2,
                                    collapseIcon: Icons.keyboard_arrow_down_rounded,
                                    expandIcon: Icons.keyboard_arrow_right_rounded,
                                    headerAlignment: ExpandablePanelHeaderAlignment.center,
                                  ),
                                  header: Container(
                                    height: titleSize,
                                    alignment: Alignment.centerLeft,
                                    padding: const EdgeInsets.symmetric(horizontal: 16),
                                    child: Text(
                                      groupItem.group?.value ?? "",
                                      style: UITextStyle.medium.copyWith(
                                        fontSize: 16,
                                      ),
                                    ),
                                  ),
                                  collapsed: const SizedBox(),
                                  expanded: Container(
                                    height: maxLengthToShow ? 4 * itemSize : children.length * itemSize,
                                    margin: const EdgeInsets.fromLTRB(16, 0, 16, 10),
                                    child: Scrollbar(
                                      controller: _scrollController,
                                      child: ListView.builder(
                                        itemExtent: itemSize,
                                        physics: const ClampingScrollPhysics(),
                                        padding: EdgeInsets.zero,
                                        scrollDirection: Axis.vertical,
                                        itemBuilder: (context, index) {
                                          final item = children[index];
                                          final isSelected = selectedData.map((e) => e.id).contains(item.id);

                                          return AppSplashButton(
                                            onTap: () {
                                              onSelected(item);
                                            },
                                            child: Container(
                                              alignment: Alignment.center,
                                              child: IgnorePointer(
                                                ignoring: true,
                                                child: AppCheckbox.rectangle(
                                                  value: isSelected,
                                                  title: item.value ?? "",
                                                  onChanged: (_) {},
                                                ),
                                              ),
                                            ),
                                          );
                                        },
                                        itemCount: children.length,
                                      ),
                                    ),
                                  ),
                                  builder: (_, collapsed, expanded) {
                                    return Expandable(
                                      collapsed: collapsed,
                                      expanded: expanded,
                                    );
                                  },
                                ),
                              ),
                            ),
                          );
                        },
                        separatorBuilder: (_, __) => Container(
                          height: 2,
                          width: double.infinity,
                          color: UIColors.white,
                        ),
                        itemCount: groupedData.length,
                      ),
                    ),
                  ),
                  Visibility(
                    visible: _searchController.text.isNotEmpty,
                    child: Container(
                      color: UIColors.background,
                      height: AppSize.instance.bottomSheetHeight,
                      child: ListView.builder(
                        itemExtent: itemSize,
                        physics: const ClampingScrollPhysics(),
                        padding: const EdgeInsets.only(bottom: 100),
                        scrollDirection: Axis.vertical,
                        itemBuilder: (context, index) {
                          final item = data[index];
                          final isSelected = selectedData.map((e) => e.id).contains(item.id);

                          return AppSplashButton(
                            onTap: () {
                              onSelected(item);
                            },
                            child: Container(
                              alignment: Alignment.center,
                              padding: const EdgeInsets.symmetric(horizontal: 16),
                              child: IgnorePointer(
                                ignoring: true,
                                child: AppCheckbox.rectangle(
                                  value: isSelected,
                                  title: item.value ?? "",
                                  onChanged: (_) {},
                                ),
                              ),
                            ),
                          );
                        },
                        itemCount: data.length,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  onChanged(String value) {
    if (value.isNotEmpty) {
      setState(() {
        data = raw.where((e) {
          String query = VietnameseUtils.toEnglish(value).toLowerCase();
          String data = VietnameseUtils.toEnglish(e.value).toLowerCase();
          return data.toLowerCase().contains(query) == true;
        }).toList();
      });
    } else {
      setState(() {
        data = raw;
      });
    }
  }

  onSelected(DataWrapper item) {
    bool isSelected = selectedData.firstWhereOrNull((e) => e.id == item.id) != null;
    bool isAll = item.id == null;
    setState(() {
      if (isSelected) {
        selectedData.removeWhere((e) => e.id == item.id);
      } else {
        if (isAll) {
          selectedData = [item];
        } else {
          selectedData.add(item);
          selectedData.removeWhere((e) => e.id == null);
        }
      }
    });
  }

  bool get enabledOnDone => !listEquals(widget.ids, selectedData.map((e) => e.id).toList());
}
