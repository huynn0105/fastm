import 'package:collection/collection.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

import '../../widgets/checkbox.dart';
import '../../../features/mtrade/page/mtrade/widgets/mtrade_text_field.dart';
import '../../utils/vietnamese_util.dart';
import '../../widgets/buttons.dart';
import '../wrapper/data_wrapper.dart';
import 'bottom_sheet_view.dart';

class MultiSelectSearchView extends StatefulWidget {
  const MultiSelectSearchView({
    Key? key,
    required this.title,
    required this.ids,
    required this.data,
    this.enableSearch = true,
  }) : super(key: key);

  final String title;
  final List<String?> ids;
  final List<DataWrapper> data;
  final bool enableSearch;

  @override
  State<MultiSelectSearchView> createState() => _MultiSelectSearchViewState();
}

class _MultiSelectSearchViewState extends State<MultiSelectSearchView> {
  double size = 45.0;

  late List<DataWrapper> data;
  late List<DataWrapper> selectedData;

  late final ScrollController _scrollController;
  late final TextEditingController _searchController;

  @override
  void initState() {
    super.initState();
    data = widget.data;
    selectedData = data.where((e) => widget.ids.contains(e.id)).toList();

    _searchController = TextEditingController();
    _scrollController = ScrollController();
  }

  @override
  void dispose() {
    _scrollController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BottomSheetView(
      title: widget.title,
      enabledOnDone: enabledOnDone,
      onDone: () {
        Navigator.of(context).pop(selectedData);
      },
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Visibility(
            visible: widget.enableSearch,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: MTradeSearchTextField(
                controller: _searchController,
                hintText: "Tìm kiếm",
                textAlign: TextAlign.center,
                onChanged: onChanged,
              ),
            ),
          ),
          Flexible(
            child: SizedBox(
              height: 360,
              child: ListView.builder(
                controller: _scrollController,
                itemExtent: size,
                physics: const ClampingScrollPhysics(),
                padding: const EdgeInsets.only(bottom: 100),
                scrollDirection: Axis.vertical,
                itemBuilder: (context, index) {
                  final item = data[index];
                  final isSelected = selectedData.map((e) => e.id).contains(item.id);

                  return AppSplashButton(
                    onTap: () {
                      onSelected(item);
                    },
                    child: Container(
                      alignment: Alignment.center,
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: IgnorePointer(
                        ignoring: true,
                        child: AppCheckbox.rectangle(
                          value: isSelected,
                          title: item.value ?? "",
                          onChanged: (_) {},
                        ),
                      ),
                    ),
                  );
                },
                itemCount: data.length,
              ),
            ),
          ),
        ],
      ),
    );
  }

  onChanged(String value) {
    if (value.isNotEmpty) {
      setState(() {
        data = widget.data.where((e) {
          String query = VietnameseUtils.toEnglish(value).toLowerCase();
          String data = VietnameseUtils.toEnglish(e.value).toLowerCase();
          return data.toLowerCase().contains(query) == true;
        }).toList();
      });
    } else {
      setState(() {
        data = widget.data;
      });
    }
  }

  onSelected(DataWrapper item) {
    bool isSelected = selectedData.firstWhereOrNull((e) => e.id == item.id) != null;
    bool isAll = item.id == null;
    setState(() {
      if (isSelected) {
        selectedData.removeWhere((e) => e.id == item.id);
      } else {
        if (isAll) {
          selectedData = [item];
        } else {
          selectedData.add(item);
          selectedData.removeWhere((e) => e.id == null);
        }
      }
    });
  }

  bool get enabledOnDone => !listEquals(widget.ids, selectedData.map((e) => e.id).toList());
}
