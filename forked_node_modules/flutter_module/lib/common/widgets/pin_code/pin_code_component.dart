import 'dart:async';

import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:pin_code_fields/pin_code_fields.dart';

import '../../colors.dart';
import '../../styles.dart';
import '../../utils/format_util.dart';
import '../collect_data_view.dart';
import 'option_resend_otp_widget.dart';

enum PinCodeType {
  phone(label: 'Số ĐT'),
  email(label: 'Email');

  const PinCodeType({
    required this.label,
  });

  final String label;
}

class PinCodeComponent extends StatefulWidget {
  const PinCodeComponent({
    super.key,
    required this.data,
    this.countdownTime,
    this.pinLength = 4,
    this.errorMsg,
    this.allowRetryEmail = false,
    required this.onTapResendOption,
    required this.onOtpChange,
    required this.onComplete,
    this.type = PinCodeType.phone,
  });

  final String data;
  final int? countdownTime;
  final int pinLength;
  final String? errorMsg;
  final bool allowRetryEmail;
  final Function(String) onTapResendOption;
  final Function(String) onOtpChange;
  final Function(String) onComplete;
  final PinCodeType type;

  @override
  State<StatefulWidget> createState() {
    return _PinCodeState();
  }
}

class _PinCodeState extends State<PinCodeComponent> {
  late final TextEditingController _otpController;
  int? _countDown;
  Timer? _timer;

  @override
  void initState() {
    _otpController = TextEditingController();
    _countDown = widget.countdownTime;
    _startTimer();
    super.initState();
  }

  _startTimer() {
    if (_countDown == null) return;
    _timer?.cancel();
    _timer = Timer.periodic(const Duration(seconds: 1), (Timer t) {
      setState(() {
        _countDown = _countDown! - 1;
      });
      if (_countDown == 0) {
        _timer?.cancel();
      }
    });
  }

  _restartTimer() {
    setState(() {
      _countDown = widget.countdownTime;
    });
    _startTimer();
  }

  @override
  void didUpdateWidget(covariant PinCodeComponent oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.countdownTime != oldWidget.countdownTime) {
      _countDown = widget.countdownTime;
      _startTimer();
    }
  }

  @override
  void dispose() {
    _timer?.cancel();
    _otpController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Column(
          children: [
            Text.rich(
              TextSpan(
                style: UITextStyle.medium.copyWith(
                  fontSize: 16,
                  color: UIColors.grayText,
                ),
                children: <InlineSpan>[
                  const TextSpan(
                    text: 'Nhập mã xác thực ',
                  ),
                  TextSpan(
                    text: '${widget.pinLength} chữ số',
                  ),
                  TextSpan(
                    text: ' đã được\ngửi tới ${widget.type.label} ',
                  ),
                  TextSpan(
                    text: widget.type == PinCodeType.phone ? FormatUtil.phoneFormat(widget.data) : widget.data,
                    style: UITextStyle.semiBold.copyWith(
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(
              height: 8,
            ),
            CollectDataView(
              errorAlignment: MainAxisAlignment.center,
              errorMsg: widget.errorMsg,
              child: Padding(
                padding: const EdgeInsets.only(bottom: 8),
                child: PinCodeTextField(
                  appContext: context,
                  length: widget.pinLength,
                  errorTextSpace: 0,
                  errorTextMargin: EdgeInsets.zero,
                  mainAxisAlignment: MainAxisAlignment.center,
                  animationType: AnimationType.fade,
                  autoDisposeControllers: false,
                  autoFocus: true,
                  pinTheme: PinTheme(
                    shape: PinCodeFieldShape.box,
                    borderRadius: BorderRadius.circular(4),
                    fieldHeight: 40,
                    fieldWidth: 40,
                    borderWidth: 1,
                    fieldOuterPadding: const EdgeInsets.only(left: 6, right: 6),
                    activeColor: widget.errorMsg != null ? UIColors.red : UIColors.border,
                    selectedColor: widget.errorMsg != null ? UIColors.red : UIColors.primaryColor,
                    inactiveColor: widget.errorMsg != null ? UIColors.red : UIColors.border,
                    disabledColor: UIColors.border,
                    activeFillColor: widget.errorMsg != null ? UIColors.lightRed : UIColors.extraLightGray,
                    selectedFillColor: widget.errorMsg != null ? UIColors.lightRed : UIColors.lightBlue,
                    inactiveFillColor: widget.errorMsg != null ? UIColors.lightRed : UIColors.extraLightGray,
                    errorBorderColor: UIColors.white,
                  ),
                  cursorColor: UIColors.defaultText,
                  animationDuration: const Duration(milliseconds: 300),
                  enableActiveFill: true,
                  controller: _otpController,
                  keyboardType: TextInputType.number,
                  onChanged: widget.onOtpChange,
                  onCompleted: widget.onComplete,
                ),
              ),
            ),
            const SizedBox(
              height: 8,
            ),
            Text.rich(
              TextSpan(
                style: UITextStyle.medium.copyWith(
                  fontSize: 16,
                  color: UIColors.grayText,
                ),
                children: <InlineSpan>[
                  const TextSpan(
                    text: 'Nếu không nhận được mã xác thực,\n',
                  ),
                  if (_countDown == null || _countDown! > 0)
                    TextSpan(
                      text: 'vui lòng bấm gửi lại ',
                      children: [
                        TextSpan(
                          text: 'sau ${_countDown ?? ''}s',
                          style: UITextStyle.semiBold.copyWith(
                            fontSize: 16,
                          ),
                        ),
                      ],
                    ),
                  if (_countDown == 0 && widget.type == PinCodeType.phone)
                    const TextSpan(
                      text: 'vui lòng bấm gửi lại qua',
                    ),
                  if (_countDown == 0 && widget.type != PinCodeType.phone)
                    TextSpan(
                      text: 'vui lòng ',
                      children: [
                        TextSpan(
                          text: 'bấm gửi lại',
                          style: UITextStyle.semiBold.copyWith(
                            fontSize: 16,
                            color: UIColors.primaryColor,
                          ),
                          recognizer: TapGestureRecognizer()
                            ..onTap = () {
                              widget.onTapResendOption.call('');
                              _restartTimer();
                            },
                        )
                      ],
                    ),
                ],
              ),
              textAlign: TextAlign.center,
            ),
            if (widget.type == PinCodeType.phone) ...[
              const SizedBox(
                height: 8,
              ),
              if (_countDown == 0)
                OptionResendOTPWidget(
                  alowRetryEmail: widget.allowRetryEmail,
                  onTapOption: (option) {
                    _otpController.clear();
                    widget.onTapResendOption.call(option);
                    _restartTimer();
                  },
                ),
            ],
          ],
        ),
      ],
    );
  }
}
