import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/dropdown/drop_down_item_list.dart';
import 'package:flutter/material.dart';

import 'drop_down_item.dart';

class CustomDropdown<T> extends StatefulWidget {
  final Widget child;
  final void Function(T?, int)? onChange;
  final List<DropdownItem<T>> items;
  final int? currentIndex;

  final bool enable;

  const CustomDropdown({
    Key? key,
    required this.child,
    required this.items,
    this.currentIndex = -1,
    this.enable = true,
    this.onChange,
  }) : super(key: key);

  @override
  CustomDropdownState<T> createState() => CustomDropdownState<T>();
}

class CustomDropdownState<T> extends State<CustomDropdown<T>>
    with TickerProviderStateMixin {
  final LayerLink _layerLink = LayerLink();
  late OverlayEntry _overlayEntry;
  bool _isOpen = false;

  late AnimationController _animationController;
  late Animation<double> _expandAnimation;

  @override
  void initState() {
    super.initState();

    _animationController = AnimationController(
        vsync: this, duration: const Duration(milliseconds: 200));
    _expandAnimation = CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    );
  }

  @override
  Widget build(BuildContext context) {
    return CompositedTransformTarget(
      link: _layerLink,
      child: SplashButton(
        highlightColor: Colors.transparent,
        hoverColor: Colors.transparent,
        onTap: () {
          if (widget.enable) {
            if (WidgetsBinding.instance.window.viewInsets.bottom != 0) {
              FocusManager.instance.primaryFocus?.unfocus();
            } else {
              _toggleDropdown();
            }
          }
        },
        child: widget.child,
      ),
    );
  }

  OverlayEntry _createOverlayEntry() {
    final screenSize = MediaQuery.of(context).size;
    // find the size and position of the current widget
    RenderBox? renderBox = context.findRenderObject() as RenderBox?;
    var size = renderBox?.size;

    var offset = renderBox?.localToGlobal(Offset.zero);
    var topOffset = offset!.dy + size!.height + 5;

    bool showUnder = true;
    if (topOffset > screenSize.height / 1.5) {
      showUnder = false;
    }

    final marginOffset = showUnder ? size.height + 5 : -size.height - 5;
    final anchor = showUnder ? Alignment.topCenter : Alignment.bottomCenter;
    const space = 16; //space bottom/top
    double maxHeight =
        showUnder ? screenSize.height - topOffset - 5 : screenSize.height / 2;
    maxHeight -= space;

    return OverlayEntry(
      // full screen GestureDetector to register when a
      // user has clicked away from the dropdown
      builder: (context) => GestureDetector(
        onTap: () => _toggleDropdown(close: true),
        behavior: HitTestBehavior.translucent,
        // full screen container to register taps anywhere and close drop down
        child: WillPopScope(
          onWillPop: () async {
            if (_isOpen) {
              _toggleDropdown(close: true);
              return false;
            }
            return true;
          },
          child: SizedBox(
            height: screenSize.height,
            width: screenSize.width,
            child: Stack(
              children: [
                Positioned(
                  left: offset.dx,
                  top: topOffset,
                  width: size.width,
                  child: CompositedTransformFollower(
                    offset: Offset(0, marginOffset),
                    link: _layerLink,
                    targetAnchor: anchor,
                    followerAnchor: anchor,
                    child: Column(
                      children: [
                        Container(
                          decoration: BoxDecoration(
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.2),
                                offset: showUnder
                                    ? const Offset(0, 1.0)
                                    : const Offset(0, -1.0),
                                blurRadius: 1,
                              ),
                            ],
                          ),
                          child: Material(
                            color: UIColors.white,
                            child: SizeTransition(
                              axisAlignment: 1,
                              sizeFactor: _expandAnimation,
                              axis: Axis.vertical,
                              child: ConstrainedBox(
                                constraints: BoxConstraints(
                                  minHeight: 0,
                                  maxHeight: maxHeight,
                                ),
                                child: DropdownItemList(
                                  items: widget.items,
                                  maxHeight: maxHeight,
                                  showUnder: showUnder,
                                  currentIndex: widget.currentIndex ?? -1,
                                  onItemTap: (DropdownItem item, index) {
                                    widget.onChange?.call(
                                      item.value,
                                      index,
                                    );
                                  },
                                  toggleDropdown: _toggleDropdown,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _toggleDropdown({bool close = false}) async {
    if (_isOpen || close) {
      await _animationController.reverse();
      _overlayEntry.remove();
      setState(() {
        _isOpen = false;
      });
    } else {
      _overlayEntry = _createOverlayEntry();
      Overlay.of(context).insert(_overlayEntry);
      setState(() => _isOpen = true);
      _animationController.forward();
    }
  }
}
