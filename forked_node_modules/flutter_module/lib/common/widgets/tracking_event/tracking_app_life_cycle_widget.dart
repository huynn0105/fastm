import 'package:flutter_module/common/lifecycle_event_handler/lifecycle_event_handler.dart';
import 'package:flutter/material.dart';

class TrackingAppLifeCycleWidget extends StatefulWidget {
  const TrackingAppLifeCycleWidget({
    super.key,
    required this.child,
    this.onForeground,
    this.onBackground,
  });

  final Widget child;
  final Function()? onForeground;
  final Function()? onBackground;

  @override
  State<TrackingAppLifeCycleWidget> createState() => _TrackingAppLifeCycleWidgetState();
}

class _TrackingAppLifeCycleWidgetState extends State<TrackingAppLifeCycleWidget> with WidgetsBindingObserver {
  bool isFromForegroundToBackground = false;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    LifecycleEventHandler.handleState(
      state: state,
      onForeground: () {
        if (isFromForegroundToBackground) {
          isFromForegroundToBackground = false;
          widget.onForeground?.call();
        }
      },
      onBackground: () {
        if (!isFromForegroundToBackground) {
          isFromForegroundToBackground = true;
          widget.onBackground?.call();
        }
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return widget.child;
  }
}
