import 'package:flutter/material.dart';
import 'package:flutter_module/common/constants.dart';

class AnimatedAlignment extends StatefulWidget {
  const AnimatedAlignment({
    Key? key,
    required this.child,
    required this.isExpanded,
    this.verticalAnimation = true,
    this.horizontalAnimation = false,
    this.curve = Curves.linear,
    this.reverseCurve = Curves.linear,
    this.animationBehavior = AnimationBehavior.normal,
    this.duration = AppConstants.duration,
    this.reverseDuration = AppConstants.duration,
  }) : super(key: key);

  final Widget child;
  final bool isExpanded;
  final bool verticalAnimation;
  final bool horizontalAnimation;
  final Curve curve;
  final Curve reverseCurve;
  final Duration duration;
  final Duration reverseDuration;
  final AnimationBehavior animationBehavior;

  @override
  State<AnimatedAlignment> createState() => _AnimatedAlignmentState();
}

class _AnimatedAlignmentState extends State<AnimatedAlignment> with TickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation _animation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: widget.duration,
      reverseDuration: widget.reverseDuration,
      animationBehavior: widget.animationBehavior,
      value: !widget.isExpanded ? 0.0 : 1.0,
    );
    _animation = Tween(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: widget.curve,
        reverseCurve: widget.reverseCurve,
      ),
    );
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    onAnimated();
    return AnimatedBuilder(
      animation: _animationController,
      builder: (_, child) {
        return Align(
          alignment: Alignment.topCenter,
          heightFactor: widget.verticalAnimation ? _animation.value : 1.0,
          widthFactor: widget.horizontalAnimation ? _animation.value : 1.0,
          child: child,
        );
      },
      child: widget.child,
    );
  }

  onAnimated() {
    if (widget.isExpanded) {
      _animationController.forward();
    } else {
      _animationController.reverse();
    }
  }
}
