import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/enum/pin_code_type.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/format_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/mtrade/cubit/request_otp/request_otp_cubit.dart';
import 'package:flutter_module/features/mtrade/page/order/pay_later_order_information/children/product_scheme_pay_later_order/components/option_resend_otp_component.dart';
import 'package:pin_code_fields/pin_code_fields.dart';

class SimplePinCode extends StatefulWidget {
  const SimplePinCode({
    Key? key,
    this.type = PinCodeType.phone,
    this.mobilePhone = '',
    this.email = '',
    this.hideHeader = false,
    this.onCompleted,
  }) : super(key: key);

  final PinCodeType type;
  final String mobilePhone;
  final String email;
  final bool hideHeader;
  final Function(Map)? onCompleted;

  @override
  State<StatefulWidget> createState() {
    return _PinCodeState();
  }
}

class _PinCodeState extends State<SimplePinCode> {
  late FocusNode _otpFocusNode;

  @override
  void initState() {
    super.initState();
    _otpFocusNode = FocusNode();
  }

  @override
  void dispose() {
    _otpFocusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => RequestOtpCubit(),
      child: BlocConsumer<RequestOtpCubit, RequestOtpState>(
        listener: (context, state) {
          if (state.verifyStatus.isSuccess) {
            if (widget.onCompleted != null) {
              widget.onCompleted?.call({
                "status": true,
                "logOtpID": state.logOtpID,
              });
              return;
            }
            Navigator.of(context).pop({
              "status": true,
              "logOtpID": state.logOtpID,
            });
          } else if (state.verifyStatus.isFailure) {
            if (widget.onCompleted != null) {
              widget.onCompleted?.call({
                "status": false,
                "message": state.errorFields[AppConstants.otpKey],
              });
              return;
            }
            Navigator.of(context).pop({
              "status": false,
              "message": state.errorFields[AppConstants.otpKey],
            });
          }
        },
        listenWhen: (previous, current) {
          return previous.verifyStatus != current.verifyStatus;
        },
        builder: (context, state) {
          final cubit = context.read<RequestOtpCubit>();

          if (state.requestStatus.isInitial) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              _requestOtp(context);
            });
          }

          final hasError = state.errorFields[AppConstants.otpKey] != null;
          return Stack(
            alignment: Alignment.center,
            children: [
              LayoutBuilder(
                builder: (context, constraints) {
                  return SizedBox(
                    height: widget.hideHeader ? null : 628,
                    width: double.infinity,
                    child: Column(
                      children: [
                        if (!widget.hideHeader) ...[
                          Container(
                            height: 6,
                            width: 92,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(3),
                              color: UIColors.white,
                            ),
                          ),
                          const SizedBox(
                            height: 10,
                          ),
                        ],
                        Container(
                          height: 612,
                          width:
                              constraints.maxWidth >= AppConstants.responsiveSize ? AppConstants.responsiveSize : null,
                          decoration: const BoxDecoration(
                            color: UIColors.extraLightGray,
                            borderRadius: BorderRadius.only(
                              topLeft: Radius.circular(24),
                              topRight: Radius.circular(24),
                            ),
                          ),
                          child: Column(
                            children: [
                              if (!widget.hideHeader) ...[
                                Container(
                                  decoration: const BoxDecoration(
                                    color: UIColors.white,
                                    borderRadius: BorderRadius.only(
                                      topLeft: Radius.circular(24),
                                      topRight: Radius.circular(24),
                                    ),
                                    boxShadow: [
                                      BoxShadow(
                                        offset: Offset(0, 1),
                                        color: UIColors.extraLightGray,
                                        blurRadius: 1,
                                      )
                                    ],
                                  ),
                                  height: 48,
                                  child: Stack(
                                    children: [
                                      Positioned(
                                        top: 12,
                                        left: 0,
                                        right: 0,
                                        bottom: 14,
                                        child: Text(
                                          'Xác thực nhu cầu',
                                          textAlign: TextAlign.center,
                                          style: UITextStyle.medium.copyWith(
                                            fontSize: 16,
                                            color: UIColors.grayText,
                                          ),
                                        ),
                                      ),
                                      Positioned(
                                        top: 12,
                                        right: 12,
                                        child: SplashButton(
                                          onTap: () => Navigator.pop(context),
                                          child: const AppImage.asset(
                                            asset: 'ic_close',
                                            height: 24,
                                            width: 24,
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                const Divider(
                                  height: 1,
                                  color: UIColors.lightGray,
                                ),
                                const SizedBox(
                                  height: 24,
                                ),
                              ],
                              Text.rich(
                                TextSpan(
                                  style: UITextStyle.medium.copyWith(
                                    fontSize: 16,
                                    color: UIColors.grayText,
                                  ),
                                  children: widget.type.isPhone
                                      ? [
                                          const TextSpan(
                                            text: 'Nhập mã xác thực ',
                                          ),
                                          const TextSpan(
                                            text: '4 chữ số',
                                          ),
                                          const TextSpan(
                                            text: ' đã được gửi tới\nsố ĐT ',
                                          ),
                                          TextSpan(
                                            text: FormatUtil.phoneFormat(widget.mobilePhone),
                                            style: UITextStyle.semiBold.copyWith(
                                              fontSize: 16,
                                            ),
                                          ),
                                        ]
                                      : [
                                          const TextSpan(
                                            text: 'Nhập mã xác thực ',
                                          ),
                                          const TextSpan(
                                            text: '4 chữ số',
                                          ),
                                          const TextSpan(
                                            text: ' đã được gửi tới email ',
                                          ),
                                          TextSpan(
                                            text: widget.email,
                                            style: UITextStyle.semiBold.copyWith(
                                              fontSize: 16,
                                            ),
                                          ),
                                        ],
                                ),
                                textAlign: TextAlign.center,
                              ),
                              const SizedBox(
                                height: 8,
                              ),
                              Padding(
                                padding: const EdgeInsets.symmetric(horizontal: 16),
                                child: CollectDataView(
                                  errorAlignment: MainAxisAlignment.center,
                                  errorMsg: state.errorFields[AppConstants.otpKey],
                                  child: Padding(
                                    padding: const EdgeInsets.only(bottom: 8),
                                    child: PinCodeTextField(
                                      appContext: context,
                                      length: 4,
                                      errorTextSpace: 0,
                                      errorTextMargin: EdgeInsets.zero,
                                      mainAxisAlignment: MainAxisAlignment.center,
                                      animationType: AnimationType.fade,
                                      autoFocus: true,
                                      focusNode: _otpFocusNode,
                                      autoDisposeControllers: false,
                                      enablePinAutofill: kIsWeb == false,
                                      pinTheme: PinTheme(
                                        shape: PinCodeFieldShape.box,
                                        borderRadius: BorderRadius.circular(4),
                                        fieldHeight: 40,
                                        fieldWidth: 40,
                                        borderWidth: 1,
                                        fieldOuterPadding: const EdgeInsets.only(left: 6, right: 6),
                                        activeColor: hasError ? UIColors.red : UIColors.border,
                                        selectedColor: hasError ? UIColors.red : UIColors.primaryColor,
                                        inactiveColor: hasError ? UIColors.red : UIColors.border,
                                        disabledColor: UIColors.border,
                                        activeFillColor: hasError ? UIColors.lightRed : UIColors.white,
                                        selectedFillColor: hasError ? UIColors.lightRed : UIColors.lightBlue,
                                        inactiveFillColor: hasError ? UIColors.lightRed : UIColors.white,
                                        errorBorderColor: UIColors.white,
                                      ),
                                      cursorColor: UIColors.defaultText,
                                      errorAnimationDuration: 100,
                                      animationDuration: const Duration(milliseconds: 100),
                                      enableActiveFill: true,
                                      controller: cubit.otpController,
                                      keyboardType: TextInputType.number,
                                      onCompleted: (v) {
                                        _verifyOtp(context);
                                      },
                                      onChanged: cubit.otpChange,
                                    ),
                                  ),
                                ),
                              ),
                              const SizedBox(
                                height: 8,
                              ),
                              if (widget.type.isPhone) ...{
                                Text.rich(
                                  TextSpan(
                                    style: UITextStyle.medium.copyWith(
                                      fontSize: 16,
                                      color: UIColors.grayText,
                                    ),
                                    children: <InlineSpan>[
                                      const TextSpan(
                                        text: 'Nếu không nhận được mã xác thực,\n',
                                      ),
                                      if (state.countDown != 0)
                                        TextSpan(
                                          text: 'vui lòng bấm gửi lại ',
                                          children: [
                                            TextSpan(
                                              text: 'sau ${state.countDown ?? ''}s',
                                              style: UITextStyle.semiBold.copyWith(
                                                fontSize: 16,
                                              ),
                                            ),
                                          ],
                                        ),
                                      if (state.countDown == 0)
                                        const TextSpan(
                                          text: 'vui lòng bấm gửi lại qua',
                                        ),
                                    ],
                                  ),
                                  textAlign: TextAlign.center,
                                ),
                                const SizedBox(
                                  height: 8,
                                ),
                                if (state.countDown == 0)
                                  OptionResendOTPComponent(
                                    onTapOption: (option) {
                                      _requestOtp(
                                        context,
                                        isRetry: true,
                                        option: option,
                                      );
                                    },
                                  ),
                              } else ...{
                                Text.rich(
                                  TextSpan(
                                    style: UITextStyle.medium.copyWith(
                                      fontSize: 16,
                                      color: UIColors.grayText,
                                    ),
                                    children: <InlineSpan>[
                                      const TextSpan(
                                        text:
                                            'Nếu không nhận được mã xác thực,\nvui lòng kiểm tra lại trong “Hộp thư rác” hoặc\n',
                                      ),
                                      if (state.countDown != 0)
                                        TextSpan(
                                          text: 'bấm gửi lại ',
                                          children: [
                                            TextSpan(
                                              text: 'sau ${state.countDown ?? ''}s',
                                              style: UITextStyle.semiBold.copyWith(
                                                fontSize: 16,
                                              ),
                                            ),
                                          ],
                                        ),
                                      if (state.countDown == 0)
                                        TextSpan(
                                          text: 'bấm ',
                                          children: [
                                            TextSpan(
                                              recognizer: TapGestureRecognizer()
                                                ..onTap = () {
                                                  _requestOtp(
                                                    context,
                                                    isRetry: true,
                                                  );
                                                },
                                              text: 'gửi lại ',
                                              style: UITextStyle.semiBold.copyWith(
                                                fontSize: 16,
                                                color: UIColors.primaryColor,
                                              ),
                                            ),
                                          ],
                                        ),
                                    ],
                                  ),
                                  textAlign: TextAlign.center,
                                ),
                              },
                            ],
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
              Visibility(
                visible: state.requestStatus.isLoading || state.verifyStatus.isLoading,
                child: const LoadingWidget.dark(),
              ),
            ],
          );
        },
      ),
    );
  }

  _requestOtp(
    BuildContext context, {
    bool? isRetry,
    String? option,
  }) {
    final cubit = context.read<RequestOtpCubit>();
    if (widget.type.isPhone) {
      cubit.requestOTP(
        mobilePhone: widget.mobilePhone,
        isRetry: isRetry,
        type: option,
      );
    }
    if (widget.type.isEmail) {
      cubit.requestEmailOTP(
        email: widget.email,
      );
    }
  }

  _verifyOtp(
    BuildContext context, {
    bool? isRetry,
    String? option,
  }) {
    final cubit = context.read<RequestOtpCubit>();
    if (widget.type.isPhone) {
      cubit.verifyOTP(
        mobilePhone: widget.mobilePhone,
      );
    }
    if (widget.type.isEmail) {
      cubit.verifyEmailOTP(
        email: widget.email,
      );
    }
  }
}
