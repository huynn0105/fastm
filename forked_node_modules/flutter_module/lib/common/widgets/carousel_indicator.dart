import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';

enum CarouselIndicatorStyle {
  dot,
  rectangle,
}

class CarouselIndicator extends StatelessWidget {
  const CarouselIndicator({
    Key? key,
    required this.length,
    this.currentIndex = 0,
    this.style = CarouselIndicatorStyle.dot,
  }) : super(key: key);

  final int length;
  final int currentIndex;
  final CarouselIndicatorStyle style;

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      mainAxisAlignment: MainAxisAlignment.center,
      children: List.generate(
        max(0, length * 2 - 1),
        (index) {
          if (index.isOdd) {
            return const SizedBox(
              width: 4,
            );
          }
          index = index ~/ 2;
          switch (style) {
            case CarouselIndicatorStyle.rectangle:
              return RoundedRectangleIndicator(
                enable: index == currentIndex,
              );
            case CarouselIndicatorStyle.dot:
            default:
              return DotIndicator(
                enable: index == currentIndex,
              );
          }
        },
      ),
    );
  }
}

class DotIndicator extends StatelessWidget {
  const DotIndicator({
    super.key,
    this.enable = false,
  });
  final bool enable;
  @override
  Widget build(BuildContext context) {
    final color = enable ? Colors.white : Colors.white30;
    return AnimatedContainer(
      duration: AppConstants.duration,
      width: 8,
      height: 8,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        color: color,
      ),
    );
  }
}

class RoundedRectangleIndicator extends StatelessWidget {
  const RoundedRectangleIndicator({
    super.key,
    this.enable = false,
  });

  final bool enable;
  @override
  Widget build(BuildContext context) {
    final width = enable ? 30.0 : 15.0;
    final color = enable ? UIColors.grayText : UIColors.gray;
    return AnimatedContainer(
      duration: AppConstants.duration,
      height: 3,
      width: width,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        color: color,
      ),
    );
  }
}
