import 'dart:math' as math;
import 'dart:ui';
import 'package:assorted_layout_widgets/assorted_layout_widgets.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/widgets/buttons.dart';

class TicketWidget extends StatelessWidget {
  const TicketWidget({
    Key? key,
    required this.leading,
    required this.trailing,
    this.width,
    this.showBorder = false,
    this.backgroundColor = UIColors.white,
    this.borderColor = UIColors.white,
    this.onLeadingTap,
    this.onTrailingTap,
    this.leadingPadding = const EdgeInsets.all(12),
    this.trailingPadding = const EdgeInsets.all(12),
  }) : super(key: key);

  const TicketWidget.border({
    Key? key,
    required this.leading,
    required this.trailing,
    this.width,
    this.showBorder = true,
    this.backgroundColor = const Color(0xffdcf9f1),
    this.borderColor = UIColors.white,
    this.onLeadingTap,
    this.onTrailingTap,
    this.leadingPadding = const EdgeInsets.all(12),
    this.trailingPadding = const EdgeInsets.all(12),
  }) : super(key: key);

  final Widget leading;
  final Widget trailing;
  final double? width;
  final Color backgroundColor;
  final Color borderColor;
  final bool showBorder;
  final Function()? onLeadingTap;
  final Function()? onTrailingTap;
  final EdgeInsets leadingPadding;
  final EdgeInsets trailingPadding;

  @override
  Widget build(BuildContext context) {
    double outerRadius = 8;
    double offset = 0;
    double innerRadius = 0;

    if (showBorder) {
      offset = 3;
      innerRadius = outerRadius - offset;
    }

    ///
    return Container(
      width: width,
      clipBehavior: Clip.hardEdge,
      decoration: BoxDecoration(
        color: showBorder ? borderColor : UIColors.white,
        borderRadius: BorderRadius.circular(outerRadius),
      ),
      child: ColumnSuper(
        separator: Stack(
          children: [
            CustomPaint(
              painter: TicketDividerPainter(
                showBorder: showBorder,
                offset: offset,
                borderColor: borderColor,
              ),
              child: Container(
                height: 16,
                width: double.infinity,
                color: Colors.transparent,
              ),
            ),
          ],
        ),
        children: [
          AppSplashButton(
            onTap: onLeadingTap,
            child: Container(
              margin: EdgeInsets.fromLTRB(offset, offset, offset, 0),
              padding: leadingPadding,
              decoration: BoxDecoration(
                color: backgroundColor,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(innerRadius),
                  topRight: Radius.circular(innerRadius),
                ),
              ),
              child: leading,
            ),
          ),
          AppSplashButton(
            onTap: onTrailingTap,
            child: Container(
              margin: EdgeInsets.fromLTRB(offset, 0, offset, offset),
              padding: trailingPadding,
              decoration: BoxDecoration(
                color: backgroundColor,
                borderRadius: BorderRadius.only(
                  bottomLeft: Radius.circular(innerRadius),
                  bottomRight: Radius.circular(innerRadius),
                ),
              ),
              child: trailing,
            ),
          ),
        ],
      ),
    );
  }
}

class TicketDividerPainter extends CustomPainter {
  const TicketDividerPainter({
    this.gapSize = 5,
    this.dashSize = 8,
    this.dashWeight = 1,
    this.dashColor = UIColors.lightGray,
    this.radiusColor = UIColors.background,
    this.offset = 0,
    this.showBorder = false,
    this.borderColor = UIColors.white,
  });

  final double gapSize;
  final double dashSize;
  final double dashWeight;
  final Color dashColor;
  final Color radiusColor;
  final bool showBorder;
  final double offset;
  final Color borderColor;

  @override
  void paint(Canvas canvas, Size size) {
    double radius = size.height / 2;

    drawSemiCircle(
      canvas: canvas,
      size: size,
      radius: radius,
      showBorder: showBorder,
    );

    drawDottedLine(
      canvas: canvas,
      width: size.width - (radius * 2),
      dashSize: dashSize,
      gapSize: gapSize,
      startX: radius + gapSize,
      startY: radius,
      showBorder: showBorder,
    );
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    return true;
  }

  void drawSemiCircle({
    required Canvas canvas,
    required Size size,
    required double radius,
    required bool showBorder,
  }) {
    if (showBorder) {
      Paint outerPaint = Paint()
        ..color = borderColor
        ..style = PaintingStyle.fill;

      Path outerPath = Path()
        ..addArc(
          Rect.fromCircle(
            center: Offset(0, radius),
            radius: radius + offset,
          ),
          -math.pi / 2,
          math.pi,
        )
        ..addArc(
          Rect.fromCircle(
            center: Offset(size.width, radius),
            radius: radius + offset,
          ),
          math.pi / 2,
          math.pi,
        );

      canvas.drawPath(outerPath, outerPaint);
    }

    Paint innerPaint = Paint()
      ..color = radiusColor
      ..style = PaintingStyle.fill;

    Path innerPath = Path()
      ..addArc(
        Rect.fromCircle(
          center: Offset(0, radius),
          radius: radius,
        ),
        -math.pi / 2,
        math.pi,
      )
      ..addArc(
        Rect.fromCircle(
          center: Offset(size.width, radius),
          radius: radius,
        ),
        math.pi / 2,
        math.pi,
      );

    canvas.drawPath(innerPath, innerPaint);
  }

  void drawDottedLine({
    required Canvas canvas,
    required double width,
    required double dashSize,
    required double gapSize,
    required double startX,
    required double startY,
    required bool showBorder,
  }) {
    Paint paint = Paint()
      ..color = dashColor
      ..strokeWidth = dashWeight
      ..strokeCap = StrokeCap.round;

    double jointSize;
    double leapSize;
    double? firstDashSize;

    double position = startX;
    List<Offset> points = [];

    if (showBorder) {
      width = width - offset * 2;
      position = position + offset;
    }

    if (paint.strokeCap != StrokeCap.butt) {
      jointSize = dashSize + gapSize;
      leapSize = (width + gapSize) % jointSize;

      if (leapSize != 0) {
        if (gapSize > dashSize && gapSize - leapSize >= dashSize) {
          position = leapSize / 2;
        } else {
          firstDashSize = (dashSize - gapSize + leapSize) / 2;
        }
      }

      if (firstDashSize != null) {
        points.add(Offset(position, startY));
        points.add(Offset(position += firstDashSize, startY));
        position += gapSize;
      }

      do {
        points.add(Offset(position, startY));
        points.add(Offset(position + dashSize, startY));
      } while ((position += jointSize) + dashSize <= width);

      if (firstDashSize != null) {
        points.add(Offset(width - firstDashSize, startY));
        points.add(Offset(width, startY));
      }
    } else {
      dashSize += paint.strokeWidth;

      jointSize = dashSize + gapSize;
      leapSize = (width + gapSize) % jointSize;

      position = leapSize / 2;

      /// position + pointSize <= width + pointSize
      do {
        points.add(Offset(position, startY));
        points.add(Offset(position + dashSize, startY));
      } while ((position += jointSize) + dashSize <= width);

      if (leapSize < paint.strokeWidth) {
        points.first = Offset(
          points.first.dx + startY,
          points.first.dy,
        );
        points.last = Offset(
          points.last.dx - startY,
          points.last.dy,
        );
      }
    }

    canvas.drawPoints(PointMode.lines, points, paint);
  }
}

// class TicketClipper extends CustomClipper<Path> {
//   static const double clipPadding = 5;
//
//   final double borderRadius;
//   final double clipRadius;
//   final double dashWidth;
//   final int dashLength;
//
//   const TicketClipper({
//     required this.borderRadius,
//     required this.clipRadius,
//     required this.dashWidth,
//     required this.dashLength,
//   });
//
//   @override
//   Path getClip(Size size) {
//     var path = Path();
//
//     final clipCenterY = size.height * 1 / 3;
//
//     // draw rect
//     path.addRRect(
//       RRect.fromRectAndRadius(
//         Rect.fromLTWH(0, 0, size.width, size.height),
//         Radius.circular(borderRadius),
//       ),
//     );
//
//     final clipPath = Path();
//
//     // circle on the left
//     clipPath.addOval(
//       Rect.fromCircle(
//         center: Offset(0, clipCenterY),
//         radius: clipRadius,
//       ),
//     );
//
//     // circle on the right
//     clipPath.addOval(
//       Rect.fromCircle(
//         center: Offset(size.width, clipCenterY),
//         radius: clipRadius,
//       ),
//     );
//
//     // draw small clip circles
//     final clipContainerSize = size.width - clipRadius * 2 - clipPadding * 2;
//     final smallClipSize = dashWidth * 2;
//     final smallClipBoxSize = clipContainerSize / dashLength;
//     final smallClipPadding = (smallClipBoxSize - smallClipSize) / 2;
//     final smallClipStart = clipRadius + clipPadding;
//
//     final smallClipCenterOffsets = List.generate(
//       dashLength,
//       (index) {
//         final boxX = smallClipStart + smallClipBoxSize * index;
//         final centerX = boxX + smallClipPadding + dashWidth;
//         return Offset(centerX, clipCenterY);
//       },
//     );
//
//     for (var centerOffset in smallClipCenterOffsets) {
//       clipPath.addRRect(
//         RRect.fromRectAndRadius(
//           Rect.fromCenter(center: centerOffset, width: 10, height: 1),
//           const Radius.circular(3),
//         ),
//       );
//     }
//
//     // combine two path together
//     final ticketPath = Path.combine(
//       PathOperation.reverseDifference,
//       clipPath,
//       path,
//     );
//
//     return ticketPath;
//   }
//
//   @override
//   bool shouldReclip(TicketClipper oldClipper) => true;
//
//   // @override
//   // bool shouldReclip(TicketClipper oldClipper) =>
//   //     oldClipper.borderRadius != borderRadius ||
//   //     oldClipper.clipRadius != clipRadius ||
//   //     oldClipper.dashWidth != dashWidth ||
//   //     oldClipper.dashLenght != dashLenght;
// }
