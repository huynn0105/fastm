import 'dart:io';

import 'package:android_id/android_id.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/models/academy/event/academy_event_checkout_model.dart';
import 'package:flutter_module/models/chat/message/author_model.dart';
import 'package:flutter_module/models/home_data/home_item_model.dart';
import 'package:flutter_module/models/mfast/app_info/mfast_app_info_model.dart';
import 'package:flutter_module/models/mtrade/config/brochure_config_model.dart';
import 'package:flutter_module/models/mtrade/config/mtrade_config_model.dart';
import 'package:flutter_module/models/mtrade/pay_later/mtrade_pre_screen_data.dart';
import 'package:flutter_module/models/mtrade/product_group/mtrade_special_group_model.dart';
import 'package:flutter_module/models/user/user_meta_data_model.dart';
import 'package:flutter_module/services/firebase/firebase_auth/firebase_auth_service.dart';
import 'package:package_info_plus/package_info_plus.dart';

import 'common/enum/mtrade/landing_page_source.dart';
import 'features/mtrade/cubit/delivery_support/mtrade_delivery_support_cubit.dart';
import 'features/mtrade/cubit/personal_website_setup/mtrade_personal_website_setup_cubit.dart';
import 'models/bridge/default_param_model.dart';

class AppData {
  AppData._();

  static final instance = AppData._();

  late String accessToken;
  late DefaultParamModel defaultParam;
  late String webUrl;
  late String userID;

  late MFastAppInfoModel appInfo;

  String firebaseAuthToken = '';
  String? chatUserID;
  String? threadID;

  String? initialDeepLinkURI;

  bool? showMTradeCampaign = true; // RN: default is true

  String? landingPageUrl;
  String? landingPageID;
  String? landingPageProvinceCode;
  String? landingPageDistrictCode;
  String? landingPageWardCode;
  MTradeLandingPageSource? landingPageSource;
  String? mtradeAlias;
  String? lastOTPType;

  String? deliverySupportProvinceCode;
  String? deliverySupportDistrictCode;
  String? deliverySupportWardCode;
  String? selectedProductGroup;
  MTradeSpecialGroupModel? selectedSpecialGroup;
  String? saleName;
  String? saleEmail;
  String? salePhoneNumber;

  String? generatedProductToken;
  MTradePreScreenDataModel? preScreenData;

  AcademyEventCheckOutModel? eventCheckOut;
  AuthorModel? author;

  MTradeConfigModel? configs;
  BrochureConfigModel? brochureConfigs;

  int maxProductPerOrder = 0;
  int maxQuantityPerProduct = 0;
  int otpQuota = 1;

  UserMetaDataModel? userMetaData;

  List<HomeItemModel> homeHighlightProducts = [];

  // initFromArguments(Map<String, dynamic> args) async {
  //   // initialPath = args["initial_path"] ?? "";
  //   appInfo = MFastAppInfoModel.fromJson(args["app_info"] ?? {});
  //   saleName = args["user_metadata"]?["fullName"] ?? "";
  //   saleEmail = args["user_metadata"]?["email"] ?? "";
  //   salePhoneNumber = args["user_metadata"]?["phone"] ?? "";
  //   webUrl = args["web_url"] ?? "";
  //   userID = args["user_metadata"]?["userId"] ?? "";
  //   author = AuthorModel.fromConfigJson(args["user_metadata"] ?? {});
  //   firebaseAuthToken = args["firebase_auth_token"] ?? "";
  //   chatUserID = args["chat_user_id"] ?? "";
  //   threadID = args["thread_id"] ?? "";
  //
  //   /// TODO: for deeplink v3
  //   selectedProductGroup = TextUtils.decode(args["filter"])["productGroup"];
  //   Map<String, dynamic>? specialGroup = TextUtils.decode(args["filter"])["specialGroup"];
  //   if (specialGroup?.isNotEmpty == true) {
  //     selectedSpecialGroup = MTradeSpecialGroupModel(
  //       keyword: specialGroup?.keys.firstOrNull,
  //       code: specialGroup?.values.firstOrNull,
  //     );
  //   }
  //
  //   /// TODO: for deeplink v2
  //   // final productCategory = (TextUtils.decode(args["filter"])["productCategory"] as List?);
  //   // if (productCategory != null && productCategory.isNotEmpty) {
  //   //   selectedProductGroup = productCategory.valueAt(0);
  //   //   return;
  //   // }
  //
  //   /// TODO: for deeplink v1
  //   // final productGroup = (TextUtils.decode(args["filter"])["productGroup"] as List?);
  //   // if (productGroup != null && productGroup.isNotEmpty) {
  //   //   selectedProductGroup = productGroup.valueAt(0);
  //   // }
  //
  //   /// Firebase
  //   if (kDebugMode && !kIsWeb && TextUtils.isNotEmpty(firebaseAuthToken)) {
  //     FirebaseAuthService.instance.signInWithCustomToken(firebaseAuthToken);
  //   } else if (!kIsWeb) {
  //     String? token = await FirebaseAuthService.instance.currentUser?.getIdToken(true);
  //     firebaseAuthToken = token ?? '';
  //   }
  // }

  setMTradeConfigs(MTradeConfigModel? configs) {
    this.configs = configs;
    //
    maxProductPerOrder = configs?.product?.productLimit ?? 0;
    maxQuantityPerProduct = configs?.product?.quantityLimit ?? 0;
    brochureConfigs = configs?.product?.brochure;
  }

  initFromLandingPageUrl() async {
    if (kDebugMode) {
      GlobalFunction.addWebParam({
        'pageID': 'daa-mtrade-987655',
        'provinceCode': '79',
        'districtCode': '785',
      });
    }
    landingPageUrl = Uri.base.path;
    landingPageID = Uri.base.queryParameters["pageID"];
    landingPageProvinceCode = Uri.base.queryParameters["provinceCode"];
    landingPageDistrictCode = Uri.base.queryParameters["districtCode"];
    await getItInstance.get<MTradeDeliverySupportCubit>().fetchDataFromLocal();
    await getItInstance.get<MTradePersonalWebsiteSetupCubit>().fetchData();
    AppData.instance.saleName = getItInstance.get<MTradePersonalWebsiteSetupCubit>().state.data?.fullName ?? '';
    AppData.instance.salePhoneNumber =
        getItInstance.get<MTradePersonalWebsiteSetupCubit>().state.data?.mobilePhone ?? '';
  }

  String? appVersion;
  String? deviceUDID;
  String? deviceModel;
  String? osVersion;
  bool? isPhysicalDevice;
  int androidSDKLevel = 0;

  bool get isIOSSimulator => !(isPhysicalDevice == true) && Platform.isIOS;

  getDeviceInfo() async {
    var device = DeviceInfoPlugin();
    if (Platform.isIOS) {
      var iosDeviceInfo = await device.iosInfo;
      deviceUDID = iosDeviceInfo.identifierForVendor; // unique ID on iOS
      deviceModel = iosDeviceInfo.utsname.machine;
      osVersion = iosDeviceInfo.systemVersion;
      isPhysicalDevice = iosDeviceInfo.isPhysicalDevice;
    } else if (Platform.isAndroid) {
      const androidIdPlugin = AndroidId();
      deviceUDID = await androidIdPlugin.getId();
      final androidInfo = await DeviceInfoPlugin().androidInfo;
      androidSDKLevel = androidInfo.version.sdkInt;
      deviceModel = androidInfo.model;
      osVersion = androidInfo.version.release;
    }
    PackageInfo packageInfo = await PackageInfo.fromPlatform();
    appVersion = packageInfo.version;
  }

  setDefaultParam() {
    defaultParam = DefaultParamModel.fromJson({
      "mobileApp": "mfast",
      "appName": "mfast",
      "os": Platform.isIOS ? "ios" : "android",
      "appVersion": appVersion,
      "accessToken": accessToken,
    });
  }

  setAppInfo(MFastAppInfoModel appInfo) {
    this.appInfo = appInfo;
  }

  Future loginFirebaseToken(String fbToken) async {
    firebaseAuthToken = fbToken;
    await FirebaseAuthService.instance.signInWithCustomToken(firebaseAuthToken);
  }

  bool isWebDesktop() {
    return kIsWeb &&
        (defaultTargetPlatform == TargetPlatform.linux ||
            defaultTargetPlatform == TargetPlatform.macOS ||
            defaultTargetPlatform == TargetPlatform.windows);
  }

  Map<String, dynamic> getTrackingInfo() {
    return {
      ...defaultParam.toJsonWithoutToken(),
      "osVersion": osVersion,
      "deviceUDID": deviceUDID,
      "deviceModel": deviceModel,
    };
  }
}
