import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/onboarding/cubit/onboarding/onboarding_cubit.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:flutter_module/services/local/local_data_helper.dart';

part 'components/login_now.dart';
part 'components/next_step.dart';
part 'components/page_intro_view.dart';
part 'components/progress.dart';

@RoutePage()
class OnboardingPage extends StatelessWidget implements AutoRouteWrapper {
  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (_) => OnboardingCubit(),
      child: this,
    );
  }

  const OnboardingPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: UIColors.lightGray,
      body: Stack(
        children: [
          ClipPath(
            clipper: BottomClipper(),
            child: Container(
              height: 370,
              color: Colors.white,
            ),
          ),
          BlocBuilder<OnboardingCubit, OnboardingState>(
            builder: (context, state) {
              return AnimatedSwitcher(
                duration: const Duration(milliseconds: 300),
                child: Column(
                  key: Key(state.intros[state.currentStep].title),
                  children: [
                    SizedBox(height: AppSize.instance.safeTop + 10),
                    _ProgressView(index: state.currentStep),
                    const SizedBox(height: 30),
                    _PageIntroView(
                      key: Key(state.intros[state.currentStep].title),
                      title: state.intros[state.currentStep].title.toUpperCase(),
                      subtitle: state.intros[state.currentStep].subtitle,
                      image: state.intros[state.currentStep].image,
                    ),
                  ],
                ),
              );
            },
          ),
          Align(
            alignment: Alignment.bottomCenter,
            child: SizedBox(
              height: AppSize.instance.bottomBarHeight + 90,
              child: Padding(
                padding: const EdgeInsets.only(right: 32, left: 32),
                child: BlocBuilder<OnboardingCubit, OnboardingState>(
                  builder: (context, state) {
                    return AnimatedSwitcher(
                      duration: const Duration(milliseconds: 300),
                      child: state.currentStep == 2
                          ? const _LoginNow(
                              key: Key('prev'),
                            )
                          : const _NextStep(
                              key: Key('next'),
                            ),
                    );
                  },
                ),
              ),
            ),
          )
        ],
      ),
    );
  }
}

class BottomClipper extends CustomClipper<Path> {
  @override
  Path getClip(Size size) {
    var path = Path();
    path.lineTo(0, 0);
    path.lineTo(0, size.height - 40);
    path.quadraticBezierTo(size.width / 4, size.height, size.width / 2, size.height);
    path.quadraticBezierTo(size.width - size.width / 4, size.height, size.width, size.height - 40);
    path.lineTo(size.width, 0);
    path.lineTo(0, 0);
    return path;
  }

  @override
  bool shouldReclip(CustomClipper<Path> oldClipper) {
    return true;
  }
}
