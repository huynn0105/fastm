import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/enum/mfast/liveness_support_status.dart';
import 'package:flutter_module/features/mfast/repository/mfast_repository.dart';
import 'package:flutter_module/models/mfast/user_meta_data/mfast_user_meta_data_model.dart';

part 'personal_information_state.dart';

class PersonalInformationCubit extends Cubit<PersonalInformationState> {
  PersonalInformationCubit() : super(const PersonalInformationState());
  final MFastRepository _repository = MFastRepository();

  final TextEditingController oldIdNumber = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController addressDistrictController = TextEditingController();
  final TextEditingController addressController = TextEditingController();

  initData({
    MFastUserMetaDataModel? userMetaData,
  }) {
    oldIdNumber.text = userMetaData?.countryOldIdNumber ?? '';
    emailController.text = userMetaData?.emailAddress ?? '';
    addressController.text = userMetaData?.addressCurrent ?? '';
    addressDistrictController.text = userMetaData?.addressCurrentDistrict ?? '';
    emit(state.copyWith(
      userMetaData: userMetaData,
    ));
  }

  fetchDistricts() async {
    emit(state.copyWith(
      districtStatus: BlocStatus.loading,
    ));

    final result = await _repository.getDistricts();

    if (result.status) {
      emit(state.copyWith(
        districtStatus: BlocStatus.success,
        districts: result.data,
      ));
    } else {
      emit(state.copyWith(
        districtStatus: BlocStatus.failure,
      ));
    }
  }

  updateUserMetaData({
    String? emailAddress,
    String? gender,
    String? addressCurrent,
    String? addressCurrentDistrict,
    String? countryOldIdNumber,
  }) {
    final MFastUserMetaDataModel userMetaData = state.userMetaData ?? MFastUserMetaDataModel();
    emit(state.copyWith(
      userMetaData: userMetaData.copyWith(
        emailAddress: emailAddress,
        gender: gender,
        addressCurrent: addressCurrent,
        countryOldIdNumber: countryOldIdNumber,
      ),
    ));
  }

  changeEmail({required String value}) {
    final MFastUserMetaDataModel userMetaData = state.userMetaData ?? MFastUserMetaDataModel();
    emit(state.copyWith(
      userMetaData: userMetaData.copyWith(
        emailAddress: value,
      ),
    ));
  }

  changeGender({required String value}) {
    final MFastUserMetaDataModel userMetaData = state.userMetaData ?? MFastUserMetaDataModel();
    emit(state.copyWith(
      userMetaData: userMetaData.copyWith(
        gender: value,
      ),
    ));
  }

  changeAddressCurrent({required String value}) {
    final MFastUserMetaDataModel userMetaData = state.userMetaData ?? MFastUserMetaDataModel();
    emit(state.copyWith(
      userMetaData: userMetaData.copyWith(
        addressCurrent: value,
      ),
    ));
  }

  changeAddressCurrentDistrict({required DataWrapper value}) {
    final MFastUserMetaDataModel userMetaData = state.userMetaData ?? MFastUserMetaDataModel();
    emit(state.copyWith(
      userMetaData: userMetaData.copyWith(
        addressCurrentDistrict: value.value,
      ),
    ));
    addressDistrictController.text = value.value ?? '';
  }

  sendSupport({required String note}) async {
    if (state.userMetaData == null) return;
    final MFastUserMetaDataModel payload = MFastUserMetaDataModel(
      isLockedKyc: false,
      livenessWithIdNumberStatus: LivenessSupportStatus.pending.name,
      livenessWithIdNumberNote: note,
    );

    emit(state.copyWith(
      lockStatus: BlocStatus.loading,
    ));

    final result = await _repository.updateUserMetaData(payload: payload);

    if (result.status) {
      emit(state.copyWith(
        lockStatus: BlocStatus.success,
        userMetaData: result.data,
      ));
    } else {
      emit(state.copyWith(
        lockStatus: BlocStatus.failure,
        updateErrorMessage: result.errorMessage,
      ));
    }
  }

  submitInfo() async {
    if (state.userMetaData == null) return;
    final MFastUserMetaDataModel payload = MFastUserMetaDataModel(
      isVerifiedEmail: true,
      livenessWithIdNumberStatus: "",
      emailAddress: state.userMetaData?.emailAddress,
      addressCurrent: state.userMetaData?.addressCurrent,
      addressCurrentDistrict: state.userMetaData?.addressCurrentDistrict,
      gender: state.userMetaData?.gender,
      countryIdNumber: state.userMetaData?.countryIdNumber,
      countryOldIdNumber: state.userMetaData?.countryOldIdNumber,
    );

    emit(state.copyWith(
      submitStatus: BlocStatus.loading,
    ));

    final result = await _repository.updateUserMetaData(payload: payload);

    if (result.status) {
      emit(state.copyWith(
        submitStatus: BlocStatus.success,
        userMetaData: result.data,
      ));
    } else {
      emit(state.copyWith(
        submitStatus: BlocStatus.failure,
        updateErrorMessage: result.errorMessage,
      ));
    }
  }

  checkDuplicateEmail() async {
    emit(state.copyWith(
      checkStatus: BlocStatus.loading,
    ));

    final result = await _repository.checkDuplicateEmail(
      email: state.userMetaData?.emailAddress ?? "",
    );

    if (result.status) {
      emit(state.copyWith(
        checkStatus: BlocStatus.success,
      ));
    } else {
      emit(state.copyWith(
        checkStatus: BlocStatus.failure,
      ));
    }
  }
}
