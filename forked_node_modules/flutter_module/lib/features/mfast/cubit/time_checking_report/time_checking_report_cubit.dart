import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/utils/location_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/features/mfast/repository/mfast_repository.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/models/mfast/report/filter_report_model.dart';
import 'package:flutter_module/models/mfast/report/report_model.dart';
import 'package:flutter_module/models/mfast/report/report_submit_model.dart';
import 'package:flutter_module/models/mfast/report/report_submit_response_model.dart';
import 'package:geolocator/geolocator.dart';

part 'time_checking_report_state.dart';

class TimeCheckingReportCubit extends Cubit<TimeCheckingReportState> {
  TimeCheckingReportCubit() : super(const TimeCheckingReportState());
  final MFastRepository _repository = MFastRepository();

  bool _processing = false;

  void getData() async {
    emit(state.copyWith(status: BlocStatus.loading));
    final result = await Future.wait([
      _repository.getReportCategories(ReportType.activeReport.name),
      _repository.getReportCategories(ReportType.projectReport.name),
    ]);

    if (result.first.status && result.last.status) {
      final allWorkingReports = result.first.data?.reports ?? [];
      final allProjectReports = result.last.data?.reports ?? [];

      emit(state.copyWith(
        allWorkingReports: allWorkingReports,
        allProjectReports: allProjectReports,
        projectReportFilters: result.last.data?.filterReportModel ?? [],
        status: BlocStatus.success,
      ));

      //set default Tương tác khách hàng id = 8
      final defaultWorkingReportItem = allWorkingReports.singleWhereOrNull((x) => x.id == '8');
      if (defaultWorkingReportItem != null) {
        selectWorkingReport([defaultWorkingReportItem.id]);
      }
    } else {
      emit(state.copyWith(
        allWorkingReports: [],
        allProjectReports: [],
        status: BlocStatus.failure,
      ));
    }
  }

  void initDataToEdit(List<ReportModel> workingsReport, List<ReportModel> projectsReport) {
    List<ReportItemField> workingsReportFields = [];
    List<ReportItemField> projectsReportFields = [];

    for (var workingReport in workingsReport) {
      final inputs = workingReport.items.map((e) => e.items).expand((x) => x).toList();
      workingsReportFields.add(ReportItemField(
        report: workingReport,
        errorFields: {for (var input in inputs) input.id: ''},
        inputValueFields: {for (var input in inputs) input.id: '${input.value}'},
      ));
    }

    for (var projectReport in projectsReport) {
      final inputs = projectReport.items.map((e) => e.items).expand((x) => x).toList();

      projectsReportFields.add(ReportItemField(
        report: projectReport,
        errorFields: {for (var input in inputs) input.id: ''},
        inputValueFields: {for (var input in inputs) input.id: '${input.value}'},
      ));
    }
    emit(state.copyWith(
      workingReportsSelected: workingsReportFields,
      projectReportsSelected: projectsReportFields,
    ));
  }

  void selectWorkingReport(List<String> idsSelected) {
    final newWorkingReportsSelected = state.allWorkingReports.where((x) => idsSelected.contains(x.id)).toList();
    final oldWorkingReportsSelected = state.workingReportsSelected;
    List<ReportItemField> workingReportFieldsSelected = [];
    for (var newReport in newWorkingReportsSelected) {
      List<String> inputIds =
          newReport.items.map((e) => e.items.map((e) => e.id).toList()).toList().expand((x) => x).toList();

      bool isNew = true;

      for (var oldReport in oldWorkingReportsSelected) {
        if (newReport.id == oldReport.report.id) {
          workingReportFieldsSelected.add(oldReport);
          oldWorkingReportsSelected.remove(oldReport);
          isNew = false;
          break;
        }
      }

      if (isNew) {
        workingReportFieldsSelected.add(ReportItemField(
          report: newReport,
          errorFields: {for (var id in inputIds) id: ''},
          inputValueFields: {for (var id in inputIds) id: null},
        ));
      }
    }
    emit(state.copyWith(
      workingReportsSelected: workingReportFieldsSelected,
    ));
  }

  void selectProjectReport(List<String> idsSelected) {
    final newProjectReportsSelected = state.allProjectReports.where((x) => idsSelected.contains(x.id)).toList();
    final oldProjectReportsSelected = state.workingReportsSelected;
    List<ReportItemField> projectReportFieldsSelected = [];
    for (var newReport in newProjectReportsSelected) {
      List<String> inputIds =
          newReport.items.map((e) => e.items.map((e) => e.id).toList()).toList().expand((x) => x).toList();

      bool isNew = true;

      for (var oldReport in oldProjectReportsSelected) {
        if (newReport.id == oldReport.report.id) {
          projectReportFieldsSelected.add(oldReport);
          oldProjectReportsSelected.remove(oldReport);
          isNew = false;
          break;
        }
      }

      if (isNew) {
        projectReportFieldsSelected.add(ReportItemField(
          report: newReport,
          errorFields: {for (var id in inputIds) id: ''},
          inputValueFields: {for (var id in inputIds) id: null},
        ));
      }
    }
    emit(state.copyWith(
      projectReportsSelected: projectReportFieldsSelected,
    ));
  }

  String handleError(String? value, int minValue, int? maxValue) {
    if (value?.isEmpty == true) {
      return 'Thông tin bắt buộc';
    } else {
      int? num = int.tryParse(value ?? '');
      if (num == null) {
        return 'Sai định dạng';
      } else {
        if (num < minValue) {
          return 'Giá trị phải lớn hơn $minValue';
        }
        if (maxValue != null && num > maxValue) {
          return 'Giá trị phải nhỏ hơn $maxValue';
        }
      }
      return '';
    }
  }

  bool onValidateByType(ReportType type) {
    bool validate = true;
    List<ReportItemField> reportItemFields = [];
    String? keyScrollError;
    final reportsSelected =
        type == ReportType.activeReport ? state.workingReportsSelected : state.projectReportsSelected;
    if (reportsSelected.isEmpty) return false;
    for (var field in reportsSelected) {
      Map<String, String> errorFields = {};
      Map<String, String> inputValueFields = {};
      final detailItems = field.report.items.map((e) => e.items.map((e) => e)).toList().expand((x) => x).toList();

      field.inputValueFields.forEach((key, value) {
        final ReportDetailItemModel detail = detailItems.singleWhere((x) => x.id == key);
        String error = handleError(value, detail.minValue, detail.maxValue);
        errorFields[key] = error;
        inputValueFields[key] = value ?? '';
        if (error.isNotEmpty && keyScrollError == null) {
          validate = false;
          keyScrollError = field.report.id;
        }
      });
      reportItemFields.add(
        field.copyWith(
          errorFields: errorFields,
          inputValueFields: inputValueFields,
        ),
      );
    }
    emit(
      state.copyWith(
        workingReportsSelected: type == ReportType.activeReport ? reportItemFields : null,
        projectReportsSelected: type == ReportType.projectReport ? reportItemFields : null,
        keyScrollError: keyScrollError,
      ),
    );

    return validate;
  }

  String? onValidate() {
    final reportsSelected = [...state.workingReportsSelected, ...state.projectReportsSelected];
    if (reportsSelected.isEmpty) return null;
    for (var field in reportsSelected) {
      final detailItems = field.report.items.map((e) => e.items).toList().expand((x) => x).toList();
      for (var inputField in field.inputValueFields.entries.toList()) {
        final ReportDetailItemModel detail = detailItems.singleWhere((x) => x.id == inputField.key);
        String error = handleError(inputField.value, detail.minValue, detail.maxValue);
        if (error.isNotEmpty) return field.report.id;
      }
    }
    return null;
  }

  void onChangeFirstReportByType(ReportType type) {
    if (type == ReportType.activeReport) {
      emit(state.copyWith(
        isFirstInitWorkingReport: false,
      ));
    } else if (type == ReportType.projectReport) {
      emit(state.copyWith(
        isFirstInitProjectReport: false,
      ));
    }
  }

  void removeWorkingReportSelected(String id) {
    final workings = List<ReportItemField>.from(state.workingReportsSelected).toList();
    workings.removeWhere((x) => x.report.id == id);
    emit(state.copyWith(
      workingReportsSelected: workings,
    ));
  }

  void removeProjectReportSelected(String id) {
    final project = List<ReportItemField>.from(state.projectReportsSelected).toList();
    project.removeWhere((x) => x.report.id == id);
    emit(state.copyWith(
      projectReportsSelected: project,
    ));
  }

  void onSubmitReportData({bool isUpdate = false, String? reportID}) async {
    if (_processing) return;
    _processing = true;
    emit(state.copyWith(
      submitStatus: BlocStatus.loading,
    ));

    List<ReportModel> projects = [];
    List<ReportModel> workings = [];

    List<ReportDataModel> reportDatas = [];

    for (final report in state.projectReportsSelected) {
      List<ReportItemModel> reportItemDatas = [];
      for (final reportItem in report.report.items) {
        final detailReportItemData =
            reportItem.items.map((e) => e.copyWith(value: TextUtils.parseInt(report.inputValueFields[e.id]))).toList();
        final reportData = detailReportItemData.map(
          (e) => ReportDataModel(
            groupID: report.report.groupID,
            metaID: e.id,
            projectID: report.report.projectID,
            value: e.value.toString(),
            logID: e.logID,
          ),
        );
        reportDatas.addAll(reportData);

        reportItemDatas.add(reportItem.copyWith(
          items: detailReportItemData,
        ));
      }
      projects.add(report.report.copyWith(
        items: reportItemDatas,
      ));
    }
    for (final report in state.workingReportsSelected) {
      List<ReportItemModel> reportItemDatas = [];
      for (final reportItem in report.report.items) {
        final detailReportItemData =
            reportItem.items.map((e) => e.copyWith(value: TextUtils.parseInt(report.inputValueFields[e.id]))).toList();
        final reportData = detailReportItemData.map(
          (e) => ReportDataModel(
            groupID: report.report.groupID,
            metaID: e.id,
            projectID: report.report.projectID,
            value: e.value.toString(),
            logID: e.logID,
          ),
        );
        reportDatas.addAll(reportData);

        reportItemDatas.add(reportItem.copyWith(
          items: detailReportItemData,
        ));
      }
      workings.add(report.report.copyWith(
        items: reportItemDatas,
      ));
    }
    Position? position;
    if (!isUpdate) {
      position = await LocationUtil.instance.getCurrentLocation();
    }

    final dataSubmit = ReportSubmitModel(
      isFinalSubmit: isUpdate,
      reportData: reportDatas,
      reportID: reportID,
      location: position != null ? Location(lat: position.latitude, lon: position.longitude) : null,
    );
    BaseModel<ReportSubmitResponseModel> response = await _repository.submitDataReport(dataSubmit);

    if (response.status) {
      emit(state.copyWith(
        submitStatus: BlocStatus.success,
        submitWorkingReports: workings,
        submitProjectReports: projects,
        submitResponse: response.data,
        submitReportPayload: reportDatas,
      ));
    } else {
      emit(state.copyWith(
        submitStatus: BlocStatus.failure,
        messageError: response.errorMessage,
      ));
    }
    _processing = false;
  }

  void onValidateOnField(ReportItemField reportItemField, ReportType type, String id) {
    final list = type == ReportType.activeReport ? state.workingReportsSelected : state.projectReportsSelected;
    final reports = List<ReportItemField>.from(list);
    final int index = reports.indexOf(reportItemField);
    if (index == -1) {
      return;
    }

    reports[index].errorFields[id] = '';
    emit(state.copyWith(
      workingReportsSelected: type == ReportType.activeReport ? reports : null,
      projectReportsSelected: type == ReportType.projectReport ? reports : null,
    ));
  }
}

enum ReportType {
  projectReport('dự án'),
  activeReport('hoạt động');

  final String description;

  const ReportType(this.description);
}
