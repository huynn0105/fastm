part of 'time_checking_report_cubit.dart';

class TimeCheckingReportState extends Equatable {
  const TimeCheckingReportState({
    this.allWorkingReports = const [],
    this.workingReportsSelected = const [],
    this.allProjectReports = const [],
    this.projectReportsSelected = const [],
    this.status = BlocStatus.initial,
    this.projectReportFilters = const [],
    this.submitWorkingReports = const [],
    this.submitProjectReports = const [],
    this.submitStatus = BlocStatus.initial,
    this.submitResponse,
    this.submitReportPayload,
    this.messageError,
    this.keyScrollError,
    this.isFirstInitWorkingReport = true,
    this.isFirstInitProjectReport = true,
  });

  final BlocStatus status;
  final BlocStatus submitStatus;
  final List<ReportModel> allWorkingReports;
  final List<ReportItemField> workingReportsSelected;
  final List<ReportModel> allProjectReports;
  final List<ReportItemField> projectReportsSelected;
  final List<FilterReportModel> projectReportFilters;
  final List<ReportModel> submitWorkingReports;
  final List<ReportModel> submitProjectReports;
  final ReportSubmitResponseModel? submitResponse;
  final List<ReportDataModel>? submitReportPayload;
  final String? messageError;
  final String? keyScrollError;
  final bool isFirstInitWorkingReport;
  final bool isFirstInitProjectReport;

  TimeCheckingReportState copyWith({
    List<ReportModel>? allWorkingReports,
    List<ReportItemField>? workingReportsSelected,
    List<ReportModel>? allProjectReports,
    List<ReportModel>? submitWorkingReports,
    List<ReportModel>? submitProjectReports,
    List<ReportItemField>? projectReportsSelected,
    List<FilterReportModel>? projectReportFilters,
    ReportSubmitResponseModel? submitResponse,
    List<ReportDataModel>? submitReportPayload,
    BlocStatus? status,
    BlocStatus? submitStatus,
    String? messageError,
    String? keyScrollError,
    bool? isFirstInitWorkingReport,
    bool? isFirstInitProjectReport,
  }) {
    return TimeCheckingReportState(
      allWorkingReports: allWorkingReports ?? this.allWorkingReports,
      allProjectReports: allProjectReports ?? this.allProjectReports,
      projectReportsSelected: projectReportsSelected ?? this.projectReportsSelected,
      workingReportsSelected: workingReportsSelected ?? this.workingReportsSelected,
      submitWorkingReports: submitWorkingReports ?? this.submitWorkingReports,
      submitProjectReports: submitProjectReports ?? this.submitProjectReports,
      status: status ?? this.status,
      submitStatus: submitStatus ?? BlocStatus.initial,
      projectReportFilters: projectReportFilters ?? this.projectReportFilters,
      isFirstInitProjectReport: isFirstInitProjectReport ?? this.isFirstInitProjectReport,
      isFirstInitWorkingReport: isFirstInitWorkingReport ?? this.isFirstInitWorkingReport,
      submitResponse: submitResponse,
      submitReportPayload: submitReportPayload,
      messageError: messageError,
      keyScrollError: keyScrollError,
    );
  }

  @override
  List<Object?> get props => [
        allProjectReports,
        allWorkingReports,
        projectReportFilters,
        submitProjectReports,
        submitReportPayload,
        workingReportsSelected,
        status,
        submitStatus,
        projectReportsSelected,
        submitResponse,
        submitWorkingReports,
        messageError,
        keyScrollError,
        isFirstInitWorkingReport,
        isFirstInitProjectReport,
      ];
}

class ReportItemField {
  final ReportModel report;
  final Map<String, String?> inputValueFields;
  final Map<String, String> errorFields;

  ReportItemField({
    required this.report,
    this.inputValueFields = const {},
    this.errorFields = const {},
  });

  ReportItemField copyWith({
    ReportModel? report,
    Map<String, String?>? inputValueFields,
    Map<String, String>? errorFields,
  }) {
    return ReportItemField(
      report: report ?? this.report,
      inputValueFields: inputValueFields ?? this.inputValueFields,
      errorFields: errorFields ?? this.errorFields,
    );
  }
}

class SubmitReportData {
  final List<ReportModel> workingReports;
  final List<ReportModel> projectReports;
  final List<ReportDataModel> payload;
  final ReportSubmitResponseModel response;

  SubmitReportData({
    required this.workingReports,
    required this.projectReports,
    required this.payload,
    required this.response,
  });

  SubmitReportData copyWith({
    List<ReportModel>? workingReports,
    List<ReportModel>? projectReports,
    List<ReportDataModel>? payload,
    ReportSubmitResponseModel? response,
  }) {
    return SubmitReportData(
      workingReports: workingReports ?? this.workingReports,
      projectReports: projectReports ?? this.projectReports,
      payload: payload ?? this.payload,
      response: response ?? this.response,
    );
  }
}
