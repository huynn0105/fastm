import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/mfast/cubit/time_checking_report/time_checking_report_cubit.dart';
import 'package:flutter_module/features/mfast/repository/mfast_repository.dart';
import 'package:flutter_module/models/mfast/report/report_submit_model.dart';
import 'package:flutter_module/models/mfast/time_checking/time_checking_detail_model.dart';
import 'package:flutter_module/services/api/mfast/payload/time_checking_report_detail_payload.dart';

part 'time_checking_report_detail_state.dart';

class TimeCheckingReportDetailCubit extends Cubit<TimeCheckingReportDetailState> {
  TimeCheckingReportDetailCubit() : super(const TimeCheckingReportDetailState());

  final _repository = MFastRepository();
  TimeCheckingReportDetailPayload _payload = TimeCheckingReportDetailPayload();

  initReportID({
    String? reportID,
    String? userID,
  }) {
    _payload = _payload.copyWith(
      reportID: reportID,
      userID: userID,
    );
  }

  initSubmitRepostData(SubmitReportData? data) {
    if (data == null) {
      return;
    }
    emit(state.copyWith(
      status: BlocStatus.success,
      isFinalSubmit: true,
      submitReportData: data,
    ));
  }

  changeEditMode() {
    emit(state.copyWith(
      isEditMode: !state.isEditMode,
    ));
  }

  fetchData() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.getReportDetail(_payload);

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        reportDetailData: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  submitReport() async {
    emit(state.copyWith(
      submitStatus: BlocStatus.loading,
    ));

    final result = await _repository.submitDataReport(
      ReportSubmitModel(
        isFinalSubmit: state.isFinalSubmit,
        reportData: state.submitReportData!.payload,
      ),
    );

    if (result.status) {
      emit(state.copyWith(
        submitStatus: BlocStatus.success,
        submitReportData: state.submitReportData?.copyWith(
          response: result.data,
        ),
      ));
    } else {
      emit(state.copyWith(
        submitStatus: BlocStatus.failure,
        errorMessage: result.errorMessage,
      ));
    }
  }
}
