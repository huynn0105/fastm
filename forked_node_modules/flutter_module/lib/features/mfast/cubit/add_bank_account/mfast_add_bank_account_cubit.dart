import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/utils/location_util.dart';
import 'package:flutter_module/features/mfast/repository/mfast_repository.dart';
import 'package:flutter_module/models/mfast/bank_account/bidv_bank_account_model.dart';
import 'package:flutter_module/models/mfast/bank_account/general_bank_branch_model.dart';
import 'package:flutter_module/models/mfast/bank_account/general_bank_model.dart';
import 'package:flutter_module/models/mfast/bank_account/suggested_bank_model.dart';
import 'package:flutter_module/models/mfast/user_meta_data/mfast_user_meta_data_model.dart';
import 'package:flutter_module/services/api/mfast/payload/mfast_add_bank_account_payload.dart';

part 'mfast_add_bank_account_state.dart';

class MFastAddBankAccountCubit extends Cubit<MFastAddBankAccountState> {
  MFastAddBankAccountCubit() : super(const MFastAddBankAccountState());

  final MFastRepository _repository = MFastRepository();

  final TextEditingController bankAccountNumberController = TextEditingController();
  final TextEditingController generalBankController = TextEditingController();
  final TextEditingController generalBankBranchController = TextEditingController();

  fetchData() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await Future.wait([
      getGeneralBanks(),
      getGeneralBankBranches(),
      getMetaDataBIDV(),
    ]);

    if (result.any((e) => e == true)) {
      emit(state.copyWith(
        status: BlocStatus.success,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  Future<bool> getGeneralBanks() async {
    emit(state.copyWith(
      enabledGeneralBankBranch: false,
    ));

    final result = await _repository.getGeneralBanks();

    if (result.status) {
      emit(state.copyWith(
        banks: result.data,
        enabledGeneralBank: true,
      ));
    }

    return result.status;
  }

  Future<bool> getGeneralBankBranches() async {
    final result = await _repository.getGeneralBankBranches();
    final groups = await compute<String, Map<String, List<MFastGeneralBankBranchModel>>>(
      (_) => groupBy(result.data ?? [], (e) => e.bankName ?? ''),
      '',
    );

    if (result.status) {
      emit(state.copyWith(
        bankBranches: result.data,
        groupBankBranches: Map<String, List<MFastGeneralBankBranchModel>>.from(groups),
      ));
    }

    return result.status;
  }

  Future<bool> getMetaDataBIDV() async {
    final result = await _repository.getMetaDataBIDV();

    if (result.status) {
      emit(state.copyWith(
        bidvMetaData: result.data,
      ));
    }

    return result.status;
  }

  changeBankAccountNumber(String value) {
    _validateErrorFields(json: _validateBankAccountNumberField());
  }

  selectBank(String id) {
    final value = state.banks.firstWhereOrNull((e) => e.bankName == id);
    if (value == null) {
      return;
    }
    generalBankController.text = value.bankName ?? '';
    generalBankBranchController.text = '';
    emit(state.copyWith(
      selectedGeneralBank: id,
      enabledGeneralBankBranch: true,
      clearSelectedBankBranch: true,
    ));
    _validateErrorFields(json: _validateGeneralBankField());
  }

  selectBankBranches(String id) {
    final value = getGeneralBranchesByBank().firstWhereOrNull((e) => e.branchCode == id);
    if (value == null) {
      return;
    }
    generalBankBranchController.text = value.branchName ?? '';
    emit(state.copyWith(
      selectedGeneralBankBranch: id,
    ));
    _validateErrorFields(json: _validateGeneralBankBranchField());
  }

  _validateBankAccountNumberField() {
    final errorFields = {...state.errorFields};

    if (bankAccountNumberController.text.isEmpty) {
      errorFields[AppConstants.bankAccountNumberKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.bankAccountNumberKey);
    }

    return errorFields;
  }

  _validateGeneralBankField() {
    final errorFields = {...state.errorFields};

    if (state.selectedGeneralBank == null) {
      errorFields[AppConstants.generalBankKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.generalBankKey);
    }

    return errorFields;
  }

  _validateGeneralBankBranchField() {
    final errorFields = {...state.errorFields};

    if (state.selectedGeneralBankBranch == null) {
      errorFields[AppConstants.generalBankBranchKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.generalBankBranchKey);
    }

    return errorFields;
  }

  bool _validateErrorFields({Map<String, String>? json}) {
    final errorFields = {...(json ?? state.errorFields)};
    final enabledSubmit = errorFields.isEmpty;
    emit(state.copyWith(
      errorFields: errorFields,
      enabledSubmit: enabledSubmit,
    ));
    return enabledSubmit;
  }

  bool _validate() {
    Map<String, String> errorFields = {...state.errorFields};

    errorFields.addAll(_validateBankAccountNumberField());
    errorFields.addAll(_validateGeneralBankField());
    errorFields.addAll(_validateGeneralBankBranchField());

    return _validateErrorFields(json: errorFields);
  }

  bool enabledSubmit() {
    return _validate();
  }

  submit({
    MFastUserMetaDataModel? userMetaData,
    required BuildContext context,
  }) async {
    if (!_validate()) {
      return;
    }

    final locationStatus = await LocationUtil.instance.requestPermission(context: context, openSettings: true);
    if (locationStatus && context.mounted) {
      final position = await LocationUtil.instance.getCurrentLocation();
      if (position != null && context.mounted) {
        emit(state.copyWith(
          submitStatus: BlocStatus.loading,
        ));

        final result = await _repository.addBankAccount(
          payload: MFastAddBankAccountPayload(
            selfiePath: userMetaData?.selfiePhoto,
            bankAccountNumber: bankAccountNumberController.text,
            bankName: state.selectedGeneralBank,
            bankBranch: state.selectedGeneralBankBranch,
            correct: 1,
            lat: position.latitude,
            lon: position.longitude,
          ),
        );

        if (result.status) {
          emit(state.copyWith(
            submitStatus: BlocStatus.success,
          ));
        } else {
          emit(state.copyWith(
            submitStatus: BlocStatus.failure,
            errorMessage: result.errorMessage,
          ));
        }
      }
    }
  }

  List<MFastGeneralBankBranchModel> getGeneralBranchesByBank() {
    final key = state.selectedGeneralBank ?? '';
    return state.groupBankBranches[key] ?? [];
  }

  getBIDVBankAccount() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.getBIDVBankAccount();

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        bidvBankAccount: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  bool _validateBIDV() {
    Map<String, String> errorFields = {...state.errorFields};

    errorFields.addAll(_validateBankAccountNumberField());
    return _validateErrorFields(json: errorFields);
  }

  bool enabledSubmitBIDVBankAccount() {
    return _validateBIDV();
  }

  submitBIDVBankAccount({
    MFastUserMetaDataModel? userMetaData,
  }) async {
    if (!_validateBIDV()) {
      return;
    }

    emit(state.copyWith(
      submitStatus: BlocStatus.loading,
    ));

    final result = await _repository.addBankAccount(
      payload: MFastAddBankAccountPayload(
        selfiePath: userMetaData?.selfiePhoto,
        bankAccountNumber: bankAccountNumberController.text,
        bankName: state.bidvBankAccount?.bankData?.bankName,
        bankBranch: state.bidvBankAccount?.bankData?.branchName,
        isBidvBanking: 1,
      ),
    );

    if (result.status) {
      emit(state.copyWith(
        submitStatus: BlocStatus.success,
        errorMessage: result.errorMessage,
      ));
    } else {
      emit(state.copyWith(
        submitStatus: BlocStatus.failure,
        errorMessage: result.errorMessage,
      ));
    }
  }

  @override
  Future<void> close() {
    bankAccountNumberController.dispose();
    generalBankController.dispose();
    generalBankBranchController.dispose();
    return super.close();
  }
}
