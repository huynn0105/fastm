import 'dart:io';

import 'package:bloc/bloc.dart';
import 'package:ekyc/common/enum/document.dart';
import 'package:ekyc/models/blue_info/document/blue_back_document_model.dart';
import 'package:ekyc/models/blue_info/document/blue_front_document_model.dart';
import 'package:ekyc/models/fpt/document/fpt_back_document_model.dart';
import 'package:ekyc/models/fpt/document/fpt_front_document_model.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/utils/base64_util.dart';
import 'package:flutter_module/common/utils/validation_util.dart';
import 'package:flutter_module/features/mfast/repository/mfast_repository.dart';
import 'package:ekyc/common/constants.dart' as ekyc;

import '../../../../app_data.dart';

part 'update_phone_number_state.dart';

class UpdatePhoneNumberCubit extends Cubit<UpdatePhoneNumberState> {
  UpdatePhoneNumberCubit() : super(const UpdatePhoneNumberState());

  final MFastRepository _repository = MFastRepository();
  final TextEditingController mobilePhoneController = TextEditingController();

  updatePhoneNumber() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.updateMobilePhone(mobilePhone: mobilePhoneController.text);

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
        errorMessage: result.errorMessage,
      ));
    }
  }

  _validateMobilePhone() {
    final errorFields = {...state.errorFields};

    if (mobilePhoneController.text.isEmpty) {
      errorFields[AppConstants.orderPhoneNumberKey] = 'Thông tin này là bắt buộc';
    } else if (mobilePhoneController.text.length < 10) {
      errorFields[AppConstants.orderPhoneNumberKey] = 'Số điện thoại phải gồm 10 chữ số';
    } else if (PhoneInputValidation.dirty(value: mobilePhoneController.text).isNotValid) {
      errorFields[AppConstants.orderPhoneNumberKey] = 'Số điện thoại không hợp lệ';
    } else {
      errorFields.remove(AppConstants.orderPhoneNumberKey);
    }

    emit(state.copyWith(
      errorFields: errorFields,
    ));
  }

  updateMobilePhone(String value) {
    _validateMobilePhone();
  }

  uploadImage(
    String imageBase64, {
    required DocumentSide documentSide,
  }) async {
    File? file = await Base64Util.convertBase64ToFile(imageBase64);
    if (file == null) return;

    if (documentSide.isFront) {
      emit(state.copyWith(
        frontCardStatus: BlocStatus.loading,
      ));
    }
    if (documentSide.isBack) {
      emit(state.copyWith(
        backCardStatus: BlocStatus.loading,
      ));
    }

    final result = await _repository.uploadImage(file: file);

    if (result.status) {
      if (documentSide.isFront) {
        emit(state.copyWith(
          frontCardStatus: BlocStatus.success,
          frontCardUrl: result.data,
        ));
      }
      if (documentSide.isBack) {
        emit(state.copyWith(
          backCardStatus: BlocStatus.success,
          backCardUrl: result.data,
        ));
      }
    } else {
      if (documentSide.isFront) {
        emit(state.copyWith(
          frontCardStatus: BlocStatus.failure,
        ));
      }
      if (documentSide.isBack) {
        emit(state.copyWith(
          backCardStatus: BlocStatus.failure,
        ));
      }
    }
  }

  removeCard({
    required DocumentSide documentSide,
  }) {
    if (documentSide.isFront) {
      emit(state.clearFrontCard());
      emit(state.clearBackCard());
    }
    if (documentSide.isBack) {
      emit(state.clearBackCard());
    }
  }

  updateInfoOCR({
    BlueFrontDocumentModel? blueFrontDocument,
    BlueBackDocumentModel? blueBackDocument,
    FPTFrontDocumentModel? fptFrontDocument,
    FPTBackDocumentModel? fptBackDocument,
  }) {
    emit(state.copyWith(
      //FRONT
      countryIdNumber: blueFrontDocument?.infors?.idNumber ?? fptFrontDocument?.id,
      countryIdName: blueFrontDocument?.infors?.fullname ?? fptFrontDocument?.name,
      //BACK
      countryIdIssuedDate: blueBackDocument?.infors?.issuedDate ?? fptBackDocument?.issueDate,
    ));

    if (blueFrontDocument != null) {
      emit(state.copyWith(
        frontCardMessage: _checkBlueInfoLegalityFront(value: blueFrontDocument)
            ? ''
            : 'Hình chụp mặt trước CMND/CCCD có dấu hiệu gian lận',
      ));
    }
    if (fptFrontDocument != null) {
      emit(state.copyWith(
        frontCardMessage:
            _checkFPTLegalityFront(value: fptFrontDocument) ? '' : 'Hình chụp mặt trước CMND/CCCD có dấu hiệu gian lận',
      ));
    }
    if (blueBackDocument != null) {
      emit(state.copyWith(
        backCardMessage: _checkBlueInfoLegalityBack(value: blueBackDocument)
            ? ''
            : 'Hình chụp mặt sau CMND/CCCD có dấu hiệu gian lận',
      ));
    }
    if (fptBackDocument != null) {
      emit(state.copyWith(
        backCardMessage:
            _checkFPTLegalityBack(value: fptBackDocument) ? '' : 'Hình chụp mặt sau CMND/CCCD có dấu hiệu gian lận',
      ));
    }
  }

  saveLogOCR({Map? data}) async {
    final result = await _repository.saveLogOCR(data: data);
  }

  bool _checkBlueInfoLegalityFront({BlueFrontDocumentModel? value}) {
    final double ekycValidCore = AppData.instance.appInfo.ekycValidScore ?? ekyc.AppConstants.validEkycCore;
    final double idProb = value?.probInfors?.idNumber ?? 0;
    final bool validId = idProb > ekycValidCore;
    final double nameProb = value?.probInfors?.fullname ?? 0;
    final bool validName = nameProb > ekycValidCore;
    final double dobProb = value?.probInfors?.dob ?? 0;
    final bool validDob = dobProb > ekycValidCore;
    final double sexProb = value?.probInfors?.gender ?? 0;
    final bool validSex = sexProb > ekycValidCore;
    final double nationalityProb = value?.probInfors?.nationality ?? 0;
    final bool validNationality = nationalityProb > ekycValidCore;
    final double homeProb = value?.probInfors?.hometown ?? 0;
    final bool validHome = homeProb > ekycValidCore;
    final double addressProb = value?.probInfors?.habitualAddress ?? 0;
    final bool validAddress = addressProb > ekycValidCore;
    final bool isRecapture = value?.fraudDetect?.recapture == true;
    final bool isCornerCut = value?.fraudDetect?.cornerCut == true;
    final bool isBlur = value?.fraudDetect?.checkBlur == true;
    final bool isCopied = value?.fraudDetect?.checkCopied == true;
    final bool isFaceSwapping = value?.fraudDetect?.faceSwapping == true;
    final bool unmatchIdAdd = value?.fraudDetect?.unmatchIdAdd == 'true';

    return validId &&
        validName &&
        validDob &&
        validSex &&
        validNationality &&
        validHome &&
        validAddress &&
        !isCornerCut &&
        !isRecapture &&
        !isBlur &&
        !isCopied &&
        !isFaceSwapping &&
        !unmatchIdAdd;
  }

  bool _checkFPTLegalityFront({FPTFrontDocumentModel? value}) {
    final double ekycValidCore = AppData.instance.appInfo.ekycValidScore ?? ekyc.AppConstants.validEkycCore;
    final double idProb = double.tryParse(value?.idProb ?? '') ?? 0;
    final bool validId = idProb > ekycValidCore;
    final double nameProb = double.tryParse(value?.nameProb ?? '') ?? 0;
    final bool validName = nameProb > ekycValidCore;
    final double dobProb = double.tryParse(value?.dobProb ?? '') ?? 0;
    final bool validDob = dobProb > ekycValidCore;
    final double sexProb = double.tryParse(value?.sexProb ?? '') ?? 0;
    final bool validSex = sexProb > ekycValidCore;
    final double nationalityProb = double.tryParse(value?.nationalityProb ?? '') ?? 0;
    final bool validNationality = nationalityProb > ekycValidCore;
    final double homeProb = double.tryParse(value?.homeProb ?? '') ?? 0;
    final bool validHome = homeProb > ekycValidCore;
    final double addressProb = double.tryParse(value?.addressProb ?? '') ?? 0;
    final bool validAddress = addressProb > ekycValidCore;
    final double doeProb = double.tryParse(value?.doeProb ?? '') ?? 0;
    final bool validDoe = doeProb > ekycValidCore;
    final bool isRecapture = value?.checkingResult?.recapturedResult == '1';
    final bool isCornerCut = value?.checkingResult?.cornerCutResult == '1';
    final bool isPhoto = value?.checkingResult?.checkPhotocopiedResult == '1';
    final bool isEdited = value?.checkingResult?.editedResult == '1';

    return validId &&
        validName &&
        validDob &&
        validSex &&
        validNationality &&
        validHome &&
        validAddress &&
        validDoe &&
        !isRecapture &&
        !isCornerCut &&
        !isPhoto &&
        !isEdited;
  }

  bool _checkBlueInfoLegalityBack({BlueBackDocumentModel? value}) {
    final double ekycValidCore = AppData.instance.appInfo.ekycValidScore ?? ekyc.AppConstants.validEkycCore;
    final double issuedPlace = value?.probInfors?.issuedPlace ?? 0;
    final bool validIssuedPlace = issuedPlace > ekycValidCore;
    final double issuedDate = value?.probInfors?.issuedDate ?? 0;
    final bool validIssuedDate = issuedDate > ekycValidCore;
    return validIssuedPlace && validIssuedDate;
  }

  bool _checkFPTLegalityBack({FPTBackDocumentModel? value}) {
    final double ekycValidCore = AppData.instance.appInfo.ekycValidScore ?? ekyc.AppConstants.validEkycCore;
    final String issueDateValue = value?.issueDateProb ?? '';
    final double issueDateProb = double.tryParse(issueDateValue) ?? 0;
    final bool isRecapture = value?.checkingResult?.recapturedResult == '1';
    final bool isCornerCut = value?.checkingResult?.cornerCutResult == '1';
    final bool isPhoto = value?.checkingResult?.checkPhotocopiedResult == '1';
    final bool isEdited = value?.checkingResult?.editedResult == '1';
    return issueDateProb > ekycValidCore && !isRecapture && !isCornerCut && !isPhoto && !isEdited;
  }
}
