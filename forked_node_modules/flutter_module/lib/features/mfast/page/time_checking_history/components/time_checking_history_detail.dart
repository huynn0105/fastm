part of '../time_checking_history_page.dart';

class _TimeCheckingHistoryDetail extends StatefulWidget {
  const _TimeCheckingHistoryDetail({
    super.key,
  });

  @override
  State<_TimeCheckingHistoryDetail> createState() => _TimeCheckingHistoryDetailState();
}

const double horizontalCalendarHeight = 150;
const double appbarHeight = 55;
const double calendarTableHeight = 310;

class _TimeCheckingHistoryDetailState extends State<_TimeCheckingHistoryDetail> {
  final ValueNotifier<double> _position = ValueNotifier<double>(1);

  final ValueNotifier<String> _icon = ValueNotifier<String>('ic_down');
  final double _heightBody = AppSize.instance.height - AppSize.instance.safeTop - appbarHeight;

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: BlocBuilder<TimeCheckingHistoryCubit, TimeCheckingHistoryState>(
        buildWhen: (pre, cur) => pre.dateTime.getTotalWeeksOfMonth() != cur.dateTime.getTotalWeeksOfMonth(),
        builder: (context, state) {
          final int totalWeek = state.dateTime.getTotalWeeksOfMonth();
          final maxHeight = _heightBody - horizontalCalendarHeight;
          double minHeight = _heightBody - calendarTableHeight;
          if (totalWeek >= 6) {
            // 50 = rowHeight of calendar table
            minHeight -= 50;
          }
          return SlidingUpPanel(
            maxHeight: maxHeight,
            minHeight: minHeight,
            onPanelSlide: (position) {
              _position.value = position;
            },
            onPanelClosed: () {
              _icon.value = 'ic_up';
            },
            onPanelOpened: () {
              _icon.value = 'ic_down';
            },
            color: Colors.transparent,
            backdropColor: Colors.transparent,
            boxShadow: const [],
            defaultPanelState: PanelState.OPEN,
            body: ValueListenableBuilder<double>(
              builder: (context, value, __) {
                final opacityHoz = _calOpacityHoz(value);
                final opacityCalendar = _calOpacityCalendar(1 - value);

                return Stack(
                  children: [
                    Opacity(
                      opacity: opacityHoz,
                      child: IgnorePointer(
                        ignoring: opacityHoz != 1,
                        child: const _HorizontalCalendar(),
                      ),
                    ),
                    Opacity(
                      opacity: opacityCalendar,
                      child: IgnorePointer(
                        ignoring: opacityCalendar != 1,
                        child: const _CalendarTable(),
                      ),
                    ),
                  ],
                );
              },
              valueListenable: _position,
            ),
            panelBuilder: () {
              return Stack(
                children: [
                  ClipPath(
                    clipper: BottomClipper(),
                    child: Container(
                      height: 100,
                      color: UIColors.background,
                      width: double.infinity,
                      alignment: Alignment.topCenter,
                      padding: const EdgeInsets.only(top: 10),
                      child: ValueListenableBuilder<String>(
                          valueListenable: _icon,
                          builder: (context, value, __) {
                            return AppImage.asset(
                              asset: value,
                              width: 32,
                              height: 32,
                            );
                          }),
                    ),
                  ),
                  Positioned.fill(
                    top: 70,
                    child: Container(
                      color: UIColors.background,
                      alignment: Alignment.center,
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: BlocBuilder<TimeCheckingHistoryCubit, TimeCheckingHistoryState>(
                        builder: (context, state) {
                          if (state.status.isLoading) {
                            return const SizedBox(
                              height: 270,
                              child: LoadingWidget.dark(),
                            );
                          }
                          return ListView(
                            padding: EdgeInsets.zero,
                            children: [
                              TimeCheckingInfoComponent(
                                dataInDay: state.dataInDay,
                                details: state.dataInDay?.historyDetail ?? [],
                              ),
                              const SizedBox(height: 6),
                              TimeCheckingReportComponent(
                                selectedDay: state.selectedDay,
                                details: state.dataInDay?.reportHistory ?? [],
                              ),
                            ],
                          );
                        },
                      ),
                    ),
                  ),
                ],
              );
            },
          );
        },
      ),
    );
  }

  double _calOpacityHoz(double value) {
    if (value > 0.7) {
      value += 0.3;
    }
    if (value > 1) {
      value = 1;
    }
    if (value < 0.4) {
      value = 0;
    }
    if (value >= 0.4 && value <= 0.7) {
      value -= 0.15;
    }

    return value;
  }

  double _calOpacityCalendar(double value) {
    if (value < 0.4) {
      value = 0;
    }
    if (value >= 0.4 && value < 0.6) {
      value -= 0.15;
    }
    return value;
  }
}

class BottomClipper extends CustomClipper<Path> {
  @override
  Path getClip(Size size) {
    var path = Path();

    path.moveTo(0, size.height * 0.5);

    path.quadraticBezierTo(size.width / 2, -50, size.width, size.height * 0.5);

    path.lineTo(size.width, size.height);
    path.lineTo(0, size.height);

    path.close();
    return path;
  }

  @override
  bool shouldReclip(CustomClipper<Path> oldClipper) {
    return true;
  }
}
