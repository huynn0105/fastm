part of '../time_checking_history_page.dart';

class _HorizontalCalendar extends StatefulWidget {
  const _HorizontalCalendar({super.key});

  @override
  State<_HorizontalCalendar> createState() => _HorizontalCalendarState();
}

class _HorizontalCalendarState extends State<_HorizontalCalendar> {
  late PageController pageController;

  @override
  void initState() {
    pageController = PageController(viewportFraction: 1 / 7);
    super.initState();
  }

  int getIndex(List<DateTime> dates, DateTime? date) {
    for (int i = 0; i < dates.length; i++) {
      if (isSameDay(dates[i], date)) {
        return i;
      }
    }
    return -1;
  }

  int _index = 0;

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 150,
      child: BlocConsumer<TimeCheckingHistoryCubit, TimeCheckingHistoryState>(
        listenWhen: (pre, cur) => !isSameDay(pre.selectedDay, cur.selectedDay),
        listener: (context, state) {
          WidgetsBinding.instance.addPostFrameCallback((_) {
            List<DateTime> listOfDates = getListOfMonth(state.dateTime);
            int index = getIndex(listOfDates, state.selectedDay);

            if (index >= 0) {
              int scrollIndex = index - 3;
              if (scrollIndex < 0) {
                scrollIndex = 0;
              }
              if (scrollIndex > listOfDates.length - 7 && !state.isCalendarClick) {
                scrollIndex = listOfDates.length - 7;
              }
              _index = index;
              pageController.jumpToPage(scrollIndex);
            }
          });
        },
        builder: (context, state) {
          List<DateTime> listOfDates = getListOfMonth(state.dateTime);

          return PageView.builder(
            scrollDirection: Axis.horizontal,
            padEnds: false,
            physics: const ClampingScrollPhysics(),
            onPageChanged: (int index) {
              setState(() {
                _index = index + 3;
              });
            },
            controller: pageController,
            itemCount: listOfDates.length,
            itemBuilder: (BuildContext context, int itemIndex) {
              double bottom = 50;
              int centerIndex = 3;
              double left = 0;
              double right = 0;
              double height = 76;
              double witdh = (AppSize.instance.width / 7) - 8;
              double radius = 32;

              if (_index < 3) {
                centerIndex = 3;
                _index = centerIndex;
              } else if (_index + 4 > listOfDates.length) {
                centerIndex = listOfDates.length - 4;
                _index = centerIndex;
              } else {
                centerIndex = _index;
              }

              if (itemIndex == centerIndex) {
                bottom = 50;
                witdh = witdh;
                left = 4;
                right = 4;
                height = 76;
                radius = 32;
              } else if (itemIndex == centerIndex + 1) {
                left = 4;
                right = 6;
                bottom = 35;
                witdh = witdh - 4;
                height = 70;
                radius = 38;
              } else if (itemIndex == centerIndex - 1) {
                left = 6;
                right = 4;
                bottom = 35;
                witdh = witdh - 4;
                height = 70;
                radius = 38;
              } else if (itemIndex == centerIndex + 2) {
                left = 2;
                right = 8;
                bottom = 15;
                witdh = witdh - 4;
                height = 64;
                radius = 38;
              } else if (itemIndex == centerIndex - 2) {
                left = 8;
                right = 2;
                bottom = 15;
                witdh = witdh - 4;
                height = 64;
                radius = 38;
              } else if (itemIndex == centerIndex + 3) {
                left = 0;
                right = 14;
                bottom = 0;
                witdh = witdh - 8;
                height = 56;
                radius = 38;
              } else if (itemIndex == centerIndex - 3) {
                left = 14;
                right = 0;
                bottom = 0;
                witdh = witdh - 8;
                height = 56;
                radius = 38;
              } else {
                bottom = -10;
                witdh = witdh - 15;
                height = 55;
                radius = 38;
              }

              final events = state.eventsList.entries.firstWhereOrNull((x) => isSameDay(x.key, listOfDates[itemIndex]));
              final bool enabled = DateTime.now().compareTo(listOfDates[itemIndex]) >= 0;
              return Container(
                padding: EdgeInsets.only(right: right, left: left),
                alignment: Alignment.topRight,
                child: Stack(
                  alignment: Alignment.center,
                  children: [
                    AnimatedPositioned(
                      curve: Curves.linearToEaseOut,
                      bottom: bottom,
                      duration: const Duration(milliseconds: 200),
                      child: _ItemDay(
                        onTap: () {
                          int indexScroll = itemIndex - 3;
                          if (indexScroll <= 0) {
                            indexScroll = 0;
                          }
                          pageController
                              .animateToPage(indexScroll,
                                  duration: const Duration(milliseconds: 300), curve: Curves.bounceInOut)
                              .then((_) {
                            context.read<TimeCheckingHistoryCubit>().onSelectedDay(listOfDates[itemIndex]);
                          });
                        },
                        enabled: enabled,
                        isFocus: isSameDay(state.selectedDay, listOfDates[itemIndex]),
                        width: witdh,
                        radius: radius,
                        height: height,
                        isCenter: centerIndex == itemIndex,
                        date: listOfDates[itemIndex],
                        events: events?.value ?? [],
                        eventSize: centerIndex == itemIndex ? 20 : 16,
                      ),
                    ),
                  ],
                ),
              );
            },
          );
        },
      ),
    );
  }

  List<DateTime> getListOfMonth(DateTime dateTime) {
    final daysInMonth = DateUtils.getDaysInMonth(dateTime.year, dateTime.month);
    final listOfDates = List.generate(daysInMonth, (index) => dateTime.setDay(index + 1)).toList();
    return listOfDates;
  }
}

class _ItemDay extends StatelessWidget {
  const _ItemDay({
    super.key,
    required this.isFocus,
    required this.date,
    required this.width,
    required this.radius,
    required this.height,
    required this.isCenter,
    required this.events,
    this.eventSize = 20,
    this.enabled = true,
    required this.onTap,
  });

  final bool isFocus;
  final DateTime date;
  final double width;
  final double radius;
  final double height;
  final bool isCenter;
  final List<String> events;
  final double eventSize;
  final bool enabled;
  final VoidCallback onTap;

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: enabled ? onTap : null,
      child: Column(
        children: [
          Opacity(
            opacity: enabled ? 1 : 0.5,
            child: Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(radius),
                border: isFocus ? Border.all(color: UIColors.blue, width: 2) : null,
                color: isFocus ? UIColors.white : const Color(0xffb7b8bd).withOpacity(0.4),
              ),
              width: width,
              height: height,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    date.day.toString(),
                    style: UITextStyle.semiBold.copyWith(
                      fontSize: isFocus
                          ? isCenter
                              ? 24
                              : 18
                          : 18,
                      color: isFocus ? UIColors.blue : const Color(0xffe0e0e0),
                    ),
                  ),
                  Text(
                    _getWeekdayTitle(date),
                    style: UITextStyle.medium.copyWith(
                      fontSize: isFocus
                          ? isCenter
                              ? 16
                              : 14
                          : 14,
                      color: isFocus ? UIColors.lightBlackText : const Color(0xffb7b8bd).withOpacity(0.6),
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 2),
          events.isNotEmpty
              ? Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: List.generate(
                      events.length,
                      (index) => Padding(
                            padding: const EdgeInsets.only(right: 2),
                            child: AppImage.network(
                              url: events[index],
                              width: eventSize,
                              height: eventSize,
                            ),
                          )),
                )
              : SizedBox(height: eventSize),
        ],
      ),
    );
  }

  String _getWeekdayTitle(DateTime date) {
    return switch (date.weekday) {
      1 => 'T2',
      2 => 'T3',
      3 => 'T4',
      4 => 'T5',
      5 => 'T6',
      6 => 'T7',
      7 => 'CN',
      _ => 'CN',
    };
  }
}
