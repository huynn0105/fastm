import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/mfast/time_checking_status.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/camera_util.dart';
import 'package:flutter_module/common/utils/color_util.dart';
import 'package:flutter_module/common/utils/count_down_util.dart';
import 'package:flutter_module/common/utils/location_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/mfast/cubit/time_checking_history/time_checking_history_cubit.dart';
import 'package:flutter_module/features/mfast/page/time_checking_history/widgets/action_button.dart';
import 'package:flutter_module/models/mfast/time_checking/time_checking_info_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:timelines/timelines.dart';

class TimeCheckingInfoComponent extends StatelessWidget {
  const TimeCheckingInfoComponent({
    super.key,
    required this.dataInDay,
    required this.details,
  });

  final TimeCheckingInfoModel? dataInDay;
  final List<CheckingHistoryDetail> details;

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const SizedBox(height: 10),
        Row(
          children: [
            Expanded(
              child: Text(
                'Điểm danh hằng ngày',
                style: UITextStyle.semiBold.copyWith(
                  fontSize: 16,
                ),
              ),
            ),
            OutlineActionButton(
              asset: 'ic_location_selected',
              title: 'Điểm danh',
              isEnabled: TextUtils.isNotEmpty(dataInDay?.additionCheckingType),
              onTap: () async {
                await onChecking(context, dataInDay!.additionCheckingType ?? '');
              },
            ),
          ],
        ),
        Container(
          decoration: BoxDecoration(
            color: UIColors.white,
            borderRadius: BorderRadius.circular(8),
          ),
          margin: const EdgeInsets.symmetric(vertical: 12),
          padding: const EdgeInsets.symmetric(horizontal: 12),
          alignment: Alignment.center,
          child: details.isEmpty
              ? const NoThingWidget(
                  message: 'Không có lịch sử điểm danh nào\nđược ghi nhận trong ngày.',
                )
              : ListView.builder(
                  shrinkWrap: true,
                  padding: EdgeInsets.zero,
                  physics: const NeverScrollableScrollPhysics(),
                  itemBuilder: (context, index) {
                    final item = details[index];
                    final isFirst = index == 0;
                    final isLast = index == details.length - 1;

                    ///
                    return TimelineTile(
                      crossAxisExtent: double.infinity,
                      nodeAlign: TimelineNodeAlign.start,
                      node: TimelineNode(
                        indicatorPosition: 0.5,
                        indicator: StatusDotIndicator(
                          status: item.getStatus(),
                        ),
                        startConnector: isFirst ? null : const DashLine(),
                        endConnector: isLast ? null : const DashLine(),
                      ),
                      contents: Column(
                        children: [
                          ItemCheckinInfo(
                            detail: item,
                          ),
                          Visibility(
                            visible: !isLast,
                            child: const Padding(
                              padding: EdgeInsets.only(left: 14),
                              child: Divider(
                                height: 1,
                                color: UIColors.lightGray,
                              ),
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                  itemCount: details.length,
                ),
        ),
      ],
    );
  }
}

Future<void> onChecking(BuildContext context, String type) async {
  final cameraStatus = await CameraUtil.instance.requestPermission(context: context);
  if (cameraStatus && context.mounted) {
    final locationStatus = await LocationUtil.instance.requestPermission(context: context, openSettings: true);
    if (locationStatus && context.mounted) {
      final position = await LocationUtil.instance.getCurrentLocation();
      if (position != null && context.mounted) {
        context.router.push(TakePictureRoute(type: type));
      }
    }
  }
}

class NoThingWidget extends StatelessWidget {
  const NoThingWidget({
    super.key,
    required this.message,
  });

  final String message;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        const SizedBox(height: 36),
        const AppImage.asset(
          asset: 'ic_nothing',
          height: 165,
          width: 165,
        ),
        const SizedBox(height: 16),
        Text(
          message,
          style: UITextStyle.medium.copyWith(
            fontSize: 16,
            color: UIColors.grayBackground,
          ),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 24),
      ],
    );
  }
}

class StatusDotIndicator extends StatelessWidget {
  const StatusDotIndicator({
    super.key,
    required this.status,
  });
  final TimeCheckingStatus status;

  @override
  Widget build(BuildContext context) {
    String image = switch (status) {
      TimeCheckingStatus.success => 'ic_status_success',
      TimeCheckingStatus.fail => 'ic_status_failure',
      TimeCheckingStatus.pending => 'ic_status_pending',
    };
    return AppImage.asset(
      asset: image,
      height: 20,
      width: 20,
    );
  }
}

class DashLine extends StatelessWidget {
  const DashLine({
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return const DashedLineConnector(
      color: UIColors.lightGray,
      dash: 6,
      gap: 6,
    );
  }
}

class ItemCheckinInfo extends StatelessWidget {
  const ItemCheckinInfo({
    super.key,
    required this.detail,
  });

  final CheckingHistoryDetail detail;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(
        horizontal: 14,
        vertical: 12,
      ),
      child: Row(
        children: [
          Expanded(
            child: _buildColumnInfo(),
          ),
          if (detail.image != null)
            SplashButton(
              onTap: () {
                _showImage(context);
              },
              child: CachedNetworkImage(
                imageUrl: detail.image ?? '',
                width: 56,
                height: 56,
                fit: BoxFit.cover,
                progressIndicatorBuilder: (context, url, downloadProgress) => Center(
                  child: CircularProgressIndicator(value: downloadProgress.progress),
                ),
                errorWidget: (context, url, error) => const Icon(Icons.error),
                imageBuilder: (context, imageProvider) {
                  return Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(6),
                      image: DecorationImage(
                        image: imageProvider,
                        fit: BoxFit.cover,
                      ),
                    ),
                  );
                },
              ),
            ),
          if (detail.image == null)
            AppSplashButton(
              isDisable: !(detail.getStatus().isPending),
              onTap: () async {
                onChecking(context, detail.type ?? '');
              },
              child: Container(
                width: 56,
                height: 56,
                decoration: const BoxDecoration(
                  borderRadius: BorderRadius.all(Radius.circular(6)),
                  color: UIColors.extraLightGray,
                ),
                padding: const EdgeInsets.all(16),
                child: AppImage.asset(
                  asset: 'ic_arrow_right',
                  width: 24,
                  height: 24,
                  color: detail.getStatus().isPending ? UIColors.primaryColor : UIColors.gray,
                ),
              ),
            ),
        ],
      ),
    );
  }

  Future<dynamic> _showImage(BuildContext context) {
    return showDialog(
      context: context,
      barrierDismissible: false,
      barrierColor: UIColors.blurBackground,
      builder: (BuildContext context) {
        return AlertDialog(
          insetPadding: const EdgeInsets.symmetric(horizontal: 16),
          contentPadding: EdgeInsets.zero,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
          backgroundColor: Colors.transparent,
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              CachedNetworkImage(
                imageUrl: detail.image ?? '',
                width: AppSize.instance.width,
                height: 515,
                progressIndicatorBuilder: (context, url, downloadProgress) {
                  return Center(
                    child: CircularProgressIndicator(
                      value: downloadProgress.progress,
                    ),
                  );
                },
                errorWidget: (context, url, error) {
                  return const Icon(Icons.error);
                },
                fit: BoxFit.cover,
                imageBuilder: (context, imageProvider) {
                  return Container(
                    width: double.infinity,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(8),
                      color: Colors.white,
                      image: DecorationImage(
                        image: imageProvider,
                        fit: BoxFit.cover,
                      ),
                    ),
                  );
                },
              ),
              const SizedBox(
                height: 35,
              ),
              SplashButton(
                onTap: () {
                  Navigator.of(context).pop();
                },
                child: const AppImage.asset(
                  asset: 'ic_close_circle',
                  height: 65,
                  width: 65,
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildColumnInfo() {
    final remainSeconds = detail.getRemainSeconds();
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisSize: MainAxisSize.min,
      children: [
        Text(
          detail.checkTime ?? detail.checkTimeline ?? '',
          style: UITextStyle.medium.copyWith(
            fontSize: 16,
          ),
        ),
        const SizedBox(
          height: 4,
        ),
        Text(
          detail.typeName ?? '',
          style: UITextStyle.medium.copyWith(
            fontSize: 16,
            color: ColorUtil.fromHex(detail.color ?? ''),
          ),
        ),
        Visibility(
          visible: detail.getStatus().isPending,
          child: CountDown(
            remainSeconds: remainSeconds,
            colorHex: detail.color,
          ),
        )
      ],
    );
  }
}

class CountDown extends StatefulWidget {
  const CountDown({
    super.key,
    required this.remainSeconds,
    required this.colorHex,
  });

  final int? remainSeconds;
  final String? colorHex;

  @override
  State<CountDown> createState() => _CountDownState();
}

class _CountDownState extends State<CountDown> {
  late Timer _timer;
  int seconds = 0;

  @override
  void initState() {
    seconds = widget.remainSeconds ?? 0;
    if (seconds > 0) {
      startTimer();
    }
    super.initState();
  }

  @override
  void dispose() {
    _timer.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 3),
      child: Row(
        children: [
          const AppImage.asset(
            asset: 'ic_hour',
            height: 24,
            width: 24,
          ),
          const SizedBox(width: 2),
          Text(
            'Hết hạn sau ${CountDownUtil.formatDayFormatUntilMinute(seconds)}',
            style: UITextStyle.semiBold.copyWith(
              fontSize: 13,
              color: ColorUtil.fromHex(widget.colorHex ?? ''),
            ),
          ),
        ],
      ),
    );
  }

  void startTimer() {
    _timer = Timer.periodic(
      const Duration(seconds: 1),
      (Timer timer) {
        if (seconds == 0) {
          timer.cancel();
          Future.delayed(const Duration(seconds: 2), () {
            context.read<TimeCheckingHistoryCubit>().getTimeCheckingInDay(DateTime.now());
          });
        } else {
          setState(() {
            seconds--;
          });
        }
      },
    );
  }
}
