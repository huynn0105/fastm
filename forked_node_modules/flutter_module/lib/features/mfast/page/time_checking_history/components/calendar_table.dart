part of '../time_checking_history_page.dart';

class _CalendarTable extends StatelessWidget {
  const _CalendarTable({
    super.key,
  });
  int getHashCode(DateTime key) {
    return key.day * 1000000 + key.month * 10000 + key.year;
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<TimeCheckingHistoryCubit, TimeCheckingHistoryState>(
      builder: (context, state) {
        final events = LinkedHashMap<DateTime, List<String>>(
          equals: isSameDay,
          hashCode: getHashCode,
        )..addAll(state.eventsList);

        List<String> getEventForDay(DateTime day) {
          return events[day] ?? [];
        }

        return TableCalendar(
          firstDay: DateTime(2020, 1, 1),
          lastDay: DateTime.now(),
          focusedDay: state.dateTime,
          calendarFormat: CalendarFormat.month,
          headerVisible: false,
          rowHeight: 50,
          locale: 'vi_VI',
          eventLoader: getEventForDay,
          startingDayOfWeek: StartingDayOfWeek.monday,
          daysOfWeekHeight: 40,
          availableGestures: AvailableGestures.none,
          calendarBuilders: CalendarBuilders(
            markerBuilder: (BuildContext context, date, events) {
              if (events.isEmpty) return const SizedBox.shrink();
              return ListView.builder(
                  shrinkWrap: true,
                  scrollDirection: Axis.horizontal,
                  itemCount: events.length,
                  itemBuilder: (context, index) {
                    return Container(
                      padding: const EdgeInsets.all(1),
                      alignment: Alignment.bottomCenter,
                      child: AppImage.network(
                        url: events[index].toString(),
                        width: 12,
                        height: 12,
                      ),
                    );
                  });
            },
            defaultBuilder: (context, day, focusedDay) {
              final text = DateFormat.d().format(day);

              return AnimatedContainer(
                alignment: Alignment.center,
                duration: const Duration(milliseconds: 300),
                margin: const EdgeInsets.all(6),
                child: Text(
                  text,
                  style: UITextStyle.semiBold.copyWith(
                    color: UIColors.white,
                    fontSize: 14,
                  ),
                ),
              );
            },
            todayBuilder: (context, day, focusedDay) {
              final text = DateFormat.d().format(day);

              return AnimatedContainer(
                duration: const Duration(milliseconds: 300),
                margin: const EdgeInsets.all(6),
                alignment: Alignment.center,
                width: 24,
                child: Text(text,
                    style: UITextStyle.semiBold.copyWith(
                      color: UIColors.white,
                      fontSize: 14,
                    )),
              );
            },
            selectedBuilder: (context, day, focusedDay) {
              final text = DateFormat.d().format(day);

              return AnimatedContainer(
                duration: const Duration(milliseconds: 300),
                decoration: const BoxDecoration(
                  color: UIColors.white,
                  shape: BoxShape.circle,
                ),
                alignment: Alignment.center,
                width: 22,
                child: Text(text,
                    style: UITextStyle.semiBold.copyWith(
                      color: UIColors.blue,
                      fontSize: 14,
                    )),
              );
            },
            dowBuilder: (context, day) {
              String text = switch (day.weekday) {
                1 => 'T2',
                2 => 'T3',
                3 => 'T4',
                4 => 'T5',
                5 => 'T6',
                6 => 'T7',
                7 => 'CN',
                _ => 'CN',
              };

              return Container(
                alignment: Alignment.center,
                color: UIColors.darkBlue.withOpacity(0.5),
                child: Text(text,
                    style: UITextStyle.semiBold.copyWith(
                      color: UIColors.white,
                      fontSize: 15,
                    )),
              );
            },
          ),
          selectedDayPredicate: (day) {
            return isSameDay(state.selectedDay, day);
          },
          onDaySelected: (selectedDay, focusedDay) {
            if (!isSameDay(state.selectedDay, selectedDay)) {
              context.read<TimeCheckingHistoryCubit>().onSelectedDay(selectedDay,isCalendarClick: true);
            }
          },
        );
      },
    );
  }
}
