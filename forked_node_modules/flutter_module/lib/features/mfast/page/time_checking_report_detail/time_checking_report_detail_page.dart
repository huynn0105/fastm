import 'dart:math';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/mfast/cubit/time_checking_report/time_checking_report_cubit.dart';
import 'package:flutter_module/features/mfast/cubit/time_checking_report_detail/time_checking_report_detail_cubit.dart';
import 'package:flutter_module/features/mfast/page/time_checking_report/widgets/report_item.dart';
import 'package:flutter_module/features/mfast/page/time_checking_report_detail/components/kpi_detail_component.dart';
import 'package:flutter_module/features/mfast/page/time_checking_report_detail/components/project_component.dart';
import 'package:flutter_module/features/mfast/page/time_checking_report_detail/components/working_component.dart';
import 'package:flutter_module/models/mfast/report/report_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';

part 'components/time_checking_report_detail_edit_mode.dart';
part 'components/time_checking_report_detail_view_mode.dart';

@RoutePage()
class TimeCheckingReportDetailPage extends StatefulWidget implements AutoRouteWrapper {
  TimeCheckingReportDetailPage({
    super.key,
    @QueryParam('title') this.title = 'Chi tiết báo cáo',
    @QueryParam('reportID') this.reportID,
    @QueryParam('userID') this.userID,
    this.submitReportData,
  });

  final String? title;
  final String? reportID;
  final String? userID;
  final SubmitReportData? submitReportData;

  @override
  State<TimeCheckingReportDetailPage> createState() => _TimeCheckingReportDetailPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => TimeCheckingReportDetailCubit()
            ..initReportID(reportID: reportID, userID: userID)
            ..initSubmitRepostData(submitReportData),
        ),
        BlocProvider(
          create: (context) => TimeCheckingReportCubit(),
        ),
      ],
      child: this,
    );
  }
}

class _TimeCheckingReportDetailPageState extends State<TimeCheckingReportDetailPage> {
  final ValueNotifier<bool> _isValueChange = ValueNotifier<bool>(false);

  @override
  void dispose() {
    _isValueChange.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        if (!context.router.canPop()) {
          RedirectUtil.backToMFast();
          return false;
        }
        return true;
      },
      child: Scaffold(
        appBar: MFastGradientAppBar(
          title: widget.title ?? '',
          context: context,
          onBack: context.router.pop,
          showHomeButton: false,
          actions: [
            BlocBuilder<TimeCheckingReportDetailCubit, TimeCheckingReportDetailState>(
              builder: (context, state) {
                return Visibility(
                  visible: state.reportDetailData?.allowEdit == true,
                  child: AppSplashButton(
                    onTap: () {
                      if (_isValueChange.value && state.isEditMode) {
                        _onUpdateReport(context);
                      } else {
                        _onEditReport(context);
                      }
                    },
                    child: Padding(
                      padding: const EdgeInsets.all(10),
                      child: ValueListenableBuilder<bool>(
                        builder: (context, isValueChange, __) {
                          return AppImage.asset(
                            asset: state.isEditMode ? 'ic_done' : 'ic_edit',
                            color:
                                state.isEditMode ? UIColors.white.withOpacity(isValueChange ? 1 : 0.2) : UIColors.white,
                            width: 32,
                            height: 32,
                          );
                        },
                        valueListenable: _isValueChange,
                      ),
                    ),
                  ),
                );
              },
            ),
          ],
        ),
        body: MultiBlocListener(
          listeners: [
            BlocListener<TimeCheckingReportDetailCubit, TimeCheckingReportDetailState>(
              listener: (context, state) {
                if (state.submitStatus.isSuccess) {
                  context.router.popUntilRouteWithName(TimeCheckingHistoryRoute.name);
                  context.router.push(TimeCheckingReportResultRoute(
                    data: state.submitReportData?.response,
                  ));
                } else if (state.submitStatus.isFailure) {
                  DialogProvider.instance.showMTradeErrorDialog(
                    context: context,
                    message: state.errorMessage,
                  );
                }
              },
            ),
            BlocListener<TimeCheckingReportCubit, TimeCheckingReportState>(
              listener: (context, state) {
                if (state.submitStatus.isSuccess) {
                  context.read<TimeCheckingReportDetailCubit>().changeEditMode();
                  context.read<TimeCheckingReportDetailCubit>().fetchData();
                } else if (state.submitStatus.isFailure) {
                  DialogProvider.instance.showMTradeErrorDialog(
                    context: context,
                    message: state.messageError,
                  );
                }
              },
            )
          ],
          child: BlocBuilder<TimeCheckingReportDetailCubit, TimeCheckingReportDetailState>(
            builder: (context, state) {
              if (state.status.isInitial) {
                context.read<TimeCheckingReportDetailCubit>().fetchData();
              }

              ///
              final isFinalSubmit = state.isFinalSubmit;
              final submitData = state.submitReportData;
              final detailData = state.reportDetailData;
              final kpiResopnse = detailData?.getKPIResponse() ?? submitData?.response;
              final workingReports = detailData?.reportDetail?.activeReport?.data ?? submitData?.workingReports ?? [];
              final projectReports = detailData?.reportDetail?.projectReport?.data ?? submitData?.projectReports ?? [];
              final reportID = detailData?.reportID ?? '';
              context.read<TimeCheckingReportCubit>().initDataToEdit(
                    workingReports,
                    projectReports,
                  );

              ///
              return Stack(
                children: [
                  Visibility(
                    visible: submitData != null || detailData != null,
                    child: ListView(
                      children: [
                        KPIDetailComponent(
                          data: kpiResopnse,
                        ),
                        const SizedBox(
                          height: 16,
                        ),
                        state.isEditMode
                            ? _TimeCheckingReportDetailEditMode(
                                workingReports: workingReports,
                                projectReports: projectReports,
                                isValueChange: _isValueChange,
                                reportID: reportID,
                                onUpdate: () {
                                  _onUpdateReport(context);
                                },
                              )
                            : _TimeCheckingReportDetailViewMode(
                                workingReports: workingReports,
                                projectReports: projectReports,
                                isFinalSubmit: isFinalSubmit,
                                enabledEdit: state.reportDetailData?.allowEdit == true,
                                onEdit: () {
                                  _onEditReport(context);
                                },
                              ),
                      ],
                    ),
                  ),
                  Visibility(
                    visible: state.status.showLoading || state.submitStatus.isLoading,
                    child: const LoadingWidget.dark(),
                  ),
                ],
              );
            },
          ),
        ),
      ),
    );
  }

  void _onEditReport(BuildContext context) {
    _isValueChange.value = false;
    context.read<TimeCheckingReportDetailCubit>().changeEditMode();
  }

  _onUpdateReport(BuildContext context) {
    final cubit = context.read<TimeCheckingReportCubit>();
    final keyScroll = cubit.onValidate();
    if (keyScroll != null) {
      final ct = GlobalObjectKey(keyScroll).currentContext;
      if (ct != null) {
        Scrollable.ensureVisible(
          ct,
          duration: const Duration(milliseconds: 600),
          curve: Curves.easeInToLinear,
        );
      }
    } else {
      if (cubit.state.submitStatus.isLoading) return;
      final reportID = context.read<TimeCheckingReportDetailCubit>().state.reportDetailData?.reportID;
      DialogProvider.instance.showMTradeDialog(
        context: context,
        asset: 'ic_mtrade_mascot_happy_waiting',
        title: 'Xác nhận cập nhật báo cáo',
        titleColor: UIColors.accentOrange,
        enableAutoPop: true,
        message: 'Lưu ý: thông tin về KPI và doanh số sẽ được cập nhật sau khi bấm xác nhận.',
        messageAlign: TextAlign.left,
        messageColor: UIColors.defaultText,
        positiveTitle: 'Xác nhận',
        negativeTitle: 'Kiểm tra lại',
        positiveCallback: () => cubit.onSubmitReportData(
          isUpdate: true,
          reportID: reportID,
        ),
        borderRadius: 50,
        negativeCallback: () {},
      );
    }
  }
}
