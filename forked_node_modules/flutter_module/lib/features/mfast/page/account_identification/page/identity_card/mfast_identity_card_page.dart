import 'package:collection/collection.dart';
import 'package:ekyc/common/enum/document.dart';
import 'package:ekyc/common/enum/service_type.dart';
import 'package:ekyc/common/utils/document_util.dart';
import 'package:ekyc/ekyc.dart';
import 'package:ekyc/models/blue_info/face/blue_face_match_model.dart';
import 'package:ekyc/models/fpt/face/fpt_face_matching_model.dart';
import 'package:ekyc/models/result/result_model.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/enum/mfast/card_type.dart';
import 'package:flutter_module/common/enum/mfast/liveness_support_status.dart';
import 'package:flutter_module/common/enum/mtrade/los_status.dart';
import 'package:flutter_module/common/enum/tracking_event_type.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/env_data.dart';
import 'package:flutter_module/features/app_cubit.dart';
import 'package:flutter_module/features/mfast/cubit/identity_card/identity_card_cubit.dart';
import 'package:flutter_module/features/mfast/cubit/user_meta_data/user_meta_data_cubit.dart';
import 'package:flutter_module/features/mfast/page/account_identification/components/card_component.dart';
import 'package:flutter_module/features/mfast/page/account_identification/components/selfie_component.dart';
import 'package:flutter_module/features/mfast/page/account_identification/components/status_request_support_component.dart';
import 'package:flutter_module/features/mfast/page/account_identification/page/personal_information/components/support_request_component.dart';

const ServiceType serviceType = ServiceType.blueInfo;

class MFastIdentityCardPage extends StatefulWidget {
  const MFastIdentityCardPage({
    super.key,
    required this.onNextPage,
    required this.isDisabled,
  });

  final Function() onNextPage;
  final bool isDisabled;

  @override
  State<MFastIdentityCardPage> createState() => _MFastIdentityCardPageState();
}

class _MFastIdentityCardPageState extends State<MFastIdentityCardPage> {
  String? _frontBase64;
  DocumentSide? documentSide;
  bool isDisabledScanCardBack = false;

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<IdentityCardCubit, IdentityCardState>(
          listener: (context, state) {
            if (state.countFaceMatchFailed >= 3 &&
                TextUtils.isNotEmpty(state.userMetaData?.frontCardImage()) &&
                TextUtils.isNotEmpty(state.userMetaData?.backCardImage()) &&
                TextUtils.isNotEmpty(state.userMetaData?.selfieImage())) {
              _onLockKyc(context);
            }
          },
          listenWhen: (previous, current) {
            return previous.countFaceMatchFailed != current.countFaceMatchFailed ||
                previous.userMetaData?.selfiePhoto != current.userMetaData?.selfiePhoto;
          },
        ),
        BlocListener<IdentityCardCubit, IdentityCardState>(
          listener: (context, state) {
            if (state.submitStatus.isSuccess) {
              final cubit = context.read<UserMetaDataCubit>();
              getItInstance.get<AppCubit>().trackingEvent(event: TrackingEventType.finishKyc);
              cubit.updateUserMetaData(state.userMetaData);
              widget.onNextPage.call();
            }
          },
          listenWhen: (previous, current) {
            return previous.submitStatus != current.submitStatus;
          },
        ),
      ],
      child: BlocBuilder<IdentityCardCubit, IdentityCardState>(
        builder: (context, state) {
          String? frontCard = state.userMetaData?.frontCardImage();
          String? backCard = state.userMetaData?.backCardImage();
          String? selfiePhoto = state.userMetaData?.selfieImage();
          bool isLockedKyc = state.userMetaData?.isLockedKyc == true;
          LivenessSupportStatus? supportStatus = LivenessSupportStatus.values.firstWhereOrNull(
            (element) => element.name == state.userMetaData?.livenessWithIdNumberStatus,
          );
          bool isHideSupportStatus = TextUtils.isEmpty(state.userMetaData?.livenessWithIdNumberStatus) ||
              widget.isDisabled ||
              (TextUtils.isEmpty(state.userMetaData?.livenessWithIdNumberLog) &&
                  TextUtils.isEmpty(state.userMetaData?.livenessWithIdNumberNote));

          bool disabledSubmitButton = TextUtils.isEmpty(frontCard) ||
              TextUtils.isEmpty(backCard) ||
              TextUtils.isEmpty(selfiePhoto) ||
              state.lockStatus.isLoading ||
              TextUtils.isNotEmpty(state.frontCardMessage) ||
              TextUtils.isNotEmpty(state.backCardMessage) ||
              TextUtils.isNotEmpty(state.faceMatchMessage) ||
              TextUtils.isNotEmpty(state.updateErrorMessage) ||
              state.userMetaData?.livenessWithIdNumberStatus == LivenessSupportStatus.pending.name ||
              isLockedKyc ||
              !state.isFaceMatch ||
              widget.isDisabled;

          return Stack(
            children: [
              ListView(
                padding: const EdgeInsets.only(
                  left: 16,
                  right: 16,
                  bottom: 100,
                ),
                children: [
                  if (supportStatus != null && !isHideSupportStatus)
                    StatusRequestSupportComponent(
                      status: supportStatus,
                      note: state.userMetaData?.livenessWithIdNumberLog ?? state.userMetaData?.livenessWithIdNumberNote,
                    ),
                  const SizedBox(
                    height: 24,
                  ),
                  Text(
                    'Hình chụp 2 mặt CMND/CCCD',
                    style: UITextStyle.regular,
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(
                    height: 12,
                  ),
                  CollectDataView(
                    errorMsg: state.backCardMessage,
                    child: CollectDataView(
                      errorMsg: state.frontCardMessage,
                      child: Row(
                        children: [
                          Expanded(
                            child: CardComponent(
                              type: CardType.front,
                              url: frontCard,
                              hideRemove: isLockedKyc || widget.isDisabled,
                              onTap: () {
                                if (frontCard?.isNotEmpty == true) {
                                  showImageDialog(context: context, url: frontCard ?? '', isFace: false);
                                  return;
                                }
                                setState(() {
                                  documentSide = DocumentSide.front;
                                });
                                _onCardScan(context);
                              },
                              onRemove: () {
                                _onRemoveImage(context, documentSide: DocumentSide.front);
                              },
                              isLoading: state.uploadStatus.isLoading && documentSide?.isFront == true,
                            ),
                          ),
                          const SizedBox(
                            width: 8,
                          ),
                          Expanded(
                            child: CardComponent(
                              type: CardType.back,
                              url: backCard,
                              hideRemove: isLockedKyc || widget.isDisabled,
                              onTap: () {
                                if (backCard?.isNotEmpty == true) {
                                  showImageDialog(
                                    context: context,
                                    url: backCard ?? '',
                                    isFace: false,
                                  );
                                  return;
                                }

                                if (isDisabledScanCardBack) return;
                                setState(() {
                                  documentSide = DocumentSide.back;
                                });
                                _onCardScan(context);
                              },
                              onRemove: () {
                                _onRemoveImage(context, documentSide: DocumentSide.back);
                              },
                              isLoading: state.uploadStatus.isLoading && documentSide?.isBack == true,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(
                    height: 32,
                  ),
                  Text(
                    'Chụp hình chân dung bản thân',
                    style: UITextStyle.regular,
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(
                    height: 12,
                  ),
                  SelfieComponent(
                    url: selfiePhoto,
                    hideRemove: isLockedKyc || widget.isDisabled,
                    onTap: () {
                      if (selfiePhoto?.isNotEmpty == true) {
                        showImageDialog(context: context, url: selfiePhoto ?? '', isFace: true);
                        return;
                      }
                      setState(() {
                        documentSide = null;
                      });
                      _onFaceMatch(context);
                    },
                    onRemove: () {
                      _onRemoveImage(
                        context,
                      );
                    },
                  ),
                  if (TextUtils.isNotEmpty(state.faceMatchMessage)) ...{
                    const SizedBox(
                      height: 8,
                    ),
                    AnimatedSize(
                      duration: const Duration(milliseconds: 800),
                      alignment: Alignment.topCenter,
                      curve: Curves.linearToEaseOut,
                      child: SizedBox(
                        child: RichText(
                          textAlign: TextAlign.center,
                          text: TextSpan(
                            style: UITextStyle.regular.copyWith(
                              fontSize: 14,
                              color: UIColors.red,
                            ),
                            children: [
                              const WidgetSpan(
                                child: AppImage.asset(
                                  asset: "ic_warning_outline",
                                  width: 18,
                                  height: 18,
                                ),
                              ),
                              const WidgetSpan(
                                child: SizedBox(
                                  width: 4,
                                ),
                              ),
                              TextSpan(
                                text: state.faceMatchMessage,
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  },
                  const SizedBox(
                    height: 16,
                  ),
                  if (isLockedKyc &&
                      state.userMetaData?.livenessWithIdNumberStatus != LivenessSupportStatus.pending.name) ...{
                    SplashButton(
                      onTap: () {
                        showSupportBottomSheet(context);
                      },
                      child: Container(
                        decoration: BoxDecoration(color: UIColors.darkBlue, borderRadius: BorderRadius.circular(8)),
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 10,
                        ),
                        child: Row(
                          children: [
                            const AppImage.asset(
                              asset: 'ic_question_message',
                              width: 20,
                              height: 20,
                            ),
                            const SizedBox(
                              width: 8,
                            ),
                            Expanded(
                              child: Text(
                                "Tôi đã thử nhiều lần nhưng vẫn không được",
                                style: UITextStyle.regular.copyWith(
                                  fontSize: 13,
                                  color: UIColors.white,
                                ),
                              ),
                            ),
                            const AppImage.asset(
                              asset: 'ic_arrow_right',
                              width: 20,
                              height: 20,
                              color: UIColors.white,
                            )
                          ],
                        ),
                      ),
                    ),
                  },
                  const SizedBox(
                    height: 24,
                  ),
                  RichText(
                    textAlign: TextAlign.center,
                    text: TextSpan(
                      style: UITextStyle.regular.copyWith(
                        color: UIColors.grayBackground,
                      ),
                      children: [
                        const TextSpan(
                          text: 'Hướng dẫn quy trình định danh tài khoản,\nxem chi tiết ',
                        ),
                        TextSpan(
                          text: 'tại đây >>',
                          style: UITextStyle.semiBold.copyWith(
                            color: UIColors.primaryColor,
                          ),
                        )
                      ],
                    ),
                  ),
                  CollectDataView(
                    errorMsg: state.updateErrorMessage,
                    child: const SizedBox(
                      height: 16,
                    ),
                  ),
                  if (TextUtils.isNotEmpty(state.updateErrorMessage))
                    const SizedBox(
                      height: 16,
                    ),
                  if (!widget.isDisabled)
                    PrimaryButton(
                      onPressed: () {
                        _onSubmitOCR(context);
                      },
                      title: 'Tiếp tục',
                      enabled: !disabledSubmitButton,
                      height: 48,
                    )
                ],
              ),
              Visibility(
                visible: state.lockStatus.isLoading || state.submitStatus.isLoading,
                child: const LoadingWidget.withoutText(),
              )
            ],
          );
        },
      ),
    );
  }

  _onCardScan(BuildContext context) async {
    final cubit = context.read<IdentityCardCubit>();

    final result = await Navigator.of(context).push(
      MaterialPageRoute(builder: (_) {
        return DocumentScanView(
          showLog: true,
          token: EnvData.instance.ekycSdkToken,
          baseUrl: serviceType == ServiceType.blueInfo ? 'https://mid.mfast.vn/' : 'https://appay-rc.cloudcms.vn/',
          idNumber: cubit.state.userMetaData?.countryIdNumber ?? "",
          type: DocumentType.idcard,
          side: documentSide!,
          title: "Hình chụp CMND/CCCD",
          subtitle: documentSide!.isFront ? "Mặt Trước" : "Mặt Sau",
          description:
              "Đặt ${documentSide!.isFront ? "mặt trước" : "mặt sau"} của hồ sơ cần chụp vào khớp với khung hình bên dưới",
          serviceType: serviceType,
        );
      }),
    );

    if (result != null && result is ResultModel) {
      Map? logData;
      String imageUrl = await cubit.uploadImage(result.base64 ?? '', documentSide: documentSide);
      bool isFront = documentSide!.isFront;
      if (serviceType == ServiceType.blueInfo) {
        if (documentSide!.isFront) {
          final value = DocumentUtil.getFrontDocumentBlueResult(
            result.result,
            CaptureType.document,
          );
          _frontBase64 = result.base64;
          cubit.updateInfoOCR(
            blueFrontDocument: value?.data,
          );

          if (TextUtils.isEmpty(cubit.state.userMetaData?.countryIdPhotoBack)) {
            isDisabledScanCardBack = true;
            await Future.delayed(const Duration(seconds: 1));
            isDisabledScanCardBack = false;
            if (context.mounted) {
              setState(() {
                documentSide = DocumentSide.back;
              });
              _onCardScan(context);
            }
          }
          logData = value?.data?.toJson();
        } else {
          final value = DocumentUtil.getBackDocumentBlueResult(
            result.result,
            CaptureType.document,
          );
          cubit.updateInfoOCR(
            blueBackDocument: value?.data,
          );
          logData = value?.data?.toJson();
        }
      } else {
        if (documentSide!.isFront) {
          final value = DocumentUtil.getFrontDocumentFptResult(
            result.result,
            CaptureType.document,
          );
          _frontBase64 = result.base64;
          cubit.updateInfoOCR(
            fptFrontDocument: value?.data,
          );
          logData = value?.data?.toJson();
        } else {
          final value = DocumentUtil.getBackDocumentFptResult(
            result.result,
            CaptureType.document,
          );
          cubit.updateInfoOCR(
            fptBackDocument: value?.data,
          );
          logData = value?.data?.toJson();
        }
      }
      cubit.saveLogOCR(data: logData?..[isFront ? 'front_image_url' : 'back_image_url'] = imageUrl);
    }
  }

  _onFaceMatch(BuildContext context) async {
    final cubit = context.read<IdentityCardCubit>();

    final result = await Navigator.of(context).push(
      MaterialPageRoute(builder: (_) {
        return FaceScanView(
          idNumber: cubit.state.userMetaData?.countryIdNumber ?? '',
          token: EnvData.instance.ekycSdkToken,
          baseUrl: serviceType == ServiceType.blueInfo ? 'https://mid.mfast.vn/' : 'https://appay-rc.cloudcms.vn/',
          type: DocumentType.idcard,
          title: "Xác thực Chân Dung",
          description: "Di chuyển chân dung của bạn vào giữa khung hình và làm theo yêu cầu dưới đây",
          showLog: true,
          documentBase64: _frontBase64 ?? "",
          serviceType: serviceType,
        );
      }),
    );

    if (result != null && result is ResultModel) {
      String imageUrl = await cubit.uploadImage(result.base64 ?? '');
      Map? logData;
      if (serviceType == ServiceType.blueInfo) {
        final value = DocumentUtil.getFaceMatchBlueResult(
          result.result,
          CaptureType.face,
        );
        _onCheckFaceMatch(cubit, value: value?.data);
        logData = value?.data?.toJson();
      } else {
        final value = DocumentUtil.getFaceMatchFptResult(
          result.result,
          CaptureType.face,
        );
        _onCheckFaceMatch(cubit, value: value?.data);
        logData = value?.data?.toJson();
      }
      cubit.saveLogOCR(data: logData?..['face_image_url'] = imageUrl);
    }
  }

  _onCheckFaceMatch(IdentityCardCubit cubit, {dynamic value}) {
    // int score;
    // bool match = false;
    bool validValue = false;
    String? faceMatchMessage;
    if (value is FPTFaceMatchingModel) {
      // score = value.similarity?.toInt() ?? 0;
      // match = score >= AppConstants.validMatchCore && value.isMatch == true;
      if (value.isBothImgIDCard != false) {
        faceMatchMessage = 'Hình chân dung không khớp với\nhình trên CCCD, vui lòng thử chụp lại';
      }
    } else if (value is BlueFaceMatchModel) {
      int score = value.face?.percentMatch?.toInt() ?? 0;
      // bool validRate1n = value.face?.rate1n != 'false';
      // bool validRate11 = value.face?.rate11 != 'false';
      bool validLiveness = value.face?.liveness == 'true';
      bool match = score >= AppConstants.validMatchCore && value.face?.match == 'true';

      if (!validLiveness) {
        faceMatchMessage = LosStatus.EKC_LIV16.message;
      } else if (!match) {
        faceMatchMessage = 'Hình chân dung không khớp với\nhình trên CCCD, vui lòng thử chụp lại';
      }
    }
    validValue = faceMatchMessage == null;

    if (validValue) {
      cubit.handleFaceMatch(
        isFaceMatch: validValue,
      );
    } else {
      cubit.handleFaceMatch(
        isFaceMatch: validValue,
        message: 'Hình chân dung không khớp với\nhình trên CCCD, vui lòng thử chụp lại',
      );
    }
  }

  _onRemoveImage(BuildContext context, {DocumentSide? documentSide}) {
    final cubit = context.read<IdentityCardCubit>();
    cubit.removeImage(documentSide: documentSide);
  }

  _onLockKyc(BuildContext context) {
    final cubit = context.read<IdentityCardCubit>();

    cubit.lockEkyc();
  }

  _onSendSupport(BuildContext context, {required String note}) {
    final cubit = context.read<IdentityCardCubit>();

    cubit.sendSupport(note: note);
  }

  _onSubmitOCR(BuildContext context) {
    final cubit = context.read<IdentityCardCubit>();

    cubit.submitOCR();
  }

  showImageDialog({
    required BuildContext context,
    required String url,
    required bool isFace,
  }) {
    return showDialog(
      context: context,
      barrierDismissible: true,
      builder: (context) {
        return Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                alignment: Alignment.center,
                constraints: const BoxConstraints(
                  maxWidth: 350,
                  maxHeight: 350,
                ),
                child: AspectRatio(
                  aspectRatio: isFace ? 1 : 16 / 10,
                  child: AppImage.network(url: url),
                ),
              ),
              const SizedBox(
                height: 16,
              ),
              GestureDetector(
                onTap: Navigator.of(context).pop,
                child: Container(
                  width: 45,
                  height: 45,
                  decoration: const BoxDecoration(
                    shape: BoxShape.circle,
                    color: UIColors.white,
                  ),
                  child: const Icon(
                    Icons.clear_rounded,
                    size: 30,
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  showSupportBottomSheet(BuildContext context) async {
    final result = await showModalBottomSheet(
      backgroundColor: Colors.transparent,
      barrierColor: UIColors.defaultText.withOpacity(0.85),
      context: context,
      isScrollControlled: true,
      builder: (builder) {
        return const SupportRequestComponent();
      },
    );

    if (result is String && context.mounted) {
      _onSendSupport(context, note: result);
    }
  }
}
