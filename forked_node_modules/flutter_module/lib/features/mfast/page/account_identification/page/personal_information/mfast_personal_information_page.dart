import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/mfast/gender_type.dart';
import 'package:flutter_module/common/enum/mfast/liveness_support_status.dart';
import 'package:flutter_module/common/enum/pin_code_type.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/utils/validation_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/simple_pin_code.dart';
import 'package:flutter_module/features/mfast/cubit/personal_information/personal_information_cubit.dart';
import 'package:flutter_module/features/mfast/cubit/user_meta_data/user_meta_data_cubit.dart';
import 'package:flutter_module/features/mfast/page/account_identification/components/status_request_support_component.dart';
import 'package:flutter_module/features/mfast/page/account_identification/page/personal_information/components/identify_information_component.dart';
import 'package:flutter_module/features/mfast/page/account_identification/page/personal_information/components/personal_information_component.dart';
import 'package:flutter_module/features/mfast/page/account_identification/page/personal_information/components/support_request_component.dart';

class MFastPersonalInformationPage extends StatelessWidget {
  final Function() onNextPage;

  final bool isDisabled;
  const MFastPersonalInformationPage({
    super.key,
    required this.onNextPage,
    required this.isDisabled,
  });

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<PersonalInformationCubit, PersonalInformationState>(
          listener: (context, state) {
            if (state.checkStatus.isSuccess) {
              _onShowVerifyEmail(context);
            }
            if (state.checkStatus.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: "Email này đã tồn tại trên hệ thống, vui lòng kiểm tra lại hoặc sử dụng địa chỉ email khác.",
              );
            }
          },
          listenWhen: (previous, current) {
            return previous.checkStatus != current.checkStatus;
          },
        ),
        BlocListener<PersonalInformationCubit, PersonalInformationState>(
          listener: (context, state) {
            if (state.submitStatus.isSuccess) {
              final cubit = context.read<UserMetaDataCubit>();
              cubit.updateUserMetaData(state.userMetaData);
              onNextPage.call();
            }
          },
          listenWhen: (previous, current) {
            return previous.submitStatus != current.submitStatus;
          },
        ),
      ],
      child: BlocBuilder<PersonalInformationCubit, PersonalInformationState>(
        builder: (context, state) {
          LivenessSupportStatus? supportStatus = LivenessSupportStatus.values.firstWhereOrNull(
            (element) => element.name == state.userMetaData?.livenessWithIdNumberStatus,
          );

          bool isHideSupportStatus = TextUtils.isEmpty(state.userMetaData?.livenessWithIdNumberStatus) ||
              isDisabled ||
              (TextUtils.isEmpty(state.userMetaData?.livenessWithIdNumberLog) &&
                  TextUtils.isEmpty(state.userMetaData?.livenessWithIdNumberNote));

          bool disabledSubmitButton = TextUtils.isEmpty(state.userMetaData?.addressCurrent) ||
              TextUtils.isEmpty(state.userMetaData?.addressCurrentDistrict) ||
              TextUtils.isEmpty(state.userMetaData?.emailAddress) ||
              TextUtils.isEmpty(state.userMetaData?.gender) ||
              state.userMetaData?.gender == GenderType.other.id ||
              state.userMetaData?.isValidOldNumberId() != true ||
              EmailInputValidation.dirty(value: state.userMetaData?.emailAddress ?? "").isNotValid ||
              state.lockStatus.isLoading ||
              state.userMetaData?.livenessWithIdNumberStatus == LivenessSupportStatus.pending.name ||
              isDisabled;

          return Stack(
            children: [
              SingleChildScrollView(
                padding: const EdgeInsets.only(
                  left: 16,
                  right: 16,
                  bottom: 100,
                ),
                child: Column(
                  children: [
                    if (!isHideSupportStatus && supportStatus != null)
                      StatusRequestSupportComponent(
                        status: supportStatus,
                        note:
                            state.userMetaData?.livenessWithIdNumberLog ?? state.userMetaData?.livenessWithIdNumberNote,
                      ),
                    const SizedBox(
                      height: 24,
                    ),
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            'Thông tin định danh',
                            style: UITextStyle.regular,
                          ),
                        ),
                        if (state.userMetaData?.livenessWithIdNumberStatus != LivenessSupportStatus.success.name &&
                            !isDisabled)
                          SplashButton(
                            onTap: () {
                              showSupportBottomSheet(context);
                            },
                            child: Row(
                              children: [
                                Text(
                                  'Chỉnh sửa',
                                  style: UITextStyle.regular.copyWith(
                                    fontSize: 13,
                                    color: UIColors.grayText,
                                  ),
                                ),
                                const SizedBox(
                                  width: 4,
                                ),
                                const AppImage.asset(
                                  asset: 'ic_edit',
                                  width: 24,
                                  height: 24,
                                ),
                              ],
                            ),
                          )
                      ],
                    ),
                    const SizedBox(
                      height: 8,
                    ),
                    IdentifyInformationComponent(
                      userMetaData: state.userMetaData,
                    ),
                    const SizedBox(
                      height: 24,
                    ),
                    SizedBox(
                      width: double.infinity,
                      child: Text(
                        'Thông tin thêm',
                        style: UITextStyle.regular,
                      ),
                    ),
                    const SizedBox(
                      height: 8,
                    ),
                    PersonalInformationComponent(
                      userMetaData: state.userMetaData,
                      districts: state.districts,
                      isDisabled: isDisabled,
                    ),
                    const SizedBox(
                      height: 20,
                    ),
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Lưu ý:',
                          style: UITextStyle.bold.copyWith(
                            fontSize: 13,
                            color: UIColors.red,
                          ),
                        ),
                        const SizedBox(
                          width: 8,
                        ),
                        Expanded(
                          child: RichText(
                            text: TextSpan(
                              style: UITextStyle.regular.copyWith(
                                fontSize: 13,
                              ),
                              children: [
                                TextSpan(
                                  text: 'Thông tin không chính xác',
                                  style: UITextStyle.bold.copyWith(
                                    fontSize: 13,
                                    color: UIColors.red,
                                  ),
                                ),
                                const TextSpan(
                                  text:
                                      ' có thể ảnh hưởng đến các quyền lợi về khấu trừ thuế và chi trả hoa hồng trên MFast',
                                ),
                              ],
                            ),
                          ),
                        )
                      ],
                    ),
                    CollectDataView(
                      errorMsg: state.updateErrorMessage,
                      child: const SizedBox(
                        height: 16,
                      ),
                    ),
                    if (TextUtils.isNotEmpty(state.updateErrorMessage))
                      const SizedBox(
                        height: 16,
                      ),
                    if (!isDisabled)
                      PrimaryButton(
                        width: double.infinity,
                        onPressed: () {
                          _onCheckDuplicateEmail(context);
                        },
                        title: 'Tiếp tục',
                        height: 48,
                        enabled: !disabledSubmitButton,
                      )
                  ],
                ),
              ),
              Visibility(
                visible: state.lockStatus.isLoading || state.checkStatus.isLoading || state.submitStatus.isLoading,
                child: const LoadingWidget.withoutText(),
              )
            ],
          );
        },
      ),
    );
  }

  showSupportBottomSheet(BuildContext context) async {
    final result = await showModalBottomSheet(
      backgroundColor: Colors.transparent,
      barrierColor: UIColors.defaultText.withOpacity(0.85),
      context: context,
      isScrollControlled: true,
      builder: (builder) {
        return const SupportRequestComponent(
          defaultNote:
              'Tôi chụp hình định danh nhưng thông tin tài khoản hiển thị không đúng, nhờ admin hỗ trợ kiểm tra!',
        );
      },
    );

    if (result is String && context.mounted) {
      _onSendSupport(context, note: result);
    }
  }

  _onCheckDuplicateEmail(BuildContext context) {
    final cubit = context.read<PersonalInformationCubit>();
    cubit.checkDuplicateEmail();
  }

  _onSendSupport(BuildContext context, {required String note}) {
    final cubit = context.read<PersonalInformationCubit>();

    cubit.sendSupport(note: note);
  }

  _onShowVerifyEmail(BuildContext context) {
    final cubit = context.read<PersonalInformationCubit>();

    showModalBottomSheet(
      backgroundColor: Colors.transparent,
      barrierColor: UIColors.defaultText.withOpacity(0.85),
      context: context,
      isScrollControlled: true,
      builder: (builder) {
        return SimplePinCode(
          type: PinCodeType.email,
          email: cubit.state.userMetaData?.emailAddress ?? "",
        );
      },
    ).then((result) {
      if (result is Map) {
        if (result["status"] == true) {
          _onSubmitInfo(context);
        } else {
          DialogProvider.instance.showMTradeErrorDialog(context: context, message: result["message"]);
        }
      }
    });
  }

  _onSubmitInfo(BuildContext context) {
    final cubit = context.read<PersonalInformationCubit>();
    cubit.submitInfo();
  }
}
