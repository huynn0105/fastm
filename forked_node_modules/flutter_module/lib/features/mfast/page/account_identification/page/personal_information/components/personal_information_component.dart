import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/input_type.dart';
import 'package:flutter_module/common/enum/mfast/gender_type.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/gender_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/utils/validation_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/radio.dart';
import 'package:flutter_module/common/widgets/textfields.dart';
import 'package:flutter_module/features/mfast/cubit/personal_information/personal_information_cubit.dart';
import 'package:flutter_module/models/mfast/user_meta_data/mfast_user_meta_data_model.dart';

class PersonalInformationComponent extends StatefulWidget {
  const PersonalInformationComponent({
    super.key,
    this.userMetaData,
    this.districts = const [],
    this.isDisabled = false,
  });

  final MFastUserMetaDataModel? userMetaData;
  final List<DataWrapper> districts;
  final bool isDisabled;

  @override
  State<PersonalInformationComponent> createState() => _PersonalInformationComponentState();
}

class _PersonalInformationComponentState extends State<PersonalInformationComponent> {
  bool isEditGender = false;
  bool isEditOldIdNumber = false;

  @override
  void initState() {
    super.initState();
    isEditGender = TextUtils.isEmpty(widget.userMetaData?.gender) || widget.userMetaData?.gender == GenderType.other.id;
    isEditOldIdNumber =
        TextUtils.isEmpty(widget.userMetaData?.countryOldIdNumber) && widget.userMetaData?.isCMND() != true;
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<PersonalInformationCubit>();
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        color: UIColors.white,
      ),
      child: Column(
        children: [
          if (isEditGender) ...[
            Row(
              children: [
                Expanded(
                  flex: 30,
                  child: Text(
                    'Giới tính:',
                    style: UITextStyle.regular.copyWith(
                      fontSize: 13,
                      color: UIColors.grayText,
                    ),
                  ),
                ),
                Expanded(
                  flex: 70,
                  child: Row(
                    children: [
                      AppRadio(
                        value: GenderUtil.instance.getGender(widget.userMetaData?.gender) == GenderType.male.id,
                        title: GenderType.male.name,
                        onChanged: (value) {
                          cubit.changeGender(
                            value: GenderType.male.id,
                          );
                        },
                      ),
                      const SizedBox(
                        width: 24,
                      ),
                      AppRadio(
                        value: GenderUtil.instance.getGender(widget.userMetaData?.gender) == GenderType.female.id,
                        title: GenderType.female.name,
                        onChanged: (value) {
                          cubit.changeGender(
                            value: GenderType.female.id,
                          );
                        },
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(
              height: 20,
            ),
          ],
          if (isEditOldIdNumber) ...[
            CollectDataView(
              errorMsg: TextUtils.isNotEmpty(widget.userMetaData?.countryOldIdNumber) &&
                      (widget.userMetaData?.countryOldIdNumber?.length ?? 0) < 9
                  ? 'Số CMND phải đủ 9 số'
                  : '',
              child: UITextField(
                controller: cubit.oldIdNumber,
                labelText: "Số CMND cũ",
                labelTextStyle: UITextStyle.regular,
                onChanged: (value) {
                  _onChangeOldIdNumber(context, value: value);
                },
                requiredField: widget.userMetaData?.isRequiredOldNumberId() ?? false,
                enable: !widget.isDisabled,
                keyboardType: TextInputType.number,
                inputFormatters: [
                  FilteringTextInputFormatter.digitsOnly,
                  LengthLimitingTextInputFormatter(9),
                ],
              ),
            ),
            const SizedBox(
              height: 20,
            ),
          ],
          CollectDataView(
            errorMsg: TextUtils.isNotEmpty(widget.userMetaData?.emailAddress) &&
                    EmailInputValidation.dirty(value: widget.userMetaData?.emailAddress ?? "").isNotValid
                ? 'Địa chỉ email không hợp lệ'
                : '',
            child: UITextField(
              controller: cubit.emailController,
              labelText: "Email",
              labelTextStyle: UITextStyle.regular,
              onChanged: (value) {
                _onChangeEmail(context, value: value);
              },
              enable: !widget.isDisabled,
            ),
          ),
          const SizedBox(
            height: 20,
          ),
          SplashButton(
            onTap: () {
              _onShowDistricts(
                context,
                data: widget.districts,
              );
            },
            isDisabled: widget.isDisabled,
            child: IgnorePointer(
              ignoring: true,
              child: UITextField(
                controller: cubit.addressDistrictController,
                labelText: "Quận/Huyện - Tỉnh/Thành phố",
                labelTextStyle: UITextStyle.regular,
                inputType: InputType.dropdown,
                enable: false,
              ),
            ),
          ),
          const SizedBox(
            height: 8,
          ),
          RichText(
            text: TextSpan(
              style: UITextStyle.regular.copyWith(
                fontSize: 13,
                color: UIColors.orange,
              ),
              children: [
                const TextSpan(text: 'Nhập kí tự tìm kiếm và chọn từ danh sách hiện ra(vd: '),
                TextSpan(
                  text: 'Q. 3 - Ho Chi Minh',
                  style: UITextStyle.semiBold.copyWith(
                    fontSize: 13,
                    color: UIColors.orange,
                  ),
                ),
                const TextSpan(text: ' hoặc '),
                TextSpan(
                  text: 'H. Dong Anh - Ha Noi',
                  style: UITextStyle.semiBold.copyWith(
                    fontSize: 13,
                    color: UIColors.orange,
                  ),
                ),
                const TextSpan(text: ')'),
              ],
            ),
          ),
          const SizedBox(
            height: 20,
          ),
          UITextField(
            controller: cubit.addressController,
            labelText: "Địa chỉ liên hệ",
            labelTextStyle: UITextStyle.regular,
            onChanged: (p0) {
              _onChangeAddressCurrent(context, value: p0);
            },
            enable: !widget.isDisabled,
          ),
        ],
      ),
    );
  }

  _onChangeEmail(BuildContext context, {required String value}) {
    final cubit = context.read<PersonalInformationCubit>();
    cubit.changeEmail(value: value);
  }

  _onChangeAddressCurrent(BuildContext context, {required String value}) {
    final cubit = context.read<PersonalInformationCubit>();
    cubit.changeAddressCurrent(value: value);
  }

  _onShowDistricts(BuildContext context, {required List<DataWrapper> data}) async {
    final cubit = context.read<PersonalInformationCubit>();
    final selectedId = cubit.state.districts
        .firstWhereOrNull((element) => element.value == cubit.state.userMetaData?.addressCurrentDistrict)
        ?.id;
    final value = await BottomSheetProvider.instance.onShowSearchList(
      context,
      title: "Chọn địa chỉ",
      selectedId: selectedId ?? '',
      data: data,
    );

    if (value is DataWrapper) {
      cubit.changeAddressCurrentDistrict(value: value);
    }
  }

  _onChangeOldIdNumber(BuildContext context, {required String value}) {
    final cubit = context.read<PersonalInformationCubit>();
    cubit.updateUserMetaData(countryOldIdNumber: value);
  }
}
