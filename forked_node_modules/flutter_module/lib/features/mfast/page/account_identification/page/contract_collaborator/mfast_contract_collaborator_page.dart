import 'dart:convert';
import 'dart:math';

import 'package:ekyc/common/bloc_status.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/tracking_event_type.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/utils/event_util.dart';
import 'package:flutter_module/common/utils/location_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/checkbox.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/simple_pin_code.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/app_cubit.dart';
import 'package:flutter_module/features/mfast/cubit/contract_collaborator/mfast_contract_collaborator_cubit.dart';
import 'package:flutter_module/features/mfast/cubit/user_meta_data/user_meta_data_cubit.dart';
import 'package:flutter_module/features/mfast/page/account_identification/page/contract_collaborator/component/mfast_location_component.dart';
import 'package:flutter_module/models/mfast/user_meta_data/mfast_user_meta_data_model.dart';
import 'package:flutter_module/services/api/mfast/payload/mfast_tracking_event_payload.dart';
import 'package:geolocator/geolocator.dart';

class MFastContractCollaboratorPage extends StatefulWidget {
  const MFastContractCollaboratorPage({
    super.key,
    required this.onNextPage,
    required this.userMetaData,
  });

  final Function() onNextPage;
  final MFastUserMetaDataModel? userMetaData;

  @override
  State<MFastContractCollaboratorPage> createState() => _MFastContractCollaboratorPageState();
}

class _MFastContractCollaboratorPageState extends State<MFastContractCollaboratorPage> {
  Position? position;

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<MFastContractCollaboratorCubit, MFastContractCollaboratorState>(
      listener: (context, state) {
        final cubit = context.read<UserMetaDataCubit>();
        if (state.submitStatus.isSuccess) {
          getItInstance.get<AppCubit>().trackingEvent(event: TrackingEventType.signContract, params: {
            "lat": position?.latitude.toString(),
            "lon": position?.longitude.toString(),
          });
          cubit.updateUserMetaData(state.userMetaData);
          widget.onNextPage.call();
          widget.onNextPage();
        }

        if (state.submitStatus.isFailure) {
          DialogProvider.instance.showMTradeErrorDialog(
            context: context,
            message: state.errorMessage,
          );
        }
      },
      builder: (context, state) {
        final cubit = context.read<MFastContractCollaboratorCubit>();
        return Padding(
          padding: EdgeInsets.only(
            left: 16,
            right: 16,
            bottom: [AppSize.instance.safeBottom, 20].reduce(max).toDouble(),
          ),
          child: Stack(
            children: [
              Positioned.fill(
                child: Column(
                  children: [
                    const SizedBox(
                      height: 20,
                    ),
                    Expanded(
                      child: Container(
                        decoration: BoxDecoration(
                          color: UIColors.white,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child: InAppWebView(
                            initialUrlRequest: URLRequest(
                              url: Uri.parse(
                                AppData.instance.appInfo.ctvUserMFastUrl ?? '',
                              ).replace(queryParameters: {
                                'accessToken': AppData.instance.accessToken,
                              }),
                            ),
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(
                      height: 25,
                    ),
                    SizedBox(
                      height: 55,
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          SplashButton(
                            onTap: cubit.togglePolicy,
                            child: IgnorePointer(
                              ignoring: true,
                              child: AppCheckbox.rectangle(
                                value: state.acceptedPolicy,
                                isError: state.errorFields[AppConstants.contractPolicyKey] != null,
                                title: 'Tôi đồng ý với các điều khoản trên',
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(left: 32),
                            child: CollectDataView(
                              errorMsg: state.errorFields[AppConstants.contractPolicyKey],
                              spacing: 0,
                              child: const SizedBox(),
                            ),
                          ),
                        ],
                      ),
                    ),
                    PrimaryButton(
                      onPressed: () => _onSubmit(context),
                      enabled: cubit.enabledSubmit(),
                      title: "Tiếp tục",
                      width: double.infinity,
                    ),
                  ],
                ),
              ),
              Visibility(
                visible: state.status.isLoading || state.submitStatus.isLoading,
                child: const LoadingWidget.dark(),
              ),
            ],
          ),
        );
      },
    );
  }

  _onSubmit(BuildContext context) async {
    final cubit = context.read<MFastContractCollaboratorCubit>();
    if (!cubit.enabledSubmit()) {
      return;
    }
    final location = await LocationUtil.instance.getCurrentLocationRequire(
      context: context,
      onShowLocationDialog: () {
        DialogProvider.instance.show(
          context: context,
          child: const MFastLocationComponent(),
        );
      },
    );

    if (location == null) {
      return;
    }

    setState(() {
      position = location;
    });

    if (!context.mounted) {
      return;
    }

    final mobilePhone = widget.userMetaData?.mobilePhone ?? '';

    if (mobilePhone.isEmpty) {
      return;
    }

    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      barrierColor: UIColors.defaultText.withOpacity(0.85),
      isScrollControlled: true,
      builder: (builder) {
        return SimplePinCode(
          mobilePhone: mobilePhone,
        );
      },
    ).then((value) {
      if (value is Map) {
        if (value["status"] == true) {
          cubit.submit();
        } else {
          DialogProvider.instance.showMTradeErrorDialog(
            context: context,
            message: value["message"],
          );
        }
      }
    });
  }
}
