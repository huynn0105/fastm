import 'package:auto_route/auto_route.dart';
import 'package:ekyc/common/enum/document.dart';
import 'package:ekyc/common/enum/service_type.dart';
import 'package:ekyc/common/utils/document_util.dart';
import 'package:ekyc/ekyc.dart';
import 'package:ekyc/models/blue_info/document/blue_back_document_model.dart';
import 'package:ekyc/models/blue_info/document/blue_front_document_model.dart';
import 'package:ekyc/models/fpt/document/fpt_back_document_model.dart';
import 'package:ekyc/models/fpt/document/fpt_front_document_model.dart';
import 'package:ekyc/models/result/result_model.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/event_key.dart';
import 'package:flutter_module/common/enum/mfast/card_type.dart';
import 'package:flutter_module/common/enum/pin_code_type.dart';
import 'package:flutter_module/common/enum/tracking_event_type.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/event_util.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/checkbox.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/simple_pin_code.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/app_cubit.dart';
import 'package:flutter_module/features/mfast/cubit/update_phone_number/update_phone_number_cubit.dart';
import 'package:flutter_module/features/mfast/cubit/user_meta_data/user_meta_data_cubit.dart';
import 'package:flutter_module/features/mfast/page/account_identification/components/card_component.dart';
import 'package:flutter_module/features/mfast/page/update_phone_number/components/option_request_otp_component.dart';
import 'package:ekyc/common/constants.dart' as ekyc;

import '../../../../env_data.dart';

const ServiceType serviceType = ServiceType.blueInfo;

@RoutePage()
class MFastUpdatePhoneNumberPage extends StatefulWidget implements AutoRouteWrapper {
  const MFastUpdatePhoneNumberPage({super.key});

  @override
  State<MFastUpdatePhoneNumberPage> createState() => _MFastUpdatePhoneNumberPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (context) {
            final cubit = UpdatePhoneNumberCubit();
            return cubit;
          },
        ),
        BlocProvider(
          create: (context) {
            final cubit = UserMetaDataCubit();
            cubit.fetchUserMetaData();
            return cubit;
          },
        ),
      ],
      child: this,
    );
  }
}

class _MFastUpdatePhoneNumberPageState extends State<MFastUpdatePhoneNumberPage> {
  String? cardId;
  bool isDisabledScanCardBack = false;

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        if (!context.router.canPop()) {
          RedirectUtil.backToMFast();
          return false;
        }
        return true;
      },
      child: Scaffold(
        appBar: MFastSimpleAppBar(
          title: 'Cập nhật thông tin',
          context: context,
          onBack: context.popRoute,
        ),
        body: BlocConsumer<UpdatePhoneNumberCubit, UpdatePhoneNumberState>(
          listener: (context, state) {
            if (state.status.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: state.errorMessage,
              );
            }
            if (state.status.isSuccess) {
              getItInstance.get<AppCubit>().trackingEvent(event: TrackingEventType.updateMetadataAdvance);
              DialogProvider.instance.showMTradeDialog(
                context: context,
                asset: "ic_mtrade_mascot_success",
                message: "Đã thay đổi thành công SĐT.",
                positiveTitle: "Đăng xuất",
                positiveCallback: () {
                  EventUtil.sendEventToRNv2(EventKey.logOut.value);
                  RedirectUtil.backToMFast();
                },
                barrierDismissible: false,
              );
            }
          },
          listenWhen: (previous, current) {
            return previous.status != current.status;
          },
          builder: (context, state) {
            final cubit = context.read<UpdatePhoneNumberCubit>();
            final isLoading = context.select(
              (UserMetaDataCubit cubit) => cubit.state.status.isLoading,
            );
            final userMetaData = context.select((UserMetaDataCubit cubit) => cubit.state.userMetaData);

            bool isMatch = TextUtils.isNotEmpty(state.frontCardUrl) &&
                TextUtils.isNotEmpty(state.backCardUrl) &&
                state.countryIdIssuedDate == userMetaData?.countryIdIssuedDate &&
                state.countryIdNumber == userMetaData?.countryIdNumber &&
                state.countryIdName == userMetaData?.countryIdName;

            bool isDisabledSubmit = !isMatch ||
                TextUtils.isNotEmpty(state.errorFields[AppConstants.orderPhoneNumberKey]) ||
                TextUtils.isNotEmpty(state.frontCardMessage) ||
                TextUtils.isNotEmpty(state.backCardMessage);

            return Stack(
              children: [
                ListView(
                  children: [
                    Container(
                      color: UIColors.white,
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Thông tin bạn cần thay đổi:',
                            style: UITextStyle.regular.copyWith(
                              color: UIColors.grayText,
                            ),
                          ),
                          const SizedBox(
                            height: 10,
                          ),
                          Row(
                            children: [
                              const AppCheckbox.circle(value: true),
                              const SizedBox(
                                width: 10,
                              ),
                              Text(
                                'Số điện thoại đăng nhập',
                                style: UITextStyle.bold.copyWith(
                                  fontSize: 16,
                                ),
                              )
                            ],
                          ),
                          const SizedBox(
                            height: 24,
                          ),
                          Text(
                            'Thông tin cần cung cấp:',
                            style: UITextStyle.regular.copyWith(
                              color: UIColors.grayText,
                            ),
                          ),
                          const SizedBox(
                            height: 12,
                          ),
                          Container(
                            width: double.infinity,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(8),
                              color: UIColors.background,
                            ),
                            padding: const EdgeInsets.all(16),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  'Hình chụp CMND/CCCD đã định danh tài khoản',
                                  style: UITextStyle.regular,
                                ),
                                const SizedBox(
                                  height: 12,
                                ),
                                CollectDataView(
                                  errorMsg: state.backCardMessage,
                                  child: CollectDataView(
                                    errorMsg: state.frontCardMessage,
                                    child: CollectDataView(
                                      errorMsg: isMatch ||
                                              TextUtils.isEmpty(state.frontCardUrl) ||
                                              TextUtils.isEmpty(state.backCardUrl)
                                          ? ""
                                          : "Hình chụp CMND/ CCCD không khớp, Vui lòng thử chụp lại (chụp cận cảnh, rõ nét, hiển thị đủ 4 góc CMND)",
                                      child: Row(
                                        children: [
                                          Expanded(
                                            child: CardComponent(
                                              type: CardType.front,
                                              isLoading: state.frontCardStatus.isLoading,
                                              url: state.frontCardUrl,
                                              onTap: () {
                                                if (state.frontCardUrl?.isNotEmpty == true) {
                                                  showImageDialog(
                                                    context: context,
                                                    url: state.frontCardUrl ?? '',
                                                    isFace: false,
                                                  );
                                                  return;
                                                }
                                                _onFrontCardScan(context);
                                              },
                                              onRemove: () {
                                                _onRemoveCard(context, documentSide: DocumentSide.front);
                                              },
                                            ),
                                          ),
                                          const SizedBox(
                                            width: 8,
                                          ),
                                          Expanded(
                                            child: CardComponent(
                                              type: CardType.back,
                                              isLoading: state.backCardStatus.isLoading,
                                              url: state.backCardUrl,
                                              onTap: () {
                                                if (state.backCardUrl?.isNotEmpty == true) {
                                                  showImageDialog(
                                                    context: context,
                                                    url: state.backCardUrl ?? '',
                                                    isFace: false,
                                                  );
                                                  return;
                                                }

                                                if (isDisabledScanCardBack) return;
                                                _onBackCardScan(context);
                                              },
                                              onRemove: () {
                                                _onRemoveCard(context, documentSide: DocumentSide.back);
                                              },
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                ),
                                const SizedBox(
                                  height: 22,
                                ),
                                Text(
                                  'Số điện thoại đăng nhập mới',
                                  style: UITextStyle.regular,
                                ),
                                const SizedBox(
                                  height: 12,
                                ),
                                CollectDataView(
                                  errorMsg: state.errorFields[AppConstants.orderPhoneNumberKey],
                                  child: SizedBox(
                                    height: 48,
                                    child: TextField(
                                      controller: cubit.mobilePhoneController,
                                      onChanged: cubit.updateMobilePhone,
                                      decoration: InputDecoration(
                                        contentPadding: const EdgeInsets.symmetric(horizontal: 16),
                                        enabledBorder: OutlineInputBorder(
                                          borderRadius: BorderRadius.circular(8),
                                          borderSide: const BorderSide(
                                            color: UIColors.lightGray,
                                          ),
                                        ),
                                        focusedBorder: OutlineInputBorder(
                                          borderRadius: BorderRadius.circular(8),
                                          borderSide: const BorderSide(
                                            color: UIColors.primaryColor,
                                          ),
                                        ),
                                        hintText: 'Nhập SĐT',
                                        filled: true,
                                        fillColor: UIColors.white,
                                      ),
                                      cursorColor: UIColors.primaryColor,
                                      style: UITextStyle.medium.copyWith(
                                        fontSize: 16,
                                      ),
                                      keyboardType: TextInputType.number,
                                      inputFormatters: [
                                        FilteringTextInputFormatter.digitsOnly,
                                        LengthLimitingTextInputFormatter(10)
                                      ],
                                    ),
                                  ),
                                )
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(
                      height: 12,
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Lưu ý:',
                            style: UITextStyle.bold.copyWith(
                              color: UIColors.darkRed,
                            ),
                          ),
                          const SizedBox(
                            width: 8,
                          ),
                          Expanded(
                            child: Text(
                              'Nếu thông tin kiểm tra từ hình chụp trên không đúng, vui lòng thử chụp lại (cận cảnh, rõ nét và hiển thị đủ 4 góc của CMND)',
                              style: UITextStyle.regular,
                            ),
                          ),
                          const SizedBox(
                            width: 20,
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(
                      height: 20,
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: PrimaryButton(
                        enabled: !isDisabledSubmit,
                        onPressed: () {
                          _onShowOptionRequestOTP(context);
                          // _onShowVerifyOTP(context);
                        },
                        title: 'Cập nhật',
                      ),
                    ),
                  ],
                ),
                Visibility(
                  visible: isLoading || state.status.isLoading,
                  child: const LoadingWidget.withoutText(),
                )
              ],
            );
          },
        ),
      ),
    );
  }

  _onShowOptionRequestOTP(BuildContext context) {
    final userMetaDataCubit = context.read<UserMetaDataCubit>();

    showModalBottomSheet(
      backgroundColor: Colors.transparent,
      barrierColor: UIColors.defaultText.withOpacity(0.85),
      context: context,
      isScrollControlled: true,
      builder: (builder) {
        return OptionRequestOTP(
          mobilePhone: userMetaDataCubit.state.userMetaData?.mobilePhone,
          email: userMetaDataCubit.state.userMetaData?.emailAddress,
        );
      },
    ).then((value) {
      if (value is PinCodeType) {
        _onShowVerifyOTP(context, type: value);
      }
    });
  }

  _onShowVerifyOTP(
    BuildContext context, {
    PinCodeType type = PinCodeType.phone,
  }) {
    final cubit = context.read<UpdatePhoneNumberCubit>();
    final userMetaDataCubit = context.read<UserMetaDataCubit>();

    showModalBottomSheet(
      backgroundColor: Colors.transparent,
      barrierColor: UIColors.defaultText.withOpacity(0.85),
      context: context,
      isScrollControlled: true,
      builder: (builder) {
        return SimplePinCode(
          type: type,
          mobilePhone: userMetaDataCubit.state.userMetaData?.mobilePhone ?? '',
          email: userMetaDataCubit.state.userMetaData?.emailAddress ?? '',
        );
      },
    ).then((result) {
      if (result is Map) {
        if (result["status"] == true) {
          cubit.updatePhoneNumber();
        } else {
          DialogProvider.instance.showMTradeErrorDialog(context: context, message: result["message"]);
        }
      }
    });
  }

  _onFrontCardScan(BuildContext context) async {
    final cubit = context.read<UpdatePhoneNumberCubit>();

    final result = await Navigator.of(context).push(
      MaterialPageRoute(builder: (_) {
        return DocumentScanView(
          showLog: true,
          token: EnvData.instance.ekycSdkToken,
          baseUrl: serviceType == ServiceType.blueInfo ? 'https://mid.mfast.vn/' : 'https://appay-rc.cloudcms.vn/',
          idNumber: "",
          type: DocumentType.idcard,
          side: DocumentSide.front,
          title: "Hình chụp CMND/CCCD",
          subtitle: "Mặt Trước",
          description: "Đặt mặt trước của hồ sơ cần chụp vào khớp với khung hình bên dưới",
          serviceType: serviceType,
        );
      }),
    );

    if (result != null && result is ResultModel) {
      Map? logData;
      cubit.uploadImage(result.base64 ?? '', documentSide: DocumentSide.front);
      if (serviceType == ServiceType.blueInfo) {
        final value = DocumentUtil.getFrontDocumentBlueResult(
          result.result,
          CaptureType.document,
        );
        cubit.updateInfoOCR(blueFrontDocument: value?.data);
        logData = value?.data?.toJson();
      } else {
        final value = DocumentUtil.getFrontDocumentFptResult(
          result.result,
          CaptureType.document,
        );
        cubit.updateInfoOCR(fptFrontDocument: value?.data);
        logData = value?.data?.toJson();
      }
      cubit.saveLogOCR(data: logData);
      if (TextUtils.isEmpty(cubit.state.backCardUrl)) {
        isDisabledScanCardBack = true;
        await Future.delayed(const Duration(seconds: 1));
        isDisabledScanCardBack = false;
        if (context.mounted) {
          _onBackCardScan(context);
        }
      }
    }
  }

  _onBackCardScan(BuildContext context) async {
    final cubit = context.read<UpdatePhoneNumberCubit>();

    final result = await Navigator.of(context).push(
      MaterialPageRoute(builder: (_) {
        return DocumentScanView(
          showLog: true,
          idNumber: cubit.state.countryIdNumber ?? '',
          token: EnvData.instance.ekycSdkToken,
          baseUrl: serviceType == ServiceType.blueInfo ? 'https://mid.mfast.vn/' : 'https://appay-rc.cloudcms.vn/',
          type: DocumentType.idcard,
          side: DocumentSide.back,
          title: "Hình chụp CMND/CCCD",
          subtitle: "Mặt Sau",
          description: "Đặt mặt sau của hồ sơ cần chụp vào khớp với khung hình bên dưới",
          serviceType: serviceType,
        );
      }),
    );
    if (result != null && result is ResultModel) {
      Map? logData;
      cubit.uploadImage(result.base64 ?? '', documentSide: DocumentSide.back);
      if (serviceType == ServiceType.blueInfo) {
        final value = DocumentUtil.getBackDocumentBlueResult(
          result.result,
          CaptureType.document,
        );
        cubit.updateInfoOCR(blueBackDocument: value?.data);
        logData = value?.data?.toJson();
      } else {
        final value = DocumentUtil.getBackDocumentFptResult(
          result.result,
          CaptureType.document,
        );
        cubit.updateInfoOCR(fptBackDocument: value?.data);
        logData = value?.data?.toJson();
      }
      cubit.saveLogOCR(data: logData);
    }
  }

  _onRemoveCard(
    BuildContext context, {
    required DocumentSide documentSide,
  }) {
    final cubit = context.read<UpdatePhoneNumberCubit>();
    cubit.removeCard(documentSide: documentSide);
  }

  showImageDialog({
    required BuildContext context,
    required String url,
    required bool isFace,
  }) {
    return showDialog(
      context: context,
      barrierDismissible: true,
      builder: (context) {
        return Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                alignment: Alignment.center,
                constraints: const BoxConstraints(
                  maxWidth: 350,
                  maxHeight: 350,
                ),
                child: AspectRatio(
                  aspectRatio: isFace ? 1 : 16 / 10,
                  child: AppImage.network(url: url),
                ),
              ),
              const SizedBox(
                height: 16,
              ),
              GestureDetector(
                onTap: Navigator.of(context).pop,
                child: Container(
                  width: 45,
                  height: 45,
                  decoration: const BoxDecoration(
                    shape: BoxShape.circle,
                    color: UIColors.white,
                  ),
                  child: const Icon(
                    Icons.clear_rounded,
                    size: 30,
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}
