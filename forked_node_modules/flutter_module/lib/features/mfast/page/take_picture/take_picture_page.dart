import 'package:auto_route/auto_route.dart';
import 'package:camera/camera.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/event_key.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/event_util.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/mfast/cubit/time_checking_submit_cubit/time_checking_submit_cubit_cubit.dart';
import 'package:flutter_module/general_config.dart';

import '../../../../common/widgets/appbar.dart';

@RoutePage()
class TakePicturePage extends StatefulWidget implements AutoRouteWrapper {
  const TakePicturePage({
    super.key,
    @QueryParam("time_checking_action") this.type,
    @QueryParam("is_from_mfast") this.isFromMFast,
  });

  final String? type;
  final bool? isFromMFast;

  @override
  State<TakePicturePage> createState() => _TakePicturePageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (context) => TimeCheckingSubmitCubit(),
      child: this,
    );
  }
}

class _TakePicturePageState extends State<TakePicturePage> {
  List<CameraDescription>? cameras; //list out the camera available
  CameraController? controller; //controller for camera
  // File? image; //for caputred image

  @override
  void initState() {
    super.initState();
    loadCamera();
  }

  loadCamera() async {
    cameras = await availableCameras();
    if (cameras != null && cameras!.isNotEmpty) {
      final camera = cameras!.length > 1 ? cameras![1] : cameras!.first;
      //cameras[0] = first camera, change to 1 to another camera
      controller = CameraController(
        camera,
        ResolutionPreset.high,
        enableAudio: false,
      );
      controller?.initialize().then((_) {
        if (!mounted) {
          return;
        }
        setState(() {});
      });
    }
  }

  @override
  void dispose() {
    controller?.dispose();
    super.dispose();
  }

  final _appBarHeight = AppConstants.appbarHeight + AppSize.instance.safeTop + 60;
  final _bottomBarHeight = AppSize.instance.safeBottom + 140;

  @override
  Widget build(BuildContext context) {
    if (controller == null || !controller!.value.isInitialized) {
      return Container();
    }

    return WillPopScope(
      onWillPop: () async {
        if (!context.router.canPop()) {
          RedirectUtil.backToMFast();
          return false;
        }
        return true;
      },
      child: BlocConsumer<TimeCheckingSubmitCubit, TimeCheckingSubmitState>(
        listenWhen: (previous, current) => previous.status != current.status,
        listener: (context, state) {
          if (state.status.isFailure) {
            if (state.statusCode == 'timeout') {
              DialogProvider.instance.showMTradeErrorDialog(
                  context: context,
                  message: state.errorMessage,
                  barrierDismissible: false,
                  positiveCallback: () {
                    _onNavigate(context);
                  });
            } else {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: state.errorMessage,
              );
            }
          }
          if (state.status.isSuccess) {
            _onNavigate(context);
          }
        },
        builder: (context, state) {
          return Scaffold(
            backgroundColor: UIColors.lightBlack,
            body: Stack(
              alignment: AlignmentDirectional.topCenter,
              children: [
                SafeArea(
                  child: state.fileImage == null
                      ? !controller!.value.isInitialized
                          ? const Center(
                              child: CircularProgressIndicator(),
                            )
                          : CameraPreview(controller!)
                      : Image.file(
                          state.fileImage!,
                          fit: BoxFit.cover,
                        ),
                ),
                Container(
                  decoration: ShapeDecoration(
                    shape: _CameraOverlayShape(
                      overlayColor: UIColors.lightBlack,
                      borderWidth: 1,
                      borderRadius: 8,
                      paddingLeft: 16,
                      paddingRight: 16,
                      paddingTop: _appBarHeight,
                      paddingBottom: _bottomBarHeight,
                    ),
                  ),
                ),
                Align(
                  alignment: Alignment.topCenter,
                  child: Column(
                    children: [
                      SizedBox(
                        height: AppConstants.appbarHeight + AppSize.instance.safeTop,
                        child: MFastSimpleAppBar(
                          title: '${state.fileImage == null ? 'Chụp hình' : 'Xác nhận'} điểm danh',
                          titleColor: UIColors.white,
                          context: context,
                          onBack: context.popRoute,
                          backgroundColor: Colors.transparent,
                        ),
                      ),
                      SizedBox(
                        height: 60,
                        child: Text(
                          'Cần thấy rõ chân dung và đồng phục\nkhi chụp hình',
                          style: UITextStyle.regular.copyWith(
                            fontSize: 14,
                            color: UIColors.white,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    ],
                  ),
                ),
                Align(
                  alignment: Alignment.bottomCenter,
                  child: Container(
                    height: _bottomBarHeight,
                    alignment: Alignment.topCenter,
                    padding: const EdgeInsets.only(top: 16),
                    child: state.fileImage == null
                        ? _TakePictureWidget(onTap: () {
                            if (!state.takePictureStatus.isLoading) {
                              _onTakePicture();
                            }
                          })
                        : _RowButton(onConfirm: () {
                            if (state.fileImage != null) {
                              context.read<TimeCheckingSubmitCubit>().timeCheckingSubmit(widget.type ?? '');
                            }
                          }),
                  ),
                ),
                Visibility(
                  visible: state.status.isLoading,
                  child: const LoadingWidget.dark(),
                )
              ],
            ),
          );
        },
      ),
    );
  }

  void _onNavigate(BuildContext context) {
    if (widget.isFromMFast == true) {
      EventUtil.sendEventToRNv2(EventKey.refreshTimeChecking.value);
      RedirectUtil.backToMFast();
    } else {
      EventUtil.sendEventToRNv2(EventKey.refreshTimeChecking.value);
      eventBus.fire(RefreshHistoryInDayEventBus());
      eventBus.fire(RefresshTimeCheckingEventBus());
      context.router.pop();
    }
  }

  void _onTakePicture() {
    context.read<TimeCheckingSubmitCubit>().takePicture(
      () async {
        if (controller != null && controller!.value.isInitialized) {
          return await controller!.takePicture(); //capture image
        }
        return null;
      },
    );
  }
}

class _RowButton extends StatelessWidget {
  const _RowButton({
    super.key,
    required this.onConfirm,
  });

  final VoidCallback onConfirm;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: Row(
        children: [
          Expanded(
            child: AppOutlinedButton(
              onPressed: () {
                context.read<TimeCheckingSubmitCubit>().clearPicture();
              },
              title: 'Chụp lại',
              textColor: UIColors.white,
              backgroundColor: Colors.transparent,
              borderColor: UIColors.white,
              borderRadius: BorderRadius.circular(24),
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: PrimaryButton(
              onPressed: onConfirm,
              title: 'Xác nhận',
              radius: 24,
            ),
          ),
        ],
      ),
    );
  }
}

class _CameraOverlayShape extends ShapeBorder {
  const _CameraOverlayShape({
    this.borderColor = Colors.white,
    this.borderWidth = 2,
    this.overlayColor = Colors.red,
    this.borderRadius = 12,
    this.paddingLeft = 0,
    this.paddingRight = 0,
    this.paddingTop = 0,
    this.paddingBottom = 0,
  });

  final Color borderColor;
  final double borderWidth;
  final Color overlayColor;
  final double borderRadius;
  final double paddingLeft;
  final double paddingRight;
  final double paddingTop;
  final double paddingBottom;

  @override
  EdgeInsetsGeometry get dimensions => const EdgeInsets.all(10);

  @override
  Path getInnerPath(Rect rect, {TextDirection? textDirection}) {
    return Path()
      ..fillType = PathFillType.evenOdd
      ..addPath(getOuterPath(rect), Offset.zero);
  }

  @override
  Path getOuterPath(Rect rect, {TextDirection? textDirection}) {
    Path getLeftTopPath(Rect rect) {
      return Path()
        ..moveTo(rect.left, rect.bottom)
        ..lineTo(rect.left, rect.top)
        ..lineTo(rect.right, rect.top);
    }

    return getLeftTopPath(rect)
      ..lineTo(
        rect.right,
        rect.bottom,
      )
      ..lineTo(
        rect.left,
        rect.bottom,
      )
      ..lineTo(
        rect.left,
        rect.top,
      );
  }

  @override
  void paint(Canvas canvas, Rect rect, {TextDirection? textDirection}) {
    final cardWidth = rect.width - paddingLeft - paddingRight;
    final cardHeight = rect.height - paddingTop - paddingBottom;

    final backgroundPaint = Paint()
      ..color = overlayColor
      ..style = PaintingStyle.fill;

    final paint = Paint()
      ..color = borderColor
      ..style = PaintingStyle.fill
      ..blendMode = BlendMode.dstOut
      ..strokeWidth = borderWidth;
    final borderPaint = Paint()
      ..color = borderColor
      ..style = PaintingStyle.stroke
      ..blendMode = BlendMode.colorDodge
      ..strokeWidth = borderWidth;

    final cutOutRect = Rect.fromLTWH(
      paddingLeft,
      paddingTop,
      cardWidth,
      cardHeight,
    );

    canvas
      ..saveLayer(
        rect,
        backgroundPaint,
      )
      ..drawRect(
        rect,
        backgroundPaint,
      )
      ..drawRRect(
        RRect.fromRectAndRadius(
          cutOutRect,
          Radius.circular(borderRadius),
        ),
        borderPaint,
      )
      ..drawRRect(
        RRect.fromRectAndRadius(
          cutOutRect,
          Radius.circular(borderRadius),
        ),
        paint,
      )
      ..restore();
  }

  @override
  ShapeBorder scale(double t) {
    return _CameraOverlayShape(
      borderColor: borderColor,
      borderWidth: borderWidth,
      overlayColor: overlayColor,
    );
  }
}

class _TakePictureWidget extends StatelessWidget {
  const _TakePictureWidget({
    super.key,
    required this.onTap,
  });
  final VoidCallback? onTap;
  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        InkWell(
          borderRadius: BorderRadius.circular(30),
          onTap: onTap,
          child: Container(
            width: 64,
            height: 64,
            decoration: const BoxDecoration(
              color: UIColors.white,
              shape: BoxShape.circle,
            ),
            padding: EdgeInsets.all(onTap != null ? 4 : 8),
            child: onTap != null
                ? Container(
                    decoration: BoxDecoration(
                        color: UIColors.white,
                        shape: BoxShape.circle,
                        border: Border.all(
                          width: 2,
                          color: Colors.black,
                        )),
                  )
                : const CircularProgressIndicator(),
          ),
        ),
        const SizedBox(height: 12),
        Text(
          'Chụp hình',
          style: UITextStyle.regular.copyWith(
            fontSize: 14,
            color: UIColors.white,
          ),
        ),
      ],
    );
  }
}
