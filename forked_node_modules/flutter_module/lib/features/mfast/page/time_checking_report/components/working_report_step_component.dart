import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/features/mfast/cubit/time_checking_report/time_checking_report_cubit.dart';
import 'package:flutter_module/features/mfast/page/time_checking_report/widgets/bottom_button.dart';
import 'package:flutter_module/features/mfast/page/time_checking_report/widgets/mock_button.dart';
import 'package:flutter_module/features/mfast/page/time_checking_report/widgets/report_item.dart';

class WorkingReportStepComponent extends StatefulWidget {
  const WorkingReportStepComponent({
    super.key,
    required this.onNextPage,
    required this.onPrevPage,
  });

  final Function() onNextPage;
  final Function() onPrevPage;

  @override
  State<WorkingReportStepComponent> createState() => _WorkingReportStepComponentState();
}

class _WorkingReportStepComponentState extends State<WorkingReportStepComponent> {
  @override
  void initState() {
    Future.delayed(Duration.zero, () {
      final cubit = context.read<TimeCheckingReportCubit>();
      if (cubit.state.isFirstInitWorkingReport) {
        _selectWorkingReport(
          context,
          enabledOnDone: true,
        );
        cubit.onChangeFirstReportByType(ReportType.activeReport);
      }
    });
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocConsumer<TimeCheckingReportCubit, TimeCheckingReportState>(
        listener: (context, state) {
          if (state.keyScrollError != null) {
            final ct = GlobalObjectKey(state.keyScrollError!).currentContext;
            if (ct != null) {
              Scrollable.ensureVisible(ct, duration: const Duration(milliseconds: 600), curve: Curves.easeInToLinear);
            }
          }
        },
        builder: (context, state) {
          return ListView(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            children: [
              const SizedBox(height: 20),
              ButtonSelect(
                type: ReportType.activeReport.description,
                maxLenght: state.allWorkingReports.length,
                selected: state.workingReportsSelected,
                onRemove: (String reportId) {
                  context.read<TimeCheckingReportCubit>().removeWorkingReportSelected(reportId);
                },
                onShowBottomSheet: () {
                  _selectWorkingReport(context);
                },
              ),
              const SizedBox(height: 16),
              Visibility(
                visible: state.workingReportsSelected.isNotEmpty,
                child: Container(
                  margin: const EdgeInsets.only(bottom: 16),
                  width: double.infinity,
                  height: 4,
                  decoration: const BoxDecoration(
                    borderRadius: BorderRadius.all(Radius.circular(8)),
                    color: UIColors.white,
                  ),
                ),
              ),
              ListView.separated(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                separatorBuilder: (_, __) => const SizedBox(height: 16),
                itemBuilder: ((context, index) {
                  final reportField = state.workingReportsSelected[index];
                  return ReportItem(
                    key: GlobalObjectKey(reportField.report.id),
                    onRemove: () {
                      context.read<TimeCheckingReportCubit>().removeWorkingReportSelected(reportField.report.id);
                    },
                    reportField: reportField,
                    type: ReportType.activeReport,
                  );
                }),
                itemCount: state.workingReportsSelected.length,
              ),
              const SizedBox(height: 30),
            ],
          );
        },
      ),
      bottomNavigationBar: BottomButton(
        onNext: () {
          if (context.read<TimeCheckingReportCubit>().onValidateByType(ReportType.activeReport)) {
            widget.onNextPage();
          }
        },
        onPrev: widget.onPrevPage,
      ),
    );
  }

  Future<void> _selectWorkingReport(BuildContext context, {bool enabledOnDone = false}) async {
    final reportCubit = context.read<TimeCheckingReportCubit>();

    final dataSelected = await BottomSheetProvider.instance.onShowMultiSelectList(
      context,
      enabledOnDone: enabledOnDone,
      title: 'Chọn hoạt động',
      allOptionTitle: 'Tất cả hoạt động',
      isDisableItem: true,
      selectedData: reportCubit.state.workingReportsSelected
          .map((e) => DataWrapper(
                value: e.report.title,
                id: e.report.id,
              ))
          .toList(),
      data: reportCubit.state.allWorkingReports
          .map((e) => DataWrapper(
                value: e.title,
                id: e.id,
              ))
          .toList(),
    );
    if (dataSelected != null && dataSelected is List) {
      reportCubit.selectWorkingReport(dataSelected.where((e) => e?.id != null).map((e) => e.id.toString()).toList());
    }
  }
}
