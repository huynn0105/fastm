import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/utils/debounce_util.dart';
import 'package:flutter_module/features/mfast/cubit/time_checking_report/time_checking_report_cubit.dart';
import 'package:flutter_module/features/mfast/page/time_checking_report/widgets/bottom_button.dart';
import 'package:flutter_module/features/mfast/page/time_checking_report/widgets/mock_button.dart';
import 'package:flutter_module/features/mfast/page/time_checking_report/widgets/report_item.dart';
import 'package:flutter_module/routes/routes.gr.dart';

class ProjectReportStepComponent extends StatefulWidget {
  const ProjectReportStepComponent({
    Key? key,
    required this.onNextPage,
    required this.onPrevPage,
  }) : super(key: key);

  final Function() onNextPage;
  final Function() onPrevPage;

  @override
  State<ProjectReportStepComponent> createState() => _ProjectReportStepComponentState();
}

class _ProjectReportStepComponentState extends State<ProjectReportStepComponent> {
  final DebounceUtil debounceUtil = DebounceUtil(milliseconds: 300);

  @override
  void initState() {
    Future.delayed(Duration.zero, () {
      final cubit = context.read<TimeCheckingReportCubit>();
      if (cubit.state.isFirstInitProjectReport) {
        _onSheet(context);
        cubit.onChangeFirstReportByType(ReportType.projectReport);
      }
    });
    super.initState();
  }
  
  @override
  void dispose() {
    debounceUtil.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocConsumer<TimeCheckingReportCubit, TimeCheckingReportState>(
        listener: (context, state) {
          if (state.keyScrollError != null) {
            final ct = GlobalObjectKey(state.keyScrollError!).currentContext;
            if (ct != null) {
              Scrollable.ensureVisible(ct, duration: const Duration(milliseconds: 600), curve: Curves.easeInToLinear);
            }
          }
          if (state.submitStatus.isSuccess && state.submitResponse != null) {
            context.router.push(TimeCheckingReportDetailRoute(
              title: 'Xác nhận thông tin',
              submitReportData: SubmitReportData(
                workingReports: state.submitWorkingReports,
                projectReports: state.submitProjectReports,
                payload: state.submitReportPayload!,
                response: state.submitResponse!,
              ),
            ));
          } else if (state.submitStatus.isFailure) {
            DialogProvider.instance.showMTradeErrorDialog(
              context: context,
              message: state.messageError,
            );
          }
        },
        builder: (context, state) {
          return ListView(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            children: [
              const SizedBox(height: 20),
              ButtonSelect(
                maxLenght: state.allProjectReports.length,
                onRemove: (reportId) {
                  context.read<TimeCheckingReportCubit>().removeProjectReportSelected(reportId);
                },
                onShowBottomSheet: () {
                  _onSheet(context);
                },
                selected: state.projectReportsSelected,
                type: ReportType.projectReport.description,
              ),
              const SizedBox(height: 16),
              Visibility(
                visible: state.projectReportsSelected.isNotEmpty,
                child: Container(
                  margin: const EdgeInsets.only(bottom: 16),
                  width: double.infinity,
                  height: 4,
                  decoration: const BoxDecoration(
                    borderRadius: BorderRadius.all(Radius.circular(8)),
                    color: UIColors.white,
                  ),
                ),
              ),
              ListView.separated(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                separatorBuilder: (_, __) => const SizedBox(height: 16),
                itemBuilder: ((context, index) {
                  final reportField = state.projectReportsSelected[index];
                  return ReportItem(
                    onRemove: () {
                      context.read<TimeCheckingReportCubit>().removeProjectReportSelected(reportField.report.id);
                    },
                    key: GlobalObjectKey(reportField.report.id),
                    reportField: reportField,
                    type: ReportType.projectReport,
                  );
                }),
                itemCount: state.projectReportsSelected.length,
              ),
              const SizedBox(height: 30),
            ],
          );
        },
      ),
      bottomNavigationBar: BlocBuilder<TimeCheckingReportCubit, TimeCheckingReportState>(
        builder: (context, state) {
          return BottomButton(
            isNextLoading: state.submitStatus.isLoading,
            onNext: () {
              debounceUtil.run(() {
                if (context.read<TimeCheckingReportCubit>().onValidateByType(ReportType.projectReport)) {
                  context.read<TimeCheckingReportCubit>().onSubmitReportData();
                }
              });
            },
            onPrev: widget.onPrevPage,
          );
        },
      ),
    );
  }

  _onSheet(BuildContext context) async {
    final cubit = context.read<TimeCheckingReportCubit>();
    final data = cubit.state.projectReportFilters;
    final ids = cubit.state.projectReportsSelected.map((e) => e.report.id).toList();
    final groupedData = data
        .map(
          (e) => GroupDataWrapper(
            group: e.toDataWrapper(),
            children: e.items?.map((e) => e.toDataWrapper()).toList(),
          ),
        )
        .toList();
    final result = await BottomSheetProvider.instance.showMultiSelectGroupSearchView(
      context,
      title: "Chọn dự án",
      ids: ids,
      groupedData: groupedData,
      hintSearch: 'Tìm theo tên dự án',
    );
    if (result != null) {
      final List<String> ids = result.where((e) => e.id != null).map((e) => e.id!).toList();
      cubit.selectProjectReport(ids);
    }
  }
}
