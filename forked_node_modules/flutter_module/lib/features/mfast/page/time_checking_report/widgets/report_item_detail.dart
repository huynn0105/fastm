part of './report_item.dart';

class _ReportItemDetail extends StatefulWidget {
  const _ReportItemDetail({
    super.key,
    required this.reportItem,
    required this.reportField,
    required this.type,
    this.onValueChange,
  });

  final ReportItemModel reportItem;
  final ReportItemField reportField;
  final ReportType type;
  final Function(String? newValue)? onValueChange;

  @override
  State<_ReportItemDetail> createState() => _ReportItemDetailState();
}

class _ReportItemDetailState extends State<_ReportItemDetail> {
  late List<TextEditingController> controllers;

  @override
  void initState() {
    controllers = widget.reportItem.items.map((e) => TextEditingController()).toList();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      for (int i = 0; i < widget.reportItem.items.length; i++) {
        controllers[i].text = _getValueInput(widget.reportItem.items[i].id);
        controllers[i].addListener(() {
          changeText(i);
        });
      }
    });
    super.initState();
  }

  void changeText(int i) {
    if (widget.reportField.inputValueFields[widget.reportItem.items[i].id] != controllers[i].text) {
      widget.onValueChange?.call(controllers[i].text);
      widget.reportField.inputValueFields[widget.reportItem.items[i].id] = controllers[i].text;
    }
  }

  @override
  void dispose() {
    for (int i = 0; i < widget.reportItem.items.length; i++) {
      controllers[i].removeListener(() {
        changeText(i);
      });
      controllers[i].dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Visibility(
          visible: widget.reportItem.title.isNotEmpty,
          child: Padding(
            padding: const EdgeInsets.only(bottom: 8),
            child: Text(
              widget.reportItem.title,
              style: UITextStyle.medium.copyWith(
                fontSize: 14,
                color: UIColors.grayText,
              ),
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ),
        _buildDetails(),
        const SizedBox(height: 8),
        Visibility(
          visible: widget.reportItem.isSum,
          child: Padding(
            padding: const EdgeInsets.only(bottom: 8),
            child: _buildSumWidget(context),
          ),
        ),
        Visibility(
          visible: widget.reportItem.description.isNotEmpty,
          child: Padding(
            padding: const EdgeInsets.only(bottom: 8),
            child: Text(
              widget.reportItem.description,
              style: UITextStyle.medium.copyWith(
                fontSize: 14,
                color: UIColors.grayText,
              ),
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildSumWidget(BuildContext context) {
    final reportField = widget.reportField;
    bool isValidate = true;
    int sum = 0;

    for (var itemDetail in widget.reportItem.items) {
      int? value = int.tryParse(reportField.inputValueFields[itemDetail.id] ?? '');
      String erorrMsg = context.read<TimeCheckingReportCubit>().handleError(
            reportField.inputValueFields[itemDetail.id] ?? '',
            itemDetail.minValue,
            itemDetail.maxValue,
          );
      if (reportField.errorFields[itemDetail.id]?.isNotEmpty == true ||
          reportField.inputValueFields[itemDetail.id]?.isEmpty == true ||
          erorrMsg.isNotEmpty ||
          value == null) {
        isValidate = false;
        break;
      }
      sum += value;
    }

    return Row(
      children: [
        Text(
          'Tổng số lượng: ${isValidate ? sum : ''} ',
          style: UITextStyle.medium.copyWith(
            fontSize: 14,
            color: UIColors.accentBlack,
          ),
        ),
        Visibility(
          visible: !isValidate,
          child: Padding(
            padding: const EdgeInsets.only(left: 6),
            child: Text(
              '-/-',
              style: UITextStyle.medium.copyWith(
                color: UIColors.gray,
              ),
            ),
          ),
        )
      ],
    );
  }

  bool _isError(ReportDetailItemModel itemDetail) {
    return _getError(itemDetail).isNotEmpty == true;
  }

  String _getError(ReportDetailItemModel itemDetail) {
    String? text = widget.reportField.inputValueFields[itemDetail.id];
    if (text == null) return '';
    String erorrMsg = context.read<TimeCheckingReportCubit>().handleError(
          text,
          itemDetail.minValue,
          itemDetail.maxValue,
        );

    return erorrMsg;
  }

  String _getValueInput(String id) {
    return widget.reportField.inputValueFields[id] ?? '';
  }

  Widget _buildDetails() {
    List<Widget> details = [];

    for (int i = 0; i < widget.reportItem.items.length; i++) {
      final reportItemDetail = widget.reportItem.items[i];

      if (reportItemDetail.unit == null && i + 1 < widget.reportItem.items.length) {
        final nextItem = widget.reportItem.items[i + 1];
        details.add(
          Row(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              Expanded(
                child: _ReportTextInput(
                  controller: controllers[i],
                  detail: reportItemDetail,
                  onChanged: () {
                    _onChangeText(reportItemDetail.id);
                  },
                  visible: _isError(reportItemDetail) || _isError(nextItem),
                  messageError: _getError(reportItemDetail),
                ),
              ),
              const SizedBox(width: 10),
              Expanded(
                child: _ReportTextInput(
                  detail: nextItem,
                  onChanged: () {
                    _onChangeText(nextItem.id);
                  },
                  visible: _isError(reportItemDetail) || _isError(nextItem),
                  controller: controllers[i + 1],
                  messageError: _getError(nextItem),
                ),
              ),
            ],
          ),
        );
        i++;
      } else {
        details.add(_ReportTextInput(
          detail: reportItemDetail,
          onChanged: () {
            _onChangeText(reportItemDetail.id);
          },
          visible: _isError(reportItemDetail),
          controller: controllers[i],
          messageError: _getError(reportItemDetail),
        ));
      }
    }
    return Column(
      children: details,
    );
  }

  void _onChangeText(String id) {
    context.read<TimeCheckingReportCubit>().onValidateOnField(widget.reportField, widget.type, id);
    setState(() {});
  }
}

class _ReportTextInput extends StatelessWidget {
  const _ReportTextInput({
    super.key,
    required this.detail,
    required this.onChanged,
    required this.visible,
    required this.controller,
    required this.messageError,
  });

  final ReportDetailItemModel detail;
  final VoidCallback onChanged;
  final bool visible;
  final TextEditingController controller;
  final String messageError;

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        RichText(
          text: TextSpan(
            children: [
              TextSpan(
                text: detail.label,
                style: UITextStyle.regular.copyWith(
                  color: UIColors.accentBlack,
                  fontSize: 14,
                ),
              ),
              detail.required == true
                  ? TextSpan(
                      text: '*',
                      style: UITextStyle.regular.copyWith(
                        color: UIColors.accentRed,
                        fontSize: 14,
                      ),
                    )
                  : const WidgetSpan(
                      child: SizedBox.shrink(),
                    )
            ],
          ),
        ),
        CollectDataView(
          errorMsg: messageError,
          visibleReplacement: visible ? const SizedBox(height: 44) : const SizedBox.shrink(),
          spacing: 2,
          child: Row(
            children: [
              Expanded(
                child: UITextFieldOutline(
                  onChanged: (value) {
                    onChanged.call();
                  },
                  keyboardType: TextInputType.number,
                  controller: controller,
                  fillColor: UIColors.background,
                  textStyle: UITextStyle.medium.copyWith(
                    fontSize: 16,
                    color: UIColors.accentBlack,
                  ),
                  hintTextStyle: UITextStyle.medium.copyWith(
                    fontSize: 16,
                    color: UIColors.gray,
                  ),
                  contentPadding: const EdgeInsets.fromLTRB(16, 10, 0, 10),
                  hintText: detail.placeholder,
                ),
              ),
              Visibility(
                visible: detail.unit != null,
                child: const SizedBox(width: 16),
              ),
              Visibility(
                visible: detail.unit != null,
                child: _UnitWidget(unit: detail.unit),
              )
            ],
          ),
        )
      ],
    );
  }
}

class _UnitWidget extends StatelessWidget {
  const _UnitWidget({
    super.key,
    required this.unit,
  });

  final String? unit;

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: Text(
        '$unit',
        style: UITextStyle.regular.copyWith(
          color: UIColors.grayText,
        ),
        textAlign: TextAlign.start,
      ),
    );
  }
}
