import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/shipper/upload_invoice_process.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/features/shipper/cubit/bill_lading_detail/shipper_bill_lading_detail_cubit.dart';
import 'package:flutter_module/features/shipper/cubit/upload_image/upload_image_cubit.dart';

import '../../../../../../common/bottom_sheet/bottom_sheet_provider.dart';
import '../../../../../../common/bottom_sheet/wrapper/data_wrapper.dart';
import '../../../../../../common/colors.dart';
import '../../../../../../common/constants.dart';
import '../../../../../../common/enum/shipper/delivery_image_type.dart';
import '../../../../../../common/styles.dart';
import '../../../../../../common/utils/text_util.dart';
import '../../../../../../common/widgets/checkbox.dart';
import '../../../../../../common/widgets/collect_data_view.dart';
import '../../../../../../common/widgets/textfields.dart';
import '../../items/delivery_images_item.dart';
import 'package:collection/collection.dart';

class UploadInvoiceWidget extends StatelessWidget {
  const UploadInvoiceWidget({
    super.key,
    required this.orderCode,
    required this.editable,
  });

  final String orderCode;
  final bool editable;

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<ShipperBillLadingDetailCubit>();
    return BlocConsumer<UploadImageCubit, UploadImageState>(
      listener: (context, state) {
        if (state.checkPaymentStatus.isFailure) {
          DialogProvider.instance.showMTradeDialog(
            context: context,
            asset: "ic_mtrade_mascot_waiting_red",
            title: state.errTitle ?? "Gửi yêu cầu thất bại",
            message: state.errMsg,
            titleColor: UIColors.red,
            messageAlign: TextAlign.start,
            positiveTitle: "Đã hiểu và quay lại",
          );
        }
      },
      builder: (context, state) {
        if (state.uploadInvoiceProcess == UploadInvoiceProcess.upload) {
          return Column(
            children: [
              Row(
                children: [
                  SplashButton(
                    onTap: () {
                      if (editable) {
                        context.read<UploadImageCubit>().toggleInvoiceCheckBox();
                      }
                    },
                    child: Padding(
                      padding: const EdgeInsets.only(right: 12, bottom: 12),
                      child: IgnorePointer(
                        ignoring: true,
                        child: AppCheckbox.rectangle(
                          value: state.invoiceCheckBox,
                          size: 28,
                          onChanged: (_) {},
                        ),
                      ),
                    ),
                  ),
                  Expanded(
                    child: CollectDataView(
                      errorMsg: state.errorFields[AppConstants.invoiceImageCheckBoxKey],
                      child: Text(
                        'Đã thanh toán thành công nhưng hệ thống chưa cập nhật',
                        style: UITextStyle.regular.copyWith(
                          fontSize: 13,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
              AnimatedSize(
                duration: AppConstants.duration,
                alignment: Alignment.topCenter,
                child: Visibility(
                  visible: state.invoiceCheckBox,
                  child: Container(
                    margin: const EdgeInsets.only(top: 12),
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    decoration: BoxDecoration(
                      color: UIColors.white,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Column(
                      children: [
                        DeliveryImageItem(
                          labelWidget: Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 16),
                            child: RichText(
                              text: TextSpan(
                                children: [
                                  TextSpan(
                                    text: 'Hình chụp hóa đơn/màn hình chuyển khoản thành công',
                                    style: UITextStyle.regular.copyWith(
                                      color: UIColors.boolText,
                                    ),
                                  ),
                                  TextSpan(
                                    text: ' *',
                                    style: UITextStyle.regular.copyWith(
                                      color: UIColors.red,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          images: state.invoiceImages,
                          editable: editable,
                          errorMsg: state.errorFields[AppConstants.invoiceImageKey],
                          useNormalPreview: true,
                          onAddImage: (File image) {
                            context.read<UploadImageCubit>().uploadImage(
                                  context: context,
                                  orderCode: orderCode,
                                  key: DateTime.now().millisecondsSinceEpoch.toString(),
                                  image: image,
                                  imageType: DeliveryImageType.PICTURE_CUSTOMER_PAYMENT_POD,
                                );
                          },
                          onRemoveImage: (key) {
                            context.read<UploadImageCubit>().removeImage(
                                  orderCode: orderCode,
                                  key: key,
                                  imageType: DeliveryImageType.PICTURE_CUSTOMER_PAYMENT_POD,
                                );
                          },
                        ),
                        const SizedBox(
                          height: 20,
                        ),
                        BlocBuilder<ShipperBillLadingDetailCubit, ShipperBillLadingDetailState>(
                          builder: (context, state) {
                            return Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 16),
                              child: CollectDataView(
                                errorMsg: state.errorFields[AppConstants.paymentMethodKey],
                                description: Text(
                                  'Chọn phương thức thanh toán mà khách sử dụng',
                                  style: UITextStyle.regular.copyWith(
                                    fontStyle: FontStyle.italic,
                                    color: UIColors.grayText,
                                    fontSize: 12,
                                  ),
                                ),
                                child: AppSplashButton(
                                  isDisable: !editable,
                                  onTap: () {
                                    final data = state.paymentMethods.mapIndexed((index, e) {
                                      return DataWrapper(
                                        id: '$index',
                                        value: e.title,
                                      );
                                    }).toList();
                                    onShowPaymentMethodBottomSheet(
                                      context,
                                      selectedId: '${state.selectPaymentMethodIndex}',
                                      data: data,
                                    );
                                  },
                                  child: UITextField.dropdown(
                                    controller: cubit.reportPaymentMethodController,
                                    labelText: "Phương thức thanh toán",
                                    readOnly: true,
                                    hasError: state.errorFields[AppConstants.paymentMethodKey] != null,
                                  ),
                                ),
                              ),
                            );
                          },
                        ),
                        if (editable)
                          const SizedBox(
                            height: 20,
                          ),
                        if (editable)
                          BlocBuilder<ShipperBillLadingDetailCubit, ShipperBillLadingDetailState>(
                            builder: (context, detailState) {
                              return PrimaryButton(
                                onPressed: () {
                                  int selectedIndex = detailState.selectPaymentMethodIndex!;
                                  String gateway = detailState.paymentMethods[selectedIndex].alias ?? '';
                                  cubit.reportIssue(
                                    orderCode: orderCode,
                                    gateway: gateway,
                                    hasInvoiceImage: state.invoiceImages.isNotEmpty,
                                  );
                                },
                                enabled: detailState.selectPaymentMethodIndex != null && state.invoiceImages.isNotEmpty,
                                radius: 8,
                                height: 48,
                                title: 'Báo cáo sự cố',
                              );
                            },
                          ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          );
        }
        return const SizedBox();
      },
    );
  }

  onShowPaymentMethodBottomSheet(
    BuildContext context, {
    required String selectedId,
    required List<DataWrapper> data,
  }) async {
    final cubit = context.read<ShipperBillLadingDetailCubit>();
    final result = await BottomSheetProvider.instance.onShowSearchList(
      context,
      selectedId: selectedId,
      title: "Phương thức thanh toán",
      data: data,
    );
    if (result != null) {
      int? index = TextUtils.parseInt(result?.id);
      if (index != null) {
        cubit.selectReportPaymentMethod(index);
      }
    }
  }
}
