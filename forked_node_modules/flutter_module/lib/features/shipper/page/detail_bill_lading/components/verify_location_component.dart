import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/map/markers/custom_current_location_marker.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';

import '../../../../../common/dialogs/dialog_provider.dart';
import '../../../../../common/utils/location_util.dart';
import '../../../../../common/widgets/buttons.dart';
import '../../../../../common/widgets/map/map_helper/marker_generator.dart';
import 'package:permission_handler/permission_handler.dart';

class VerifyLocationComponent extends StatefulWidget {
  const VerifyLocationComponent({
    super.key,
    required this.onConfirm,
    this.onLocationConfirm,
    this.errorPermissionTitle,
  });

  final Function() onConfirm;
  final String? errorPermissionTitle;
  final Function(double? longitude, double? latitude)? onLocationConfirm;

  @override
  State<StatefulWidget> createState() {
    return _VerifyLocationComponentState();
  }
}

class _VerifyLocationComponentState extends State<VerifyLocationComponent> {
  final Completer<GoogleMapController> _controller = Completer();
  LatLng? _latLng;
  final Set<Marker> _markers = {};
  final double zoom = 17;

  @override
  void initState() {
    super.initState();
    _buildMarkers();
  }

  void _buildMarkers() async {
    bool permission = await LocationUtil.instance.requestPermission(context: context);
    if (permission == false) {
      WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
        DialogProvider.instance.showMTradeDialog(
          context: context,
          asset: "ic_mtrade_mascot_error",
          title: widget.errorPermissionTitle ?? "Cập nhật trạng thái thất bại",
          message: "Vui lòng cho phép quyền truy cập vị trí",
          titleColor: UIColors.red,
          messageAlign: TextAlign.start,
          positiveTitle: "Cho phép truy cập",
          positiveCallback: () {
            Navigator.pop(context);
            openAppSettings();
          },
        );
      });
      return;
    }
    Position? currentLocation = await LocationUtil.instance.getCurrentLocation();
    if (currentLocation == null) return;
    _latLng = LatLng(currentLocation.latitude, currentLocation.longitude);

    if (context.mounted) {
      MarkerGenerator([const CustomCurrentLocationMarker()], (bitmaps) async {
        for (var i = 0; i < bitmaps.length; i++) {
          var icon = BitmapDescriptor.fromBytes(bitmaps[i]);
          _markers.add(
            Marker(
              anchor: const Offset(0.5, 0.09),
              markerId: const MarkerId('current_location'),
              position: _latLng!,
              icon: icon,
            ),
          );
        }
        setState(() {});
      }).generate(context);
    }
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (_latLng == null) {
      return const SizedBox(
        height: 580,
        child: LoadingWidget(),
      );
    }
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Stack(
          children: [
            SizedBox(
              height: 500,
              width: double.infinity,
              child: GoogleMap(
                zoomControlsEnabled: false,
                myLocationButtonEnabled: false,
                myLocationEnabled: false,
                scrollGesturesEnabled: true,
                mapToolbarEnabled: false,
                onMapCreated: (GoogleMapController controller) async {
                  _controller.complete(controller);
                },
                markers: _markers,
                initialCameraPosition: CameraPosition(
                  target: _latLng!,
                  zoom: zoom,
                ),
              ),
            ),
            Positioned(
              bottom: 40,
              right: 16,
              child: SplashButton(
                borderRadius: const BorderRadius.all(Radius.circular(24)),
                onTap: _goCurrentLocation,
                child: Container(
                  width: 48,
                  height: 48,
                  decoration: const BoxDecoration(
                    color: UIColors.primaryColor,
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(
                    Icons.my_location,
                    color: UIColors.white,
                    size: 28,
                  ),
                ),
              ),
            ),
          ],
        ),
        Container(
          padding: const EdgeInsets.only(left: 16, right: 16, top: 12),
          height: 80,
          color: UIColors.white,
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Expanded(
                child: AppOutlinedButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  backgroundColor: Colors.transparent,
                  borderRadius: BorderRadius.circular(8),
                  padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
                  textColor: UIColors.grayText,
                  title: "Quay lại",
                ),
              ),
              const SizedBox(
                width: 16,
              ),
              Expanded(
                child: PrimaryButton(
                  onPressed: () {
                    Navigator.pop(context);
                    widget.onConfirm();
                    widget.onLocationConfirm?.call(_latLng?.longitude, _latLng?.latitude);
                  },
                  enabled: true,
                  radius: 8,
                  padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
                  title: "Xác nhận vị trí",
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  void _goCurrentLocation() async {
    final GoogleMapController controller = await _controller.future;
    controller.animateCamera(
      CameraUpdate.newCameraPosition(
        CameraPosition(
          target: _latLng!,
          zoom: zoom,
        ),
      ),
    );
  }
}
