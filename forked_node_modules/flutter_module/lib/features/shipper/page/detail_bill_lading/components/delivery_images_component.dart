import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/enum/mtrade/payment_type.dart';
import '../../../../../common/colors.dart';
import '../../../../../common/constants.dart';
import '../../../../../common/enum/shipper/delivery_image_type.dart';
import '../../../../../common/enum/shipper/payment_status.dart';
import '../../../../../common/enum/shipper/upload_invoice_process.dart';
import '../../../../../common/styles.dart';
import '../../../cubit/upload_image/upload_image_cubit.dart';
import '../items/delivery_images_item.dart';

class DeliveryImageComponent extends StatelessWidget {
  const DeliveryImageComponent({
    super.key,
    required this.orderCode,
    required this.editable,
    required this.paymentTypeCode,
    required this.paymentStatusCode,
    required this.reported,
  });

  final String orderCode;
  final bool editable;
  final String paymentTypeCode;
  final String paymentStatusCode;
  final bool reported;

  @override
  Widget build(BuildContext context) {
    final isPayLater = paymentTypeCode == MTradePaymentType.later.code;
    final String helpText = isPayLater
        ? 'tối thiểu 5 hình tương ứng với 5 loại bắt buộc'
        : 'tối thiểu 2 hình tương ứng với 2 loại bắt buộc';
    return BlocBuilder<UploadImageCubit, UploadImageState>(
      builder: (context, state) {
        if (paymentStatusCode == PaymentStatus.PAID.name || reported) {
          return Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Hỉnh ảnh/chứng từ\n($helpText)',
                style: UITextStyle.semiBold.copyWith(
                  color: UIColors.grayText,
                ),
              ),
              const SizedBox(
                height: 12,
              ),
              Container(
                padding: const EdgeInsets.only(top: 16, bottom: 16),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8),
                  color: UIColors.white,
                ),
                child: Column(
                  children: [
                    if (isPayLater)
                      DeliveryImageItem(
                        icon: 'ic_home_address',
                        label: 'Địa chỉ nhà',
                        images: state.homeAddressImages,
                        editable: editable,
                        errorMsg: state.errorFields[AppConstants.addressImageKey],
                        onAddImage: (File image) {
                          context.read<UploadImageCubit>().uploadImage(
                            context: context,
                            orderCode: orderCode,
                            key: DateTime.now().millisecondsSinceEpoch.toString(),
                            image: image,
                            imageType: DeliveryImageType.ADDRESS_ORDER_DELIVERY,
                          );
                        },
                        onRemoveImage: (key) {
                          context.read<UploadImageCubit>().removeImage(
                            orderCode: orderCode,
                            key: key,
                            imageType: DeliveryImageType.ADDRESS_ORDER_DELIVERY,
                          );
                        },
                      ),
                    if (isPayLater)
                      Container(
                        height: 4,
                        margin: const EdgeInsets.all(16),
                        decoration: BoxDecoration(color: UIColors.background, borderRadius: BorderRadius.circular(8)),
                      ),
                    if (isPayLater)
                      DeliveryImageItem(
                        icon: 'ic_user',
                        label: 'Chân dung',
                        images: state.portraitImages,
                        editable: editable,
                        errorMsg: state.errorFields[AppConstants.portraitImageKey],
                        onAddImage: (File image) {
                          context.read<UploadImageCubit>().uploadImage(
                            context: context,
                            orderCode: orderCode,
                            key: DateTime.now().millisecondsSinceEpoch.toString(),
                            image: image,
                            imageType: DeliveryImageType.AVATAR_ORDER_DELIVERY,
                          );
                        },
                        onRemoveImage: (key) {
                          context.read<UploadImageCubit>().removeImage(
                            orderCode: orderCode,
                            key: key,
                            imageType: DeliveryImageType.AVATAR_ORDER_DELIVERY,
                          );
                        },
                      ),
                    if (isPayLater)
                      Container(
                        height: 4,
                        margin: const EdgeInsets.all(16),
                        decoration: BoxDecoration(color: UIColors.background, borderRadius: BorderRadius.circular(8)),
                      ),
                    DeliveryImageItem(
                      icon: 'ic_document',
                      label: 'Giấy tờ',
                      images: state.documentImages,
                      editable: editable,
                      errorMsg: state.errorFields[AppConstants.documentImageKey],
                      onAddImage: (File image) {
                        context.read<UploadImageCubit>().uploadImage(
                          context: context,
                          orderCode: orderCode,
                          key: DateTime.now().millisecondsSinceEpoch.toString(),
                          image: image,
                          imageType: DeliveryImageType.EXHIBIT_ORDER_DELIVERY,
                        );
                      },
                      onRemoveImage: (key) {
                        context.read<UploadImageCubit>().removeImage(
                          orderCode: orderCode,
                          key: key,
                          imageType: DeliveryImageType.EXHIBIT_ORDER_DELIVERY,
                        );
                      },
                    ),
                    Container(
                      height: 4,
                      margin: const EdgeInsets.all(16),
                      decoration: BoxDecoration(color: UIColors.background, borderRadius: BorderRadius.circular(8)),
                    ),
                    DeliveryImageItem(
                      icon: 'ic_product',
                      label: 'Sản phẩm',
                      images: state.productImages,
                      errorMsg: state.errorFields[AppConstants.productImageKey],
                      editable: editable,
                      onAddImage: (File image) {
                        context.read<UploadImageCubit>().uploadImage(
                          context: context,
                          orderCode: orderCode,
                          key: DateTime.now().millisecondsSinceEpoch.toString(),
                          image: image,
                          imageType: DeliveryImageType.PRODUCT_ORDER_DELIVERY,
                        );
                      },
                      onRemoveImage: (key) {
                        context.read<UploadImageCubit>().removeImage(
                          orderCode: orderCode,
                          key: key,
                          imageType: DeliveryImageType.PRODUCT_ORDER_DELIVERY,
                        );
                      },
                    ),
                    Container(
                      height: 4,
                      margin: const EdgeInsets.all(16),
                      decoration: BoxDecoration(color: UIColors.background, borderRadius: BorderRadius.circular(8)),
                    ),
                    if (isPayLater)
                      DeliveryImageItem(
                        icon: 'ic_setup',
                        label: 'Lắp đặt',
                        images: state.setupImages,
                        errorMsg: state.errorFields[AppConstants.setupImageKey],
                        editable: editable,
                        onAddImage: (File image) {
                          context.read<UploadImageCubit>().uploadImage(
                            context: context,
                            orderCode: orderCode,
                            key: DateTime.now().millisecondsSinceEpoch.toString(),
                            image: image,
                            imageType: DeliveryImageType.INSTALL_ORDER_DELIVERY,
                          );
                        },
                        onRemoveImage: (key) {
                          context.read<UploadImageCubit>().removeImage(
                            orderCode: orderCode,
                            key: key,
                            imageType: DeliveryImageType.INSTALL_ORDER_DELIVERY,
                          );
                        },
                      ),
                    if (isPayLater)
                      Container(
                        height: 4,
                        margin: const EdgeInsets.all(16),
                        decoration: BoxDecoration(color: UIColors.background, borderRadius: BorderRadius.circular(8)),
                      ),
                    DeliveryImageItem(
                      icon: 'ic_more',
                      label: 'Khác (không bắt buộc)',
                      images: state.otherImages,
                      required: false,
                      errorMsg: state.errorFields[AppConstants.otherImageKey],
                      editable: editable,
                      onAddImage: (File image) {
                        context.read<UploadImageCubit>().uploadImage(
                          context: context,
                          orderCode: orderCode,
                          key: DateTime.now().millisecondsSinceEpoch.toString(),
                          image: image,
                          imageType: DeliveryImageType.OTHER_ORDER_DELIVERY,
                        );
                      },
                      onRemoveImage: (key) {
                        context.read<UploadImageCubit>().removeImage(
                          orderCode: orderCode,
                          key: key,
                          imageType: DeliveryImageType.OTHER_ORDER_DELIVERY,
                        );
                      },
                    ),
                  ],
                ),
              ),
            ],
          );
        }
        return const SizedBox();
      },
    );
  }
}
