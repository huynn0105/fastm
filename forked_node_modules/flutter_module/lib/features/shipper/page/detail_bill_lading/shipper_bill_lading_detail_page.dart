import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/enum/notification_action.dart';
import 'package:flutter_module/common/enum/shipper/delivery_status.dart';
import 'package:flutter_module/common/enum/shipper/upload_invoice_process.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/shipper/page/detail_bill_lading/components/delivery_images_component.dart';
import 'package:flutter_module/features/shipper/page/detail_bill_lading/components/history_component.dart';
import 'package:flutter_module/features/shipper/page/detail_bill_lading/components/waiting_upload_images_component.dart';
import 'package:flutter_module/general_config.dart';

import '../../../../common/bottom_sheet/bottom_sheet_provider.dart';
import '../../../../common/colors.dart';
import '../../../../common/dialogs/dialog_provider.dart';
import '../../../../common/enum/shipper/payment_status.dart';
import '../../../../common/utils/redirect_util.dart';
import '../../../../common/widgets/appbar.dart';
import '../../../../common/widgets/buttons.dart';
import '../../../../models/shipper/order/oms_order_history.dart';
import '../../cubit/bill_lading_detail/shipper_bill_lading_detail_cubit.dart';
import '../../cubit/upload_image/upload_image_cubit.dart';
import 'components/delivery_process_component.dart';
import 'components/order_component.dart';
import 'components/order_status_component.dart';
import 'components/verify_location_component.dart';

@RoutePage()
class ShipperBillLadingDetailPage extends StatefulWidget implements AutoRouteWrapper {
  const ShipperBillLadingDetailPage({
    Key? key,
    @QueryParam("orderCode") this.orderCode = "",
  }) : super(key: key);

  final String orderCode;

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => ShipperBillLadingDetailCubit(),
        ),
        BlocProvider(
          create: (_) => UploadImageCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  State<ShipperBillLadingDetailPage> createState() => _ShipperBillLadingDetailPageState();
}

class _ShipperBillLadingDetailPageState extends State<ShipperBillLadingDetailPage> {
  late final StreamSubscription _subscription;

  @override
  void initState() {
    super.initState();
    _subscription = eventBus.on<ReloadShipperBillLadingEventBus>().listen(_onEventBusListen);
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        if (!context.router.canPop()) {
          RedirectUtil.backToMFast();
          return false;
        }
        return true;
      },
      child: Scaffold(
        appBar: MFastAdvanceAppBar(
          context: context,
          title: "Chi tiết đơn hàng",
          onBack: () {
            context.popRoute();
          },
          onHome: () {
            RedirectUtil.backToMFast();
          },
        ),
        body: BlocConsumer<ShipperBillLadingDetailCubit, ShipperBillLadingDetailState>(
          listener: (context, state) {
            if (state.completedStatus == BlocStatus.success) {
              String deliveryCode = state.data?.orderDetail?.orderDeliveryCode ?? '';
              DialogProvider.instance.showMTradeDialog(
                context: context,
                asset: "ic_mtrade_mascot_success",
                title: "Cập nhật thành công",
                barrierDismissible: false,
                message: "Đơn hàng $deliveryCode đã được cập nhật trạng thái mới nhất.",
                titleColor: UIColors.accentGreen,
                messageAlign: TextAlign.start,
                positiveTitle: "Đã hiểu",
                positiveCallback: () {
                  _fetchData(context);
                },
              );
            } else if (state.completedStatus == BlocStatus.failure) {
              DialogProvider.instance.showMTradeDialog(
                context: context,
                asset: "ic_mtrade_mascot_error",
                title: "Cập nhật trạng thái thất bại",
                message: state.errMsg,
                titleColor: UIColors.red,
                messageAlign: TextAlign.start,
                positiveTitle: "Thử lại ngay",
                negativeTitle: "Quay lại",
                negativeCallback: context.router.pop,
              );
            } else if (state.reportStatus == BlocStatus.success) {
              _fetchData(context);
            } else if (state.reportStatus == BlocStatus.failure) {
              DialogProvider.instance.showMTradeDialog(
                context: context,
                asset: "ic_mtrade_mascot_error",
                title: "Báo cáo sự cố thất bại",
                message: state.errMsg,
                titleColor: UIColors.red,
                messageAlign: TextAlign.start,
                positiveTitle: "Thử lại",
              );
            }
          },
          builder: (context, state) {
            if (state.status.isInitial) {
              _fetchData(context);
            }
            if (state.data == null) {
              return const LoadingWidget.dark();
            }
            String deliveryCode = state.data?.orderDetail?.masterDeliveryStatus?.code ?? '';
            String updated = state.data?.orderDetail?.updated ?? '';
            List<OmsOrderHistory> histories = state.data?.orderDetail?.omsOrderHistories ?? [];
            bool isPaymentOnDelivery = state.data?.orderDetail?.isPaymentOnDelivery() == true;
            bool systemNotUpdatePaid = state.data?.orderDetail?.systemNotUpdatePaid == true;
            bool reported = TextUtils.isNotEmpty(state.data?.orderDetail?.errorGatewayCode);
            bool isPaid = state.data?.orderDetail?.masterPaymentsStatus?.code == PaymentStatus.PAID.name;
            return Stack(
              children: [
                ListView(
                  padding: const EdgeInsets.fromLTRB(16, 16, 16, 100),
                  children: [
                    OrderComponent(
                      data: state.data,
                      showDetail: _hideDetailToggleBtn(deliveryCode),
                      showToggleBtn: !_hideDetailToggleBtn(deliveryCode),
                    ),
                    if (_showDeliveryProcess(deliveryCode) && isPaymentOnDelivery) const SizedBox(height: 24),
                    if (_showDeliveryProcess(deliveryCode) && isPaymentOnDelivery)
                      DeliveryProcessComponent(
                        data: state.data,
                        editable: _waitingUpdateImages(deliveryCode) && !reported,
                        systemNotUpdatePaid: systemNotUpdatePaid,
                        onPaid: () => _fetchData(context),
                      ),
                    if (histories.isNotEmpty) const SizedBox(height: 24),
                    if (histories.isNotEmpty)
                      HistoryComponent(
                        data: histories,
                      ),
                    if (_needChangeOrderStatus(deliveryCode)) const SizedBox(height: 24),
                    if (_needChangeOrderStatus(deliveryCode)) const OrderStatusComponent(),
                    if (_waitingUpdateImages(deliveryCode) && !isPaymentOnDelivery) const SizedBox(height: 24),
                    if (_waitingUpdateImages(deliveryCode) && !isPaymentOnDelivery)
                      WaitingUploadImagesComponent(date: updated),
                    if (_needUpdateImages(deliveryCode)) const SizedBox(height: 24),
                    if (_needUpdateImages(deliveryCode))
                      DeliveryImageComponent(
                        orderCode: widget.orderCode,
                        editable: _waitingUpdateImages(deliveryCode) && !systemNotUpdatePaid,
                        paymentTypeCode: state.data?.orderDetail?.paymentMethod?.code ?? '',
                        paymentStatusCode: state.data?.orderDetail?.masterPaymentsStatus?.code ?? '',
                        reported: TextUtils.isNotEmpty(state.data?.orderDetail?.errorGatewayCode),
                      ),
                    if (_needUpdateOrder(deliveryCode) && !systemNotUpdatePaid) const SizedBox(height: 24),
                    if (_needUpdateOrder(deliveryCode) && !systemNotUpdatePaid)
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Expanded(
                            child: AppOutlinedButton(
                              onPressed: context.router.pop,
                              backgroundColor: Colors.transparent,
                              borderRadius: BorderRadius.circular(8),
                              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
                              textColor: UIColors.grayText,
                              title: "Quay lại",
                            ),
                          ),
                          const SizedBox(
                            width: 16,
                          ),
                          Expanded(
                            child: BlocBuilder<UploadImageCubit, UploadImageState>(
                              builder: (context, uploadState) {
                                return PrimaryButton(
                                  onPressed: () {
                                    _updateOrder(
                                      context: context,
                                      code: deliveryCode,
                                      deliveryCode: state.data?.orderDetail?.orderDeliveryCode ?? '',
                                      paymentTypeCode: state.data?.orderDetail?.paymentMethod?.code ?? '',
                                      paymentTransactionId: state.data?.orderDetail?.paymentTransactionId ?? '',
                                      isPaid: isPaid,
                                      reported: reported,
                                    );
                                  },
                                  enabled: uploadState.errorFields.isEmpty && state.errorFields.isEmpty,
                                  radius: 8,
                                  padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
                                  title: _getButtonLabel(deliveryCode),
                                );
                              },
                            ),
                          ),
                        ],
                      ),
                    const SizedBox(height: 24),
                  ],
                ),
                if (state.status.isInitial ||
                    state.status.isLoading ||
                    state.completedStatus.isLoading ||
                    state.reportStatus.isLoading)
                  const LoadingWidget.dark(),
              ],
            );
          },
        ),
      ),
    );
  }

  _fetchData(BuildContext context) {
    context.read<ShipperBillLadingDetailCubit>().fetchData(widget.orderCode, (order) {
      context.read<UploadImageCubit>().setupImages(order);
    });
  }

  _hideDetailToggleBtn(String code) {
    return code.isEmpty ||
        code == DeliveryStatus.AT_THE_CORNER.name ||
        code == DeliveryStatus.DELAY.name ||
        code == DeliveryStatus.DELIVERY_FAILURE.name ||
        code == DeliveryStatus.CANCEL.name;
  }

  _needChangeOrderStatus(String code) {
    return code == DeliveryStatus.AT_THE_CORNER.name || code == DeliveryStatus.DELAY.name;
  }

  _showDeliveryProcess(String code) {
    return code == DeliveryStatus.DELIVERIED.name || code == DeliveryStatus.SUCCEED.name;
  }

  _waitingUpdateImages(String code) {
    return code == DeliveryStatus.DELIVERIED.name;
  }

  _needUpdateImages(String code) {
    return code == DeliveryStatus.DELIVERIED.name || code == DeliveryStatus.SUCCEED.name;
  }

  _needUpdateOrder(String code) {
    return code == DeliveryStatus.DELIVERIED.name ||
        code == DeliveryStatus.AT_THE_CORNER.name ||
        code == DeliveryStatus.DELAY.name;
  }

  _getButtonLabel(String code) {
    if (code == DeliveryStatus.DELIVERIED.name) {
      return 'Hoàn tất đơn';
    }
    return 'Đã đến nơi';
  }

  _updateOrder({
    required BuildContext context,
    required String code,
    required String? deliveryCode,
    required String paymentTypeCode,
    required String paymentTransactionId,
    required bool isPaid,
    required bool reported,
  }) {
    final cubit = context.read<ShipperBillLadingDetailCubit>();
    final uploadImageCubit = context.read<UploadImageCubit>();
    if (code == DeliveryStatus.DELIVERIED.name) {
      if (!isPaid && uploadImageCubit.state.uploadInvoiceProcess != UploadInvoiceProcess.upload) {
        DialogProvider.instance.showMTradeDialog(
          context: context,
          asset: "ic_mtrade_mascot_waiting_red",
          title: 'Đơn hàng chưa được thanh toán',
          message: 'Vui lòng gửi link và hướng dẫn khách hàng thanh toán online để hoàn tất đơn hàng này.',
          titleColor: UIColors.red,
          messageAlign: TextAlign.start,
          positiveTitle: "Đã hiểu và quay lại",
        );
        return;
      }
      if (!isPaid && !reported) {
        DialogProvider.instance.showMTradeDialog(
          context: context,
          asset: "ic_mtrade_mascot_waiting_red",
          title: 'Chưa hoàn tất báo cáo sự cố',
          message:
              'Bạn đang bấm chọn KH đã thanh toán nhưng hệ thống chưa cập nhật. Vui lòng hoàn tất báo cáo trước khi thực hiện các thao tác khác.',
          titleColor: UIColors.red,
          messageAlign: TextAlign.start,
          positiveTitle: "Đã hiểu và quay lại",
        );
        return;
      }
      uploadImageCubit.requestOnlyCheckInvoice(paymentTransactionId).then((checkPaid) {
        if (uploadImageCubit.checkMissingImages(paymentTypeCode, isPaid || checkPaid)) {
          return;
        }
        cubit.updateOrder(
          context: context,
          orderCode: widget.orderCode,
          statusCode: uploadImageCubit.state.invoiceCheckBox && !checkPaid ? '' : DeliveryStatus.SUCCEED.name,
        );
      });
    }
    if (code == DeliveryStatus.AT_THE_CORNER.name || code == DeliveryStatus.DELAY.name) {
      final nextStep = cubit.state.selectedNextStep;
      if (nextStep == DeliveryStatus.DELIVERIED) {
        BottomSheetProvider.instance.show(
          context,
          title: 'Vị trí hiện tại của bạn',
          isDismissible: false,
          closeOnRight: false,
          child: VerifyLocationComponent(
            onConfirm: () {
              cubit.updateOrder(
                context: context,
                orderCode: widget.orderCode,
                statusCode: DeliveryStatus.DELIVERIED.name,
              );
            },
          ),
        );
      }
      if (nextStep == DeliveryStatus.DELIVERY_FAILURE) {
        if (cubit.validate()) {
          return;
        }
        DialogProvider.instance.showMTradeDialog(
          context: context,
          asset: "ic_mtrade_mascot_cancel",
          title: "Xác nhận giao hàng thất bại",
          message: "Bấm “Xác nhận” để cập nhật trạng thái mới cho đơn hàng $deliveryCode.",
          titleColor: UIColors.red,
          messageAlign: TextAlign.start,
          positiveTitle: "Xác nhận",
          negativeTitle: "Xem lại",
          positiveCallback: () {
            cubit.updateOrder(
              context: context,
              orderCode: widget.orderCode,
              statusCode: DeliveryStatus.DELIVERY_FAILURE.name,
              reasonCode: cubit.state.reasonFailureCode,
            );
          },
        );
      }
      if (nextStep == DeliveryStatus.DELAY) {
        if (cubit.validate()) {
          return;
        }
        DialogProvider.instance.showMTradeDialog(
          context: context,
          asset: "ic_mtrade_mascot_delay",
          title: "Xác nhận hẹn giao lần sau",
          message: "Bấm “Xác nhận” để cập nhật trạng thái mới cho đơn hàng $deliveryCode.",
          messageAlign: TextAlign.start,
          positiveTitle: "Xác nhận",
          negativeTitle: "Xem lại",
          positiveCallback: () {
            cubit.updateOrder(
              context: context,
              orderCode: widget.orderCode,
              statusCode: DeliveryStatus.DELAY.name,
              reasonCode: cubit.state.reasonDelayCode,
            );
          },
        );
      }
    }
  }

  _onEventBusListen(ReloadShipperBillLadingEventBus event) {
    if (event.action == NotificationAction.reload_detail_delivery.value && event.deliveryOrderCode == widget.orderCode) {
      _fetchData(context);
    }
  }
}
