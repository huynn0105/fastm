import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/image_picker_utils.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/services/api/shipper/payload/update_document_payload.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/dialogs/dialog_provider.dart';
import '../../../../../common/dialogs/modals/fullscreen_modal.dart';
import '../../../../../common/utils/text_util.dart';
import '../../../../../common/widgets/collect_data_view.dart';
import '../../../../../common/widgets/images.dart';
import '../../../../mtrade/page/product_detail/components/product_image_preview_component.dart';
import 'add_image_item.dart';
import 'image_item.dart';
import 'loading_image_item.dart';
import 'package:permission_handler/permission_handler.dart';

class DeliveryImageItem extends StatelessWidget {
  const DeliveryImageItem({
    super.key,
    this.icon,
    this.label,
    this.labelWidget,
    this.required = true,
    this.useNormalPreview = false,
    required this.images,
    required this.errorMsg,
    required this.editable,
    required this.onAddImage,
    required this.onRemoveImage,
  });

  final String? icon;
  final String? label;
  final Widget? labelWidget;
  final bool required;
  final bool useNormalPreview;
  final Map<String, Document?> images;
  final String? errorMsg;
  final bool editable;
  final Function(File) onAddImage;
  final Function(String) onRemoveImage;

  @override
  Widget build(BuildContext context) {
    List<Document?> data = images.entries.map((entry) => entry.value).toList();
    return Column(
      children: [
        labelWidget ??
            Row(
              children: [
                const SizedBox(
                  width: 16,
                ),
                AppImage.asset(
                  asset: icon,
                  width: 24,
                  height: 24,
                  color: errorMsg != null ? UIColors.red : UIColors.darkBlue,
                ),
                const SizedBox(
                  width: 12,
                ),
                RichText(
                  text: TextSpan(
                    children: [
                      TextSpan(
                        text: label ?? '',
                        style: UITextStyle.medium.copyWith(
                          color: errorMsg != null ? UIColors.red : UIColors.darkBlue,
                          fontSize: 16,
                        ),
                      ),
                      if (required)
                        TextSpan(
                          text: ' *',
                          style: UITextStyle.medium.copyWith(
                            color: UIColors.red,
                            fontSize: 16,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
        AnimatedSize(
          duration: const Duration(milliseconds: 800),
          alignment: Alignment.topCenter,
          curve: Curves.linearToEaseOut,
          child: Container(
            width: double.infinity,
            padding: const EdgeInsets.only(left: 16, right: 16),
            child: Visibility(
              visible: TextUtils.isNotEmpty(errorMsg),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const SizedBox(height: 8),
                  ErrorText(
                    errorMsg: errorMsg,
                  ),
                ],
              ),
            ),
          ),
        ),
        const SizedBox(
          height: 12,
        ),
        if (data.isNotEmpty || editable)
          SizedBox(
            height: 147,
            child: ListView.separated(
              scrollDirection: Axis.horizontal,
              padding: const EdgeInsets.symmetric(horizontal: 16),
              itemBuilder: (context, i) {
                int index = editable ? i - 1 : i;
                if (editable && i == 0) {
                  return SplashButton(
                    onTap: () => _addImage(context),
                    child: const AddImageItem(),
                  );
                }
                if (data[index] == null) {
                  return const LoadingImageItem();
                } else {
                  return ImageItem(
                    image: data[index]!.url ?? '',
                    editable: editable,
                    onRemoveImage: () {
                      onRemoveImage.call(images.keys.elementAt(index));
                    },
                    onTap: useNormalPreview ? () {
                      Navigator.of(context).push(
                        FullScreenModal(
                          page: ProductImagePreviewComponent(
                            images: data.map((e) => e?.url ?? '').toList(),
                            initialIndex: index,
                          ),
                        ),
                      );
                    } : null,
                  );
                }
              },
              separatorBuilder: (context, index) {
                return const SizedBox(
                  width: 12,
                );
              },
              itemCount: editable ? data.length + 1 : data.length,
            ),
          ),
      ],
    );
  }

  _addImage(BuildContext context) async {
    try {
      File? file = await ImagePickerUtils.pickImage(context: context);
      if (file != null) {
        onAddImage.call(file);
      }
    } catch (e) {
      if (e is PlatformException && e.code == 'camera_access_denied' && context.mounted) {
        DialogProvider.instance.showMTradeDialog(
          context: context,
          asset: "ic_mtrade_mascot_error",
          title: "Thêm hình ảnh thất bại",
          message: "Vui lòng cho phép quyền truy cập camera",
          titleColor: UIColors.red,
          messageAlign: TextAlign.start,
          positiveTitle: "Cho phép truy cập",
          positiveCallback: () {
            openAppSettings();
          },
        );
      }
    }
  }
}
