import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/tabbar/tabbar.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/features/shipper/cubit/bill_lading_tabbar/shipper_bill_lading_tabbar_cubit.dart';
import 'package:flutter_module/features/shipper/page/shipper/widgets/shipper_text_field.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:url_launcher/url_launcher.dart';

import '../../../../common/dialogs/dialog_provider.dart';
import '../../../../common/global_function.dart';
import '../../../../env_data.dart';
import '../../../app_cubit.dart';

@RoutePage()
class ShipperPage extends StatefulWidget implements AutoRouteWrapper {
  const ShipperPage({Key? key}) : super(key: key);

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (_) => ShipperBillLadingTabbarCubit(),
      child: this,
    );
  }

  @override
  State<ShipperPage> createState() => _ShipperPageState();
}

class _ShipperPageState extends State<ShipperPage> with SingleTickerProviderStateMixin {
  late final TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    // if (AppData.instance.routePath.isNotEmpty) {
    //   getItInstance.get<AppRouter>().pushNamed(AppData.instance.routePath);
    // }
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthCubit, AuthState>(
      listener: (context, state) {
        if (!state.hasLoggedIn) {
          DialogProvider.instance.showMTradeLoginDialog(
            context: context,
            barrierDismissible: false,
            onLogin: () {
              RedirectUtil.backToMFast();
              GlobalFunction.launchScheme(
                "${EnvData.instance.deepLinkBaseUrl}://open?view=LoginModal",
                mode: LaunchMode.externalApplication,
              );
            },
          );
        }
      },
      child: Scaffold(
        appBar: MFastAdvanceAppBar(
          context: context,
          title: "Danh sách vận đơn",
          onBack: () {
            RedirectUtil.backToMFast();
          },
          onHome: () {
            RedirectUtil.backToMFast();
          },
        ),
        body: Column(
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Row(
                children: [
                  BlocBuilder<ShipperBillLadingTabbarCubit, ShipperBillLadingTabbarState>(
                    builder: (context, state) {
                      final cubit = context.read<ShipperBillLadingTabbarCubit>();
                      return Expanded(
                        child: ShipperSearchTextField(
                          controller: cubit.searchController,
                          hintText: "Tìm kiếm",
                          onChanged: (value) {
                            cubit.debounce.run(() {
                              cubit.updateSearch(value);
                            });
                          },
                          onSubmitted: (value) {
                            FocusManager.instance.primaryFocus?.unfocus();
                          },
                          onCleared: () {
                            cubit.clearSearch();
                          },
                        ),
                      );
                    },
                  ),
                  // const SizedBox(
                  //   width: 16,
                  // ),
                  // Container(
                  //   width: 40,
                  //   height: 40,
                  //   alignment: Alignment.center,
                  //   decoration: const BoxDecoration(
                  //     shape: BoxShape.circle,
                  //     color: UIColors.white,
                  //   ),
                  //   child: const AppImage.asset(
                  //     asset: "ic_shipper_scan",
                  //     width: 24,
                  //     height: 24,
                  //   ),
                  // ),
                ],
              ),
            ),
            const SizedBox(
              height: 8,
            ),
            Expanded(
              child: AutoTabsRouter(
                lazyLoad: false,
                routes: const [
                  ShipperNewBillLadingRoute(),
                  ShipperDeliveryBillLadingRoute(),
                  ShipperCompletedBillLadingRoute(),
                ],
                builder: (BuildContext context, Widget child) {
                  return Column(
                    children: [
                      BlocBuilder<ShipperBillLadingTabbarCubit, ShipperBillLadingTabbarState>(
                        builder: (context, state) {
                          final cubit = context.read<ShipperBillLadingTabbarCubit>();
                          return UnderlineIndicatorTabbar(
                            controller: _tabController,
                            backgroundColor: UIColors.background,
                            titles: [
                              "Đơn mới (${state.newCount})",
                              "Đang giao (${state.deliveryCount})",
                              "Hoàn tất (${state.completedCount})",
                            ],
                            onTap: (index) {
                              cubit.changeTabbar();
                              AutoTabsRouter.of(context).setActiveIndex(index);
                            },
                          );
                        },
                      ),
                      Expanded(
                        child: child,
                      ),
                    ],
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
