import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/enum/shipper/bill_lading_status.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/features/shipper/cubit/bill_lading_tabbar/shipper_bill_lading_tabbar_cubit.dart';
import 'package:flutter_module/features/shipper/cubit/new_bill_lading/shipper_new_bill_lading_cubit.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import '../../../../../../common/event_bus/event_bus.dart';
import '../../../../../../common/widgets/empty_widget.dart';
import '../../../../../../general_config.dart';
import 'items/shipper_new_bill_lading_item.dart';

@RoutePage()
class ShipperNewBillLadingPage extends StatefulWidget implements AutoRouteWrapper {
  const ShipperNewBillLadingPage({Key? key}) : super(key: key);

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (_) => ShipperNewBillLadingCubit(),
      child: this,
    );
  }

  @override
  State<ShipperNewBillLadingPage> createState() => _ShipperNewBillLadingPageState();
}

class _ShipperNewBillLadingPageState extends State<ShipperNewBillLadingPage> {
  late final StreamSubscription _subscription;

  @override
  void initState() {
    super.initState();
    _subscription = eventBus.on<ShipperRefreshAfterUpdateOrderStatusEventBus>().listen(_onListen);
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<ShipperNewBillLadingCubit>();
    return MultiBlocListener(
      listeners: [
        BlocListener<ShipperNewBillLadingCubit, ShipperNewBillLadingState>(
          listener: (context, state) {
            context.read<ShipperBillLadingTabbarCubit>().updateNewCount(state.count);
          },
        ),
        BlocListener<ShipperBillLadingTabbarCubit, ShipperBillLadingTabbarState>(
          listenWhen: (pre, cur) {
            return pre.keySearch != cur.keySearch;
          },
          listener: (context, state) {
            final curIndex = AutoTabsRouter.of(context).activeIndex;
            final preIndex = AutoTabsRouter.of(context).previousIndex;
            if (curIndex == BillLadingTabbar.newTab.index && state.isChangeTabBar != true) {
              context.read<ShipperNewBillLadingCubit>().updateSearch(state.keySearch);
            } else if (preIndex == BillLadingTabbar.newTab.index) {
              context.read<ShipperNewBillLadingCubit>().updateSearch("");
            }
          },
        ),
      ],
      child: BlocBuilder<ShipperNewBillLadingCubit, ShipperNewBillLadingState>(
        builder: (context, state) {
          if (state.status.isInitial) {
            cubit.fetchData();
          }

          if (state.status.showLoading) {
            return const LoadingWidget();
          }

          return SlidableAutoCloseBehavior(
            child: LoadMoreWidget(
              onRefresh: () => cubit.refreshData(),
              onLoadMore: () => cubit.loadmoreData(),
              child: state.data.isEmpty & !state.status.showLoading
                  ? const EmptyWidget(
                      message: "Hiện chưa có đơn hàng nào được giao cho bạn",
                    )
                  : ListView.separated(
                      physics: AppConstants.physics,
                      padding: const EdgeInsets.only(bottom: 100),
                      itemBuilder: (context, index) {
                        return NewBillLadingItem(
                          data: state.data[index],
                        );
                      },
                      separatorBuilder: (_, __) => const SizedBox(
                        height: 12,
                      ),
                      itemCount: state.data.length,
                    ),
            ),
          );
        },
      ),
    );
  }

  void _onListen(ShipperRefreshAfterUpdateOrderStatusEventBus event) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<ShipperNewBillLadingCubit>().refreshData();
    });
  }
}
