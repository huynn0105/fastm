import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../../../../../common/bloc_status.dart';
import '../../../../../../common/enum/shipper/bill_lading_status.dart';
import '../../../../../../common/event_bus/event_bus.dart';
import '../../../../../../common/widgets/loading.dart';
import '../../../../../../general_config.dart';
import '../../../../cubit/bill_lading_tabbar/shipper_bill_lading_tabbar_cubit.dart';
import '../../../../cubit/completed_bill_lading/shipper_completed_bill_lading_cubit.dart';
import '../../../../../../common/widgets/empty_widget.dart';
import '../../../../../../common/widgets/loadmore_widget.dart';
import 'items/shipper_completed_bill_lading_item.dart';

import '../../../../../../common/constants.dart';

@RoutePage()
class ShipperCompletedBillLadingPage extends StatefulWidget implements AutoRouteWrapper {
  const ShipperCompletedBillLadingPage({Key? key}) : super(key: key);

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (_) => ShipperCompletedBillLadingCubit(),
      child: this,
    );
  }

  @override
  State<ShipperCompletedBillLadingPage> createState() => _ShipperCompletedBillLadingPageState();
}

class _ShipperCompletedBillLadingPageState extends State<ShipperCompletedBillLadingPage> {
  late final StreamSubscription _subscription;

  @override
  void initState() {
    super.initState();
    _subscription = eventBus.on<ShipperRefreshAfterUpdateOrderStatusEventBus>().listen(_onListen);
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<ShipperCompletedBillLadingCubit>();
    return MultiBlocListener(
      listeners: [
        BlocListener<ShipperCompletedBillLadingCubit, ShipperCompletedBillLadingState>(
          listener: (context, state) {
            context.read<ShipperBillLadingTabbarCubit>().updateCompletedCount(state.count);
          },
        ),
        BlocListener<ShipperBillLadingTabbarCubit, ShipperBillLadingTabbarState>(
          listenWhen: (pre, cur) {
            return pre.keySearch != cur.keySearch;
          },
          listener: (context, state) {
            final curIndex = AutoTabsRouter.of(context).activeIndex;
            final preIndex = AutoTabsRouter.of(context).previousIndex;
            if (curIndex == BillLadingTabbar.completedTab.index && state.isChangeTabBar != true) {
              context.read<ShipperCompletedBillLadingCubit>().updateSearch(state.keySearch);
            } else if (preIndex == BillLadingTabbar.completedTab.index) {
              context.read<ShipperCompletedBillLadingCubit>().updateSearch("");
            }
          },
        ),
      ],
      child: BlocBuilder<ShipperCompletedBillLadingCubit, ShipperCompletedBillLadingState>(
        builder: (context, state) {
          if (state.status.isInitial) {
            cubit.fetchData();
          }

          if (state.status.showLoading) {
            return const LoadingWidget();
          }

          return LoadMoreWidget(
            onRefresh: () => cubit.refreshData(),
            onLoadMore: () => cubit.loadmoreData(),
            child: state.data.isEmpty & !state.status.showLoading
                ? const EmptyWidget(
                    message: "Hiện chưa có đơn hàng nào đã hoàn tất",
                  )
                : ListView.separated(
                    physics: AppConstants.physics,
                    padding: const EdgeInsets.only(bottom: 100),
                    itemBuilder: (context, index) {
                      return ShipperCompletedBillLadingItem(
                        index: index,
                        data: state.data[index],
                      );
                    },
                    separatorBuilder: (_, __) => const SizedBox(
                      height: 12,
                    ),
                    itemCount: state.data.length,
                  ),
          );
        },
      ),
    );
  }

  void _onListen(ShipperRefreshAfterUpdateOrderStatusEventBus event) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<ShipperCompletedBillLadingCubit>().refreshData();
    });
  }
}