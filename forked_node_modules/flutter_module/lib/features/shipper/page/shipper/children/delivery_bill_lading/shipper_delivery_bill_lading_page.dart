import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/general_config.dart';
import '../../../../../../common/bloc_status.dart';
import '../../../../../../common/enum/shipper/bill_lading_status.dart';
import '../../../../../../common/widgets/loadmore_widget.dart';
import '../../../../cubit/bill_lading_tabbar/shipper_bill_lading_tabbar_cubit.dart';
import '../../../../cubit/delivery_bill_lading/shipper_delivery_bill_lading_cubit.dart';

import '../../../../../../common/constants.dart';
import '../../../../../../common/widgets/empty_widget.dart';
import '../../../../../../common/widgets/loading.dart';
import 'items/shipper_delivery_bill_lading_item.dart';
import 'items/shipper_start_location_item.dart';

@RoutePage()
class ShipperDeliveryBillLadingPage extends StatefulWidget implements AutoRouteWrapper {
  const ShipperDeliveryBillLadingPage({Key? key}) : super(key: key);

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (_) => ShipperDeliveryBillLadingCubit(),
      child: this,
    );
  }

  @override
  State<ShipperDeliveryBillLadingPage> createState() => _ShipperDeliveryBillLadingPageState();
}

class _ShipperDeliveryBillLadingPageState extends State<ShipperDeliveryBillLadingPage> {
  late final StreamSubscription _subscription;

  @override
  void initState() {
    super.initState();
    _subscription = eventBus.on<ShipperRefreshAfterUpdateOrderStatusEventBus>().listen(_onListen);
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<ShipperDeliveryBillLadingCubit>();
    return MultiBlocListener(
      listeners: [
        BlocListener<ShipperDeliveryBillLadingCubit, ShipperDeliveryBillLadingState>(
          listener: (context, state) {
            context.read<ShipperBillLadingTabbarCubit>().updateDeliveryCount(state.count);
          },
        ),
        BlocListener<ShipperBillLadingTabbarCubit, ShipperBillLadingTabbarState>(
          listenWhen: (pre, cur) {
            return pre.keySearch != cur.keySearch;
          },
          listener: (context, state) {
            final curIndex = AutoTabsRouter.of(context).activeIndex;
            final preIndex = AutoTabsRouter.of(context).previousIndex;
            if (curIndex == BillLadingTabbar.deliveryTab.index && state.isChangeTabBar != true) {
              context.read<ShipperDeliveryBillLadingCubit>().updateSearch(state.keySearch);
            } else if (preIndex == BillLadingTabbar.deliveryTab.index) {
              context.read<ShipperDeliveryBillLadingCubit>().updateSearch("");
            }
          },
        ),
      ],
      child: BlocBuilder<ShipperDeliveryBillLadingCubit, ShipperDeliveryBillLadingState>(
        builder: (context, state) {
          if (state.status.isInitial) {
            cubit.fetchData();
          }

          if (state.status.showLoading) {
            return const LoadingWidget();
          }

          final length = state.data.length;
          final isEmpty = state.data.isEmpty;
          final showLoading = state.status.showLoading;

          return Column(
            children: [
              if (!isEmpty) const ShipperStartLocationItem(),
              Expanded(
                child: LoadMoreWidget(
                  onRefresh: () => cubit.refreshData(),
                  onLoadMore: () => cubit.loadmoreData(),
                  child: isEmpty && !showLoading
                      ? const EmptyWidget(
                          message: "Hiện chưa có đơn hàng nào đang giao",
                        )
                      : ListView.builder(
                          physics: AppConstants.physics,
                          padding: const EdgeInsets.fromLTRB(16, 0, 16, 100),
                          itemBuilder: (context, index) {
                            return ShipperDeliveryBillLadingItem(
                              data: state.data[index],
                              isFirst: index == 0,
                              showVerticalDashLine: index < length - 1,
                            );
                          },
                          itemCount: length,
                        ),
                ),
              ),
            ],
          );
        },
      ),
    );
  }

  void _onListen(ShipperRefreshAfterUpdateOrderStatusEventBus event) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<ShipperDeliveryBillLadingCubit>().refreshData();
    });
  }
}
