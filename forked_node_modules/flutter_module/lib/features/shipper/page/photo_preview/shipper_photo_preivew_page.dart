import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/enum/shipper/delivery_image_type.dart';
import '../../../../common/widgets/buttons.dart';
import '../../../../common/widgets/images.dart';
import 'components/action_component.dart';
import '../../../../models/shipper/document/photo_preview_model.dart';
import '../../cubit/photo_preview/shipper_photo_preview_cubit.dart';
import '../../../../common/colors.dart';
import 'package:card_swiper/card_swiper.dart';

@RoutePage()
class ShipperPhotoPreviewPage extends StatelessWidget implements AutoRouteWrapper {
  const ShipperPhotoPreviewPage({Key? key, required this.photos, required this.selectedPhoto}) : super(key: key);

  final List<PhotoPreviewModel> photos;
  final String selectedPhoto;

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (_) => ShipperPhotoPreviewCubit()..fetchData(photos, selectedPhoto),
      child: this,
    );
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<ShipperPhotoPreviewCubit>();
    return Scaffold(
      backgroundColor: UIColors.lightBlack,
      body: SafeArea(
        child: Column(
          children: [
            BlocBuilder<ShipperPhotoPreviewCubit, ShipperPhotoPreviewState>(
              builder: (context, state) {
                final currentPhoto = state.photos[state.currentIndex];
                return Expanded(
                  child: Column(
                    children: [
                      const SizedBox(
                        height: 10,
                      ),
                      ActionComponent(
                        position: "${state.currentIndex + 1}/${state.photos.length}",
                        label: _getLabel(currentPhoto?.key ?? ""),
                        onNext: cubit.next,
                        onPrevious: cubit.previous,
                        enabledNext: state.enabledNext,
                        enabledPrevious: state.enabledPrevious,
                      ),
                      Expanded(
                        child: Swiper(
                          controller: cubit.swiperController,
                          itemCount: state.photos.length,
                          loop: false,
                          index: state.currentIndex,
                          itemBuilder: (context, index) {
                            final item = state.photos[index];
                            return Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 16),
                              child: AppImage.network(
                                url: item?.url ?? "",
                                width: double.infinity,
                                fit: BoxFit.cover,
                                cached: true,
                                borderRadius: BorderRadius.circular(12),
                              ),
                            );
                          },
                          onIndexChanged: (index) {
                            cubit.changeIndex(index);
                          },
                          scale: 1,
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
            SizedBox(
              height: 150,
              child: Center(
                child: SplashButton(
                  onTap: context.popRoute,
                  child: Container(
                    width: 48,
                    height: 48,
                    alignment: Alignment.center,
                    decoration: const BoxDecoration(
                      shape: BoxShape.circle,
                      color: UIColors.white,
                    ),
                    child: const AppImage.asset(
                      asset: "ic_close",
                      width: 32,
                      height: 32,
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  String _getLabel(String key) {
    if (key == DeliveryImageType.ADDRESS_ORDER_DELIVERY.name) {
      return "Địa chỉ nhà";
    }
    if (key == DeliveryImageType.AVATAR_ORDER_DELIVERY.name) {
      return "Chân dung";
    }
    if (key == DeliveryImageType.EXHIBIT_ORDER_DELIVERY.name) {
      return "Giấy tờ";
    }
    if (key == DeliveryImageType.PRODUCT_ORDER_DELIVERY.name) {
      return "Sản phẩm";
    }
    if (key == DeliveryImageType.INSTALL_ORDER_DELIVERY.name) {
      return "Lắp đặt";
    }
    if (key == DeliveryImageType.OTHER_ORDER_DELIVERY.name) {
      return "Khác";
    }
    return "";
  }
}
