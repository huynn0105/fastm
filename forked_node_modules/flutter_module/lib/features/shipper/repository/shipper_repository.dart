import 'dart:io';

import 'package:flutter_module/models/shipper/order/shipper_detail_order_model.dart';
import 'package:flutter_module/models/shipper/payment_method/payment_method_model.dart';
import 'package:flutter_module/services/api/shipper/payload/shipper_detail_order_payload.dart';
import 'package:flutter_module/services/api/shipper/payload/update_document_payload.dart';

import '../../../models/shipper/bill_lading/shipper_base_bill_lading_model.dart';

import '../../../models/base_model.dart';
import '../../../models/shipper/document/update_document_model.dart';
import '../../../models/shipper/order/payment_status_model.dart';
import '../../../services/api/api_provider.dart';
import '../../../services/api/shipper/payload/update_shipper_order_status_payload.dart';
import '../../../services/api/shipper/payload/warning_payment_payload.dart';

class ShipperRepository {
  Future<BaseModel<ShipperBaseBillLadingModel>> getListBillLading({
    required String step,
    required int skip,
    String keySearch = "",
  }) {
    return ApiProvider.instance.shipper.getListBillLading(
      step: step,
      skip: skip,
      keySearch: keySearch,
    );
  }

  Future<BaseModel<String>> uploadImageFromFile(File? file) => ApiProvider.instance.shipper.uploadImageFromFile(file);

  Future<BaseModel<DeliveryModel>> getDetailDelivery(DeliveryPayload payload) =>
      ApiProvider.instance.shipper.getDetailDelivery(payload);

  Future<BaseModel<bool>> updateDeliveryStatus(UpdateDeliveryStatusPayload payload) =>
      ApiProvider.instance.shipper.updateDeliveryStatus(payload);

  Future<BaseModel<List<UpdateDocumentModel>>> updateDocument(UpdateDocumentPayload payload) =>
      ApiProvider.instance.shipper.updateDocument(payload);

  Future<BaseModel<PaymentStatusModel>> getPaymentStatus(String paymentTransactionId) =>
      ApiProvider.instance.shipper.getPaymentStatus(paymentTransactionId);

  Future<BaseModel<bool>> extendLinkPayment(String orderCode) => ApiProvider.instance.shipper.extendLinkPayment(orderCode);

  Future<BaseModel<List<PaymentMethodModel>>> getPaymentMethods() => ApiProvider.instance.shipper.getPaymentMethods();

  Future<BaseModel<bool>> warningPayment(WarningPaymentPayload payload) => ApiProvider.instance.shipper.warningPayment(payload);
}
