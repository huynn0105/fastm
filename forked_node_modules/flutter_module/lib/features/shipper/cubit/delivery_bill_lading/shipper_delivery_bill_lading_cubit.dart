import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/enum/shipper/bill_lading_status.dart';

import '../../../../common/bloc_status.dart';
import '../../../../models/shipper/bill_lading/shipper_bill_lading_model.dart';
import '../../repository/shipper_repository.dart';

part 'shipper_delivery_bill_lading_state.dart';

class ShipperDeliveryBillLadingCubit extends Cubit<ShipperDeliveryBillLadingState> {
  ShipperDeliveryBillLadingCubit() : super(const ShipperDeliveryBillLadingState());

  final ShipperRepository _repository = ShipperRepository();
  String _keySearch = "";

  fetchData({bool showLoading = true, bool loadmore = false}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getListBillLading(
      step: BillLadingType.shippingOrder.value,
      skip: loadmore ? state.data.length : 0,
      keySearch: _keySearch,
    );

    if (result.status) {
      var data = result.data?.orderList ?? [];
      if (loadmore) {
        data = [...state.data, ...data];
      }
      emit(state.copyWith(
        status: BlocStatus.success,
        data: data,
        count: result.data?.count,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  refreshData() async {
    await fetchData(showLoading: false);
  }

  loadmoreData() async {
    final length = state.data.length;
    await fetchData(showLoading: false, loadmore: true);
    return length != state.data.length;
  }

  updateSearch(String search) {
    _keySearch = search;
    fetchData();
  }
}
