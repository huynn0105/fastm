part of 'shipper_bill_lading_detail_cubit.dart';

class ShipperBillLadingDetailState extends Equatable {
  const ShipperBillLadingDetailState({
    this.status = BlocStatus.initial,
    this.completedStatus = BlocStatus.initial,
    this.reportStatus = BlocStatus.initial,
    this.data,
    this.selectedNextStep = DeliveryStatus.DELIVERIED,
    this.reasonDelayCode,
    this.reasonFailureCode,
    this.selectPaymentMethodIndex,
    this.paymentMethods = const [],
    this.errMsg,
    Map<String, String>? errorFields,
  }) : errorFields = errorFields ?? const {}; //workaround to modify errorFields

  final BlocStatus status;
  final BlocStatus completedStatus;
  final BlocStatus reportStatus;
  final DeliveryModel? data;
  final DeliveryStatus? selectedNextStep;
  final String? reasonDelayCode;
  final String? reasonFailureCode;
  final int? selectPaymentMethodIndex;
  final List<PaymentMethodModel> paymentMethods;
  final String? errMsg;
  final Map<String, String> errorFields;

  @override
  List<Object?> get props => [
        status,
        completedStatus,
        reportStatus,
        data,
        selectedNextStep,
        reasonDelayCode,
        reasonFailureCode,
        selectPaymentMethodIndex,
        paymentMethods,
        errMsg,
        errorFields
      ];

  ShipperBillLadingDetailState copyWith({
    BlocStatus? status,
    BlocStatus? completedStatus,
    BlocStatus? reportStatus,
    DeliveryModel? data,
    DeliveryStatus? selectedNextStep,
    String? reasonDelayCode,
    String? reasonFailureCode,
    bool? forceCleanData,
    int? selectPaymentMethodIndex,
    List<PaymentMethodModel>? paymentMethods,
    String? errMsg,
    Map<String, String>? errorFields,
  }) {
    return ShipperBillLadingDetailState(
      status: status ?? this.status,
      completedStatus: completedStatus ?? BlocStatus.initial,
      reportStatus: reportStatus ?? BlocStatus.initial,
      data: data ?? (forceCleanData == true ? null : this.data),
      selectedNextStep:
          selectedNextStep ?? (forceCleanData == true ? DeliveryStatus.DELIVERIED : this.selectedNextStep),
      reasonDelayCode: reasonDelayCode ?? (forceCleanData == true ? null : this.reasonDelayCode),
      reasonFailureCode: reasonFailureCode ?? (forceCleanData == true ? null : this.reasonFailureCode),
      selectPaymentMethodIndex: selectPaymentMethodIndex ?? this.selectPaymentMethodIndex,
      paymentMethods: paymentMethods ?? this.paymentMethods,
      errMsg: errMsg,
      errorFields: errorFields ?? this.errorFields,
    );
  }
}
