import 'dart:io';

import 'package:ekyc/common/enum/document.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:ekyc/common/widgets/app_layout.dart';
import 'package:ekyc/common/widgets/app_scaffold.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:ekyc/common/widgets/camera_corner_widget.dart';
import 'package:ekyc/common/widgets/camera_overlay/flutter_camera_overlay.dart';
import 'package:ekyc/common/widgets/camera_overlay/model.dart';
import 'package:ekyc/common/widgets/loading.dart';
import 'package:ekyc/features/document/cubit/document_scan/document_scan_cubit.dart';
import 'package:image/image.dart' as img;
import 'package:ekyc/common/bloc_status.dart';
import 'package:ekyc/common/constants.dart';
import 'package:ekyc/common/widgets/app_bar.dart';
import 'package:ekyc/features/document/page/document_scan/document_scan.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_image_compress/flutter_image_compress.dart';
import 'package:path_provider/path_provider.dart';
import 'package:native_image_cropper/native_image_cropper.dart';

typedef OnTakePicture = Function(
  String base64Image,
  String cardId,
  dynamic result,
);

class CustomCameraPage extends StatefulWidget {
  final String title;
  final String subtitle;
  final String description;

  const CustomCameraPage({
    super.key,
    required this.title,
    required this.subtitle,
    required this.description,
  });

  @override
  State<CustomCameraPage> createState() => _OcrState();
}

class _OcrState extends State<CustomCameraPage> {
  // final _imageID = "${AppConstants.imageID}_${LiveData.instance.transId}";
  final _documentCubit = DocumentScanCubit();

  final GlobalKey key = GlobalKey();

  final DocumentScan documentScan = DocumentScan();

  CustomPaint? _customPaint;
  String? base64;
  final OverlayModel _overlayModel = CardOverlay.byFormat(OverlayFormat.cardID1);

  @override
  void initState() {
    super.initState();
    _initData();
    documentScan.initCamera(
      onComplete: () {
        if (!mounted) {
          return;
        }
        setState(() {});
      },
      cardRatio: _overlayModel.ratio,
    );
  }

  @override
  void dispose() {
    _documentCubit.close();
    documentScan.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    const double padding = 16;
    return BlocProvider.value(
      value: _documentCubit,
      child: BlocConsumer<DocumentScanCubit, DocumentScanState>(
        listenWhen: (pre, cur) {
          return pre.status != cur.status;
        },
        listener: (context, state) async {
          await Future.delayed(const Duration(milliseconds: 2500));
          if (state.status.isSuccess) {
            // Navigator.of(context).pop(ResultModel(
            //   base64: state.base64,
            //   idNumber: widget.idNumber,
            //   result: state.result,
            // ));
            // return;
          }
          if (state.status.isFailure) {
            _documentCubit.reset();
            documentScan.reset();
          }
        },
        builder: (context, state) {
          // Warning: Camera border radius not work in iOS safari
          Widget cameraFrame;
          if (kIsWeb) {
            cameraFrame = CameraCornerWidget(
              child: HtmlElementView(
                key: ValueKey(documentScan.getVideoId()),
                viewType: documentScan.getVideoId(),
              ),
            );
          } else {
            if (!documentScan.isCameraInitialized()) {
              cameraFrame = const SizedBox();
            } else {
              cameraFrame = CameraOverlay(
                documentScan.getCameraController()!,
                _overlayModel,
                customPaint: _customPaint,
              );
            }
          }
          return AppLayout(
            child: AppScaffold(
              appBar: CustomAppBar(
                title: widget.title,
                onBackPress: () {
                  Navigator.of(context).pop();
                },
              ),
              body: Stack(
                children: [
                  if (!kIsWeb) cameraFrame,
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: padding),
                    child: Column(
                      children: [
                        if (widget.subtitle.isNotEmpty) ...[
                          Text(
                            widget.subtitle,
                            style: UITextStyle.semiBold.copyWith(
                              fontSize: 24,
                              color: UIColors.orange,
                              height: 1,
                            ),
                          ),
                          const SizedBox(
                            height: 12,
                          ),
                        ],
                        Text(
                          widget.description,
                          style: UITextStyle.regular.copyWith(
                            fontSize: 14,
                            color: UIColors.white.withOpacity(0.6),
                          ),
                          textAlign: TextAlign.center,
                        ),
                        const Spacer(
                          flex: 1,
                        ),
                        // if (kIsWeb)
                        //   Align(
                        //     alignment: Alignment.center,
                        //     key: key,
                        //     child: LayoutBuilder(
                        //       builder: (context, cons) {
                        //         double maxWidth = cons.maxWidth - padding * 2;
                        //         double cameraFrameWidth = maxWidth > AppConstants.docsCameraWidth || maxWidth < 0
                        //             ? AppConstants.docsCameraWidth
                        //             : maxWidth;
                        //         double cameraFrameHeight =
                        //             cameraFrameWidth * AppConstants.docsCameraHeight / AppConstants.docsCameraWidth;
                        //         return SizedBox(
                        //           width: cameraFrameWidth,
                        //           height: cameraFrameHeight,
                        //           child: cameraFrame,
                        //         );
                        //       },
                        //     ),
                        //   ),
                        // if (!kIsWeb)
                        //   Container(
                        //     height: 400,
                        //     decoration: BoxDecoration(border: Border.all()),
                        //     clipBehavior: Clip.hardEdge,
                        //     child: cameraFrame,
                        //   ),
                        const Spacer(
                          flex: 3,
                        ),
                        // HoverBuilder(
                        //   builder: (hover) {
                        //     final color = hover ? UIColors.white.withOpacity(0.6) : UIColors.primaryColor;
                        //     return SplashButton.hover(
                        //       onTap: () {
                        //         BottomSheetProvider.instance.show(
                        //           context,
                        //           title: "Hướng dẫn chụp hình",
                        //           child: DocumentGuideComponent(
                        //             side: widget.side,
                        //           ),
                        //         );
                        //       },
                        //       child: Text(
                        //         "Hướng dẫn chụp hình",
                        //         style: UITextStyle.medium.copyWith(
                        //           fontSize: 16,
                        //           color: color,
                        //         ),
                        //         textAlign: TextAlign.center,
                        //       ),
                        //     );
                        //   },
                        // ),
                        const SizedBox(
                          height: 16,
                        ),
                        PrimaryButton(
                          title: "Chụp",
                          width: double.infinity,
                          radius: 24,
                          enabled: _enable(),
                          onPressed: () {
                            _onTakePicture(context);
                          },
                        ),
                        const SizedBox(
                          height: 20,
                        ),
                        Text(
                          "© Copyright by MFast",
                          style: UITextStyle.medium.copyWith(
                            fontSize: 16,
                            color: UIColors.white.withOpacity(0.6),
                          ),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(
                          height: 24,
                        ),
                      ],
                    ),
                  ),
                  LoadingAnimationWidget(
                    cameraKey: key,
                    type: CaptureType.document,
                    status: state.status,
                    message: state.message,
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  bool _enable() {
    return documentScan.getCameraController() != null || kIsWeb;
  }

  _initData() {
    // LiveData.instance.showLog = widget.showLog;
    // ApiService.instance.init(
    //   jwt: AppConstants.token,
    //   baseUrl: AppConstants.baseUrl,
    // );
    // if (widget.serviceType == ServiceType.blueInfo) {
    //   BlueService.instance.init(
    //     baseUrl: widget.baseUrl,
    //     jwt: widget.token,
    //   );
    // } else if (widget.serviceType == ServiceType.fpt) {
    //   FptService.instance.init(
    //     baseUrl: widget.baseUrl,
    //   );
    // }
  }

  _onTakePicture(BuildContext context) async {
    final xFile = await documentScan.takePicture();
    _documentCubit.showLoading();
    final fileBytes = await xFile.readAsBytes();
    Uint8List croppedBytes;
    if (kIsWeb) {
      croppedBytes = fileBytes;
    } else {
      //rotate image if needed
      final img.Image? capturedImage = img.decodeImage(fileBytes);
      final img.Image orientedImage = img.bakeOrientation(capturedImage!);
      final Uint8List orientedBytes = img.encodeJpg(orientedImage);

      var decodedImage = await decodeImageFromList(orientedBytes);
      int cardWidth = decodedImage.width.ceil();
      int cardHeight = cardWidth ~/ (_overlayModel.ratio ?? 0);
      int outerHeight = decodedImage.height - cardHeight;
      Uint8List originCroppedBytes = await NativeImageCropper.cropRect(
        bytes: orientedBytes,
        x: 0,
        y: outerHeight ~/ 3,
        width: decodedImage.width,
        height: cardHeight.ceil(),
      );
      croppedBytes = await FlutterImageCompress.compressWithList(
        originCroppedBytes,
        minHeight: AppConstants.docsCameraHeight.toInt(),
        minWidth: AppConstants.docsCameraWidth.toInt(),
      );
    }

    ///
    // final image = base64Encode(croppedBytes);

    final dir = await getTemporaryDirectory();
    final file = File('${dir.path}/file_cam_${DateTime.now().microsecondsSinceEpoch}.jpg');
    await file.writeAsBytes(croppedBytes);

    if (context.mounted) {
      Navigator.of(context).pop(file.path);
    }

    // _documentCubit.setImagePath(xFile.path);

    // if (widget.serviceType == ServiceType.blueInfo) {
    //   _documentCubit.scanBlueDocument(
    //     type: widget.type,
    //     side: widget.side,
    //     base64: image,
    //     id: widget.idNumber,
    //   );
    // } else {
    //   _documentCubit.scanFPTDocument(
    //     imageBase64: image,
    //     side: widget.side,
    //   );
    // }
    // if (widget.type == DocumentType.idcard) {
    // if (widget.side == DocumentSide.front) {
    //   final param = IdcardParam.front(
    //     type: widget.type.value,
    //     side: widget.side.value,
    //     base64: image,
    //   );
    //   _documentCubit.scanBlueDocument(param: param);
    // } else {
    //   final param = IdcardParam.back(
    //     type: widget.type.value,
    //     side: widget.side.value,
    //     base64: image,
    //     id: widget.cardId,
    //   );
    //   _documentCubit.scanBlueDocument(param: param);
    // }
    // }
  }

  // Future<void> processImage(InputImage inputImage) async {
  //   if (!_canProcess) return;
  //   if (_isBusy) return;
  //   _isBusy = true;
  //   final barcodes = await _barcodeScanner.processImage(inputImage);
  //   if (inputImage.metadata?.size != null && inputImage.metadata?.rotation != null) {
  //     final painter = BarcodeDetectorPainter(barcodes, inputImage.metadata!.size, inputImage.metadata!.rotation);
  //     _customPaint = CustomPaint(painter: painter);
  //   } else {
  //     String text = 'Barcodes found: ${barcodes.length}\n\n';
  //     for (final barcode in barcodes) {
  //       text += 'Barcode: ${barcode.rawValue}\n\n';
  //     }
  //     // TODO: set _customPaint to draw boundingRect on top of image
  //     _customPaint = null;
  //   }
  //   _isBusy = false;
  //   if (mounted) {
  //     setState(() {});
  //   }
  // }

// void _setImageElement(String imgBase64) async {
//   final int width = _web..videoWidth;
//   final int height = _web..videoHeight;
//
//   final canvas = html.CanvasElement(
//     width: width,
//     height: height,
//   );
//
//   canvas.context2D.drawImageScaled(_web., 0, 0, width, height);
//
//   final imageElement = html.ImageElement();
//   imageElement.id = _imageID;
//   imageElement.width = width;
//   imageElement.height = height;
//
//   imageElement.src = Base64Util.toDataUrl(imgBase64);
//
//   debugPrint(Base64Util.toDataUrl(imgBase64));
//   debugPrint("($width, $height)");
//
//   // ignore: undefined_prefixed_name
//   ui.platformViewRegistry.registerViewFactory(
//     _imageID,
//     (int viewId) => imageElement,
//   );
// }
}
