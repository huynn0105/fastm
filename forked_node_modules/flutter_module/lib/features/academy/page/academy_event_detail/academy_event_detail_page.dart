import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:url_launcher/url_launcher.dart';

import '../../../../app_data.dart';
import '../../../../common/enum/academy/event_detail_status.dart';
import '../../../../common/utils/redirect_util.dart';
import '../../../../routes/routes.gr.dart';
import '../../cubit/academy_otp/academy_register_event_otp_cubit.dart';

import '../../../../common/bloc_status.dart';
import '../../../../common/colors.dart';
import '../../../../common/widgets/app_scaffold.dart';
import '../../../../common/widgets/appbar.dart';
import '../../../../common/widgets/buttons.dart';
import '../../cubit/academy_event_detail/academy_event_detail_cubit.dart';
import 'components/event_content_component.dart';
import 'components/event_info_component.dart';
import 'components/pin_code_component.dart';

@RoutePage()
class AcademyEventDetailPage extends StatefulWidget implements AutoRouteWrapper {
  const AcademyEventDetailPage({
    Key? key,
    @QueryParam('eventID') this.eventID,
  }) : super(key: key);

  final String? eventID;

  @override
  State<AcademyEventDetailPage> createState() => _AcademyEventDetailPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (_) => AcademyEventDetailCubit(eventID: eventID ?? ''),
      child: this,
    );
  }
}

class _AcademyEventDetailPageState extends State<AcademyEventDetailPage> {
  bool needReloadListWhenPop = false;

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<AcademyEventDetailCubit>();
    return WillPopScope(
      onWillPop: () async {
        if (!context.router.canPop()) {
          RedirectUtil.backToMFast();
          return false;
        }
        return true;
      },
      child: AppScaffold(
        appBar: MFastAdvanceAppBar(
          context: context,
          title: "Chi tiết sự kiện",
          onBack: () {
            context.popRoute(needReloadListWhenPop);
          },
          onHome: RedirectUtil.backToMFast,
        ),
        body: BlocBuilder<AcademyEventDetailCubit, AcademyEventDetailState>(
          builder: (context, state) {
            if (state.status.isInitial) {
              cubit.fetchData();
            }

            if (state.status.showLoading) {
              return const LoadingWidget.dark();
            }

            final data = state.event;
            final eventStatus = data?.getCurrentStatus();
            final isEventEnded = data?.isEventEnded() ?? false;
            return Column(
              children: [
                Expanded(
                  child: ListView(
                    children: [
                      EventInfoComponent(
                        data: data,
                        countDownUtil: cubit.countDownUtil,
                        onOnlineJoined: () {
                          if (eventStatus?.isCheckIn ?? false) {
                            GlobalFunction.launchScheme(
                              data?.eventLink ?? "",
                              mode: LaunchMode.externalApplication,
                            );
                          } else {
                            showOTP(
                              context,
                              eventID: widget.eventID ?? 'items',
                              type: EventDetailStatus.checkIn,
                            );
                          }
                        },
                      ),
                      EventContentComponent(
                        data: data,
                      ),
                    ],
                  ),
                ),
                Visibility(
                  visible: (eventStatus?.isNotRegister ?? false) && !isEventEnded,
                  child: SafeArea(
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                      child: PrimaryButton(
                        onPressed: () {
                          showOTP(
                            context,
                            eventID: widget.eventID ?? '',
                            type: EventDetailStatus.register,
                          );
                        },
                        title: "Đăng ký sự kiện",
                        height: 50,
                        width: double.infinity,
                      ),
                    ),
                  ),
                ),
              ],
            );
          },
        ),
      ),
    );
  }

  showOTP(
    BuildContext context, {
    required String eventID,
    required EventDetailStatus type,
  }) {
    final cubit = context.read<AcademyEventDetailCubit>();
    final event = cubit.state.event;
    showModalBottomSheet(
      backgroundColor: Colors.transparent,
      barrierColor: UIColors.defaultText.withOpacity(0.85),
      context: context,
      isScrollControlled: true,
      builder: (builder) {
        return BlocProvider(
          create: (_) => AcademyRegisterEventOTPCubit(),
          child: PinCodeComponent(
            type: type,
            eventID: eventID,
            phoneNumber: AppData.instance.salePhoneNumber ?? "",
          ),
        );
      },
    ).then((values) {
      if (values is Map) {
        context.read<AcademyEventDetailCubit>().fetchData();
        Future.delayed(AppConstants.duration, () {
          needReloadListWhenPop = values['status'] == true;
          if (type.isCheckIn && values['status'] == true) {
            GlobalFunction.launchScheme(
              event?.eventLink ?? "",
              mode: LaunchMode.externalApplication,
            );
          } else {
            context.pushRoute(
              RegisterEventResultRoute(
                status: values['status'] == true ? BlocStatus.success : BlocStatus.failure,
                message: values['message'],
              ),
            );
          }
        });
      }
    });
  }
}
