import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:pin_code_fields/pin_code_fields.dart';

import '../../../../../common/bloc_status.dart';
import '../../../../../../../../common/colors.dart';
import '../../../../../../../../common/constants.dart';
import '../../../../../../../../common/styles.dart';
import '../../../../../../../../common/utils/format_util.dart';
import '../../../../../../../../common/widgets/buttons.dart';
import '../../../../../../../../common/widgets/collect_data_view.dart';
import '../../../../../../../../common/widgets/images.dart';
import '../../../../../../../../common/widgets/loading.dart';
import '../../../../../common/enum/academy/event_detail_status.dart';
import '../../../../mtrade/page/order/pay_later_order_information/children/product_scheme_pay_later_order/components/option_resend_otp_component.dart';
import '../../../cubit/academy_otp/academy_register_event_otp_cubit.dart';

class PinCodeComponent extends StatefulWidget {
  const PinCodeComponent({
    Key? key,
    required this.type,
    required this.eventID,
    required this.phoneNumber,
  }) : super(key: key);

  final EventDetailStatus? type;
  final String eventID;
  final String phoneNumber;

  @override
  State<StatefulWidget> createState() {
    return _PinCodeState();
  }
}

class _PinCodeState extends State<PinCodeComponent> {
  late FocusNode _otpFocusNode;

  @override
  void initState() {
    super.initState();
    _otpFocusNode = FocusNode();
  }

  @override
  void dispose() {
    _otpFocusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<AcademyRegisterEventOTPCubit>();
    return MultiBlocListener(
      listeners: [
        BlocListener<AcademyRegisterEventOTPCubit, AcademyRegisterEventOTPState>(
          listenWhen: (pre, cur) {
            return pre.otpStatus != cur.otpStatus;
          },
          listener: (context, state) {
            if (state.otpStatus.isSuccess) {
              if (defaultTargetPlatform == TargetPlatform.android) {
                _otpFocusNode.requestFocus();
              }
            }
          },
        ),
        BlocListener<AcademyRegisterEventOTPCubit, AcademyRegisterEventOTPState>(
          listener: (context, state) {
            if (state.completeStepStatus.isSuccess) {
              Navigator.of(context).pop({
                "status": true,
                "message":
                    'Chúc mừng bạn đã đăng ký sự kiện thành công. Lưu ý thời gian, phương thức và địa điểm để tham gia đúng giờ nhé!',
              });
            } else if (state.completeStepStatus.isFailure) {
              Navigator.of(context).pop({
                "status": false,
                "message": state.errorFields[AppConstants.otpKey],
              });
            }
          },
        ),
      ],
      child: BlocBuilder<AcademyRegisterEventOTPCubit, AcademyRegisterEventOTPState>(
        builder: (context, state) {
          if (state.status.isInitial) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              cubit.init(phoneNumber: widget.phoneNumber);
            });
          }

          final hasError = state.errorFields[AppConstants.otpKey] != null;
          return Stack(
            alignment: Alignment.bottomCenter,
            children: [
              LayoutBuilder(
                builder: (context, constraints) {
                  return SizedBox(
                    height: 628,
                    width: double.infinity,
                    child: Column(
                      children: [
                        Container(
                          height: 6,
                          width: 92,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(3),
                            color: UIColors.white,
                          ),
                        ),
                        const SizedBox(
                          height: 10,
                        ),
                        Container(
                          height: 612,
                          width:
                              constraints.maxWidth >= AppConstants.responsiveSize ? AppConstants.responsiveSize : null,
                          decoration: const BoxDecoration(
                            color: UIColors.extraLightGray,
                            borderRadius: BorderRadius.only(
                              topLeft: Radius.circular(24),
                              topRight: Radius.circular(24),
                            ),
                          ),
                          child: Column(
                            children: [
                              Container(
                                decoration: const BoxDecoration(
                                  color: UIColors.white,
                                  borderRadius: BorderRadius.only(
                                    topLeft: Radius.circular(24),
                                    topRight: Radius.circular(24),
                                  ),
                                  boxShadow: [
                                    BoxShadow(
                                      offset: Offset(0, 1),
                                      color: UIColors.extraLightGray,
                                      blurRadius: 1,
                                    )
                                  ],
                                ),
                                height: 48,
                                child: Stack(
                                  children: [
                                    Positioned(
                                      top: 12,
                                      left: 0,
                                      right: 0,
                                      bottom: 14,
                                      child: Text(
                                        'Xác thực nhu cầu',
                                        textAlign: TextAlign.center,
                                        style: UITextStyle.medium.copyWith(
                                          fontSize: 16,
                                          color: UIColors.grayText,
                                        ),
                                      ),
                                    ),
                                    Positioned(
                                      top: 12,
                                      right: 12,
                                      child: SplashButton(
                                        onTap: () => Navigator.pop(context),
                                        child: const AppImage.asset(
                                          asset: 'ic_close',
                                          height: 24,
                                          width: 24,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              const Divider(
                                height: 1,
                                color: UIColors.lightGray,
                              ),
                              const SizedBox(
                                height: 24,
                              ),
                              Text.rich(
                                TextSpan(
                                  style: UITextStyle.medium.copyWith(
                                    fontSize: 16,
                                    color: UIColors.grayText,
                                  ),
                                  children: <InlineSpan>[
                                    const TextSpan(
                                      text: 'Nhập mã xác thực ',
                                    ),
                                    const TextSpan(
                                      text: '4 chữ số',
                                    ),
                                    const TextSpan(
                                      text: ' đã được gửi tới\nsố ĐT ',
                                    ),
                                    TextSpan(
                                      text: FormatUtil.phoneFormat(widget.phoneNumber),
                                      style: UITextStyle.semiBold.copyWith(
                                        fontSize: 16,
                                      ),
                                    ),
                                  ],
                                ),
                                textAlign: TextAlign.center,
                              ),
                              const SizedBox(
                                height: 8,
                              ),
                              CollectDataView(
                                errorAlignment: MainAxisAlignment.center,
                                errorMsg: state.errorFields[AppConstants.otpKey],
                                child: Padding(
                                  padding: const EdgeInsets.only(bottom: 8),
                                  child: PinCodeTextField(
                                    appContext: context,
                                    length: 4,
                                    errorTextSpace: 0,
                                    errorTextMargin: EdgeInsets.zero,
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    animationType: AnimationType.fade,
                                    focusNode: _otpFocusNode,
                                    autoDisposeControllers: false,
                                    enablePinAutofill: kIsWeb == false,
                                    pinTheme: PinTheme(
                                      shape: PinCodeFieldShape.box,
                                      borderRadius: BorderRadius.circular(4),
                                      fieldHeight: 40,
                                      fieldWidth: 40,
                                      borderWidth: 1,
                                      fieldOuterPadding: const EdgeInsets.only(left: 6, right: 6),
                                      activeColor: hasError ? UIColors.red : UIColors.border,
                                      selectedColor: hasError ? UIColors.red : UIColors.primaryColor,
                                      inactiveColor: hasError ? UIColors.red : UIColors.border,
                                      disabledColor: UIColors.border,
                                      activeFillColor: hasError ? UIColors.lightRed : UIColors.white,
                                      selectedFillColor: hasError ? UIColors.lightRed : UIColors.lightBlue,
                                      inactiveFillColor: hasError ? UIColors.lightRed : UIColors.white,
                                      errorBorderColor: UIColors.white,
                                    ),
                                    cursorColor: UIColors.defaultText,
                                    errorAnimationDuration: 100,
                                    animationDuration: const Duration(milliseconds: 100),
                                    enableActiveFill: true,
                                    controller: cubit.otpController,
                                    keyboardType: TextInputType.number,
                                    onCompleted: (v) {
                                      if (widget.type?.isRegister == true) {
                                        cubit.register(
                                          eventID: widget.eventID,
                                          phoneNumber: widget.phoneNumber,
                                        );
                                        return;
                                      }
                                      if (widget.type?.isCheckIn == true) {
                                        cubit.checkIn(
                                          eventID: widget.eventID,
                                          phoneNumber: widget.phoneNumber,
                                        );
                                        return;
                                      }
                                      if (widget.type?.isCheckOut == true) {
                                        cubit.checkOut(
                                          eventID: widget.eventID,
                                          phoneNumber: widget.phoneNumber,
                                        );
                                        return;
                                      }
                                    },
                                    onChanged: cubit.otpChange,
                                  ),
                                ),
                              ),
                              const SizedBox(
                                height: 8,
                              ),
                              Text.rich(
                                TextSpan(
                                  style: UITextStyle.medium.copyWith(
                                    fontSize: 16,
                                    color: UIColors.grayText,
                                  ),
                                  children: <InlineSpan>[
                                    const TextSpan(
                                      text: 'Nếu không nhận được mã xác thực,\n',
                                    ),
                                    if (state.countDown > 1)
                                      TextSpan(
                                        text: 'vui lòng bấm gửi lại ',
                                        children: [
                                          TextSpan(
                                            text: 'sau ${state.countDown}s',
                                            style: UITextStyle.semiBold.copyWith(
                                              fontSize: 16,
                                            ),
                                          ),
                                        ],
                                      ),
                                    if (state.countDown == 1)
                                      const TextSpan(
                                        text: 'vui lòng bấm gửi lại qua',
                                      ),
                                  ],
                                ),
                                textAlign: TextAlign.center,
                              ),
                              const SizedBox(
                                height: 8,
                              ),
                              if (state.countDown == 1)
                                OptionResendOTPComponent(
                                  onTapOption: (option) {
                                    cubit.requestOtp(
                                      phoneNumber: widget.phoneNumber,
                                      isRetry: true,
                                      type: option,
                                    );
                                  },
                                ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
              Visibility(
                visible: state.status.isLoading || state.completeStepStatus.isLoading || state.otpStatus.isLoading,
                child: const LoadingWidget.dark(),
              ),
            ],
          );
        },
      ),
    );
  }
}
