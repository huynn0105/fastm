import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/enum/academy/academy_question_type.dart';
import 'package:flutter_module/common/enum/academy/event_detail_status.dart';
import 'package:flutter_module/features/academy/cubit/academy_otp/academy_register_event_otp_cubit.dart';
import 'package:flutter_module/features/academy/page/academy_event_detail/components/widget_size.dart';
import 'package:flutter_module/routes/routes.gr.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/styles.dart';
import '../../../../../common/utils/count_down_util.dart';
import '../../../../../common/widgets/images.dart';
import '../../../../../models/academy/event_detail/academy_event_detail_model.dart';
import 'offline_count_down_component.dart';
import 'online_count_down_component.dart';

class EventInfoComponent extends StatefulWidget {
  const EventInfoComponent({
    Key? key,
    required this.data,
    required this.countDownUtil,
    required this.onOnlineJoined,
  }) : super(key: key);

  final CountDownUtil? countDownUtil;
  final AcademyEventDetailModel? data;
  final Function() onOnlineJoined;

  @override
  State<EventInfoComponent> createState() => _EventInfoComponentState();
}

class _EventInfoComponentState extends State<EventInfoComponent> {
  Size infoSize = Size.zero;

  @override
  Widget build(BuildContext context) {
    final eventStatus = widget.data?.getCurrentStatus();
    final isEventEnded = widget.data?.isEventEnded() ?? false;
    final isOnlineEvent = widget.data?.isOnlineEvent() ?? false;
    final showActionEvent = (eventStatus?.showActionEvent ?? false);
    final AcademyQuestionType? questionType =
        AcademyQuestionType.values.firstWhereOrNull((e) => e.name == widget.data?.questionType);
    final bool isQuestionLink = questionType?.isLink == true;

    return Padding(
      padding: const EdgeInsets.only(bottom: 20),
      child: Stack(
        clipBehavior: Clip.none,
        children: [
          AnimatedContainer(
            duration: const Duration(milliseconds: 100),
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            margin: EdgeInsets.only(bottom: infoSize.height / 2),
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: UIColors.primaryGradient,
                stops: [0, 1],
                begin: Alignment(0.8, -0.6),
                end: Alignment(-0.8, 0.6),
              ),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  widget.data?.eventName ?? "",
                  style: UITextStyle.semiBold.copyWith(
                    fontSize: 18,
                    color: UIColors.lightBlue,
                  ),
                ),
                const SizedBox(
                  height: 5,
                ),
                Row(
                  children: [
                    Expanded(
                      child: Text(
                        widget.data?.eventType ?? "",
                        style: UITextStyle.regular.copyWith(
                          fontSize: 13,
                          color: UIColors.lightBlue.withOpacity(0.7),
                        ),
                      ),
                    ),
                    if (showActionEvent) ...[
                      Text(
                        widget.data?.checkOut == true
                            ? "Đã check out"
                            : widget.data?.checkIn == true
                                ? "Đã check in"
                                : widget.data?.register == true
                                    ? "Đã đăng ký"
                                    : "",
                        style: UITextStyle.regular.copyWith(
                          fontSize: 13,
                          color: UIColors.lightBlue.withOpacity(0.7),
                        ),
                      ),
                      const SizedBox(
                        width: 4,
                      ),
                      const AppImage.asset(
                        asset: "ic_success",
                        width: 14,
                        height: 14,
                        color: UIColors.white,
                      ),
                    ],
                  ],
                ),
                const SizedBox(
                  height: 12,
                ),
                const Divider(
                  height: 0,
                  color: UIColors.lightBlue,
                ),
                const SizedBox(
                  height: 12,
                ),
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    AppImage.asset(
                      asset: "ic_time_outline",
                      width: 24,
                      height: 24,
                      color: UIColors.lightBlue.withOpacity(0.7),
                    ),
                    const SizedBox(
                      width: 4,
                    ),
                    Flexible(
                      child: Text(
                        "${widget.data?.timeLine ?? ""}  | Thời lượng: ${widget.data?.duration ?? ""}",
                        style: UITextStyle.regular.copyWith(
                          fontSize: 14,
                          color: UIColors.lightBlue,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(
                  height: 8,
                ),
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    AppImage.asset(
                      asset: "ic_location_outline",
                      width: 24,
                      height: 24,
                      color: UIColors.lightBlue.withOpacity(0.7),
                    ),
                    const SizedBox(
                      width: 4,
                    ),
                    Flexible(
                      child: Text(
                        widget.data?.location ?? "",
                        style: UITextStyle.regular.copyWith(
                          fontSize: 14,
                          color: UIColors.lightBlue,
                        ),
                      ),
                    ),
                  ],
                ),
                if (!showActionEvent) ...[
                  const SizedBox(
                    height: 8,
                  ),
                  Row(
                    children: [
                      AppImage.asset(
                        asset: "ic_people",
                        width: 24,
                        height: 24,
                        color: UIColors.lightBlue.withOpacity(0.7),
                      ),
                      const SizedBox(
                        width: 4,
                      ),
                      Text(
                        "${widget.data?.participantAmount ?? 0} người",
                        style: UITextStyle.regular.copyWith(
                          fontSize: 14,
                          color: UIColors.lightBlue,
                        ),
                      ),
                      const Spacer(),
                      Text(
                        "Còn ${widget.data?.validAmount ?? 0} chỗ",
                        style: UITextStyle.semiBold.copyWith(
                          fontSize: 14,
                          color: UIColors.lightBlue,
                        ),
                      ),
                    ],
                  ),
                ],
                if (showActionEvent || isEventEnded)
                  SizedBox(
                    height: infoSize.height / 2,
                  ),
              ],
            ),
          ),
          if (showActionEvent || isEventEnded)
            BlocProvider(
              create: (context) => AcademyRegisterEventOTPCubit(),
              child: BlocConsumer<AcademyRegisterEventOTPCubit, AcademyRegisterEventOTPState>(
                listener: (context, state) {
                  if (state.completeStepStatus.isSuccess) {
                    if (isQuestionLink) {
                      context.pushRoute(WebViewRoute(
                        title: "Tổng hợp kiến thức",
                        url: AppData.instance.eventCheckOut?.questionLink,
                      ));
                    } else {
                      context.pushRoute(AcademyQuizRoute(readOnly: true));
                    }
                  }
                },
                builder: (context, state) {
                  return WidgetSize(
                    onChange: (size) {
                      if (size == null) return;
                      setState(() {
                        infoSize = size;
                      });
                    },
                    child: AnimatedPositioned(
                      duration: const Duration(milliseconds: 100),
                      bottom: 0,
                      left: 16,
                      right: 16,
                      child: Opacity(
                        opacity: infoSize.isEmpty ? 0 : 1,
                        child: isOnlineEvent && widget.data != null
                            ? OnlineCountDownComponent(
                                isEventEnded: isEventEnded,
                                countDownUtil: widget.countDownUtil,
                                onOnlineJoined: widget.onOnlineJoined,
                                isCheckOut: widget.data?.checkOut ?? false,
                                isQuestionLink: isQuestionLink,
                                onShowQuiz: () {
                                  _onShowQuiz(context);
                                },
                              )
                            : OfflineCountDownComponent(
                                isEventEnded: isEventEnded,
                                countDownUtil: widget.countDownUtil,
                                onOnlineJoined: widget.onOnlineJoined,
                                isCheckOut: widget.data?.checkOut ?? false,
                                isQuestionLink: isQuestionLink,
                                onShowQuiz: () {
                                  _onShowQuiz(context);
                                },
                              ),
                      ),
                    ),
                  );
                },
              ),
            ),
        ],
      ),
    );
  }

  _onShowQuiz(BuildContext context) {
    final cubit = context.read<AcademyRegisterEventOTPCubit>();
    cubit.checkOut(
      eventID: widget.data?.eventID ?? '',
      phoneNumber: AppData.instance.salePhoneNumber ?? '',
      isRequireOTP: false,
    );
  }
}
