import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/academy/event_detail_status.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/validation_util.dart';
import 'package:flutter_module/common/widgets/app_scaffold.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/widget_layout.dart';
import 'package:flutter_module/features/academy/cubit/academy_event_detail/academy_event_detail_cubit.dart';
import 'package:flutter_module/features/academy/cubit/academy_otp/academy_register_event_otp_cubit.dart';
import 'package:flutter_module/features/academy/page/academy_event_detail/components/pin_code_component.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/widgets/mtrade_text_field.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:url_launcher/url_launcher.dart';

@RoutePage()
class AcademyRegisterEventPage extends StatelessWidget {
  const AcademyRegisterEventPage({
    super.key,
    @QueryParam("eventID") this.eventID,
    @QueryParam("status") this.status,
  });

  final String? eventID;
  final String? status;

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => AcademyEventDetailCubit(eventID: eventID ?? ''),
      child: _AcademyRegisterEventPage(eventID: eventID, status: status,),
    );
  }
}

class _AcademyRegisterEventPage extends StatefulWidget {
  const _AcademyRegisterEventPage({
    @QueryParam("eventID") this.eventID,
    @QueryParam("status") this.status,
  });

  final String? eventID;
  final String? status;

  @override
  State<_AcademyRegisterEventPage> createState() => _AcademyRegisterEventPageState();
}


class _AcademyRegisterEventPageState extends State<_AcademyRegisterEventPage> {
  late final TextEditingController inputController;

  String? phoneNumber;

  String? errorMessage;

  EventDetailStatus? status;

  @override
  void initState() {
    super.initState();
    inputController = TextEditingController();
    status = EventDetailStatus.values.firstWhereOrNull((e) => widget.status == e.name);
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (status == null) {
        DialogProvider.instance.showMTradeErrorDialog(
          context: context,
          title: "Lỗi",
          message: "Không có thông tin sự kiện",
          barrierDismissible: false,
          enableAutoPop: false,
          positiveTitle: "",
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<AcademyEventDetailCubit>();
    return BlocConsumer<AcademyEventDetailCubit, AcademyEventDetailState>(
      listener: (context, state) {
        if (state.hasError ?? false) {
          DialogProvider.instance.showMTradeErrorDialog(
            context: context,
            title: "Lỗi",
            message: state.errorMessage ?? "Không có thông tin sự kiện",
            barrierDismissible: false,
            enableAutoPop: false,
            positiveTitle: "",
          );
        }
      },
      builder: (context, state) {
        if (state.status.isInitial && status != null) {
          cubit.fetchData(status: status?.name);
        }

        return AppScaffold.academy(
          appBar: MFastSimpleAppBar(
            context: context,
            title: status.isRegister
                ? 'Đăng kí sự kiện'
                : status.isCheckIn
                    ? 'Điểm danh sự kiện'
                    : 'Kết thúc sự kiện',
          ),
          body: Stack(
            children: [
              WidgetLayout(
                child: SingleChildScrollView(
                  child: Column(
                    children: [
                      AspectRatio(
                        aspectRatio: 343 / 190,
                        child: AppImage.network(
                          url: state.event?.banner ?? '',
                        ),
                      ),
                      const SizedBox(
                        height: 24,
                      ),
                      Row(
                        children: [
                          const SizedBox(
                            width: 24,
                          ),
                          Expanded(
                            child: Column(
                              children: [
                                Text(
                                  status.isRegister || status.isCheckIn
                                      ? 'Nhập số điện thoại đăng ký tài khoản MFast của bạn để bắt đầu tham gia sự kiện'
                                      : 'Nhập số điện thoại đăng ký tài khoản MFast của bạn để đánh dấu đã tham gia sự kiện',
                                  style: UITextStyle.medium.copyWith(
                                    fontSize: 16,
                                    color: UIColors.lightBlack,
                                  ),
                                  textAlign: TextAlign.center,
                                ),
                                const SizedBox(
                                  height: 12,
                                ),
                                CollectDataView(
                                  errorMsg: errorMessage,
                                  errorAlignment: MainAxisAlignment.center,
                                  child: MTradeSearchTextField(
                                    controller: inputController,
                                    hintText: "Số điện thoại",
                                    showClearButton: inputController.text.isNotEmpty,
                                    onCleared: () {
                                      _onChangeText('');
                                    },
                                    onChanged: _onChangeText,
                                    prefixIcon: const SizedBox(
                                      width: 48,
                                    ),
                                    textAlign: TextAlign.center,
                                    height: 48,
                                    inputFormatter: [
                                      FilteringTextInputFormatter.digitsOnly,
                                      LengthLimitingTextInputFormatter(10),
                                    ],
                                    onSubmitted: (p0) {
                                      if ((errorMessage == null || errorMessage?.isEmpty == true) &&
                                          phoneNumber?.isNotEmpty == true) {
                                        _showOTP(context, eventID: widget.eventID ?? '', type: status!);
                                      }
                                    },
                                    keyboardType: TextInputType.number,
                                  ),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(
                            width: 24,
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
              Visibility(
                visible: state.status.isLoading,
                child: const LoadingWidget.withoutText(),
              )
            ],
          ),
        );
      },
    );
  }

  _onChangeText(String value) {
    setState(() {
      phoneNumber = value;
      errorMessage = value.isEmpty
          ? null
          : value.length != 10
              ? 'Số điện thoại phải bao gồm 10 chữ số'
              : PhoneInputValidation.dirty(
                  value: value,
                ).isNotValid
                  ? "Số điện thoại không đúng định dạng"
                  : null;
    });
  }

  _showOTP(
    BuildContext context, {
    required String eventID,
    required EventDetailStatus type,
  }) {
    final cubit = context.read<AcademyEventDetailCubit>();
    final event = cubit.state.event;
    showModalBottomSheet(
      backgroundColor: Colors.transparent,
      barrierColor: UIColors.defaultText.withOpacity(0.85),
      context: context,
      isScrollControlled: true,
      builder: (builder) {
        return BlocProvider(
          create: (_) => AcademyRegisterEventOTPCubit(),
          child: PinCodeComponent(
            type: type,
            eventID: widget.eventID ?? '',
            phoneNumber: phoneNumber ?? "",
          ),
        );
      },
    ).then((values) {
      if (values is Map) {
        final bool resultStatus = values['status'];

        if (status.isCheckOut && resultStatus) {
          if (AppData.instance.eventCheckOut?.userAnswer == null) {
            context.pushRoute(
              AcademyQuizRoute(event: event, mobilePhone: phoneNumber),
            );
          } else {
            DialogProvider.instance.showMTradeErrorDialog(
              context: context,
              title: "Lỗi điểm danh kết thúc sự kiện",
              message: "Bạn đã điểm danh và trà lời các câu hỏi tổng hợp kiến thức sự kiện",
              positiveTitle: "Đã hiểu vả quay lại",
            );
          }
          return;
        }

        if (status.isCheckIn && resultStatus && (event?.isOnlineEvent() ?? false)) {
          GlobalFunction.launchScheme(
            event?.eventLink ?? "",
            mode: LaunchMode.externalApplication,
          );
          return;
        }

        String title = '';
        if (status.isRegister) {
          if (resultStatus) {
            title = 'Đăng kí thành công';
          } else {
            title = 'Đăng kí thất bại';
          }
        }
        if (status.isCheckIn || status.isCheckOut) {
          if (resultStatus) {
            title = 'Điểm danh thành công';
          } else {
            title = 'Điểm danh thất bại';
          }
        }

        context.pushRoute(
          RegisterEventResultRoute(
            status: values['status'] ? BlocStatus.success : BlocStatus.failure,
            message: values['message'],
            title: title,
          ),
        );
      }
    });
  }
}
