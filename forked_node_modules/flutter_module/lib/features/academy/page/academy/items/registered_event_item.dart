import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/academy/background_gradient.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/datetime_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/academy/page/academy/inheritance/academy_action_provider.dart';
import 'package:flutter_module/models/academy/registered_event/academy_registered_event_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:timelines/timelines.dart';

class RegisteredEventItem extends StatelessWidget {
  const RegisteredEventItem({
    super.key,
    required this.item,
    this.index,
    this.isNewDate,
    this.isLastItem,
  });

  final int? index;
  final AcademyRegisteredEventModel item;
  final bool? isNewDate;
  final bool? isLastItem;

  @override
  Widget build(BuildContext context) {
    final List<Color> gradientColor = AcademyBackgroundGradient.values[(index ?? 0) % 4].value;

    return TimelineTile(
      node: TimelineNode(
        indicator: SizedBox(
          width: 20,
          child: isNewDate!
              ? const DotIndicator(
                  size: 7,
                  color: UIColors.gray,
                )
              : const SizedBox(),
        ),
        startConnector: const DashedLineConnector(
          color: Colors.transparent,
          thickness: 1,
          gap: 5,
          dash: 5,
        ),
        endConnector: const DashedLineConnector(
          color: Colors.transparent,
          thickness: 1,
          gap: 5,
          dash: 5,
        ),
        indicatorPosition: 0.4,
      ),
      nodePosition: 60 / (AppSize.instance.width - 64),
      contents: SplashButton(
        onTap: () {
          context.pushRoute(AcademyEventDetailRoute(eventID: item.eventID ?? '')).then((value) {
            if (value is bool && value == true) {
              AcademyActionProvider.of(context).onRefresh(context);
            }
          });
        },
        child: Container(
          margin: EdgeInsets.only(
              top: index! == 0
                  ? 16
                  : isNewDate!
                      ? 12
                      : 4,
              right: 16,
              left: 6,
              bottom: isLastItem! ? 12 : 4),
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
          width: double.infinity,
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: gradientColor,
              begin: const Alignment(0.92, -0.39),
              end: const Alignment(-0.92, 0.39),
              stops: const [0, 1],
            ),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Opacity(
            opacity: 0.8,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  item.eventName ?? '',
                  style: UITextStyle.regular.copyWith(
                    fontSize: 13,
                    color: UIColors.white,
                  ),
                ),
                const SizedBox(
                  height: 6,
                ),
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      margin: const EdgeInsets.only(top: 2),
                      child: const AppImage.asset(
                        asset: 'ic_time_outline',
                        width: 16,
                        height: 16,
                        color: UIColors.white,
                      ),
                    ),
                    const SizedBox(
                      width: 6,
                    ),
                    Expanded(
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            item.timeLine ?? '',
                            style: UITextStyle.regular.copyWith(
                              fontSize: 13,
                              color: UIColors.white,
                            ),
                          ),
                          if (item.checkout == true || item.checkin == true)
                            Row(
                              children: [
                                const AppImage.asset(
                                  asset: "ic_success",
                                  width: 14,
                                  height: 14,
                                  color: UIColors.lightBlue,
                                ),
                                const SizedBox(
                                  width: 6,
                                ),
                                Text(
                                  item.checkout == true
                                      ? "Đã check out"
                                      : item.checkin == true
                                          ? "Đã check in"
                                          : '',
                                  style: UITextStyle.regular.copyWith(
                                    color: UIColors.lightBlue,
                                  ),
                                )
                              ],
                            )
                        ],
                      ),
                    ),
                  ],
                ),
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      margin: const EdgeInsets.only(top: 2),
                      child: const AppImage.asset(
                        asset: 'ic_location_outline',
                        width: 16,
                        height: 16,
                        color: UIColors.white,
                      ),
                    ),
                    const SizedBox(
                      width: 6,
                    ),
                    Expanded(
                      child: Text(
                        item.location ?? '',
                        style: UITextStyle.regular.copyWith(
                          fontSize: 13,
                          color: UIColors.white,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
      oppositeContents: isNewDate!
          ? Column(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                const SizedBox(
                  height: 16,
                ),
                Text(
                  DateTimeUtil.convertDate(
                    item.eventStart,
                    fromFormat: DateTimeFormat.yyyy_MM_dd_HH_mm_ss,
                    toFormat: DateTimeFormat.EEE,
                    locale: 'vi',
                    isFromUtc: false,
                  ),
                  textAlign: TextAlign.end,
                  style: UITextStyle.regular.copyWith(
                    color: UIColors.grayText,
                  ),
                ),
                Text(
                  DateTimeUtil.convertDate(
                    item.eventStart,
                    fromFormat: DateTimeFormat.yyyy_MM_dd_HH_mm_ss,
                    toFormat: DateTimeFormat.dd_MM,
                    isFromUtc: false,
                  ),
                  textAlign: TextAlign.end,
                  style: UITextStyle.semiBold.copyWith(
                    fontSize: 16,
                    color: UIColors.lightBlack,
                  ),
                ),
              ],
            )
          : null,
    );
  }
}
