import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/academy/academy_filter_event_type.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/keep_alive_widget.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/features/academy/cubit/event/academy_event_cubit.dart';
import 'package:flutter_module/features/academy/cubit/filter_event/academy_filter_event_cubit.dart';
import 'package:flutter_module/features/academy/cubit/filter_event_type/academy_filter_event_type_cubit.dart';
import 'package:flutter_module/features/academy/cubit/registerd_event/academy_registered_event_cubit.dart';
import 'package:flutter_module/features/academy/page/academy/components/empty_event_component.dart';
import 'package:flutter_module/features/academy/page/academy/components/list_event.dart';
import 'package:flutter_module/features/academy/page/academy/components/list_registered_event.dart';
import 'package:flutter_module/features/academy/page/academy/components/week_filter_component.dart';
import 'package:flutter_module/features/academy/page/academy/inheritance/academy_action_provider.dart';
import 'package:flutter_module/features/academy/page/academy/widget/academy_filter_sheet_widget.dart';
import 'package:flutter_module/features/app_cubit.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/features/mtrade/page/order/order_process_state/components/list_selecotor.dart';
import 'package:flutter_module/models/academy/event/academy_filter_event_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';
import 'package:url_launcher/url_launcher_string.dart';

import '../../../../env_data.dart';

@RoutePage()
class AcademyPage extends StatefulWidget implements AutoRouteWrapper {
  const AcademyPage({super.key});

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (context) => AcademyEventCubit(),
        ),
        BlocProvider(
          create: (context) => AcademyFilterEventTypeCubit()..fetchData(),
        ),
        BlocProvider(
          create: (context) => AcademyRegisteredEventCubit('')..updatePayload(type: '', page: 1),
        ),
      ],
      child: this,
    );
  }

  @override
  State<AcademyPage> createState() => _AcademyPageState();
}

class _AcademyPageState extends State<AcademyPage> {
  final RefreshController refreshController = RefreshController();

  @override
  void dispose() {
    refreshController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthCubit, AuthState>(
      listener: (context, state) {
        if (!state.hasLoggedIn) {
          DialogProvider.instance.showMTradeLoginDialog(
            context: context,
            barrierDismissible: false,
            onLogin: () {
              RedirectUtil.backToMFast();
              GlobalFunction.launchScheme(
                "${EnvData.instance.deepLinkBaseUrl}://open?view=LoginModal",
                mode: LaunchMode.externalApplication,
              );
            },
          );
        }
      },
      child: WillPopScope(
        onWillPop: () async {
          if (!context.router.canPop()) {
            RedirectUtil.backToMFast();
            return false;
          }
          return true;
        },
        child: Scaffold(
          appBar: MFastAdvanceAppBar(
            title: 'MFast Academy',
            context: context,
            onBack: context.popRoute,
            onHome: RedirectUtil.backToMFast,
          ),
          body: AcademyActionProvider(
            onRefresh: (context) {
              return _fetchData(context: context);
            },
            child: LoadMoreWidget(
              refreshController: refreshController,
              onLoadMore: () {
                return _loadMore(context: context);
              },
              onRefresh: () {
                return _fetchData(context: context);
              },
              child: ListView(
                padding: const EdgeInsets.only(bottom: 16),
                children: [
                  const SizedBox(
                    height: 16,
                  ),
                  Row(
                    children: [
                      const SizedBox(
                        width: 16,
                      ),
                      Expanded(
                        child: Text(
                          'Danh sách sự kiện đã đăng ký',
                          style: UITextStyle.semiBold.copyWith(color: UIColors.grayText),
                        ),
                      ),
                      SplashButton(
                        onTap: () {
                          context.pushRoute(BottomSheetRegisteredEventRoute());
                        },
                        child: Text(
                          'Mở rộng',
                          style: UITextStyle.semiBold.copyWith(color: UIColors.primaryColor),
                        ),
                      ),
                      const SizedBox(
                        width: 16,
                      ),
                    ],
                  ),
                  const SizedBox(
                    height: 12,
                  ),
                  const KeepAliveWidget(child: ListRegisteredEvent()),
                  const SizedBox(
                    height: 24,
                  ),
                  KeepAliveWidget(
                    child: Container(
                      margin: const EdgeInsets.symmetric(horizontal: 16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Danh sách sự kiện trong tuần',
                            style: UITextStyle.semiBold.copyWith(
                              color: UIColors.grayText,
                            ),
                          ),
                          const SizedBox(
                            height: 8,
                          ),
                          BlocBuilder<AcademyFilterEventTypeCubit, AcademyFilterEventTypeState>(
                            builder: (context, state) {
                              final eventTypeTitle = _getEventTypeTitle(
                                state.eventTypeFilters,
                                state.selectedEventTypes,
                              );
                              final eventGroupTitle = _getEventGroupTitle(
                                state.eventGroupFilters,
                                state.selectedEventGroups,
                              );

                              ///
                              return Column(
                                children: [
                                  WeekFilterComponent(
                                    data: state.weekTimeFilters,
                                    selectedData: state.selectedWeekTimes == null ? [] : [state.selectedWeekTimes!],
                                    onSelected: (item, index) {
                                      _selectWeekTime(context: context, data: item);
                                    },
                                  ),
                                  const SizedBox(
                                    height: 8,
                                  ),
                                  Row(
                                    children: [
                                      Expanded(
                                        child: Visibility(
                                          visible: state.eventTypeFilters.isNotEmpty,
                                          child: AcademySheetFilterWidget(
                                            sheetTitle: 'Lọc theo loại lớp học',
                                            allOptionTitle: 'Tất cả loại lớp học',
                                            title: eventTypeTitle,
                                            data: state.eventTypeFilters,
                                            selectedData: state.selectedEventTypes,
                                            onSelected: (data) {
                                              _selectEventType(context: context, data: data);
                                            },
                                          ),
                                        ),
                                      ),
                                      const SizedBox(
                                        width: 8,
                                      ),
                                      Expanded(
                                        child: Visibility(
                                          visible: state.eventGroupFilters.isNotEmpty,
                                          child: AcademySheetFilterWidget(
                                            sheetTitle: 'Lọc theo nhóm dự án',
                                            allOptionTitle: 'Tất cả nhóm dự án',
                                            title: eventGroupTitle,
                                            data: state.eventGroupFilters,
                                            selectedData: state.selectedEventGroups,
                                            onSelected: (data) {
                                              _selectEventGroup(context: context, data: data);
                                            },
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              );
                            },
                          ),
                          // const SizedBox(
                          //   height: 8,
                          // ),
                          // KeepAliveWidget(
                          //   child: BlocProvider(
                          //     create: (context) => AcademyFilterEventCubit(AcademyFilterEventType.eventType.name),
                          //     child: BlocBuilder<AcademyFilterEventCubit, AcademyFilterEventState>(
                          //       builder: (context, state) {
                          //         if (state.status.isInitial) {
                          //           _fetchDataFilterEventType(context: context);
                          //         }
                          //         return ListSelector(
                          //           keyTitle: 'text',
                          //           data:
                          //               state.filterEvents.map((e) => DataWrapper(id: e.text, value: e.text)).toList(),
                          //           indexSelected: state.indexSelected,
                          //           onTabItem: (_, index) {
                          //             final value = state.filterEvents[index].value![0];
                          //             _updateEventTypePayload(context: context, value: value, index: index);
                          //           },
                          //         );
                          //       },
                          //     ),
                          //   ),
                          // ),
                        ],
                      ),
                    ),
                  ),
                  BlocBuilder<AcademyEventCubit, AcademyEventState>(
                    builder: (context, state) {
                      if (state.status.isInitial) {
                        _fetchData(context: context);
                      }

                      if (state.status.isLoading) {
                        return const LoadingWidget.withoutText();
                      }

                      if (state.events.isEmpty) {
                        return const EmptyEventComponent(title: 'Không có sự kiện!');
                      }

                      return ListEvent(
                        data: state.events,
                      );
                    },
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  _loadMore({
    required BuildContext context,
  }) {
    final cubit = context.read<AcademyEventCubit>();
    return cubit.loadMoreData();
  }

  _fetchData({
    required BuildContext context,
  }) {
    refreshController.resetNoData();
    final cubit = context.read<AcademyEventCubit>();
    final registeredCubit = context.read<AcademyRegisteredEventCubit>();
    registeredCubit.refreshData();
    return cubit.fetchData();
  }

  _selectWeekTime({
    required BuildContext context,
    required AcademyFilterEventModel data,
  }) {
    final eventCubit = context.read<AcademyEventCubit>();
    final filterCubit = context.read<AcademyFilterEventTypeCubit>();

    ///
    filterCubit.selectWeekTime(data);

    ///
    eventCubit.updatePayload(
      weekTime: data.value,
      page: 1,
    );

    ///
    _fetchData(context: context);
  }

  _selectEventType({
    required BuildContext context,
    required List<AcademyFilterEventModel> data,
  }) {
    final eventCubit = context.read<AcademyEventCubit>();
    final filterCubit = context.read<AcademyFilterEventTypeCubit>();

    ///
    filterCubit.selectEventTypes(data);

    ///
    eventCubit.updatePayload(
      eventType: data.map((e) => e.value ?? []).expand((e) => e).toList(),
      page: 1,
    );

    ///
    _fetchData(context: context);
  }

  _selectEventGroup({
    required BuildContext context,
    required List<AcademyFilterEventModel> data,
  }) {
    final eventCubit = context.read<AcademyEventCubit>();
    final filterCubit = context.read<AcademyFilterEventTypeCubit>();

    ///
    filterCubit.selectEventGroups(data);

    ///
    eventCubit.updatePayload(
      eventGroup: data.map((e) => e.value ?? []).expand((e) => e).toList(),
      page: 1,
    );

    ///
    _fetchData(context: context);
  }

  String _getEventTypeTitle(List<AcademyFilterEventModel> data, List<AcademyFilterEventModel> selectedData) {
    if (selectedData.length == data.length) {
      return 'Tất cả loại lớp học';
    }
    if (selectedData.length == 1) {
      return selectedData.getFirst()?.text ?? '';
    }
    return '${selectedData.length} loại lớp học';
  }

  String _getEventGroupTitle(List<AcademyFilterEventModel> data, List<AcademyFilterEventModel> selectedData) {
    if (selectedData.length == data.length) {
      return 'Tất cả nhóm dự án';
    }
    if (selectedData.length == 1) {
      return selectedData.getFirst()?.text ?? '';
    }
    return '${selectedData.length} nhóm dự án';
  }
}
