import 'package:dotted_dashed_line/dotted_dashed_line.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/extension/datetime_extension.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/features/academy/cubit/event/academy_event_cubit.dart';
import 'package:flutter_module/features/academy/cubit/registerd_event/academy_registered_event_cubit.dart';
import 'package:flutter_module/features/academy/page/academy/components/empty_event_component.dart';
import 'package:flutter_module/features/academy/page/academy/inheritance/academy_action_provider.dart';
import 'package:flutter_module/features/academy/page/academy/items/registered_event_item.dart';

class ListRegisteredEvent extends StatelessWidget {
  const ListRegisteredEvent({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      width: double.infinity,
      constraints: const BoxConstraints(maxHeight: 260, minHeight: 0),
      decoration: BoxDecoration(
        color: UIColors.white,
        borderRadius: BorderRadius.circular(12),
      ),
      margin: const EdgeInsets.symmetric(horizontal: 16),
      child: BlocBuilder<AcademyRegisteredEventCubit, AcademyRegisteredEventState>(
        builder: (context, state) {
          if (state.status.isInitial) {
            final cubit = context.read<AcademyRegisteredEventCubit>();
            cubit.fetchData();
          }
          if (state.status.isLoading) {
            return const SizedBox(
              width: double.infinity,
              height: 144,
              child: LoadingWidget.withoutText(),
            );
          }

          if (state.registeredEvents.isEmpty) {
            return const EmptyEventComponent(
              title: "Không có sự kiện đăng ký nào sắp/đang diễn ra",
            );
          }

          return Stack(
            children: [
              Positioned(
                left: 72,
                top: 0,
                bottom: 0,
                child: Visibility(
                  visible: state.registeredEvents.isNotEmpty,
                  child: const DottedDashedLine(
                    height: double.infinity,
                    width: 1,
                    axis: Axis.vertical,
                    dashHeight: 5,
                    dashWidth: 5,
                    dashSpace: 5,
                    dashColor: UIColors.gray,
                  ),
                ),
              ),
              LoadMoreWidget(
                onLoadMore: () {
                  final cubit = context.read<AcademyRegisteredEventCubit>();
                  return cubit.loadMoreData();
                },
                onRefresh: () {
                  return AcademyActionProvider.of(context).onRefresh(context);
                },
                child: ListView.builder(
                  shrinkWrap: true,
                  itemBuilder: (context, index) {
                    final item = state.registeredEvents[index];
                    final isLastItem = index == state.registeredEvents.length - 1;
                    late bool isNewDate;

                    if (index > 0) {
                      final date = DateTime.parse(item.eventStart ?? '').dateOnly();

                      final prevItem = state.registeredEvents[index - 1];
                      final prevDate = DateTime.parse(prevItem.eventStart ?? '').dateOnly();

                      isNewDate = date.difference(prevDate).inDays != 0;
                    } else {
                      isNewDate = true;
                    }

                    return RegisteredEventItem(
                      index: index,
                      item: item,
                      isNewDate: isNewDate,
                      isLastItem: isLastItem,
                    );
                  },
                  itemCount: state.registeredEvents.length,
                ),
              ),
            ],
          );
        },
      ),
    );
  }
}
