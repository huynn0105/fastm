import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/academy/cubit/academy_quiz/academy_quiz_cubit.dart';
import 'package:flutter_module/features/academy/page/quiz/components/contact_support_component.dart';
import 'package:flutter_module/features/academy/page/quiz/components/process_bar_result_component.dart';
import 'package:flutter_module/features/academy/page/quiz/items/quiz_result_item.dart';
import 'package:flutter_module/models/academy/event/academy_event_checkout_model.dart';
import 'package:flutter_module/models/academy/event_detail/academy_event_detail_model.dart';

class ResultQuizPage extends StatefulWidget {
  const ResultQuizPage({
    super.key,
    this.event,
  });

  final AcademyEventDetailModel? event;

  @override
  State<ResultQuizPage> createState() => _ResultQuizPageState();
}

class _ResultQuizPageState extends State<ResultQuizPage> {
  List<int> listIndexWrong = [];
  List<EventQuiz> listQuizWrong = [];

  @override
  initState() {
    super.initState();
    _getIndexQuizWrong();
  }

  @override
  Widget build(BuildContext context) {
    final bool isSuccess = listIndexWrong.isEmpty;

    return BlocBuilder<AcademyQuizCubit, AcademyQuizState>(
      builder: (context, state) {
        return SingleChildScrollView(
          physics: AppConstants.physics,
          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
          child: Column(
            children: [
              Text(
                'Bảng câu hỏi tổng hợp kiến thức sự kiện',
                style: UITextStyle.medium.copyWith(fontSize: 16),
              ),
              Text(
                widget.event?.eventName ?? '',
                style: UITextStyle.medium.copyWith(fontSize: 16, color: UIColors.darkBlue),
              ),
              const SizedBox(
                height: 12,
              ),
              ProcessBarResultComponent(
                maxQuiz: state.listQuiz.length,
                indexesWrong: listIndexWrong,
              ),
              const SizedBox(
                height: 16,
              ),
              AppImage.asset(
                asset: isSuccess ? 'ic_mtrade_mascot_success' : 'ic_mtrade_mascot_cancel',
                width: 120,
                height: 120,
              ),
              const SizedBox(
                height: 16,
              ),
              Text(
                isSuccess
                    ? 'WOW, tất cả câu trả lời đều chính xác'
                    : 'Rất tiếc, bạn đã trả lời sai ${listIndexWrong.length} câu hỏi',
                style: UITextStyle.semiBold
                    .copyWith(fontSize: 16, color: isSuccess ? UIColors.accentGreen : UIColors.red),
              ),
              const SizedBox(
                height: 8,
              ),
              Text(
                'Tham gia nhóm dưới đây để giải đáp mọi thắc mắc của bạn trong quá trình sử dụng MFast nhé!',
                style: UITextStyle.regular.copyWith(color: UIColors.lightBlack),
                textAlign: TextAlign.center,
              ),
              const SizedBox(
                height: 16,
              ),
              const ContactSupportComponent(),
              const SizedBox(
                height: 6,
              ),
              ..._getQuizResult(listQuizWrong),
            ],
          ),
        );
      },
    );
  }

  _getQuizResult(List<EventQuiz> list) {
    final cubit = context.read<AcademyQuizCubit>();

    return list.mapIndexed(
      (index, item) {
        final listSubmitQuizAnswer = cubit.state.listSubmitQuizAnswer;
        final myAnswer = listSubmitQuizAnswer.firstWhereOrNull(
          (element) => element.questionID == item.questionID,
        );

        return QuizResultItem(
          quiz: item,
          index: index,
          myAnswerValue: myAnswer?.answerSelect,
        );
      },
    ).toList();
  }

  _getIndexQuizWrong() {
    final cubit = context.read<AcademyQuizCubit>();
    final listQuiz = cubit.state.listQuiz;
    final listSubmitQuizAnswer = cubit.state.listSubmitQuizAnswer;

    List<int> listIndexWrongNew = [];
    List<EventQuiz> listQuizWrongNew = [];

    for (var i = 0; i < listSubmitQuizAnswer.length; i++) {
      final item = listSubmitQuizAnswer[i];
      if (item.isAnswer == false) {
        listIndexWrongNew.add(i);
        listQuizWrongNew.add(listQuiz[i]);
      }
    }
    setState(() {
      listIndexWrong = listIndexWrongNew;
      listQuizWrong = listQuizWrongNew;
    });
  }
}
