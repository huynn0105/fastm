import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/features/academy/cubit/academy_quiz/academy_quiz_cubit.dart';
import 'package:flutter_module/features/academy/page/quiz/items/quiz_answer_item.dart';
import 'package:flutter_module/models/academy/event/academy_event_checkout_model.dart';
import 'package:flutter_module/services/api/academy/payload/academy_submit_quiz_payload.dart';

class QuizItem extends StatelessWidget {
  const QuizItem({
    super.key,
    required this.quiz,
    this.listSubmitQuizAnswer = const [],
    this.listIdAnswer = const [],
    this.readOnly = false,
    this.userAnswers = const [],
    this.isReview = false,
  });

  final EventQuiz? quiz;
  final List<String> listIdAnswer;
  final List<SubmitQuizAnswer> listSubmitQuizAnswer;
  final bool readOnly;
  final List<SubmitQuizAnswer> userAnswers;
  final bool isReview;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '${quiz?.index}.',
              style: UITextStyle.medium.copyWith(
                fontSize: 16,
                color: UIColors.darkBlue,
              ),
            ),
            const SizedBox(
              width: 8,
            ),
            Expanded(
              child: Text(
                quiz?.question ?? '',
                style: UITextStyle.medium.copyWith(
                  fontSize: 16,
                  color: UIColors.darkBlue,
                ),
              ),
            ),
          ],
        ),
        const SizedBox(
          height: 4,
        ),
        ..._getAnswers(context, quiz?.answer),
      ],
    );
  }

  _getAnswers(BuildContext context, List<EventQuizAnswer>? answers) {
    final cubit = context.read<AcademyQuizCubit>();
    final String answerSelect = listSubmitQuizAnswer.firstWhereOrNull((element) {
          return element.questionID == quiz?.questionID;
        })?.answerSelect ??
        '';

    final userAnswerSelect = userAnswers.firstWhereOrNull((element) {
          return element.questionID == quiz?.questionID;
        })?.answerSelect ??
        "";

    return answers?.mapIndexed((index, item) {
          if (isReview) {
            return QuizAnswerItem(
              answerValue: item.desc,
              isChecked: readOnly ? item.isAnswer : item.desc == answerSelect,
              onTapAnswer: () {
                cubit.selectAnswer(quiz?.index, quiz?.questionID, item.desc, item.isAnswer);
              },
            );
          }
          return QuizAnswerItem(
            answerValue: item.desc,
            isRight: readOnly ? item.isAnswer == true : false,
            isWrong: readOnly ? item.desc == userAnswerSelect && item.isAnswer == false : false,
            isChecked: readOnly ? item.desc == userAnswerSelect : item.desc == answerSelect,
            onTapAnswer: () {
              if (readOnly) return;
              cubit.selectAnswer(quiz?.index, quiz?.questionID, item.desc, item.isAnswer);
            },
          );
        }).toList() ??
        [];
  }
}
