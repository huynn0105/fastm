import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/app_scaffold.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/transformer_page/index_controller.dart';
import 'package:flutter_module/common/widgets/transformer_page/transformer_page_view.dart';
import 'package:flutter_module/common/widgets/widget_layout.dart';
import 'package:flutter_module/features/academy/cubit/academy_quiz/academy_quiz_cubit.dart';
import 'package:flutter_module/features/academy/page/quiz/pages/result_quiz/result_quiz_page.dart';
import 'package:flutter_module/features/academy/page/quiz/pages/solve_quiz/solve_quiz_page.dart';
import 'package:flutter_module/models/academy/event_detail/academy_event_detail_model.dart';

@RoutePage()
class AcademyQuizPage extends StatefulWidget implements AutoRouteWrapper {
  const AcademyQuizPage({
    super.key,
    this.event,
    this.mobilePhone,
    this.readOnly,
  });

  final AcademyEventDetailModel? event;
  final String? mobilePhone;
  final bool? readOnly;

  @override
  State<AcademyQuizPage> createState() => _AcademyQuizPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (context) => AcademyQuizCubit()
        ..updatePayload(
          eventID: TextUtils.parseInt(event?.eventID),
          mobilePhone: mobilePhone,
        ),
      child: this,
    );
  }
}

class _AcademyQuizPageState extends State<AcademyQuizPage> {
  late final TransformerPageController _pageController;
  late final IndexController _pageIndexController;

  @override
  void initState() {
    super.initState();
    final cubit = context.read<AcademyQuizCubit>();
    cubit.initData(AppData.instance.eventCheckOut);
    _pageController = TransformerPageController(itemCount: 2, initialPage: 0);
    _pageIndexController = IndexController();
  }

  @override
  void dispose() {
    _pageIndexController.dispose();
    _pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AppScaffold.academy(
      appBar: MFastSimpleAppBar(
        context: context,
        title: 'Bài kiểm tra',
      ),
      body: WidgetLayout(
        child: Stack(
          children: [
            TransformerPageView.children(
              controller: _pageIndexController,
              pageController: _pageController,
              // transformer: AccordionTransformer(),
              duration: const Duration(milliseconds: 600),
              physics: const NeverScrollableScrollPhysics(),
              children: [
                WidgetLayout(
                  child: SolveQuizPage(
                    event: widget.event,
                    onNext: () {
                      if (widget.readOnly ?? false) return;
                      final cubit = context.read<AcademyQuizCubit>();
                      cubit.submitQuiz();
                    },
                    readOnly: widget.readOnly ?? false,
                  ),
                ),
                WidgetLayout(
                  child: ResultQuizPage(
                    event: widget.event,
                  ),
                ),
              ],
            ),
            BlocConsumer<AcademyQuizCubit, AcademyQuizState>(
              listener: (context, state) {
                if (state.submitStatus.isFailure) {
                  DialogProvider.instance.showMTradeErrorDialog(
                      context: context,
                      title: state.errMsg,
                      message: '',
                      positiveTitle: 'Đã hiểu và quay lại',
                      showDottedDivider: false);
                }
                if (state.submitStatus.isSuccess) {
                  _pageIndexController.move(1);
                }
              },
              builder: (context, state) {
                return BlocBuilder<AcademyQuizCubit, AcademyQuizState>(
                  builder: (context, state) {
                    return Visibility(
                      visible: state.submitStatus.isLoading,
                      child: const WidgetLayout(
                        child: LoadingWidget.dark(),
                      ),
                    );
                  },
                );
              },
            )
          ],
        ),
      ),
    );
  }
}
