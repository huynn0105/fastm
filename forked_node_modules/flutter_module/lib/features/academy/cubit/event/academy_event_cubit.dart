import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/academy/repository/academy_repository.dart';
import 'package:flutter_module/models/academy/event/academy_event_model.dart';
import 'package:flutter_module/services/api/academy/payload/event_payload.dart';

part 'academy_event_state.dart';

class AcademyEventCubit extends Cubit<AcademyEventState> {
  AcademyEventCubit() : super(const AcademyEventState());

  final AcademyRepository _repository = AcademyRepository();
  AcademyEventPayload _payload = AcademyEventPayload();

  fetchData({
    bool showLoading = true,
    bool loadMore = false,
  }) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    updatePayload(page: loadMore ? (_payload.page ?? 1) + 1 : 1);

    final result = await _repository.getListEvent(_payload);

    if (result.status) {
      var data = result.data ?? [];
      if (loadMore) {
        data = [...state.events, ...data];
      }
      emit(state.copyWith(
        status: BlocStatus.success,
        events: data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  loadMoreData() async {
    final length = state.events.length;
    await fetchData(showLoading: false, loadMore: true);
    return length != state.events.length;
  }

  updatePayload({
    List<String>? weekTime,
    List<String>? eventType,
    List<String>? eventGroup,
    int? page,
  }) {
    _payload = _payload.copyWith(
      weekTime: weekTime,
      eventType: eventType,
      eventGroup: eventGroup,
      page: page,
    );
  }
}
