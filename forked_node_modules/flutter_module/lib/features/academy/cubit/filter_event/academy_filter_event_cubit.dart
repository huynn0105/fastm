import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/features/academy/repository/academy_repository.dart';
import 'package:flutter_module/models/academy/event/academy_filter_event_model.dart';
import 'package:flutter_module/services/api/academy/payload/filter_event_payload.dart';

part 'academy_filter_event_state.dart';

class AcademyFilterEventCubit extends Cubit<AcademyFilterEventState> {
  AcademyFilterEventCubit({
    this.type,
  }) : super(const AcademyFilterEventState());

  final String? type;
  final AcademyRepository _repository = AcademyRepository();

  fetchData({
    bool showLoading = true,
  }) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getListFilterEvent(
      AcademyFilterEventPayload(
        type: type,
      ),
    );

    if (result.status) {
      final data = result.data?.getFirst()?.listFilter ?? [];
      final int indexSelected = data.indexWhere((e) => e.isDefault ?? false);

      emit(state.copyWith(
        status: BlocStatus.success,
        filterEvents: data,
        indexSelected: indexSelected >= 0 ? indexSelected : 0,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  updateIndexSelected(int? indexSelected) {
    emit(state.copyWith(
      indexSelected: indexSelected,
    ));
  }
}
