import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/enum/academy/academy_question_type.dart';
import 'package:flutter_module/features/academy/repository/academy_repository.dart';
import 'package:flutter_module/models/academy/event/academy_event_checkout_model.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/services/api/academy/payload/academy_submit_quiz_payload.dart';

part 'academy_quiz_state.dart';

class AcademyQuizCubit extends Cubit<AcademyQuizState> {
  AcademyQuizCubit() : super(const AcademyQuizState());

  final AcademyRepository repository = AcademyRepository();
  AcademySubmitQuizPayload payload = AcademySubmitQuizPayload();

  initData(AcademyEventCheckOutModel? data) {
    if (data != null) {
      final questionType = AcademyQuestionType.values.firstWhereOrNull((e) => e.name == data.questionType);

      emit(state.copyWith(
        listQuiz: data.listQuestion,
        listSupport: data.listSupport,
        userAnswers: data.userAnswer,
        questionType: questionType,
      ));
    }
  }

  selectAnswer(int? index, int? questionID, String? answerSelect, bool? isAnswer) {
    List<SubmitQuizAnswer> listSubmitQuizAnswerNew = [...state.listSubmitQuizAnswer];

    final item = SubmitQuizAnswer(
      index: index,
      questionID: questionID,
      answerSelect: answerSelect,
      isAnswer: isAnswer,
    );

    final indexList = listSubmitQuizAnswerNew.indexWhere((element) => element.questionID == questionID);

    if (indexList == -1) {
      listSubmitQuizAnswerNew.add(item);
    } else {
      listSubmitQuizAnswerNew[indexList] = item;
    }

    updatePayload(
      answer: listSubmitQuizAnswerNew,
    );
    emit(state.copyWith(
      listSubmitQuizAnswer: listSubmitQuizAnswerNew,
    ));
  }

  updatePayload({
    int? index,
    int? eventID,
    String? mobilePhone,
    List<SubmitQuizAnswer>? answer,
  }) {
    payload = payload.copyWith(
      index: index,
      eventID: eventID,
      mobilePhone: mobilePhone,
      answer: answer,
    );
  }

  submitQuiz() async {
    emit(state.copyWith(
      submitStatus: BlocStatus.loading,
    ));
    BaseModel<bool> result = await repository.submitQuiz(payload: payload);
    if (result.status) {
      emit(state.copyWith(
        submitStatus: BlocStatus.success,
      ));
    } else {
      emit(state.copyWith(
        submitStatus: BlocStatus.failure,
        errMsg: result.errorMessage,
      ));
    }
  }
}
