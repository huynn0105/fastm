import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/enum/academy/academy_filter_event_type.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/features/academy/repository/academy_repository.dart';
import 'package:flutter_module/models/academy/event/academy_filter_event_model.dart';
import 'package:flutter_module/models/academy/event/academy_filter_event_type_model.dart';
import 'package:flutter_module/services/api/academy/payload/filter_event_payload.dart';

part 'academy_filter_event_type_state.dart';

class AcademyFilterEventTypeCubit extends Cubit<AcademyFilterEventTypeState> {
  AcademyFilterEventTypeCubit() : super(const AcademyFilterEventTypeState());

  final AcademyRepository _repository = AcademyRepository();

  fetchData({
    bool showLoading = true,
  }) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getListFilterEvent(AcademyFilterEventPayload());

    if (result.status) {
      final data = result.data ?? [];

      final weekTimeData = data.firstWhereOrNull((e) => e.keyword == AcademyFilterEventType.weekTime.name);
      final eventTypeData = data.firstWhereOrNull((e) => e.keyword == AcademyFilterEventType.eventType.name);
      final eventGroupData = data.firstWhereOrNull((e) => e.keyword == AcademyFilterEventType.eventGroup.name);

      final selectedWeekTimes = weekTimeData?.listFilter?.where((e) => e.isDefault == true).toList();
      final selectedEventtypes = [...?(eventTypeData?.listFilter)];
      final selectedEventGroups = [...?(eventGroupData?.listFilter)];

      ///
      emit(state.copyWith(
        status: BlocStatus.success,
        weekTimeData: weekTimeData,
        eventTypeData: eventTypeData,
        eventGroupData: eventGroupData,
        weekTimeFilters: weekTimeData?.listFilter,
        eventTypeFilters: eventTypeData?.listFilter,
        eventGroupFilters: eventGroupData?.listFilter,
        selectedWeekTimes: selectedWeekTimes.getFirst(),
        selectedEventTypes: selectedEventtypes,
        selectedEventGroups: selectedEventGroups,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  // _onSelected({
  //   required int index,
  //   required List<int> data,
  //   required bool isMultiSelect,
  //   required Function(List<int>) onUpdated,
  // }) {
  //   List<int> local = [...data];
  //   if (local.contains(index)) {
  //     local.removeWhere((e) => e == index);
  //   } else if (isMultiSelect) {
  //     local = [...data, index];
  //   } else {
  //     local = [index];
  //   }
  //   onUpdated(local);
  // }

  selectWeekTime(AcademyFilterEventModel value) {
    emit(state.copyWith(
      selectedWeekTimes: value,
    ));
  }

  selectEventTypes(List<AcademyFilterEventModel> value) {
    emit(state.copyWith(
      selectedEventTypes: value,
    ));
  }

  selectEventGroups(List<AcademyFilterEventModel> value) {
    emit(state.copyWith(
      selectedEventGroups: value,
    ));
  }
}
