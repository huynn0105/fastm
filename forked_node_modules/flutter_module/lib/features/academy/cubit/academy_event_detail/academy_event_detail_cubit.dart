import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/utils/datetime_util.dart';
import '../../../../common/bloc_status.dart';
import '../../../../common/enum/academy/event_detail_status.dart';
import '../../../../common/utils/count_down_util.dart';
import '../../repository/academy_repository.dart';
import '../../../../models/academy/event_detail/academy_event_detail_model.dart';
import '../../../../services/api/academy/payload/academy_event_detail_payload.dart';

part 'academy_event_detail_state.dart';

class AcademyEventDetailCubit extends Cubit<AcademyEventDetailState> {
  AcademyEventDetailCubit({
    required this.eventID,
  }) : super(const AcademyEventDetailState());
  final String eventID;

  final AcademyRepository _repository = AcademyRepository();
  CountDownUtil? countDownUtil;

  fetchData({
    bool showLoading = true,
    final String? status,
  }) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getEventDetail(
      payload: AcademyEventDetailPayload(
        eventID: eventID,
        status: status,
      ),
    );

    if (result.status) {
      final data = result.data;
      final seconds = DateTimeUtil.convertStringRemainSeconds(data?.eventStart ?? "", isFromUtc: false);
      final eventStatus = data?.getCurrentStatus();
      _startCountDown(seconds);
      emit(state.copyWith(
        status: BlocStatus.success,
        event: result.data,
        eventStatus: eventStatus,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
        hasError: true,
        errorMessage: result.errorMessage,
      ));
    }
  }

  _startCountDown(int seconds) {
    if (countDownUtil != null) {
      _cancelCountDown();
    }
    countDownUtil = CountDownUtil(seconds: seconds)..start();
  }

  _cancelCountDown() {
    countDownUtil?.cancel();
    countDownUtil = null;
  }

  @override
  Future<void> close() {
    _cancelCountDown();
    return super.close();
  }
}
