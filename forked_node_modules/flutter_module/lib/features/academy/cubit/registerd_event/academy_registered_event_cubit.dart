import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/academy/repository/academy_repository.dart';
import 'package:flutter_module/models/academy/registered_event/academy_registered_event_model.dart';
import 'package:flutter_module/services/api/academy/payload/registered_event_payload.dart';

part 'academy_registered_event_state.dart';

class AcademyRegisteredEventCubit extends Cubit<AcademyRegisteredEventState> {
  AcademyRegisteredEventCubit(this.type) : super(const AcademyRegisteredEventState());

  String type;

  final AcademyRepository _repository = AcademyRepository();
  RegisteredEventPayload _payload = RegisteredEventPayload();

  fetchData({bool showLoading = true, bool loadMore = false}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    updatePayload(page: loadMore ? (_payload.page ?? 1) + 1 : 1);

    final result = await _repository.getListRegisteredEvent(_payload);

    if (result.status) {
      var data = result.data ?? [];
      if (loadMore) {
        data = [...state.registeredEvents, ...data];
      }

      emit(state.copyWith(
        status: BlocStatus.success,
        registeredEvents: data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  Future refreshData() async {
    await fetchData(showLoading: false);
  }

  loadMoreData() async {
    final length = state.registeredEvents.length;
    await fetchData(showLoading: false, loadMore: true);
    return length != state.registeredEvents.length;
  }

  updatePayload({String? type, int? page}) {
    _payload = _payload.copyWith(
      type: type,
      page: page,
    );
  }
}
