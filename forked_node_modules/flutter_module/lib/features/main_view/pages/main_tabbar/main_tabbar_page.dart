import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/enum/mfast/main_tab_bar_page_type.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/general_config.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/services/local/local_data_helper.dart';
import 'widgets/convex_notched_bottom_bar.dart';

@RoutePage()
class MainTabbarPage extends StatefulWidget implements AutoRouteWrapper {
  const MainTabbarPage({super.key});

  @override
  Widget wrappedRoute(BuildContext context) {
    return this;
  }

  @override
  State<MainTabbarPage> createState() => _MainTabbarPageState();
}

class _MainTabbarPageState extends State<MainTabbarPage> {
  TabsRouter? tabsRouter;
  late final StreamSubscription mainTabBarSub;

  @override
  void initState() {
    super.initState();
    mainTabBarSub = eventBus.on<ChangeMainTabBarPageEventBus>().listen(_onMainTabBarListen);
  }

  @override
  void dispose() {
    tabsRouter = null;
    mainTabBarSub.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<AuthCubit, AuthState>(
          listenWhen: (pre, cur) => pre.hasLoggedIn != cur.hasLoggedIn,
          listener: (context, state) {
            if (!state.hasLoggedIn) {
              eventBus.fire(const ChangeMainTabBarPageEventBus(MainTabBarPageType.home));
            } else {
              if (LocalDataHelper.instance.getIsUserGuideHome()) {
                if (tabsRouter != null) {
                  tabsRouter!.setActiveIndex(MainTabBarPageType.home.index);
                }
              }
            }
          },
        ),
      ],
      child: AutoTabsScaffold(
        lazyLoad: false,
        resizeToAvoidBottomInset: false,
        backgroundColor: UIColors.white,
        routes: [
          const HomeRoute(),
          const ClientRoute(),
          LegendaryRoute(),
          const PersonalSettingRoute(),
        ],
        bottomNavigationBuilder: (context, tabsRouter) {
          this.tabsRouter ??= tabsRouter;
          return ConvexNotchedBottomBar(
            tabsRouter: tabsRouter,
          );
        },
      ),
    );
  }

  void _onMainTabBarListen(ChangeMainTabBarPageEventBus event) {
    if (tabsRouter != null) {
      tabsRouter!.setActiveIndex(event.page.index);
    }
  }
}
