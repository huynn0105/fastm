import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/utils/vietnamese_util.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/main_view/pages/main_tabbar/items/requirement_item.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/widgets/mtrade_text_field.dart';
import 'package:flutter_module/models/customer_requirements/customer_requirement_data_model.dart';
import 'package:flutter_module/models/customer_requirements/customer_requirement_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/constants.dart';
import '../../../../../common/styles.dart';
import '../../../../../common/widgets/buttons.dart';
import '../../../../../common/widgets/images.dart';
import '../../../cubit/customer_requirements/customer_requirements_cubit.dart';

class RequirementDataComponent extends StatefulWidget {
  const RequirementDataComponent({
    Key? key,
    required this.requirement,
    required this.onTap,
    required this.onBack,
  }) : super(key: key);

  final CustomerRequirementModel requirement;
  final Function(CustomerRequirementDataModel) onTap;
  final Function() onBack;

  @override
  State<RequirementDataComponent> createState() => _RequirementDataComponentState();
}

class _RequirementDataComponentState extends State<RequirementDataComponent> {
  late final TextEditingController searchController;

  late final String title;
  late final List<CustomerRequirementDataModel> data;

  List<CustomerRequirementDataModel> searchedData = const [];

  @override
  void initState() {
    super.initState();
    searchController = TextEditingController();
    title = widget.requirement.requirementTitle ?? '';
    searchedData = data = widget.requirement.data ?? [];
  }

  @override
  void dispose() {
    searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Row(
          children: [
            SplashButton(
              onTap: widget.onBack,
              child: Container(
                width: 50,
                height: 50,
                color: UIColors.white,
                alignment: Alignment.center,
                child: const AppImage.asset(
                  asset: 'ic_arrow_left',
                  width: 24,
                  height: 24,
                ),
              ),
            ),
            Expanded(
              child: Container(
                height: 50,
                width: double.infinity,
                color: UIColors.white,
                alignment: Alignment.center,
                child: Text(
                  title,
                  style: UITextStyle.medium.copyWith(
                    fontSize: 16,
                    color: UIColors.grayText,
                  ),
                ),
              ),
            ),
            Container(
              width: 50,
              height: 50,
              color: UIColors.white,
            ),
          ],
        ),
        ValueListenableBuilder(
          valueListenable: searchController,
          builder: (context, child, value) {
            final text = searchController.text;
            if (searchedData.isEmpty) {
              return SizedBox(
                height: 192,
                child: Column(
                  children: [
                    const SizedBox(
                      height: 16,
                    ),
                    const AppImage.asset(
                      asset: 'ic_ignore_outline',
                      width: 24,
                      height: 24,
                    ),
                    const SizedBox(
                      height: 12,
                    ),
                    Text(
                      'Không tìm thấy sản phẩm',
                      style: UITextStyle.regular.copyWith(
                        fontSize: 14,
                        color: UIColors.grayText,
                      ),
                    ),
                  ],
                ),
              );
            }
            return SizedBox(
              height: 192,
              child: ListView.separated(
                shrinkWrap: true,
                padding: EdgeInsets.zero,
                physics: const ClampingScrollPhysics(),
                itemCount: text.isNotEmpty ? searchedData.length : searchedData.take(4).length,
                itemBuilder: (context, index) {
                  final item = searchedData[index];
                  return RequirementsItem(
                    icon: item.iconURL ?? '',
                    title: item.projectDescription ?? '',
                    onTap: () => widget.onTap(item),
                  );
                },
                separatorBuilder: (_, __) => const Divider(
                  height: 0,
                  indent: 56,
                  endIndent: 16,
                  color: UIColors.white,
                ),
              ),
            );
          },
        ),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          child: ValueListenableBuilder(
            valueListenable: searchController,
            builder: (context, child, value) {
              final text = searchController.text;
              return MTradeSearchTextField(
                controller: searchController,
                hintText: 'Tìm sản phẩm khác',
                showClearButton: text.isNotEmpty,
                onChanged: onChanged,
                onCleared: () => onChanged(''),
              );
            },
          ),
        ),
      ],
    );
  }

  onChanged(String value) {
    if (value.isNotEmpty) {
      setState(() {
        searchedData = data.where((e) {
          String query = VietnameseUtils.toEnglish(value).toLowerCase();
          String projectName = VietnameseUtils.toEnglish(e.projectName).toLowerCase();
          String projectDescription = VietnameseUtils.toEnglish(e.projectDescription).toLowerCase();
          return projectName.contains(query) || projectDescription.contains(query);
        }).toList();
      });
    } else {
      setState(() {
        searchedData = data;
      });
    }
  }
}
