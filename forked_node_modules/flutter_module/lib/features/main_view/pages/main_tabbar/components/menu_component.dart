import 'package:auto_route/auto_route.dart';
import 'package:convex_bottom_bar/convex_bottom_bar.dart';
import 'package:ekyc/common/utils/text_util.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/deeplink_path.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/utils/deeplink_util.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/features/main_view/cubit/customer_requirements/customer_requirements_cubit.dart';
import 'package:flutter_module/features/main_view/pages/main_tabbar/components/requirement_data_component.dart';
import 'package:flutter_module/models/client/client_detail/client_detail_model.dart';
import 'package:flutter_module/models/customer_requirements/customer_requirement_data_model.dart';
import 'package:flutter_module/models/customer_requirements/customer_requirement_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';

import '../items/primary_tab_button.dart';
import 'dart:math' as math;

import 'requirement_component.dart';

class MenuComponent extends StatefulWidget {
  const MenuComponent({
    Key? key,
    this.onTap,
    this.client,
  }) : super(key: key);

  final VoidCallback? onTap;
  final ClientDetailModel? client;

  @override
  State<MenuComponent> createState() => _MenuComponentState();
}

class _MenuComponentState extends State<MenuComponent> {
  double angle = 0.0;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      setState(() {
        angle = math.pi / 4;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: true,
      backgroundColor: UIColors.blurBackground.withOpacity(0.01),
      body: Stack(
        children: [
          Positioned.fill(
            child: GestureDetector(
              behavior: HitTestBehavior.opaque,
              onTap: () => _onPop(context),
              child: const SizedBox(),
            ),
          ),
          Positioned.fill(
            child: SafeArea(
              child: Column(
                verticalDirection: VerticalDirection.up,
                children: [
                  GestureDetector(
                    behavior: HitTestBehavior.opaque,
                    onTap: () => _onPop(context),
                    child: Container(
                      transform: Matrix4.translationValues(0, 2, 0),
                      child: ConvexButton(
                        top: 23,
                        size: 65,
                        sigma: 0,
                        thickness: 0,
                        backgroundColor: UIColors.white,
                        child: Container(
                          transform: Matrix4.translationValues(0, 5, 0),
                          child: const AppImage.asset(
                            asset: "ic_arrow_down",
                            width: 24,
                            height: 24,
                          ),
                        ),
                      ),
                    ),
                  ),
                  Container(
                    clipBehavior: Clip.hardEdge,
                    width: double.infinity,
                    constraints: const BoxConstraints(
                      minHeight: 240,
                    ),
                    decoration: const BoxDecoration(
                      color: UIColors.background,
                      borderRadius: BorderRadius.only(
                        topLeft: Radius.circular(16),
                        topRight: Radius.circular(16),
                      ),
                    ),
                    child: BlocBuilder<CustomerRequirementsCubit, CustomerRequirementsState>(
                      builder: (context, state) {
                        return AnimatedSwitcher(
                          duration: const Duration(milliseconds: 300),
                          child: state.status.isLoading
                              ? Container(
                                  height: 240 + 50,
                                  color: UIColors.background,
                                  child: Column(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      Container(
                                        height: 50,
                                        width: double.infinity,
                                        color: UIColors.white,
                                      ),
                                      const SizedBox(
                                        height: 240,
                                        child: LoadingWidget.dark(),
                                      ),
                                    ],
                                  ))
                              : state.selectedRequirement != null
                                  ? RequirementDataComponent(
                                      requirement: state.selectedRequirement!,
                                      onTap: (data) => _onRequirementDataTap(context, data),
                                      onBack: () => _onBack(context),
                                    )
                                  : RequirementComponent(
                                      data: state.requirements,
                                      onTap: (data) => _onRequirementTap(context, data),
                                    ),
                        );
                      },
                    ),
                  ),
                ].reversed.toList(),
              ),
            ),
          ),
        ],
      ),
      bottomNavigationBar: Container(
        width: AppSize.instance.width,
        height: AppSize.instance.bottomBarHeight + 35,
        alignment: Alignment.topCenter,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: const [
              UIColors.white,
              UIColors.background,
            ],
            stops: [
              AppSize.instance.bottomBarHeight / (AppSize.instance.bottomBarHeight + 35),
              35 / (AppSize.instance.bottomBarHeight + 35),
            ],
            begin: Alignment.bottomCenter,
            end: Alignment.topCenter,
          ),
        ),
        child: Hero(
          tag: "primary-tab-button",
          flightShuttleBuilder: (
            BuildContext flightContext,
            Animation<double> animation,
            HeroFlightDirection flightDirection,
            BuildContext fromHeroContext,
            BuildContext toHeroContext,
          ) {
            final Widget toHero = toHeroContext.widget;
            return RotationTransition(
              turns: animation.drive(
                Tween(begin: 0, end: 0.125),
              ),
              child: toHero,
            );
          },
          child: Transform.rotate(
            angle: angle,
            child: PrimaryTabButton(
              onTap: () => _onPop(context),
            ),
          ),
        ),
      ),
    );
  }

  _onPop(BuildContext context) {
    Navigator.of(context).pop();
    widget.onTap?.call();
  }

  // _onOpenDeepLink(BuildContext context, String title, String url) {
  //   Navigator.of(context).pop();
  //   Future.delayed(const Duration(milliseconds: 250), () {
  //     if (url.startsWith(DeepLinkConstants.DEEP_LINK_BASE_URL)) {
  //       DeepLinkUtil.open(url);
  //     } else {
  //       context.router.push(
  //         WebViewRoute(
  //           title: title,
  //           url: url,
  //         ),
  //       );
  //     }
  //   });
  // }

  _onRequirementTap(BuildContext context, CustomerRequirementModel requirement) {
    final children = requirement.data;
    if (children != null) {
      final cubit = context.read<CustomerRequirementsCubit>();
      cubit.selectRequirement(requirement);
      return;
    }

    ///
    var hasLoggedIn = context.read<AuthCubit>().state.hasLoggedIn;
    var id = requirement.requirementID ?? '';
    var title = requirement.requirementTitle ?? '';
    var url = requirement.requirementURL ?? '';

    String mtradeRequirementID = '2';

    ///
    Navigator.of(context).pop();
    Future.delayed(
      const Duration(milliseconds: 250),
      () {
        if (url.startsWith(DeepLinkConstants.DEEP_LINK_BASE_URL)) {
          if (hasLoggedIn) {
            DeepLinkUtil.open(url);
          } else {
            context.router.push(
              LoginRoute(
                onSuccess: () {
                  DeepLinkUtil.open(url);
                },
              ),
            );
          }
        } else {
          context.router.push(
            WebViewRoute(
              title: title,
              url: url,
            ),
          );
        }
      },
    );
    return;
  }

  _onRequirementDataTap(BuildContext context, CustomerRequirementDataModel requirementData) {
    if (TextUtils.isNotEmpty(requirementData.linkShare)) {
      GlobalFunction.shareText(
        'Xin chào, vui lòng vào liên kết sau để tải và cài đặt ${requirementData.projectName ?? ''} ${requirementData.linkShare ?? ''}',
      );
      return;
    }

    ///
    var title = requirementData.projectDescription ?? '';
    var url = requirementData.webviewURL ?? requirementData.linkWebView ?? '';

    ///
    if (url.isEmpty) {
      return;
    }
    Navigator.of(context).pop();
    Future.delayed(
      const Duration(milliseconds: 250),
      () {
        if (url.startsWith(DeepLinkConstants.DEEP_LINK_BASE_URL)) {
          DeepLinkUtil.open(url);
        } else {
          if (widget.client != null) {
            var client = {
              'fullName': widget.client?.fullName,
              'idNumber': widget.client?.idNumber,
              'mobilePhone': widget.client?.mobilePhone,
              'districtID': widget.client?.district,
              'pcli_id': widget.client?.userID,
              'accept_term': '1',
            };
            var uri = Uri.parse(url);
            url = uri.replace(
              queryParameters: {
                ...uri.queryParameters,
                ...client,
              },
            ).toString();
          }
          context.router.push(
            WebViewRoute(
              title: title,
              url: url,
            ),
          );
        }
      },
    );
  }

  _onBack(BuildContext context) {
    final cubit = context.read<CustomerRequirementsCubit>();
    cubit.clearSelectedRequirement();
  }
}
