import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/models/customer_requirements/customer_requirement_model.dart';

import '../../repository/main_view_repository.dart';

part 'customer_requirements_state.dart';

class CustomerRequirementsCubit extends Cubit<CustomerRequirementsState> {
  CustomerRequirementsCubit() : super(const CustomerRequirementsState());

  final _repository = MainViewRepository();

  Future fetchData({bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getCustomerRequirements();
    await Future.delayed(const Duration(seconds: 3));

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        requirements: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  selectRequirement(CustomerRequirementModel requirement) {
    emit(state.copyWith(
      selectedRequirement: requirement,
    ));
  }

  clearSelectedRequirement() {
    emit(state.copyWith(
      clearSelectedRequirement: true,
    ));
  }
}
