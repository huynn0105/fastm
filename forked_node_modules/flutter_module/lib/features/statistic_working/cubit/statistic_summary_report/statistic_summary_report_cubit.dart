import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/models/base_model.dart';

import '../../../../common/bloc_status.dart';
import '../../../../common/utils/debounce_util.dart';
import '../../../../models/statistic_working/statistic_report_model.dart';
import '../../../../services/api/statistic_working/payload/get_statistic_summary_report_payload.dart';
import '../../repository/statistic_working_repository.dart';

part 'statistic_summary_report_state.dart';

class StatisticSummaryReportCubit extends Cubit<StatisticSummaryReportState> {
  StatisticSummaryReportCubit() : super(const StatisticSummaryReportState());

  final StatisticWorkingRepository _repository = StatisticWorkingRepository();
  final DebounceUtil _debounce = DebounceUtil(milliseconds: 250);
  GetStatisticSummaryReportPayload _payload = GetStatisticSummaryReportPayload();

  Future fetchData() async {
    emit(state.copyWith(status: BlocStatus.loading));
    BaseModel<StatisticReportModel> results = await _repository.getStatisticSummaryReport(_payload);
    emit(state.copyWith(
      status: BlocStatus.success,
      data: results.data,
    ));
  }

  onDateChanged(String date) {
    _debounce.run(() {
      updatePayload(date: date);
      fetchData();
    });
  }

  updatePayload({
    String? userID,
    String? date,
  }) {
    _payload = _payload.copyWith(
      userID: userID,
      date: date,
    );
  }

  @override
  Future<void> close() {
    _debounce.cancel();
    return super.close();
  }
}
