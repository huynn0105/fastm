import 'package:auto_route/auto_route.dart';
import 'package:bloc/bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/enum/statistic_working/statistic_working_level.dart';
import 'package:flutter_module/common/enum/statistic_working/statistic_working_type.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/models/statistic_working/sale_info_model.dart';
import 'package:flutter_module/routes/routes.dart';
import 'package:flutter_module/routes/routes.gr.dart';

part 'statistic_path_state.dart';

class StatisticPathCubit extends Cubit<StatisticPathState> {
  StatisticPathCubit() : super(const StatisticPathState());

  final AppRouter _router = getItInstance.get<AppRouter>();

  push(SaleInfoModel sale) {
    var data = [...state.data];
    var index = data.indexWhere((e) => e.userID == sale.userID);

    if (index >= 0) {
      data[index] = sale;
    } else {
      data.add(sale);
    }

    emit(state.copyWith(
      data: data,
    ));
  }

  pop(String? userID) {
    var data = [...state.data];
    var index = data.indexWhere((e) => e.userID == userID);

    if (index >= 0) {
      data.removeAt(index);
    }

    emit(state.copyWith(
      data: data,
    ));
  }

  selectSale(int index) {
    var data = [...state.data];
    var count = data.length - 1 - index;

    data.removeRange(index + 1, data.length);

    popCount(count);

    emit(state.copyWith(
      data: data,
    ));
  }

  switchStatisticType(StatisticWorkingType type) {
    final data = state.data.where((e) => e.userID != AppData.instance.userID).toList();
    popCount(data.length);

    ///
    if (type == StatisticWorkingType.report) {
      final List<Object> routes = data
          .map((e) {
            final level = StatisticWorkingLevel.getLevel(e.level);
            switch (level) {
              case StatisticWorkingLevel.agent:
                return StatisticAgentReportRoute(
                  userID: e.userID,
                  date: e.date,
                );
              default:
                return StatisticAsmReportRoute(
                  userID: e.userID,
                  date: e.date,
                  level: e.level,
                );
            }
          })
          .whereType<PageRouteInfo<dynamic>>()
          .toList();
      _router.pushAll(routes as List<PageRouteInfo<dynamic>>);
      return;
    }

    ///
    if (type == StatisticWorkingType.checking) {
      final List<Object> routes = data
          .map((e) {
            final level = StatisticWorkingLevel.getLevel(e.level);
            switch (level) {
              case StatisticWorkingLevel.agent:
                return StatisticAgentCheckingRoute(
                  userID: e.userID,
                  date: e.date,
                );
              default:
                return StatisticAsmCheckingRoute(
                  userID: e.userID,
                  date: e.date,
                  level: e.level,
                );
            }
          })
          .whereType<PageRouteInfo<dynamic>>()
          .toList();
      _router.pushAll(routes as List<PageRouteInfo<dynamic>>);
      return;
    }
  }

  reset() {
    emit(const StatisticPathState());
  }

  popCount(int count) {
    _router.popUntil((route) => (--count) < 0);
  }
}
