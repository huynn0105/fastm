import 'package:bloc/bloc.dart';
import 'package:ekyc/common/bloc_status.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/utils/datetime_util.dart';
import 'package:flutter_module/common/utils/debounce_util.dart';
import 'package:flutter_module/features/statistic_working/repository/statistic_working_repository.dart';
import 'package:flutter_module/models/statistic_working/statistic_checking_model.dart';
import 'package:flutter_module/services/api/statistic_working/payload/get_statistic_summary_checking_payload.dart';

part 'statistic_summary_checking_state.dart';

class StatisticSummaryCheckingCubit extends Cubit<StatisticSummaryCheckingState> {
  StatisticSummaryCheckingCubit() : super(const StatisticSummaryCheckingState());

  final _repository = StatisticWorkingRepository();

  final DebounceUtil debounce = DebounceUtil(milliseconds: 250);

  GetStatisticSummaryCheckingPayload _payload = GetStatisticSummaryCheckingPayload();

  Future fetchData() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.getStatisticSummaryChecking(_payload);

    emit(state.copyWith(
      status: BlocStatus.success,
      data: result.data,
    ));
  }

  updatePayload({
    String? userID,
    String? date,
  }) {
    _payload = _payload.copyWith(
      userID: userID,
      date: date,
    );
  }

  onDateChanged(String date) {
    debounce.run(() {
      updatePayload(date: date);
      fetchData();
    });
  }

  @override
  Future<void> close() {
    debounce.cancel();
    return super.close();
  }
}
