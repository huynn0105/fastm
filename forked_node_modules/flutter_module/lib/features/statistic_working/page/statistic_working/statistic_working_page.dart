import 'package:auto_route/auto_route.dart';
import 'package:extended_nested_scroll_view/extended_nested_scroll_view.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/statistic_working/statistic_working_type.dart';
import 'package:flutter_module/common/utils/datetime_util.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/keep_alive_widget.dart';
import 'package:flutter_module/common/widgets/nested_scrollview.dart';
import 'package:flutter_module/common/widgets/tabbar/tabbar.dart';
import 'package:flutter_module/features/statistic_working/cubit/date_selection/statistic_date_selection_cubit.dart';
import 'package:flutter_module/features/statistic_working/cubit/statistic_asm_checking/statistic_asm_checking_cubit.dart';
import 'package:flutter_module/features/statistic_working/cubit/statistic_summary_checking/statistic_summary_checking_cubit.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/components/statistic_checking_component.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/components/statistic_report_component.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/widget/date_widget.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:sliver_tools/sliver_tools.dart';

import '../../cubit/statistic_asm_report/statistic_asm_report_cubit.dart';
import '../../cubit/statistic_summary_report/statistic_summary_report_cubit.dart';

@RoutePage()
class StatisticWorkingPage extends StatefulWidget implements AutoRouteWrapper {
  const StatisticWorkingPage({
    super.key,
    @QueryParam('index_tab') this.indexTab,
  });

  final int? indexTab;

  @override
  Widget wrappedRoute(BuildContext context) {
    final userID = AppData.instance.userID;
    final date = DateTimeUtil.getString(DateTime.now(), format: DateTimeFormat.yyyy_MM_dd);
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => StatisticDateSelectionCubit()..initDate(date: date),
        ),
        BlocProvider(
          create: (_) => StatisticSummaryCheckingCubit()
            ..updatePayload(userID: userID, date: date)
            ..fetchData(),
        ),
        BlocProvider(
          create: (_) => StatisticAsmTotalCheckingCubit()
            ..updatePayload(userID: userID, date: date, type: StatisticCheckingType.total.code)
            ..fetchData(),
        ),
        BlocProvider(
          create: (_) => StatisticSummaryReportCubit()
            ..updatePayload(userID: userID, date: date)
            ..fetchData(),
        ),
        BlocProvider(
          create: (_) => StatisticAsmTotalReportCubit()
            ..updatePayload(userID: userID, date: date, type: StatisticReportType.total.code)
            ..fetchData(),
        ),
      ],
      child: this,
    );
  }

  @override
  State<StatisticWorkingPage> createState() => _StatisticWorkingPageState();
}

class _StatisticWorkingPageState extends State<StatisticWorkingPage> with SingleTickerProviderStateMixin {
  late final TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(
      vsync: this,
      length: 2,
      initialIndex: (widget.indexTab ?? 0).clamp(0, 1),
    );
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<StatisticDateSelectionCubit, StatisticDateSelectionState>(
          listener: (context, state) {
            final format = DateTimeUtil.getString(state.date, format: DateTimeFormat.yyyy_MM_dd);
            context.read<StatisticSummaryCheckingCubit>().onDateChanged(format);
            context.read<StatisticAsmTotalCheckingCubit>().onDateChanged(format);
            context.read<StatisticSummaryReportCubit>().onDateChanged(format);
            context.read<StatisticAsmTotalReportCubit>().onDateChanged(format);
          },
        ),
      ],
      child: WillPopScope(
        onWillPop: () async {
          if (!context.router.canPop()) {
            RedirectUtil.backToMFast();
            return false;
          }
          return true;
        },
        child: Scaffold(
          appBar: MFastAdvanceAppBar(
            context: context,
            title: 'Thống kê kết quả làm việc',
            onBack: () {
              context.router.pop();
            },
            onNotify: () {
              context.router.push(const MFastNotificationRoute());
            },
            onHome: () {
              RedirectUtil.backToMFast();
            },
          ),
          body: ExtendedNestedScrollView(
            physics: const PositionRetainedScrollPhysics(),
            headerSliverBuilder: (_, __) {
              return [
                SliverPinnedHeader(
                  child: Container(
                    decoration: const BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment(0.5, -3.0616171314629196e-17),
                        end: Alignment(0.5, 0.9999999999999999),
                        colors: [
                          UIColors.background,
                          UIColors.white,
                        ],
                      ),
                    ),
                    child: Column(
                      children: [
                        BlocBuilder<StatisticDateSelectionCubit, StatisticDateSelectionState>(
                          builder: (context, state) {
                            return Container(
                              color: Colors.transparent,
                              child: DateWidget(
                                date: state.date,
                                enabledNext: state.enabledNext,
                                enabledPrevious: state.enabledPrevious,
                                onNext: context.read<StatisticDateSelectionCubit>().next,
                                onPrevious: context.read<StatisticDateSelectionCubit>().previous,
                              ),
                            );
                          },
                        ),
                        UnderlineIndicatorTabbar(
                          controller: _tabController,
                          backgroundColor: Colors.transparent,
                          height: 40,
                          titles: const [
                            "Điểm danh",
                            "Báo cáo",
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              ];
            },
            body: TabBarView(
              controller: _tabController,
              children: const [
                KeepAliveWidget(
                  child: StatisticCheckingComponent(),
                ),
                KeepAliveWidget(
                  child: StatisticReportComponent(),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
