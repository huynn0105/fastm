import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/mfast/page/time_checking_report_result/components/kpi_result_component.dart';
import 'package:flutter_module/features/statistic_working/cubit/statistic_path/statistic_path_cubit.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/components/statistic_list_component.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/mixins/statistic_working_mixin.dart';
import 'package:flutter_module/models/mfast/report/report_submit_response_model.dart';
import 'package:flutter_module/models/statistic_working/sale_info_model.dart';
import 'package:info_popup/info_popup.dart';

import '../../../../../common/enum/statistic_working/statistic_working_level.dart';
import '../../../cubit/statistic_asm_report/statistic_asm_report_cubit.dart';
import '../../../cubit/statistic_summary_report/statistic_summary_report_cubit.dart';
import '../../statistic_asm_report/components/statistic_report_summary_component.dart';
import '../../statistic_asm_report/items/statistic_report_item.dart';

class StatisticReportComponent extends StatefulWidget with StatisticWorkingMixin {
  const StatisticReportComponent({super.key});

  @override
  State<StatisticReportComponent> createState() => _StatisticReportComponentState();
}

class _StatisticReportComponentState extends State<StatisticReportComponent> with StatisticWorkingMixin {
  InfoPopupController? _infoPopupController;

  @override
  void dispose() {
    _infoPopupController?.dismissInfoPopup();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<StatisticSummaryReportCubit, StatisticSummaryReportState>(
      builder: (context, summaryState) {
        return BlocBuilder<StatisticAsmTotalReportCubit, StatisticAsmReportState>(
          builder: (context, state) {
            return Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: StatisticListComponent(
                level: summaryState.data?.level,
                name: summaryState.data?.fullName,
                status: state.status,
                data: state.data,
                showInfoPopup: () {
                  if (state.data.isNotEmpty) {
                    _infoPopupController?.show();
                  }
                },
                header: Container(
                  margin: const EdgeInsets.only(top: 8),
                  child: Column(
                    children: [
                      KPIResultComponent(
                        incomeTitle: 'Doanh số KPI tự khai',
                        kpiTitle: '%KPI tự khai',
                        ignoreDecoration: true,
                        data: ReportSubmitResponseModel(
                          totalIncome: summaryState.data?.kpiDetail?.totalIncome ?? 0,
                          estKpi: summaryState.data?.kpiDetail?.estKpi ?? 0,
                          note: summaryState.data?.kpiDetail?.note,
                        ),
                      ),
                      const SizedBox(height: 12),
                      const StatisticReportSummaryComponent(),
                      const SizedBox(height: 12),
                      StatisticReportSummaryComponent(
                        inDay: true,
                        onControllerCreated: (controller) {
                          _infoPopupController = controller;
                          autoHighlightStatisticWorkingReportPopup(controller);
                        },
                        level: summaryState.data?.level,
                        showInfoPopup: () {
                          _infoPopupController?.show();
                        },
                      ),
                      const SizedBox(height: 16),
                    ],
                  ),
                ),
                onItemBuilder: (context, item, index) {
                  return StatisticReportItem(
                    item: item,
                    onTap: () {
                      final pathCubit = getItInstance.get<StatisticPathCubit>();
                      pathCubit.reset();
                      if (summaryState.data != null) {
                        pathCubit.push(SaleInfoModel.fromStatisticReport(summaryState.data!));
                      }
                      openReport(context, userID: item.userID, level: item.level);
                    },
                  );
                },
                onTitleDisplayed: (level, name) {
                  return 'Thống kê doanh số tự khai từ các ${StatisticWorkingLevel.getUnderLevel(level)}';
                },
                onRefresh: () async {
                  return Future.wait([
                    context.read<StatisticAsmTotalReportCubit>().refreshData(),
                    context.read<StatisticSummaryReportCubit>().fetchData(),
                  ]);
                },
                onLoadMore: context.read<StatisticAsmTotalReportCubit>().loadmoreData,
                onSearchChanged: context.read<StatisticAsmTotalReportCubit>().onSearch,
              ),
            );
          },
        );
      },
    );
  }
}
