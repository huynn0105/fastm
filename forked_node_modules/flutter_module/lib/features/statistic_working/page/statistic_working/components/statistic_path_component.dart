import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/statistic_working/cubit/statistic_path/statistic_path_cubit.dart';

class StatisticPathComponent extends StatefulWidget {
  const StatisticPathComponent({super.key});

  @override
  State<StatisticPathComponent> createState() => _StatisticPathComponentState();
}

class _StatisticPathComponentState extends State<StatisticPathComponent> {
  late final ScrollController scrollController;

  @override
  void initState() {
    super.initState();
    scrollController = ScrollController();
    _scrollToMaxExtent();
  }

  @override
  void dispose() {
    scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<StatisticPathCubit>();
    return BlocBuilder<StatisticPathCubit, StatisticPathState>(
      builder: (context, state) {
        return Visibility(
          visible: _enabled(state.data.length),
          child: Container(
            height: 40,
            width: double.infinity,
            decoration: const BoxDecoration(
              color: UIColors.darkBlue,
            ),
            child: ListView.separated(
              controller: scrollController,
              scrollDirection: Axis.horizontal,
              physics: const ClampingScrollPhysics(),
              padding: const EdgeInsets.symmetric(horizontal: 12),
              itemBuilder: (context, index) {
                final item = state.data[index];
                final isSelected = index == state.data.length - 1;
                final isMe = item.userID == AppData.instance.userID;
                final fullName = isMe ? 'Báº¡n' : '${item.fullName ?? ''} (${item.level ?? ''})';

                ///
                return AppSplashButton(
                  isDisable: isSelected,
                  onTap: () => cubit.selectSale(index),
                  child: Center(
                    child: Text(
                      fullName,
                      style: UITextStyle.regular.copyWith(
                        fontSize: 13,
                        color: isSelected ? UIColors.white : UIColors.gray,
                      ),
                    ),
                  ),
                );
              },
              separatorBuilder: (_, __) => const Padding(
                padding: EdgeInsets.symmetric(horizontal: 5),
                child: AppImage.asset(
                  asset: 'ic_arrow_right_double',
                  width: 20,
                  height: 20,
                  fit: BoxFit.contain,
                ),
              ),
              itemCount: state.data.length,
            ),
          ),
        );
      },
    );
  }

  _enabled(int length) {
    return length >= 2;
  }

  _scrollToMaxExtent() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final length = context.read<StatisticPathCubit>().state.data.length;
      if (_enabled(length)) {
        scrollController.jumpTo(scrollController.position.maxScrollExtent);
      }
    });
  }
}
