import 'package:flutter/material.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/common/widgets/sliver_list.dart';
import 'package:flutter_module/common/widgets/textfields.dart';
import 'package:flutter_module/features/legendary/pages/new_supporter/new_supporter_page.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_agent_checking/components/checking_history_component.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_asm_checking/components/checking_info_popup.dart';
import 'package:flutter_module/models/statistic_working/statistic_checking_model.dart';
import 'package:info_popup/info_popup.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';

class StatisticListComponent<T> extends StatefulWidget {
  const StatisticListComponent({
    super.key,
    this.level,
    this.name,
    this.header,
    required this.status,
    required this.data,
    required this.onItemBuilder,
    required this.onTitleDisplayed,
    required this.onRefresh,
    required this.onLoadMore,
    required this.onSearchChanged,
    this.showInfoPopup,
    this.onControllerCreated,
    this.filterSortList,
    this.onFilterResult,
    this.filterTitle = '',
  });

  final String? level;
  final String? name;
  final BlocStatus status;
  final List<T> data;
  final Widget Function(BuildContext context, dynamic item, int index) onItemBuilder;
  final String Function(String? level, String? name) onTitleDisplayed;
  final Future Function() onRefresh;
  final Future Function() onLoadMore;
  final void Function(String) onSearchChanged;
  final Function()? showInfoPopup;
  final Widget? header;
  final OnControllerCreated? onControllerCreated;
  final List<FilterSortList>? filterSortList;
  final Function(DataWrapper data)? onFilterResult;
  final String filterTitle;
  @override
  State<StatisticListComponent> createState() => _StatisticListComponentState();
}

class _StatisticListComponentState extends State<StatisticListComponent> {
  late final TextEditingController _searchController;
  late final RefreshController _refreshController;

  @override
  void initState() {
    _searchController = TextEditingController();
    _refreshController = RefreshController();
    super.initState();
  }

  @override
  void dispose() {
    _searchController.dispose();
    _refreshController.dispose();
    super.dispose();
  }

  @override
  void didUpdateWidget(covariant StatisticListComponent oldWidget) {
    if (oldWidget.status != widget.status) {
      if (widget.status.isLoading) {
        _refreshController.resetNoData();
      }
    }
    super.didUpdateWidget(oldWidget);
  }

  DataWrapper? _filter;
  bool _isDefaultFilter = true;

  @override
  Widget build(BuildContext context) {
    Widget? header = widget.header;
    if (widget.onControllerCreated != null && widget.header != null) {
      header = CheckingInfoPopup(
        onControllerCreated: widget.onControllerCreated,
        child: widget.header!,
      );
    }
    if (widget.filterSortList?.isNotEmpty == true && _isDefaultFilter) {
      _filter = DataWrapper(
        id: widget.filterSortList?.first.value ?? '',
        value: widget.filterSortList?.first.text ?? '',
      );
    }

    return LoadMoreWidget(
      refreshController: _refreshController,
      onRefresh: () {
        _refreshController.resetNoData();
        return widget.onRefresh();
      },
      onLoadMore: () {
        return widget.onLoadMore();
      },
      child: CustomScrollView(
        slivers: [
          if (header != null) ...[
            SliverToBoxAdapter(
              child: header,
            ),
          ],
          SliverToBoxAdapter(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(
                  height: 12,
                ),
                Text(
                  widget.onTitleDisplayed(widget.level, widget.name),
                  style: UITextStyle.medium,
                ),
                const SizedBox(
                  height: 12,
                ),
                UISearchTextField(
                  controller: _searchController,
                  contentPadding: const EdgeInsets.only(right: 10, top: 12, bottom: 12),
                  hintText: 'Tìm theo tên hoặc số điện thoại',
                  onChanged: widget.onSearchChanged,
                ),
                const SizedBox(
                  height: 12,
                ),
                Visibility(
                  visible: widget.filterSortList?.isNotEmpty == true,
                  child: Container(
                    decoration: BoxDecoration(
                      color: UIColors.white,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                    ),
                    margin: const EdgeInsets.only(bottom: 12),
                    child: ButtonFilter(
                      icon: "ic_sort_agent",
                      value: _filter?.value ?? '',
                      onTap: () async {
                        final result = await BottomSheetProvider.instance.onShowSearchList(context,
                            title: 'Sắp xếp theo số lượt ${widget.filterTitle}',
                            data: widget.filterSortList!
                                .map((e) => DataWrapper(
                                      value: e.text,
                                      id: e.value,
                                    ))
                                .toList(),
                            selectedId: _filter?.id ?? '',
                            showSearchInput: false,
                            doneWidget: Text(
                              'Xong',
                              style: UITextStyle.regular.copyWith(
                                color: UIColors.primaryColor,
                              ),
                            ));
                        if (result != null && context.mounted) {
                          setState(() {
                            _isDefaultFilter = false;
                            _filter = result;
                          });
                          widget.onFilterResult?.call(result);
                        }
                      },
                    ),
                  ),
                ),
              ],
            ),
          ),
          SliverVisibility(
            visible: widget.status.showLoading,
            sliver: const SliverToBoxAdapter(
              child: Padding(
                padding: EdgeInsets.only(top: 32),
                child: LoadingWidget(),
              ),
            ),
          ),
          SliverVisibility(
            visible: !widget.status.showLoading,
            sliver: SliverPadding(
              padding: const EdgeInsets.only(bottom: 16),
              sliver: widget.data.isEmpty
                  ? const SliverToBoxAdapter(
                      child: NoThingWidget(message: 'Không có dữ liệu'),
                    )
                  : SeparatedSliverList(
                      separatorBuilder: (_, __) {
                        return const SizedBox(
                          height: 12,
                        );
                      },
                      itemBuilder: (context, index) {
                        return widget.onItemBuilder(context, widget.data[index], index);
                      },
                      itemCount: widget.data.length,
                    ),
            ),
          ),
        ],
      ),
    );
  }
}
