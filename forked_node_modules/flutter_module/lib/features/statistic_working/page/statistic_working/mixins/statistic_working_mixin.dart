import 'package:auto_route/auto_route.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/enum/statistic_working/statistic_working_level.dart';
import 'package:flutter_module/common/enum/statistic_working/statistic_working_popup_type.dart';
import 'package:flutter_module/common/utils/datetime_util.dart';
import 'package:flutter_module/features/statistic_working/cubit/date_selection/statistic_date_selection_cubit.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:flutter_module/services/local/local_data_helper.dart';
import 'package:info_popup/info_popup.dart';

mixin StatisticWorkingMixin {
  openChecking(
    BuildContext context, {
    required String? userID,
    required String? level,
  }) {
    final isAgent = StatisticWorkingLevel.getLevel(level)?.isAgent == true;
    final date = DateTimeUtil.getString(
      context.read<StatisticDateSelectionCubit>().state.date,
      format: DateTimeFormat.yyyy_MM_dd,
    );
    if (isAgent) {
      context.router.push(StatisticAgentCheckingRoute(
        userID: userID,
        date: date,
      ));
    } else {
      context.router.push(StatisticAsmCheckingRoute(
        userID: userID,
        level: level,
        date: date,
      ));
    }
  }

  openReport(
    BuildContext context, {
    required String? userID,
    required String? level,
  }) {
    final isAgent = StatisticWorkingLevel.getLevel(level)?.isAgent == true;
    final date = DateTimeUtil.getString(
      context.read<StatisticDateSelectionCubit>().state.date,
      format: DateTimeFormat.yyyy_MM_dd,
    );
    if (isAgent) {
      context.router.push(StatisticAgentReportRoute(
        userID: userID,
        date: date,
      ));
    } else {
      context.router.push(StatisticAsmReportRoute(
        userID: userID,
        level: level,
        date: date,
      ));
    }
  }

  autoHighlightStatisticWorkingCheckingPopup(InfoPopupController? controller) {
    if (!LocalDataHelper.instance.getStatisticPopup(StatisticWorkingPopupType.workingChecking)) {
      LocalDataHelper.instance.setStatisticPopup(StatisticWorkingPopupType.workingChecking, true);
      WidgetsBinding.instance.addPostFrameCallback((_) {
        controller?.show();
      });
    }
  }

  autoHighlightStatisticWorkingReportPopup(InfoPopupController? controller) {
    if (!LocalDataHelper.instance.getStatisticPopup(StatisticWorkingPopupType.workingReport)) {
      LocalDataHelper.instance.setStatisticPopup(StatisticWorkingPopupType.workingReport, true);
      WidgetsBinding.instance.addPostFrameCallback((_) {
        controller?.show();
      });
    }
  }

  autoHighlightStatisticAsmCheckingPopup(InfoPopupController? controller) {
    if (!LocalDataHelper.instance.getStatisticPopup(StatisticWorkingPopupType.asmChecking)) {
      LocalDataHelper.instance.setStatisticPopup(StatisticWorkingPopupType.asmChecking, true);
      WidgetsBinding.instance.addPostFrameCallback((_) {
        controller?.show();
      });
    }
  }

  autoHighlightStatisticAsmReportPopup(InfoPopupController? controller) {
    if (!LocalDataHelper.instance.getStatisticPopup(StatisticWorkingPopupType.asmReport)) {
      LocalDataHelper.instance.setStatisticPopup(StatisticWorkingPopupType.asmReport, true);
      WidgetsBinding.instance.addPostFrameCallback((_) {
        controller?.show();
      });
    }
  }
}
