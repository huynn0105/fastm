import 'package:flutter/material.dart';
import 'package:info_popup/info_popup.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/size.dart';
import '../../../../../common/styles.dart';
import '../../../../../common/widgets/images.dart';

class CheckingInfoPopup extends StatelessWidget {
  const CheckingInfoPopup({
    super.key,
    required this.child,
    this.onControllerCreated,
    this.onDismissed,
  });

  final Widget child;
  final OnControllerCreated? onControllerCreated;
  final Function()? onDismissed;

  @override
  Widget build(BuildContext context) {
    final helpContents = [
      {
        'icon': 'ic_checking_success',
        'content': 'Số lượt điểm danh trong ngày',
      },
      {
        'icon': 'ic_checking_avg',
        'content': 'Trung bình điểm danh trên Agent',
      },
      {
        'icon': 'ic_report_agentReportSuccess',
        'content': 'Số Agent đã điểm danh trong ngày',
      },
      {
        'icon': 'ic_checking_unknown',
        'content': 'Số Agent chưa điểm danh trong ngày',
      },
    ];
    return InfoPopupWidget(
      onControllerCreated: onControllerCreated,
      enableHighlight: true,
      infoPopupDismissed: onDismissed,
      dismissTriggerBehavior: PopupDismissTriggerBehavior.anyWhere,
      popupClickTriggerBehavior: PopupClickTriggerBehavior.none,
      contentMaxWidth: AppSize.instance.width - 32,
      arrowTheme: const InfoPopupArrowTheme(
        color: Colors.white,
        arrowDirection: ArrowDirection.up,
      ),
      highLightTheme: HighLightTheme(
        backgroundColor: UIColors.blurBackground,
        radius: BorderRadius.circular(8),
      ),
      indicatorOffset: const Offset(0, 0),
      contentOffset: const Offset(0, 0),
      customContent: () => Container(
        decoration: BoxDecoration(
          color: UIColors.white,
          borderRadius: BorderRadius.circular(12),
        ),
        padding: const EdgeInsets.all(12),
        width: 290,
        child: ListView.separated(
          padding: EdgeInsets.zero,
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemBuilder: (context, index) {
            return Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                AppImage.asset(
                  asset: helpContents[index]['icon'],
                  width: 20,
                  height: 20,
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    helpContents[index]['content'] ?? '',
                    style: UITextStyle.regular.copyWith(
                      height: 1.4,
                    ),
                  ),
                )
              ],
            );
          },
          separatorBuilder: (context, index) {
            return const SizedBox(height: 8);
          },
          itemCount: helpContents.length,
        ),
      ),
      child: child,
    );
  }
}
