import 'package:auto_route/auto_route.dart';
import 'package:extended_nested_scroll_view/extended_nested_scroll_view.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/statistic_working/statistic_working_type.dart';
import 'package:flutter_module/common/utils/datetime_util.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/keep_alive_widget.dart';
import 'package:flutter_module/common/widgets/nested_scrollview.dart';
import 'package:flutter_module/common/widgets/tabbar/tabbar.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/statistic_working/cubit/date_selection/statistic_date_selection_cubit.dart';
import 'package:flutter_module/features/statistic_working/cubit/statistic_asm_checking/statistic_asm_checking_cubit.dart';
import 'package:flutter_module/features/statistic_working/cubit/statistic_path/statistic_path_cubit.dart';
import 'package:flutter_module/features/statistic_working/cubit/statistic_summary_checking/statistic_summary_checking_cubit.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_asm_checking/components/statistic_asm_not_checking_component.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_asm_checking/components/statistic_asm_total_checking_component.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/components/statistic_path_component.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/mixins/statistic_working_mixin.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/widget/date_widget.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/widget/user_info_widget.dart';
import 'package:flutter_module/models/statistic_working/sale_info_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:info_popup/info_popup.dart';
import 'package:sliver_tools/sliver_tools.dart';

import 'components/statistic_checkin_summary_component.dart';

@RoutePage()
class StatisticAsmCheckingPage extends StatefulWidget implements AutoRouteWrapper {
  const StatisticAsmCheckingPage({
    super.key,
    @QueryParam('userID') this.userID,
    @QueryParam('level') this.level,
    @QueryParam('date') this.date,
  });

  final String? userID;
  final String? level;
  final String? date;

  @override
  Widget wrappedRoute(BuildContext context) {
    final date = this.date ?? DateTimeUtil.getString(DateTime.now(), format: DateTimeFormat.yyyy_MM_dd);
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => StatisticDateSelectionCubit()..initDate(date: date),
        ),
        BlocProvider(
          create: (_) => StatisticSummaryCheckingCubit()
            ..updatePayload(userID: userID, date: date)
            ..fetchData(),
        ),
        BlocProvider(
          create: (_) => StatisticAsmTotalCheckingCubit()
            ..updatePayload(userID: userID, date: date, level: level, type: StatisticCheckingType.total.code)
            ..fetchData(),
        ),
        BlocProvider(
          create: (_) => StatisticAsmNotCheckingCubit()
            ..updatePayload(userID: userID, date: date, level: level, type: StatisticCheckingType.notChecking.code)
            ..fetchData(),
        ),
      ],
      child: this,
    );
  }

  @override
  State<StatisticAsmCheckingPage> createState() => _StatisticAsmCheckingPageState();
}

class _StatisticAsmCheckingPageState extends State<StatisticAsmCheckingPage>
    with SingleTickerProviderStateMixin, StatisticWorkingMixin {
  late final TabController _tabController;
  InfoPopupController? _infoPopupController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(vsync: this, length: 2);
  }

  @override
  void dispose() {
    _tabController.dispose();
    _infoPopupController?.dismissInfoPopup();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        getItInstance.get<StatisticPathCubit>().pop(widget.userID);
        await Future.delayed(const Duration(milliseconds: 250));
        return true;
      },
      child: MultiBlocListener(
        listeners: [
          BlocListener<StatisticSummaryCheckingCubit, StatisticSummaryCheckingState>(
            listener: (context, state) {
              if (state.data != null) {
                getItInstance.get<StatisticPathCubit>().push(SaleInfoModel.fromStatisticChecking(state.data!));
              }
            },
          ),
          BlocListener<StatisticDateSelectionCubit, StatisticDateSelectionState>(
            listener: (context, state) {
              final format = DateTimeUtil.getString(state.date, format: DateTimeFormat.yyyy_MM_dd);
              context.read<StatisticSummaryCheckingCubit>().onDateChanged(format);
              context.read<StatisticAsmTotalCheckingCubit>().onDateChanged(format);
              context.read<StatisticAsmNotCheckingCubit>().onDateChanged(format);
            },
          ),
        ],
        child: Scaffold(
          appBar: MFastAdvanceAppBar(
            context: context,
            title: 'Thống kê điểm danh',
            onBack: () {
              context.router.pop();
            },
            onNotify: () {
              context.router.push(const MFastNotificationRoute());
            },
            onHome: () {
              RedirectUtil.backToMFast();
            },
          ),
          body: ExtendedNestedScrollView(
            physics: const PositionRetainedScrollPhysics(),
            headerSliverBuilder: (_, __) {
              return [
                SliverPinnedHeader(
                  child: BlocBuilder<StatisticSummaryCheckingCubit, StatisticSummaryCheckingState>(
                    builder: (context, state) {
                      return SizedBox(
                        height: 40,
                        width: double.infinity,
                        child: Visibility(
                          visible: state.data != null,
                          child: const StatisticPathComponent(),
                        ),
                      );
                    },
                  ),
                ),
                SliverPinnedHeader(
                  child: BlocBuilder<StatisticDateSelectionCubit, StatisticDateSelectionState>(
                    builder: (context, state) {
                      return Container(
                        color: UIColors.background,
                        child: Stack(
                          children: [
                            DateWidget(
                              date: state.date,
                              enabledNext: state.enabledNext,
                              enabledPrevious: state.enabledPrevious,
                              onNext: context.read<StatisticDateSelectionCubit>().next,
                              onPrevious: context.read<StatisticDateSelectionCubit>().previous,
                            ),
                          ],
                        ),
                      );
                    },
                  ),
                ),
                SliverToBoxAdapter(
                  child: Container(
                    padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
                    decoration: const BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment(0.5, -3.0616171314629196e-17),
                        end: Alignment(0.5, 0.9999999999999999),
                        colors: [
                          UIColors.background,
                          UIColors.white,
                        ],
                      ),
                    ),
                    child: Column(
                      children: [
                        BlocBuilder<StatisticSummaryCheckingCubit, StatisticSummaryCheckingState>(
                          builder: (context, state) {
                            return Column(
                              children: [
                                UserInfoWidget(
                                  userID: '${state.data?.userID}',
                                  avatarURL: state.data?.image ?? '',
                                  fullName: state.data?.fullName ?? '',
                                  phoneNumber: state.data?.mobilePhone ?? '',
                                  lineLabel: state.data?.level ?? '',
                                  statisticType: StatisticWorkingType.checking.code,
                                  onTypeSwitched: (type) {
                                    getItInstance.get<StatisticPathCubit>().switchStatisticType(type);
                                  },
                                ),
                                const SizedBox(
                                  height: 12,
                                ),
                                StatisticCheckInSummaryComponent(
                                  onControllerCreated: (controller) {
                                    _infoPopupController = controller;
                                    autoHighlightStatisticAsmCheckingPopup(controller);
                                  },
                                  showInfoPopup: () {
                                    _infoPopupController?.show();
                                  },
                                ),
                              ],
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                ),
                SliverPinnedHeader(
                  child: UnderlineIndicatorTabbar(
                    controller: _tabController,
                    backgroundColor: UIColors.white,
                    height: 40,
                    titles: const [
                      "Tổng quan",
                      "Chưa điểm danh",
                    ],
                  ),
                ),
              ];
            },
            body: TabBarView(
              controller: _tabController,
              children: const [
                KeepAliveWidget(
                  child: StatisticAsmTotalCheckingComponent(),
                ),
                KeepAliveWidget(
                  child: StatisticAsmNotCheckingComponent(),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
