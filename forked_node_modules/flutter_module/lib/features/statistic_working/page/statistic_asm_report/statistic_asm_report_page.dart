import 'package:auto_route/auto_route.dart';
import 'package:extended_nested_scroll_view/extended_nested_scroll_view.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/statistic_working/statistic_working_type.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/keep_alive_widget.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/statistic_working/cubit/statistic_asm_report/statistic_asm_report_cubit.dart';
import 'package:flutter_module/features/statistic_working/cubit/statistic_path/statistic_path_cubit.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/components/statistic_path_component.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/mixins/statistic_working_mixin.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/widget/date_widget.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/widget/user_info_widget.dart';
import 'package:flutter_module/models/statistic_working/sale_info_model.dart';
import 'package:info_popup/info_popup.dart';
import 'package:sliver_tools/sliver_tools.dart';

import '../../../../common/utils/datetime_util.dart';
import '../../../../common/utils/redirect_util.dart';
import '../../../../common/widgets/nested_scrollview.dart';
import '../../../../common/widgets/tabbar/tabbar.dart';
import '../../cubit/date_selection/statistic_date_selection_cubit.dart';
import '../../cubit/statistic_summary_report/statistic_summary_report_cubit.dart';
import 'components/statistic_not_report_component.dart';
import 'components/statistic_report_summary_component.dart';
import 'components/statistic_total_report_component.dart';

@RoutePage()
class StatisticAsmReportPage extends StatefulWidget implements AutoRouteWrapper {
  const StatisticAsmReportPage({super.key, this.userID, this.level, this.date});

  final String? userID;
  final String? level;
  final String? date;

  @override
  State<StatisticAsmReportPage> createState() => _StatisticAsmReportPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    final date = this.date ?? DateTimeUtil.getString(DateTime.now(), format: DateTimeFormat.yyyy_MM_dd);
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => StatisticDateSelectionCubit()..initDate(date: date),
        ),
        BlocProvider(
            create: (_) => StatisticSummaryReportCubit()
              ..updatePayload(userID: userID, date: date)
              ..fetchData()),
        BlocProvider<StatisticAsmTotalReportCubit>(
          create: (_) => StatisticAsmTotalReportCubit()
            ..updatePayload(userID: userID, type: 'total', level: level, date: date)
            ..fetchData(),
        ),
        BlocProvider<StatisticAsmNotReportCubit>(
          create: (_) => StatisticAsmNotReportCubit()
            ..updatePayload(userID: userID, type: 'notReport', level: level, date: date)
            ..fetchData(),
        ),
      ],
      child: this,
    );
  }
}

class _StatisticAsmReportPageState extends State<StatisticAsmReportPage>
    with SingleTickerProviderStateMixin, StatisticWorkingMixin {
  late final TabController _tabController;
  InfoPopupController? _infoPopupController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(vsync: this, length: 2);
  }

  @override
  void dispose() {
    _tabController.dispose();
    _infoPopupController?.dismissInfoPopup();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        getItInstance.get<StatisticPathCubit>().pop(widget.userID);
        await Future.delayed(const Duration(milliseconds: 250));
        return true;
      },
      child: MultiBlocListener(
        listeners: [
          BlocListener<StatisticSummaryReportCubit, StatisticSummaryReportState>(
            listener: (context, state) {
              if (state.data != null) {
                getItInstance.get<StatisticPathCubit>().push(SaleInfoModel.fromStatisticReport(state.data!));
              }
            },
          ),
          BlocListener<StatisticDateSelectionCubit, StatisticDateSelectionState>(
            listener: (context, state) {
              final format = DateTimeUtil.getString(state.date, format: DateTimeFormat.yyyy_MM_dd);
              context.read<StatisticSummaryReportCubit>().onDateChanged(format);
              context.read<StatisticAsmTotalReportCubit>().onDateChanged(format);
              context.read<StatisticAsmNotReportCubit>().onDateChanged(format);
            },
          ),
        ],
        child: Scaffold(
          backgroundColor: UIColors.extraLightGray,
          appBar: MFastAdvanceAppBar(
            context: context,
            title: 'Thống kê báo cáo',
            onBack: () {
              context.popRoute();
            },
            onHome: () {
              RedirectUtil.backToMFast();
            },
          ),
          body: ExtendedNestedScrollView(
            physics: const PositionRetainedScrollPhysics(),
            headerSliverBuilder: (_, __) {
              return [
                SliverPinnedHeader(
                  child: BlocBuilder<StatisticSummaryReportCubit, StatisticSummaryReportState>(
                    builder: (context, state) {
                      return SizedBox(
                        height: 40,
                        width: double.infinity,
                        child: Visibility(
                          visible: state.data != null,
                          child: const StatisticPathComponent(),
                        ),
                      );
                    },
                  ),
                ),
                SliverPinnedHeader(
                  child: Stack(
                    children: [
                      BlocBuilder<StatisticDateSelectionCubit, StatisticDateSelectionState>(
                        builder: (context, state) {
                          return Container(
                            color: UIColors.extraLightGray,
                            child: DateWidget(
                              date: state.date,
                              enabledNext: state.enabledNext,
                              enabledPrevious: state.enabledPrevious,
                              onNext: context.read<StatisticDateSelectionCubit>().next,
                              onPrevious: context.read<StatisticDateSelectionCubit>().previous,
                            ),
                          );
                        },
                      ),
                    ],
                  ),
                ),
                SliverToBoxAdapter(
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    decoration: const BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter,
                        colors: [
                          UIColors.extraLightGray,
                          UIColors.white,
                        ],
                      ),
                    ),
                    child: BlocBuilder<StatisticSummaryReportCubit, StatisticSummaryReportState>(
                      builder: (context, state) {
                        return Column(
                          children: [
                            UserInfoWidget(
                              userID: '${state.data?.userID}',
                              avatarURL: state.data?.image ?? '',
                              fullName: state.data?.fullName ?? '',
                              phoneNumber: state.data?.mobilePhone ?? '',
                              lineLabel: state.data?.level ?? '',
                              statisticType: StatisticWorkingType.report.code,
                              onTypeSwitched: (type) {
                                getItInstance.get<StatisticPathCubit>().switchStatisticType(type);
                              },
                            ),
                            const SizedBox(height: 8),
                            const StatisticReportSummaryComponent(),
                            const SizedBox(height: 12),
                            StatisticReportSummaryComponent(
                              inDay: true,
                              level: state.data?.level,
                              onControllerCreated: (controller) {
                                _infoPopupController = controller;
                                autoHighlightStatisticAsmReportPopup(controller);
                              },
                              showInfoPopup: () {
                                _infoPopupController?.show();
                              },
                            ),
                            const SizedBox(height: 8),
                          ],
                        );
                      },
                    ),
                  ),
                ),
                SliverPinnedHeader(
                  child: UnderlineIndicatorTabbar(
                    controller: _tabController,
                    height: 40,
                    width: 105,
                    titles: const [
                      "Tổng quan",
                      "Chưa báo cáo",
                    ],
                  ),
                )
              ];
            },
            body: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: BlocBuilder<StatisticSummaryReportCubit, StatisticSummaryReportState>(
                builder: (context, state) {
                  return TabBarView(
                    controller: _tabController,
                    children: [
                      KeepAliveWidget(
                        child: StatisticTotalReportComponent(
                          level: state.data?.level,
                          name: state.data?.fullName,
                          sortList: state.data?.sortList,
                        ),
                      ),
                      KeepAliveWidget(
                        child: StatisticNotReportComponent(
                          name: state.data?.fullName,
                          sortList: state.data?.sortList,
                        ),
                      ),
                    ],
                  );
                },
              ),
            ),
          ),
        ),
      ),
    );
  }
}
