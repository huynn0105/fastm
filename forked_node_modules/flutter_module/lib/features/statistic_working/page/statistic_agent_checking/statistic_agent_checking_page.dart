import 'package:auto_route/auto_route.dart';
import 'package:extended_nested_scroll_view/extended_nested_scroll_view.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/statistic_working/statistic_working_type.dart';
import 'package:flutter_module/common/utils/datetime_util.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/nested_scrollview.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/statistic_working/cubit/date_selection/statistic_date_selection_cubit.dart';
import 'package:flutter_module/features/statistic_working/cubit/statistic_path/statistic_path_cubit.dart';
import 'package:flutter_module/features/statistic_working/cubit/statistic_summary_checking/statistic_summary_checking_cubit.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_agent_checking/components/checking_history_component.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/components/statistic_path_component.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/widget/date_widget.dart';
import 'package:flutter_module/features/statistic_working/page/statistic_working/widget/user_info_widget.dart';
import 'package:flutter_module/models/statistic_working/sale_info_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:sliver_tools/sliver_tools.dart';
import 'package:slivers/slivers.dart';

import '../../cubit/statistic_agent/statistic_agent_cubit.dart';

@RoutePage()
class StatisticAgentCheckingPage extends StatelessWidget implements AutoRouteWrapper {
  const StatisticAgentCheckingPage({
    super.key,
    @QueryParam('userID') this.userID,
    @QueryParam('date') this.date,
  });

  final String? userID;
  final String? date;

  @override
  Widget wrappedRoute(BuildContext context) {
    final date = this.date ?? DateTimeUtil.getString(DateTime.now(), format: DateTimeFormat.yyyy_MM_dd);
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => StatisticDateSelectionCubit()..initDate(date: date),
        ),
        BlocProvider(
          create: (_) => StatisticSummaryCheckingCubit()
            ..updatePayload(userID: userID, date: date)
            ..fetchData(),
        ),
        BlocProvider(
          create: (_) => StatisticAgentCubit()
            ..updatePayload(userID: userID, date: date)
            ..fetchData(),
        ),
      ],
      child: this,
    );
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        getItInstance.get<StatisticPathCubit>().pop(userID);
        await Future.delayed(const Duration(milliseconds: 250));
        return true;
      },
      child: Scaffold(
        appBar: MFastAdvanceAppBar(
          context: context,
          title: 'Thống kê điểm danh',
          onBack: () {
            context.router.pop();
          },
          onNotify: () {
            context.router.push(const MFastNotificationRoute());
          },
          onHome: () {
            RedirectUtil.backToMFast();
          },
        ),
        body: MultiBlocListener(
          listeners: [
            BlocListener<StatisticSummaryCheckingCubit, StatisticSummaryCheckingState>(
              listener: (context, state) {
                if (state.data != null) {
                  getItInstance.get<StatisticPathCubit>().push(SaleInfoModel.fromStatisticChecking(state.data!));
                }
              },
            ),
            BlocListener<StatisticDateSelectionCubit, StatisticDateSelectionState>(
              listener: (context, state) {
                final format = DateTimeUtil.getString(state.date, format: DateTimeFormat.yyyy_MM_dd);
                context.read<StatisticSummaryCheckingCubit>().onDateChanged(format);
                context.read<StatisticAgentCubit>().onDateChanged(format);
              },
            ),
          ],
          child: ExtendedNestedScrollView(
            physics: const PositionRetainedScrollPhysics(),
            headerSliverBuilder: (_, __) {
              return [
                SliverPinnedHeader(
                  child: BlocBuilder<StatisticSummaryCheckingCubit, StatisticSummaryCheckingState>(
                    builder: (context, state) {
                      return SizedBox(
                        height: 40,
                        width: double.infinity,
                        child: Visibility(
                          visible: state.data != null,
                          child: const StatisticPathComponent(),
                        ),
                      );
                    },
                  ),
                ),
                SliverContainer(
                  decoration: const BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment(0.5, -3.0616171314629196e-17),
                      end: Alignment(0.5, 0.9999999999999999),
                      colors: [
                        UIColors.background,
                        UIColors.white,
                      ],
                    ),
                  ),
                  sliver: MultiSliver(
                    children: [
                      SliverPinnedHeader(
                        child: BlocBuilder<StatisticDateSelectionCubit, StatisticDateSelectionState>(
                          builder: (context, state) {
                            return Container(
                              color: UIColors.background,
                              child: DateWidget(
                                date: state.date,
                                enabledNext: state.enabledNext,
                                enabledPrevious: state.enabledPrevious,
                                onNext: context.read<StatisticDateSelectionCubit>().next,
                                onPrevious: context.read<StatisticDateSelectionCubit>().previous,
                              ),
                            );
                          },
                        ),
                      ),
                      SliverToBoxAdapter(
                        child: BlocBuilder<StatisticSummaryCheckingCubit, StatisticSummaryCheckingState>(
                          builder: (context, state) {
                            return Padding(
                              padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
                              child: UserInfoWidget(
                                userID: userID ?? '',
                                avatarURL: state.data?.image ?? '',
                                fullName: state.data?.fullName ?? '',
                                phoneNumber: state.data?.mobilePhone ?? '',
                                lineLabel: state.data?.level ?? '',
                                lastestActionTime: state.data?.lastCheckingTime,
                                statisticType: StatisticWorkingType.checking.code,
                                onTypeSwitched: (type) {
                                  getItInstance.get<StatisticPathCubit>().switchStatisticType(type);
                                },
                              ),
                            );
                          },
                        ),
                      ),
                    ],
                  ),
                ),
              ];
            },
            body: BlocBuilder<StatisticAgentCubit, StatisticAgentState>(
              builder: (context, state) {
                return Stack(
                  children: [
                    Visibility(
                      visible: !state.status.showLoading,
                      child: ListView(
                        padding: const EdgeInsets.all(16),
                        children: [
                          CheckingHistoryComponent(
                            details: state.data?.dataInDay?.historyDetail ?? [],
                          ),
                        ],
                      ),
                    ),
                    Visibility(
                      visible: state.status.showLoading,
                      child: const LoadingWidget(),
                    ),
                  ],
                );
              },
            ),
          ),
        ),
      ),
    );
  }
}
