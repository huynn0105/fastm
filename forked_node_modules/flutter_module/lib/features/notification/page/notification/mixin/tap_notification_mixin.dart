import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/enum/mfast/main_tab_bar_page_type.dart';
import 'package:flutter_module/common/enum/mfast/notification_type.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/common/utils/deeplink_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/features/notification/cubit/notification/mfast_notification_cubit.dart';
import 'package:flutter_module/features/notification/cubit/notification_tab/notification_tab_cubit.dart';
import 'package:flutter_module/features/notification/cubit/push_notification/push_notification_cubit.dart';
import 'package:flutter_module/general_config.dart';
import 'package:flutter_module/models/mfast/notification/mfast_notification_model.dart';
import 'package:flutter_module/routes/routes.dart';
import 'package:flutter_module/routes/routes.gr.dart';

mixin TapNotificationMixin {
  MFastNotificationDataModel getNotificationFromRemoteMessage(RemoteMessage message) {
    return MFastNotificationDataModel.fromPushNotificationJson(message.data);
  }

  onTap(BuildContext? context, {required MFastNotificationModel item}) async {
    if (context == null) {
      return;
    }

    ///
    final cubit = context.read<MFastNotificationCubit>();
    final notificationTabCubit = context.read<NotificationTabCubit>();
    final notiID = item.data?.notificationId ?? '';
    if (item.data?.read != true) {
      final isSuccess = await cubit.readNotification(notiID: notiID);
      if (isSuccess == true) {
        notificationTabCubit.subtractUnread(category: item.data?.category);
      }
    }
    if (context.mounted) {
      handleOnTap(context, item: item);
    }
  }

  handleOnTap(BuildContext? context, {required MFastNotificationModel item}) async {
    if (context == null) {
      return;
    }

    if (!getItInstance.get<AuthCubit>().state.hasLoggedIn) {
      await getItInstance.get<AppRouter>().push(LoginRoute(onSuccess: () {}));
      if (!getItInstance.get<AuthCubit>().state.hasLoggedIn) {
        return;
      }
    }

    getItInstance.get<PushNotificationCubit>().refreshUnreadCount();

    ///
    final NotificationType? notificationType = NotificationType.values.firstWhereOrNull(
      (e) => e.name == item.data?.type,
    );

    switch (notificationType) {
      case NotificationType.changePass:
        if (context.mounted) {
          context.router.push(const SecurityRoute());
        }
        // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "EditPassword")); // NOT USED
        break;
      case NotificationType.moneyHistory:
        if (context.mounted) {
          context.router.push(IncomeRoute());
        }
        // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "AvailableMoney")); // NOT USED
        break;
      case NotificationType.pointsHistory:
        // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "AvailablePoints")); // NOT USED
        break;
      case NotificationType.employeeCard:
        // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "EmployeeCard")); // NOT USED
        break;
      case NotificationType.feedback:
        if (context.mounted) {
          context.router.push(ChatRoute());
        }
        // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "ChatFeedback"));
        break;
      case NotificationType.openView:
      case NotificationType.confirmCtv:
        Uri uri = Uri.parse(item.data?.extraData?.url ?? '');
        final Map<String, String> params = uri.queryParameters;
        if (params["view"] == "Flutter") {
          final path = Uri.encodeFull(params["path"] ?? "");
          if (context.mounted) {
            context.router.pushNamed(path);
          }
        } else if (params["view"] == 'account_setting_tab') {
          if (context.mounted) {
            context.router.pop();
            eventBus.fire(const ChangeMainTabBarPageEventBus(MainTabBarPageType.personalSetting));
          }
        } else {
          DeepLinkUtil.open(
            item.data?.extraData?.url ?? '',
            title: item.data?.extraData?.title,
          );
          // RedirectUtil.openMFastDeepLink(item.data?.extraData?.url);
        }
        break;
      case NotificationType.webLink:
      case NotificationType.plainTextWebLink:
        if (item.data?.extraData?.url?.isNotEmpty == true) {
          if (context.mounted) {
            context.pushRoute(WebViewRoute(
              title:
                  item.data?.extraData?.screenTitle?.isNotEmpty == true ? item.data?.extraData?.screenTitle : "MFast",
              url: item.data?.extraData?.url,
            ));
          }
        }
        break;
      case NotificationType.chatMessage:
        if (context.mounted) {
          onHandleSendMessage(context, item: item);
        }
        break;
      default:
        break;
    }
  }

  handleOnTapPush(BuildContext? context, {required MFastNotificationModel item}) async {
    if (context == null) {
      return;
    }

    if (!getItInstance.get<AuthCubit>().state.hasLoggedIn) {
      await getItInstance.get<AppRouter>().push(LoginRoute(onSuccess: () {}));
      if (!getItInstance.get<AuthCubit>().state.hasLoggedIn) {
        return;
      }
    }

    getItInstance.get<PushNotificationCubit>().refreshUnreadCount();

    ///
    try {
      final moeURL = item.notification?.data?['app_extra']?['moe_deeplink'] ?? '';
      if (TextUtils.isNotEmpty(moeURL)) {
        DeepLinkUtil.open(moeURL);
        return;
      }
    } on Exception catch (_) {}

    ///
    final NotificationType? notificationType = NotificationType.values.firstWhereOrNull(
      (e) => e.name == item.data?.type,
    );

    switch (notificationType) {
      case NotificationType.plainText:
      case NotificationType.changePass:
      case NotificationType.employeeCard:
      case NotificationType.plainTextWebLink:
        if (context.mounted) context.router.push(const MFastNotificationRoute());
        break;
      case NotificationType.moneyHistory:
        if (context.mounted) context.router.push(IncomeRoute());
        // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "AvailableMoney")); // NOT USED
        break;
      case NotificationType.pointsHistory:
        // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "AvailablePoints")); // NOT USED
        break;
      case NotificationType.feedback:
        if (context.mounted) context.router.push(ChatRoute());
        // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "ChatFeedback"));
        break;
      case NotificationType.openView:
      case NotificationType.confirmCtv:
        Uri uri = Uri.parse(item.data?.extraData?.url ?? '');
        final Map<String, String> params = uri.queryParameters;
        if (params["view"] == "Flutter") {
          final path = Uri.encodeFull(params["path"] ?? "");
          if (context.mounted) context.router.pushNamed(path);
        } else {
          DeepLinkUtil.open(
            item.data?.extraData?.url ?? '',
            title: item.data?.extraData?.title,
          );
          // RedirectUtil.openMFastDeepLink(item.data?.extraData?.url);
        }
        break;
      case NotificationType.webLink:
        final title =
            TextUtils.isNotEmpty(item.data?.extraData?.screenTitle) ? item.data?.extraData?.screenTitle : "MFast";
        final url = item.data?.extraData?.url ?? "";
        if (url.isNotEmpty) {
          if (context.mounted) {
            context.pushRoute(WebViewRoute(
              title: title,
              url: url,
            ));
          }
        }
        break;
      case NotificationType.webStack:
        final title = item.data?.extraData?.screenTitle ?? "MFast";
        final url = item.data?.extraData?.url ?? "";
        final urlsStack = item.data?.extraData?.urlsStack ?? [];
        final unbackableURLs = item.data?.extraData?.unbackableURLs ?? [];
        if (urlsStack.isNotEmpty) {
          if (context.mounted) {
            context.pushRoute(WebViewRoute(
              title: title,
              url: url,
              urlsStack: urlsStack,
              unbackableURLs: unbackableURLs,
            ));
          }
        }
        break;
      case NotificationType.chatMessage:
        if (context.mounted) {
          onHandleSendMessage(context, item: item);
        }
        break;
      default:
        break;
    }
  }

  onHandleSendMessage(BuildContext context, {required MFastNotificationModel item}) async {
    getItInstance.get<PushNotificationCubit>().getChatUnreadCount();
    context.pushRoute(ChatRoute(chatUserID: item.data?.extraData?.user?.id));
    if (item.data?.read != true) {
      // defer for create thread if not exist
      Future.delayed(const Duration(milliseconds: 200)).then((value) {
        getItInstance.get<PushNotificationCubit>().sendRSMMessage(
              senderID: item.data?.extraData?.user?.id,
              receiverID: AppData.instance.userID,
              text: '${item.data?.extraData?.title} (${item.data?.notificationId}):\n${item.data?.extraData?.body}',
            );
      });
    }
  }

  void onTriggerIncomingNotification({required MFastNotificationDataModel item}) {
    switch (item.getType()) {
      case NotificationType.openView:
        eventBus.fire(ReloadShipperBillLadingEventBus(
          action: item.extraData?.action,
          deliveryOrderCode: item.extraData?.deliveryOrderCode,
        ));
        break;
      default:
        break;
    }
  }
}
