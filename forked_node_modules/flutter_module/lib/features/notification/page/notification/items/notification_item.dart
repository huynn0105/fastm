import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/mfast/notification_type.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/deeplink_util.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/checkbox.dart';
import 'package:flutter_module/common/widgets/html_widget.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/notification/cubit/notification/mfast_notification_cubit.dart';
import 'package:flutter_module/features/notification/cubit/notification_tab/notification_tab_cubit.dart';
import 'package:flutter_module/features/notification/page/notification/mixin/tap_notification_mixin.dart';
import 'package:flutter_module/models/mfast/notification/mfast_notification_model.dart';
import 'package:flutter_module/routes/deeplink/mfast_deeplink_path.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:intl/intl.dart';

class NotificationItem extends StatefulWidget {
  const NotificationItem({
    super.key,
    required this.item,
    this.hideFlag = false,
    this.isDiffDay = false,
  });

  final MFastNotificationModel item;
  final bool hideFlag;
  final bool isDiffDay;

  @override
  State<NotificationItem> createState() => _NotificationItemState();
}

class _NotificationItemState extends State<NotificationItem> with TapNotificationMixin {
  bool isLoadingFlag = false;

  @override
  Widget build(BuildContext context) {
    final date = DateTime.fromMillisecondsSinceEpoch((widget.item.createdDate ?? 0) * 1000, isUtc: false);

    return Column(
      children: [
        if (widget.isDiffDay) ...[
          const SizedBox(
            height: 16,
          ),
          Row(
            children: [
              const Expanded(
                child: Divider(
                  color: UIColors.lightGray,
                  height: 1,
                  thickness: 1,
                ),
              ),
              Container(
                margin: const EdgeInsets.symmetric(
                  horizontal: 8,
                ),
                padding: const EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 4,
                ),
                decoration: BoxDecoration(
                  color: UIColors.lightGray,
                  borderRadius: BorderRadius.circular(32),
                ),
                child: Text(
                  DateFormat("dd/MM/yyyy").format(date),
                  style: UITextStyle.regular.copyWith(
                    fontSize: 12,
                    color: UIColors.grayText,
                  ),
                ),
              ),
              const Expanded(
                child: Divider(
                  color: UIColors.lightGray,
                  height: 1,
                  thickness: 1,
                ),
              ),
            ],
          ),
          const SizedBox(
            height: 16,
          ),
        ] else ...[
          const SizedBox(
            height: 8,
          ),
        ],
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: 32,
              height: 32,
              decoration: const BoxDecoration(
                color: UIColors.darkBlue,
                shape: BoxShape.circle,
              ),
              child: const Center(
                child: AppImage.asset(
                  asset: 'ic_mfast_white',
                  width: 24,
                  height: 24,
                ),
              ),
            ),
            const SizedBox(
              width: 8,
            ),
            Expanded(
              child: AppSplashButton(
                onTap: () {
                  onTap(context, item: widget.item);
                },
                child: Container(
                  padding: const EdgeInsets.only(
                    top: 12,
                    left: 12,
                    bottom: 12,
                    right: 8,
                  ),
                  decoration: BoxDecoration(
                      color: UIColors.white,
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(
                        color: widget.item.data?.read == true ? UIColors.white : UIColors.primaryColor,
                        width: 1,
                      )),
                  child: Column(
                    children: [
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Expanded(
                            child: Text(
                              widget.item.data?.extraData?.title ?? '',
                              style: UITextStyle.medium.copyWith(
                                fontSize: 16,
                                color: widget.item.data?.read == true ? UIColors.boolText : UIColors.primaryColor,
                              ),
                            ),
                          ),
                          const SizedBox(
                            width: 12,
                          ),
                          if (!widget.hideFlag) ...[
                            Stack(
                              children: [
                                SplashButton(
                                  isDisabled: isLoadingFlag,
                                  onTap: () {
                                    _onFlag(context, item: widget.item);
                                  },
                                  child: AppImage.asset(
                                    asset: widget.item.data?.flag == true ? "ic_star" : "ic_star_outline",
                                    width: 24,
                                    height: 24,
                                    color: widget.item.data?.flag == true ? UIColors.accentGreen : null,
                                  ),
                                ),
                                Visibility(
                                  visible: isLoadingFlag,
                                  child: Container(
                                    color: UIColors.white,
                                    padding: const EdgeInsets.all(4),
                                    width: 24,
                                    height: 24,
                                    child: const CircularProgressIndicator(
                                      strokeWidth: 2,
                                      valueColor: AlwaysStoppedAnimation<Color>(UIColors.accentGreen),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(
                              width: 12,
                            ),
                          ],
                          SplashButton(
                            child: Padding(
                              padding: const EdgeInsets.symmetric(vertical: 2),
                              child: AppCheckbox.circle(
                                value: widget.item.data?.read == true,
                                size: 20,
                                customBackgroundColor: UIColors.accentGreen,
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      HtmlWidget(
                        lineHeight: 1.3,
                        fontSize: 13,
                        data: widget.item.data?.extraData?.body ?? '',
                      ),
                      const SizedBox(
                        height: 14,
                      ),
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              DateFormat('hh:mm a').format(date),
                              style: UITextStyle.regular.copyWith(
                                fontSize: 13,
                                color: UIColors.grayText,
                              ),
                            ),
                          ),
                          Text(
                            "Khám phá ngay",
                            style: UITextStyle.regular.copyWith(
                              fontSize: 13,
                              color: UIColors.primaryColor,
                            ),
                          ),
                          const SizedBox(
                            width: 2,
                          ),
                          const AppImage.asset(
                            asset: 'ic_arrow_right',
                            width: 16,
                            height: 16,
                            color: UIColors.primaryColor,
                          )
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            )
          ],
        ),
      ],
    );
  }

  // _handleOnTap(BuildContext context, {required MFastNotificationModel item}) {
  //   final NotificationType? notificationType = NotificationType.values.firstWhereOrNull(
  //     (e) => e.name == item.data?.type,
  //   );
  //
  //   switch (notificationType) {
  //     case NotificationType.changePass:
  //       context.router.push(const SecurityRoute());
  //       // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "EditPassword"));
  //       break;
  //     case NotificationType.moneyHistory:
  //       context.router.push(const IncomeRoute());
  //       // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "AvailableMoney"));
  //       break;
  //     case NotificationType.pointsHistory:
  //       // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "AvailablePoints"));
  //       break;
  //     case NotificationType.employeeCard:
  //       // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "EmployeeCard"));
  //       break;
  //     case NotificationType.feedback:
  //       context.router.push(ChatRoute());
  //       // RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openView(screenName: "ChatFeedback"));
  //       break;
  //     case NotificationType.openView:
  //     case NotificationType.confirmCtv:
  //       Uri uri = Uri.parse(item.data?.extraData?.url ?? '');
  //       final Map<String, String> params = uri.queryParameters;
  //       if (params["view"] == "Flutter") {
  //         final path = Uri.encodeFull(params["path"] ?? "");
  //         context.router.pushNamed(path);
  //       } else {
  //         DeepLinkUtil.open(item.data?.extraData?.url ?? '', title: item.data?.extraData?.title);
  //         // RedirectUtil.openMFastDeepLink(item.data?.extraData?.url);
  //       }
  //       break;
  //     case NotificationType.webLink:
  //     case NotificationType.plainTextWebLink:
  //       if (item.data?.extraData?.url?.isNotEmpty == true) {
  //         context.pushRoute(WebViewRoute(
  //           title: item.data?.extraData?.screenTitle?.isNotEmpty == true ? item.data?.extraData?.screenTitle : "MFast",
  //           url: item.data?.extraData?.url,
  //         ));
  //       }
  //       break;
  //     case NotificationType.chatMessage:
  //       _onHandleSendMessage(context, item: item);
  //       break;
  //     default:
  //       break;
  //   }
  // }

  // _onTap(BuildContext context, {required MFastNotificationModel item}) async {
  //   final cubit = context.read<MFastNotificationCubit>();
  //   final notificationTabCubit = context.read<NotificationTabCubit>();
  //   final notiID = item.data?.notificationId ?? '';
  //   if (item.data?.read != true) {
  //     final isSuccess = await cubit.readNotification(notiID: notiID);
  //     if (isSuccess == true) {
  //       notificationTabCubit.subtractUnread(category: item.data?.category);
  //     }
  //   }
  //   if (context.mounted) {
  //     handleOnTap(context, item: item);
  //   }
  // }

  _onFlag(BuildContext context, {required MFastNotificationModel item}) async {
    final cubit = context.read<MFastNotificationCubit>();
    final notiID = item.data?.notificationId ?? '';
    final isFlag = !(item.data?.flag ?? false);

    setState(() {
      isLoadingFlag = true;
    });
    await cubit.flagNotification(notiID: notiID, isFlag: isFlag);
    setState(() {
      isLoadingFlag = false;
    });
  }

  // _onHandleSendMessage(BuildContext context, {required MFastNotificationModel item}) async {
  //   context.pushRoute(ChatRoute(chatUserID: item.data?.extraData?.user?.id));
  //   if (item.data?.read != true) {
  //     // defer for create thread if not exist
  //     Future.delayed(const Duration(milliseconds: 200)).then((value) {
  //       final cubit = context.read<MFastNotificationCubit>();
  //       cubit.updateSendRSMMessagePayload(
  //         senderID: item.data?.extraData?.user?.id,
  //         receiverID: AppData.instance.userID,
  //         text: '${item.data?.extraData?.title} (${item.data?.notificationId}):\n${item.data?.extraData?.body}',
  //       );
  //       cubit.sendRSMMessage();
  //     });
  //   }
  // }
}
