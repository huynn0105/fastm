import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/mfast/notification_category.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/notification/cubit/notification/mfast_notification_cubit.dart';
import 'package:flutter_module/features/notification/cubit/notification_tab/notification_tab_cubit.dart';
import 'package:flutter_module/features/notification/cubit/push_notification/push_notification_cubit.dart';
import 'package:flutter_module/features/notification/page/notification/components/empty_list_notification_component.dart';
import 'package:flutter_module/features/notification/page/notification/components/list_notification_component.dart';

@RoutePage()
class MFastNotificationSystemPage extends StatefulWidget implements AutoRouteWrapper {
  const MFastNotificationSystemPage({
    super.key,
    required this.category,
  });

  final NotificationCategory category;

  @override
  State<MFastNotificationSystemPage> createState() => _MFastNotificationSystemPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (context) {
        final cubit = MFastNotificationCubit();
        cubit.initCubit(category: category);
        cubit.fetchNotifications();
        return cubit;
      },
      child: this,
    );
  }
}

class _MFastNotificationSystemPageState extends State<MFastNotificationSystemPage> {
  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<NotificationTabCubit, NotificationTabState>(
      listener: (context, state) {
        if (state.isTriggerShowAll) {
          _onRefresh(context);
        }
        if (state.isTriggerShowUnread) {
          _onRefresh(context, isUnread: true);
        }
        if (state.isTriggerReadAll) {
          _onReadAllNotifications(context);
        }
      },
      child: BlocBuilder<MFastNotificationCubit, MFastNotificationState>(
        builder: (context, state) {
          return Stack(
            children: [
              Builder(
                builder: (context) {
                  if (state.status.isLoading) {
                    return const LoadingWidget.withoutText();
                  }

                  if (state.notifications.isEmpty) {
                    return LoadMoreWidget(
                      onRefresh: () {
                        return _onRefresh(context);
                      },
                      child: const EmptyListNotificationComponent(),
                    );
                  }

                  return Stack(
                    children: [
                      ListNotificationComponent(
                        data: state.notifications,
                        category: widget.category,
                        onRefresh: () {
                          return _onRefresh(context);
                        },
                        onLoadMore: () async {
                          return _onLoadMore(context);
                        },
                      ),
                      Visibility(
                        visible: state.readAllStatus.isLoading,
                        child: const LoadingWidget.withoutText(),
                      ),
                    ],
                  );
                },
              ),
              Visibility(
                visible: context.read<MFastNotificationCubit>().payload.isUnread == true,
                child: Positioned(
                  bottom: 100,
                  left: 0,
                  right: 0,
                  child: Center(
                    child: SplashButton(
                      isDisabled: state.status.isLoading,
                      onTap: () {
                        _onRefresh(context);
                      },
                      child: Container(
                        decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(24),
                            border: Border.all(
                              color: UIColors.primaryColor,
                            )),
                        padding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 12,
                        ),
                        child: Text(
                          "Xem tất cả",
                          style: UITextStyle.medium.copyWith(
                            color: UIColors.primaryColor,
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ],
          );
        },
      ),
    );
  }

  _onRefresh(BuildContext context, {bool isUnread = false}) {
    final cubit = context.read<MFastNotificationCubit>();
    cubit.updatePayload(isUnread: isUnread);
    return cubit.fetchNotifications(showLoading: false);
  }

  _onLoadMore(BuildContext context) async {
    final cubit = context.read<MFastNotificationCubit>();
    final length = cubit.state.notifications.length;
    await cubit.fetchNotifications(loadMore: true, showLoading: false);
    return length != cubit.state.notifications.length;
  }

  _onReadAllNotifications(BuildContext context) async {
    final cubit = context.read<MFastNotificationCubit>();
    final notificationTabCubit = context.read<NotificationTabCubit>();
    final isSuccess = await cubit.readAllNotifications();
    if (isSuccess) {
      notificationTabCubit.clearUnread(category: widget.category.name);
      getItInstance.get<PushNotificationCubit>().getNotificationUnreadCount();
    }
  }
}
