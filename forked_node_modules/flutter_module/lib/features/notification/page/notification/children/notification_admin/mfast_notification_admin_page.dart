import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/mfast/notification_category.dart';
import 'package:flutter_module/common/enum/mfast/notification_tab_type.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/notification/cubit/notification/mfast_notification_cubit.dart';
import 'package:flutter_module/features/notification/cubit/notification_tab/notification_tab_cubit.dart';
import 'package:flutter_module/features/notification/cubit/push_notification/push_notification_cubit.dart';
import 'package:flutter_module/features/notification/page/notification/components/empty_list_notification_component.dart';
import 'package:flutter_module/features/notification/page/notification/components/list_notification_component.dart';
import 'package:flutter_module/features/notification/page/notification/components/list_select_type_component.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/widgets/mtrade_text_field.dart';

@RoutePage()
class MFastNotificationAdminPage extends StatefulWidget implements AutoRouteWrapper {
  const MFastNotificationAdminPage({
    super.key,
    required this.category,
  });

  final NotificationCategory category;

  @override
  State<MFastNotificationAdminPage> createState() => _MFastNotificationAdminPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (context) {
        final cubit = MFastNotificationCubit();
        cubit.initCubit(category: category);
        return cubit;
      },
      child: this,
    );
  }
}

class _MFastNotificationAdminPageState extends State<MFastNotificationAdminPage> {
  List<DataWrapper> tabsTitle = [];
  String? tabIdSelected;
  TextEditingController controller = TextEditingController();

  @override
  void initState() {
    super.initState();
    _initTabs(context);
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Container(
          padding: const EdgeInsets.symmetric(vertical: 8),
          decoration: const BoxDecoration(
            color: UIColors.white,
            borderRadius: BorderRadius.vertical(
              bottom: Radius.circular(16),
            ),
          ),
          child: Column(
            children: [
              Padding(
                padding: const EdgeInsets.symmetric(
                  horizontal: 16,
                ),
                child: MTradeSearchTextField(
                  controller: controller,
                  fillColor: UIColors.background,
                  hintText: 'Tìm theo nội dung thông báo',
                  onSubmitted: (p0) {
                    _onRefresh(context, keyword: p0);
                  },
                ),
              ),
              const SizedBox(
                height: 8,
              ),
              ListSelectTypeComponent(
                idSelected: tabIdSelected,
                data: tabsTitle.where((element) => element.id != NotificationTabType.all.id).toList(),
                onTapItem: (item) {
                  _onTapTab(context, tab: item);
                },
              ),
            ],
          ),
        ),
        Expanded(
          child: BlocListener<NotificationTabCubit, NotificationTabState>(
            listener: (context, state) {
              if (state.isTriggerShowAll) {
                _initTabs(context);
              }
              if (state.isTriggerShowUnread) {
                _onRefresh(context, isUnread: true);
              }
              if (state.isTriggerReadAll) {
                _onReadAllNotifications(context);
              }
            },
            child: BlocBuilder<MFastNotificationCubit, MFastNotificationState>(
              builder: (context, state) {
                return Stack(
                  children: [
                    Builder(
                      builder: (context) {
                        if (state.status.isLoading) {
                          return const LoadingWidget.withoutText();
                        }

                        if (state.notifications.isEmpty) {
                          return LoadMoreWidget(
                            onRefresh: () {
                              return _onRefresh(context);
                            },
                            child: EmptyListNotificationComponent(
                              type: tabIdSelected,
                            ),
                          );
                        }

                        return Stack(
                          children: [
                            ListNotificationComponent(
                              data: state.notifications,
                              category: widget.category,
                              onRefresh: () {
                                return _onRefresh(context, showLoading: false);
                              },
                              onLoadMore: () {
                                return _onLoadMore(context);
                              },
                            ),
                            Visibility(
                              visible: state.readAllStatus.isLoading,
                              child: const LoadingWidget.withoutText(),
                            ),
                          ],
                        );
                      },
                    ),
                    Visibility(
                      visible: context.read<MFastNotificationCubit>().payload.isUnread == true,
                      child: Positioned(
                        bottom: 100,
                        left: 0,
                        right: 0,
                        child: Center(
                          child: SplashButton(
                            isDisabled: state.status.isLoading,
                            onTap: () {
                              _initTabs(context, isUnread: false);
                            },
                            child: Container(
                              decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(24),
                                  border: Border.all(
                                    color: UIColors.primaryColor,
                                  )),
                              padding: const EdgeInsets.symmetric(
                                horizontal: 16,
                                vertical: 12,
                              ),
                              child: Text(
                                "Xem tất cả",
                                style: UITextStyle.medium.copyWith(
                                  color: UIColors.primaryColor,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ],
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  _initTabs(BuildContext context, {bool? isUnread}) {
    tabsTitle = NotificationTabType.values.map((e) => DataWrapper(id: e.id, value: e.name)).toList();
    setState(() {
      tabIdSelected = tabsTitle.first.id;
    });
    controller.text = "";
    _onRefresh(context, type: tabIdSelected, keyword: "", isUnread: isUnread);
  }

  _onTapTab(BuildContext context, {required DataWrapper tab}) {
    final String? newTabId;
    if (tab.id == tabIdSelected) {
      newTabId = tabsTitle.first.id;
    } else {
      newTabId = tab.id;
    }
    _onRefresh(context, type: newTabId);
    setState(() {
      tabIdSelected = newTabId;
    });
  }

  _onRefresh(
    BuildContext context, {
    String? type,
    String? keyword,
    bool? isUnread,
    bool showLoading = true,
  }) {
    final cubit = context.read<MFastNotificationCubit>();
    cubit.updatePayload(
      type: type ?? tabIdSelected,
      keyword: keyword ?? "",
      isUnread: isUnread,
    );
    return cubit.fetchNotifications(showLoading: showLoading);
  }

  _onLoadMore(BuildContext context) async {
    final cubit = context.read<MFastNotificationCubit>();
    final length = cubit.state.notifications.length;
    await cubit.fetchNotifications(loadMore: true, showLoading: false);
    return length != cubit.state.notifications.length;
  }

  _onReadAllNotifications(BuildContext context) async {
    final cubit = context.read<MFastNotificationCubit>();
    final notificationTabCubit = context.read<NotificationTabCubit>();
    final isSuccess = await cubit.readAllNotifications();
    if (isSuccess) {
      notificationTabCubit.clearUnread(category: widget.category.name);
      getItInstance.get<PushNotificationCubit>().getNotificationUnreadCount();

    }
  }
}
