import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/models/mfast/notification/mfast_notification_model.dart';
import 'package:flutter_module/models/mfast/notification/mfast_notification_setting_model.dart';
import 'package:flutter_module/services/api/api_provider.dart';
import 'package:flutter_module/services/api/notification/payload/get_chat_unread_count_payload.dart';
import 'package:flutter_module/services/api/notification/payload/mfast_notification_payload.dart';
import 'package:flutter_module/services/api/notification/payload/mfast_send_rsm_message_payload.dart';
import 'package:flutter_module/services/api/notification/payload/register_fcm_token_payload.dart';

class NotificationRepository {
  Future<BaseModel<List<MFastNotificationModel>>> getNotifications({
    required MFastNotificationPayload payload,
  }) {
    return ApiProvider.instance.notification.getNotifications(payload: payload);
  }

  Future<BaseModel<bool>> readNotification({
    required String notiID,
  }) {
    return ApiProvider.instance.notification.readNotification(
      notiID: notiID,
    );
  }

  Future<BaseModel<bool>> flagNotification({
    required String notiID,
    required bool isFlag,
  }) {
    return ApiProvider.instance.notification.flagNotification(
      notiID: notiID,
      isFlag: isFlag,
    );
  }

  Future<BaseModel<bool>> readAllNotifications({
    required String category,
  }) {
    return ApiProvider.instance.notification.readAllNotifications(
      category: category,
    );
  }

  Future<BaseModel<List<MFastNotificationSettingModel>>> getNotificationSettings() {
    return ApiProvider.instance.notification.getNotificationSettings();
  }

  Future<BaseModel<bool>> updateNotificationSettings({
    required String categoryID,
    required String status,
  }) {
    return ApiProvider.instance.notification.updateNotificationSettings(
      categoryID: categoryID,
      status: status,
    );
  }

  Future<BaseModel<Map<String, int>>> getUnreadNotification() {
    return ApiProvider.instance.notification.getUnreadNotification();
  }

  Future<BaseModel<bool>> sendRSMMessage({
    required MFastSendRSMMessagePayload payload,
  }) {
    return ApiProvider.instance.notification.sendRSMMessage(payload: payload);
  }

  Future<BaseModel<bool>> registerFcmToken(RegisterFcmTokenPayload payload) {
    return ApiProvider.instance.notification.registerFcmToken(payload);
  }

  Future<BaseModel<int>> getChatUnreadCount(GetChatUnreadCountPayload payload) {
    return ApiProvider.instance.notification.getChatUnreadCount(payload);
  }

  Future<BaseModel<int>> getNotificationUnreadCount() {
    return ApiProvider.instance.notification.getNotificationUnreadCount();
  }
}
