import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/enum/mfast/notification_category.dart';
import 'package:flutter_module/features/notification/repository/notification_repository.dart';
import 'package:flutter_module/models/mfast/notification/mfast_notification_model.dart';
import 'package:flutter_module/services/api/notification/payload/mfast_notification_payload.dart';
import 'package:flutter_module/services/api/notification/payload/mfast_send_rsm_message_payload.dart';

part 'mfast_notification_state.dart';

class MFastNotificationCubit extends Cubit<MFastNotificationState> {
  MFastNotificationCubit() : super(const MFastNotificationState());

  final NotificationRepository _repository = NotificationRepository();
  MFastNotificationPayload _payload = const MFastNotificationPayload();
  MFastSendRSMMessagePayload _sendRSMMessagePayload = const MFastSendRSMMessagePayload();

  initCubit({NotificationCategory? category}) {
    updatePayload(
      category: category?.name,
    );
  }

  updatePayload({
    String? category,
    String? type,
    bool? isUnread,
    int? page,
    String? keyword,
  }) {
    _payload = _payload.copyWith(
      category: category,
      type: type,
      isUnread: isUnread,
      page: page,
      keyword: keyword,
    );
  }

  updateIsUnread({
    bool? isUnread,
  }) {
    _payload = _payload.copyWith(
      isUnread: isUnread,
    );
  }

  fetchNotifications({bool loadMore = false, bool showLoading = true}) async {
    updatePayload(page: loadMore ? _payload.page + 1 : 1);
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }
    final result = await _repository.getNotifications(payload: _payload);

    if (result.status) {
      final data = loadMore ? [...state.notifications, ...?result.data] : result.data;
      emit(state.copyWith(
        status: BlocStatus.success,
        notifications: data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  readNotification({required String notiID}) async {
    final result = await _repository.readNotification(notiID: notiID);
    if (result.status) {
      List<MFastNotificationModel> notifications = [...state.notifications];
      notifications = notifications.map((e) {
        if (notiID == e.data?.notificationId) {
          return e.copyWith(data: e.data?.copyWith(read: true));
        }
        return e;
      }).toList();
      emit(state.copyWith(
        notifications: notifications,
      ));
    }
    return result.status;
  }

  flagNotification({required String notiID, required bool isFlag}) async {
    final result = await _repository.flagNotification(notiID: notiID, isFlag: isFlag);
    if (result.status) {
      List<MFastNotificationModel> notifications = [...state.notifications];
      notifications = notifications.map((e) {
        if (notiID == e.data?.notificationId) {
          return e.copyWith(data: e.data?.copyWith(flag: isFlag));
        }
        return e;
      }).toList();
      emit(state.copyWith(
        notifications: notifications,
      ));
    }
    return result.status;
  }

  readAllNotifications() async {
    emit(state.copyWith(
      readAllStatus: BlocStatus.loading,
    ));

    final result = await _repository.readAllNotifications(
      category: _payload.category ?? "",
    );
    if (result.status) {
      List<MFastNotificationModel> notifications = [...state.notifications];
      notifications = notifications.map((e) {
        return e.copyWith(data: e.data?.copyWith(read: true));
      }).toList();
      emit(state.copyWith(
        readAllStatus: BlocStatus.success,
        notifications: notifications,
      ));
    } else {
      emit(state.copyWith(
        readAllStatus: BlocStatus.failure,
      ));
    }
    return result.status;
  }

  updateSendRSMMessagePayload({
    String? senderID,
    String? receiverID,
    String? text,
  }) {
    _sendRSMMessagePayload = _sendRSMMessagePayload.copyWith(
      senderID: senderID,
      receiverID: receiverID,
      text: text,
    );
  }

  sendRSMMessage() async {
    final result = await _repository.sendRSMMessage(
      payload: _sendRSMMessagePayload,
    );
    if (result.status) {
    } else {}
  }

  MFastNotificationPayload get payload => _payload;
}
