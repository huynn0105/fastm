import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/features/notification/repository/notification_repository.dart';
import 'package:flutter_module/services/api/notification/payload/get_chat_unread_count_payload.dart';
import 'package:flutter_module/services/api/notification/payload/mfast_send_rsm_message_payload.dart';

part 'push_notification_state.dart';

class PushNotificationCubit extends Cubit<PushNotificationState> {
  PushNotificationCubit() : super(const PushNotificationState());

  final NotificationRepository _repository = NotificationRepository();

  refreshUnreadCount() {
    final hasLoggedIn = getItInstance.get<AuthCubit>().state.hasLoggedIn;
    if (hasLoggedIn) {
      getChatUnreadCount();
      getNotificationUnreadCount();
    }
  }

  getChatUnreadCount() async {
    final result = await _repository.getChatUnreadCount(GetChatUnreadCountPayload(
      firebaseToken: AppData.instance.firebaseAuthToken,
      withoutThreadIDs: AppData.instance.appInfo.systemThreadId,
    ));
    if (result.status) {
      emit(state.copyWith(
        chatUnreadCount: result.data,
      ));
    }
  }

  getNotificationUnreadCount() async {
    final result = await _repository.getNotificationUnreadCount();
    if (result.status) {
      emit(state.copyWith(
        notificationUnreadCount: result.data,
      ));
    }
  }

  sendRSMMessage({
    String? senderID,
    String? receiverID,
    String? text,
  }) async {
    await _repository.sendRSMMessage(
      payload: MFastSendRSMMessagePayload(
        senderID: senderID,
        receiverID: receiverID,
        text: text,
      ),
    );
  }

  clearData() {
    emit(const PushNotificationState());
  }
}
