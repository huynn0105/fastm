import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/notification/repository/notification_repository.dart';
import 'package:flutter_module/models/mfast/notification/mfast_notification_setting_model.dart';

part 'notification_setting_state.dart';

class NotificationSettingCubit extends Cubit<NotificationSettingState> {
  NotificationSettingCubit() : super(const NotificationSettingState());

  final NotificationRepository _repository = NotificationRepository();

  fetchNotificationSettings() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.getNotificationSettings();

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        settings: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  changeNotificationSetting({
    required String categoryID,
    required bool status,
  }) async {
    emit(state.copyWith(
      updateStatus: BlocStatus.loading,
    ));

    final result = await _repository.updateNotificationSettings(
      categoryID: categoryID,
      status: status == true ? "1" : "0",
    );

    if (result.status) {
      final settings = [...state.settings];
      emit(state.copyWith(
        updateStatus: BlocStatus.success,
        settings: settings.map((e) {
          if (e.iD == categoryID) {
            return e.copyWith(subsStatus: status == true);
          }

          return e;
        }).toList(),
      ));
    }
    emit(state.copyWith(
      updateStatus: BlocStatus.failure,
    ));
  }
}
