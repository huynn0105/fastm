import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/client/client_tab_type.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/features/client/cubit/client/client_cubit.dart';
import 'package:flutter_module/features/client/cubit/client_detail/client_detail_cubit.dart';
import 'package:flutter_module/features/client/cubit/client_detail_middle/client_detail_middle_cubit.dart';
import 'package:flutter_module/features/client/cubit/client_list/client_list_cubit.dart';
import 'package:flutter_module/features/client/pages/client_detail/client_detail_page.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/client_empty_card.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/client_waiting_card.dart';
import 'package:flutter_module/features/client/pages/client_trash_detail/client_trash_detail_page.dart';
import 'package:flutter_module/features/client/pages/client_unclassified_detail/client_unclassified_detail_page.dart';

@RoutePage()
class ClientDetailMiddlePage extends StatelessWidget implements AutoRouteWrapper {
  const ClientDetailMiddlePage({
    super.key,
    this.type,
    @QueryParam('ID') this.clientID,
    this.initialIndex,
    @QueryParam('itemID') this.itemID,
  });
  final ClientDetailType? type;
  final String? clientID;
  final String? itemID;
  final int? initialIndex;

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) {
            final cubit = ClientDetailMiddleCubit();
            if (clientID != null && itemID != null) {
              cubit
                ..updatePayload(id: clientID, itemID: itemID)
                ..fetchData();
            }
            return cubit;
          },
        ),
        BlocProvider(
          create: (_) => ClientListLocalCubit(),
        ),
        BlocProvider(
          create: (_) => ClientDetailCubit(),
        ),
        BlocProvider(
          create: (_) => ClientLocalCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<ClientDetailMiddleCubit, ClientDetailMiddleState>(
      listener: (context, state) {
        if (state.status.isFailure) {
          DialogProvider.instance.showMTradeErrorDialog(
            context: context,
            message: state.errorMessage,
          );
          return;
        }
      },
      builder: (context, state) {
        if (state.data?.group == ClientDetailType.TRASH.code || type == ClientDetailType.TRASH) {
          return ClientTrashDetailPage(
            clientDetail: state.data,
            clientID: clientID,
            initialIndex: initialIndex,
          );
        }
        if (state.data?.group == ClientDetailType.PRIORITY.code ||
            state.data?.group == ClientTabType.all.name ||
            type == ClientDetailType.PRIORITY) {
          return ClientDetailPage(
            clientDetail: state.data,
            clientID: clientID,
            initialIndex: initialIndex,
          );
        }
        if (state.data?.group == ClientDetailType.PAGE_QC.code || type == ClientDetailType.PAGE_QC) {
          return ClientUnclassifiedDetailPage(
            clientDetail: state.data,
            clientID: clientID,
            initialIndex: initialIndex,
          );
        }
        return Scaffold(
          appBar: MFastAdvanceAppBar(
            context: context,
            title: "",
          ),
          body: state.status.isFailure ? const ClientEmptyCard() : const ClientWaitingCard(),
        );
      },
    );
  }
  //}
}
