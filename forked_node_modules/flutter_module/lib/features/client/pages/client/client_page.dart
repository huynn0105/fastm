import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:extended_nested_scroll_view/extended_nested_scroll_view.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/features/client/cubit/client/client_cubit.dart';
import 'package:flutter_module/features/client/cubit/client_list/client_list_cubit.dart';
import 'package:flutter_module/general_config.dart';
import 'package:flutter_module/routes/routes.gr.dart';

import '../../../../common/colors.dart';
import '../../../../common/size.dart';
import 'components/filter_component.dart';
import 'components/marketing_component.dart';
import 'components/tabbar_component.dart';
import 'components/waiting_classify_component.dart';

part 'components/no_login.dart';

@RoutePage()
class ClientPage extends StatefulWidget {
  const ClientPage({super.key});

  @override
  State<ClientPage> createState() => _ClientPageState();
}

class _ClientPageState extends State<ClientPage> {
  late final StreamSubscription _clientSub;

  @override
  void initState() {
    super.initState();
    _clientSub = eventBus.on<ClientEventBus>().listen(_onEventBusListen);
  }

  @override
  void dispose() {
    _clientSub.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<AuthCubit, AuthState>(
      builder: (context, state) {
        bool hasLoggedIn = state.hasLoggedIn;

        ///
        if (!hasLoggedIn) {
          return const _ClientNoLogin();
        }

        ///
        return Scaffold(
          resizeToAvoidBottomInset: false,
          backgroundColor: UIColors.background,
          body: Stack(
            children: [
              Positioned(
                top: AppSize.instance.safeTop + kToolbarHeight * 2 - 12,
                left: 0,
                right: 0,
                bottom: 0,
                child: SafeArea(
                  top: false,
                  child: ExtendedNestedScrollView(
                    onlyOneScrollInBody: true,
                    physics: AppConstants.physics,
                    headerSliverBuilder: (_, __) {
                      return [
                        const SliverToBoxAdapter(
                          child: WaitingClassifyComponent(
                            margin: EdgeInsets.symmetric(horizontal: 16),
                          ),
                        ),
                        const SliverToBoxAdapter(
                          child: SizedBox(
                            height: 16,
                          ),
                        ),
                      ];
                    },
                    body: const TabbarComponent(),
                  ),
                ),
              ),
              const Positioned(
                right: 16,
                bottom: 32,
                child: SafeArea(
                  child: MarketingComponent(),
                ),
              ),
              const Positioned.fill(
                child: FilterComponent(),
              ),
            ],
          ),
        );
      },
    );
  }

  void _onEventBusListen(ClientEventBus event) {
    if (event is RefreshGlobalClientFilterEventBus) {
      getItInstance.get<ClientGlobalCubit>().getFilterClient();
      return;
    }
    if (event is RefreshGlobalClientListEventBus) {
      getItInstance.get<ClientListGlobalCubit>().fetchData();
      return;
    }
  }
}
