import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/client/client_statistic_chart_filter.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/format_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/client/cubit/statistic_by_date/statistic_by_date_cubit.dart';
import 'package:flutter_module/features/client/pages/client/children/client_statistic/components/line_chart_component.dart';
import 'package:flutter_module/features/client/pages/client/items/checkbox_sheet_item.dart';

class ClientStatisticByDateComponent extends StatelessWidget {
  const ClientStatisticByDateComponent({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<StatisticByDateCubit, StatisticByDateState>(
      builder: (context, state) {
        final cubit = context.read<StatisticByDateCubit>();
        if (cubit.state.status.isInitial) {
          WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
            cubit
              ..updateTypePayload(state.selectedType)
              ..fetchData();
          });
        }

        final total = state.statistic?.total ?? 0;
        final percent = state.statistic?.percent ?? 0;
        final turn = percent > 0 ? 0 : 2;
        final color = percent > 0 ? UIColors.green : UIColors.red;
        return Padding(
          padding: const EdgeInsets.symmetric(
            horizontal: 16,
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                "Khách hàng theo thời gian",
                style: UITextStyle.semiBold.copyWith(
                  fontSize: 18,
                ),
              ),
              const SizedBox(
                height: 8,
              ),
              Container(
                decoration: BoxDecoration(
                  color: UIColors.white,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  children: [
                    const SizedBox(
                      height: 16,
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Khách hàng được tạo mới",
                                  style: UITextStyle.regular.copyWith(
                                    color: UIColors.grayText,
                                  ),
                                ),
                                Row(
                                  children: [
                                    Text(
                                      "${FormatUtil.doubleFormat(total.toDouble())} người",
                                      style: UITextStyle.semiBold.copyWith(
                                        fontSize: 18,
                                      ),
                                    ),
                                    const SizedBox(
                                      width: 8,
                                    ),
                                    RotatedBox(
                                      quarterTurns: turn,
                                      child: AppImage.asset(
                                        asset: "ic_arrow_long_up",
                                        width: 16,
                                        height: 16,
                                        color: color,
                                      ),
                                    ),
                                    const SizedBox(
                                      width: 2,
                                    ),
                                    Text(
                                      "${FormatUtil.doubleFormat(percent.abs().toDouble())}%",
                                      style: UITextStyle.semiBold.copyWith(
                                        fontSize: 13,
                                        color: color,
                                      ),
                                    ),
                                  ],
                                )
                              ],
                            ),
                          ),
                          SplashButton(
                            onTap: () => _onShowFilterSheet(context),
                            borderRadius: BorderRadius.circular(8),
                            child: Container(
                              width: 120,
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(8),
                                color: UIColors.background,
                              ),
                              padding: const EdgeInsets.symmetric(
                                horizontal: 8,
                                vertical: 6,
                              ),
                              child: Row(
                                children: [
                                  const AppImage.asset(
                                    asset: 'ic_filter',
                                    width: 20,
                                    height: 20,
                                  ),
                                  const SizedBox(
                                    width: 8,
                                  ),
                                  Text(
                                    state.selectedType == ClientStatisticChartFilterType.year
                                        ? "Năm ${DateTime.now().year}"
                                        : 'Tháng ${DateTime.now().month}',
                                    style: UITextStyle.regular.copyWith(
                                      color: UIColors.grayText,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          )
                        ],
                      ),
                    ),
                    const SizedBox(
                      height: 12,
                    ),
                    state.status == BlocStatus.success
                        ? LineChartComponent(
                            statistic: state.statistic,
                            selectedType: state.selectedType,
                          )
                        : SizedBox(
                            height: 224,
                            width: AppSize.instance.width * 2,
                            child: const Center(
                              child: SizedBox(
                                width: 40,
                                height: 40,
                                child: CircularProgressIndicator(),
                              ),
                            ),
                          ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  _onShowFilterSheet(BuildContext context) async {
    final cubit = context.read<StatisticByDateCubit>();
    final result = await BottomSheetProvider.instance.show(
      context,
      title: 'Bộ lọc',
      enabledOnDone: true,
      onDone: () {
        Navigator.of(context).pop(true);
      },
      closeOnRight: false,
      child: BlocProvider.value(
        value: cubit..fillSelectingType(),
        child: BlocBuilder<StatisticByDateCubit, StatisticByDateState>(
          builder: (context, state) {
            return Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: ClientStatisticChartFilterType.values.map(
                  (e) {
                    final isSelected = e == cubit.state.selectingType;
                    return CheckboxSheetItem(
                      title: e.label,
                      value: isSelected,
                      onChange: (_) => cubit.changeType(e),
                    );
                  },
                ).toList(),
              ),
            );
          },
        ),
      ),
    );
    if (result == true) {
      cubit
        ..fillSelectedType()
        ..fetchData();
    } else {
      cubit.fillSelectingType();
    }
  }
}
