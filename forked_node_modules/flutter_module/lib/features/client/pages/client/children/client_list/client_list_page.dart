import 'package:auto_route/annotations.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/client/client_tab_type.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/common/widgets/sliver_list.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/client/cubit/client/client_cubit.dart';
import 'package:flutter_module/features/client/cubit/client_list/client_list_cubit.dart';
import 'package:flutter_module/general_config.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';

import '../../../../../../common/colors.dart';
import 'items/client_user_item.dart';

@RoutePage()
class ClientListPage extends StatefulWidget {
  const ClientListPage({Key? key}) : super(key: key);

  @override
  State<ClientListPage> createState() => _ClientListPageState();
}

class _ClientListPageState extends State<ClientListPage> {
  final RefreshController controller = RefreshController();

  @override
  void initState() {
    super.initState();

    /// TODO: trigger load when tab bar lazy
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final filters = getItInstance.get<ClientGlobalCubit>().state.filterSelected;
      final cubit = context.read<ClientListGlobalCubit>();
      controller.resetNoData();
      cubit.updatedPayload(filters: filters);
      cubit.fetchData();
    });
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<ClientGlobalCubit, ClientState>(
      listenWhen: (previous, current) => previous.filterSelected != current.filterSelected,
      listener: (context, state) {
        final cubit = context.read<ClientListGlobalCubit>();
        controller.resetNoData();
        cubit.updatedPayload(filters: state.filterSelected);
        cubit.fetchData();
      },
      child: BlocListener<ClientListGlobalCubit, ClientListState>(
        listenWhen: (pre, cur) {
          return pre.priorityStatus != cur.priorityStatus;
        },
        listener: (context, state) {
          if (state.priorityStatus.isFailure) {
            DialogProvider.instance.showMTradeErrorDialog(
              context: context,
              message: state.errorMessage,
            );
          }
        },
        child: BlocBuilder<ClientListGlobalCubit, ClientListState>(
          builder: (context, state) {
            final cubit = context.read<ClientListGlobalCubit>();
            if (state.status.isInitial) {
              WidgetsBinding.instance.addPostFrameCallback((_) {
                final filters = getItInstance.get<ClientGlobalCubit>().state.filterSelected;
                cubit.updatedPayload(filters: filters);
                cubit.fetchData();
              });
            }

            ///
            final data = state.data;
            return Stack(
              children: [
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: LoadMoreWidget(
                    refreshController: controller,
                    onRefresh: () async {
                      eventBus.fire(RefreshGlobalClientFilterEventBus());
                      return cubit.refreshData();
                    },
                    onLoadMore: () => cubit.loadMoreData(),
                    child: CustomScrollView(
                      physics: const ClampingScrollPhysics(),
                      slivers: [
                        SliverToBoxAdapter(
                          child: Text(
                            "Danh sách khách hàng",
                            style: UITextStyle.semiBold.copyWith(
                              fontSize: 18,
                            ),
                          ),
                        ),
                        const SliverToBoxAdapter(
                          child: SizedBox(
                            height: 10,
                          ),
                        ),
                        SliverToBoxAdapter(
                          child: Container(
                            height: 48,
                            clipBehavior: Clip.hardEdge,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(50),
                            ),
                            child: TextField(
                              cursorWidth: 2,
                              cursorHeight: 25,
                              cursorColor: UIColors.primaryColor,
                              cursorRadius: const Radius.circular(8),
                              style: UITextStyle.medium.copyWith(
                                fontSize: 16,
                              ),
                              onChanged: cubit.onKeySearchChanged,
                              decoration: InputDecoration(
                                filled: true,
                                fillColor: UIColors.white,
                                hintText: "Tìm nhanh theo tên hoặc số điện thoại",
                                hintStyle: UITextStyle.medium.copyWith(
                                  fontSize: 16,
                                  height: 1.5,
                                  color: UIColors.grayText,
                                ),
                                border: InputBorder.none,
                                focusedBorder: OutlineInputBorder(
                                  borderSide: const BorderSide(
                                    color: UIColors.primaryColor,
                                  ),
                                  borderRadius: BorderRadius.circular(50),
                                ),
                                contentPadding: const EdgeInsets.symmetric(
                                  vertical: 8,
                                  horizontal: 16,
                                ),
                                prefixIconConstraints: const BoxConstraints(
                                  maxWidth: 48,
                                  maxHeight: 48,
                                ),
                                prefixIcon: const Padding(
                                  padding: EdgeInsets.symmetric(horizontal: 12),
                                  child: AppImage.asset(
                                    asset: "ic_search_outline",
                                    width: 24,
                                    height: 24,
                                    color: UIColors.grayText,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                        const SliverToBoxAdapter(
                          child: SizedBox(
                            height: 16,
                          ),
                        ),
                        SliverVisibility(
                          visible: !state.status.showLoading && data.isNotEmpty,
                          sliver: SeparatedSliverList(
                            separatorBuilder: (_, __) => const Divider(
                              height: 16,
                              indent: 52,
                            ),
                            itemBuilder: (context, index) {
                              final item = data[index];
                              return ClientUserItem(
                                index: index,
                                icon: item.iconURL ?? '',
                                clientID: item.id ?? '',
                                fullname: item.fullName ?? '',
                                mobilePhone: item.mobilePhone ?? '',
                                description: item.statusText ?? '',
                                isPriority: item.getIsPriority(),
                                onPriorityToggle: (value) {
                                  cubit.updatePriority(clientID: item.id ?? '', isPriority: value);
                                },
                              );
                            },
                            itemCount: data.length,
                          ),
                        ),
                        SliverVisibility(
                          visible: !state.enabledLoadMore && data.isNotEmpty,
                          sliver: SliverToBoxAdapter(
                            child: Container(
                              alignment: Alignment.centerLeft,
                              margin: const EdgeInsets.only(top: 16),
                              child: Text(
                                'Đã tải hết khách hàng',
                                style: UITextStyle.regular.copyWith(
                                  fontSize: 14,
                                  color: UIColors.grayText,
                                ),
                              ),
                            ),
                          ),
                        ),
                        SliverVisibility(
                          visible: !state.status.showLoading && data.isEmpty,
                          sliver: SliverToBoxAdapter(
                            child: BlocBuilder<ClientGlobalCubit, ClientState>(builder: (context, state) {
                              final isPriority = state.filterSelected['group'] == ClientTabType.priority.name;
                              final message = isPriority ? 'Bạn chưa có khách hàng tiềm năng nào' : 'Không tìm thấy khách hàng nào';
                              final asset = isPriority ? 'ic_ads_priority' : 'ic_ads_link';
                              return Column(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  const AppImage.asset(
                                    asset: 'ic_ignore_outline',
                                    width: 24,
                                    height: 24,
                                  ),
                                  const SizedBox(
                                    height: 12,
                                  ),
                                  Text(
                                    message,
                                    style: UITextStyle.regular.copyWith(
                                      fontSize: 14,
                                      color: UIColors.grayText,
                                    ),
                                  ),
                                  const SizedBox(
                                    height: 70,
                                  ),
                                  AppImage.asset(
                                    asset: asset,
                                    width: 400,
                                    height: 166,
                                    fit: BoxFit.contain,
                                  ),
                                ],
                              );
                            }),
                          ),
                        ),
                        const SliverToBoxAdapter(
                          child: SizedBox(
                            height: 100,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                Visibility(
                  visible: state.status.isLoading || state.priorityStatus.isLoading,
                  child: const LoadingWidget.dark(),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}
