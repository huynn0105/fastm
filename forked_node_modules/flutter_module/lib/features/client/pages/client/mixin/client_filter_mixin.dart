import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/client/client_tab_type.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/features/client/cubit/client/client_cubit.dart';
import 'package:flutter_module/features/client/pages/client/items/checkbox_sheet_item.dart';
import 'package:flutter_module/features/client/pages/client/items/selected_chip_item.dart';
import 'package:flutter_module/features/client/pages/client/items/sheet_filter_item.dart';
import 'package:flutter_module/features/client/pages/client/items/wrap_filter_item.dart';
import 'package:flutter_module/models/client_data/filter_client_model.dart';

mixin ClientFilterMixin {
  List<Widget> listTab(BuildContext context, ClientState state, {required bool isExpanded}) {
    const listTab = ClientTabType.values;
    final FilterTotal total = state.filterClient?.total ?? FilterTotal();

    return List.generate(listTab.length, (index) {
      final item = listTab.valueAt(index);
      final isSelected = item?.name == state.filterSelecting['group'];

      return SelectedChipItem(
        title: item?.title ?? "",
        amount: total.getValue(item?.name ?? ""),
        bgActiveColor: UIColors.clientTabActiveColors.valueAt(index),
        bgColor: UIColors.clientTabInactiveColors.valueAt(index),
        isSelected: isSelected,
        showAmount: true,
        onTap: () {
          final cubit = context.read<ClientGlobalCubit>();
          if (isExpanded) {
            cubit.selectFilterItem("group", item?.name ?? "");
          } else {
            cubit.changeTab(item?.name ?? "");
          }
        },
      );
    });
  }

  List<Widget> listFilter(
    BuildContext context,
    ClientState state, {
    bool ignoreTabGroup = false,
  }) {
    final cubit = context.read<ClientGlobalCubit>();
    List<FilterData> data = state.filterClient?.data ?? [];

    if (!ignoreTabGroup && state.filterSelecting['group'] != ClientTabType.all.name) {
      data = data.where((element) => element.type?.contains(state.filterSelecting['group']) ?? false).toList();
    }

    final result = List.generate(
      data.length,
      (index) {
        final item = data.valueAt(index);
        final isMultiSelect = item?.isMultiSelect == true;
        final title = item?.title ?? '';
        final projects = item?.projects ?? [];
        final keyFilter = item?.keyFilter ?? '';
        final selectValue = state.filterSelecting[keyFilter];
        final children = filterChildren(
          context,
          projects,
          keyFilter: keyFilter,
          selected: selectValue,
          isMultiSelect: isMultiSelect,
        );

        if (isMultiSelect) {
          final text = (selectValue ?? []).length > 0 ? 'Đã chọn ${selectValue.length ?? 0} sản phẩm' : null;
          return Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              SheetFilterItem(
                title: title,
                text: text,
                hintText: "- Chọn tên sản phẩm -",
                onStartSelect: () {
                  cubit.initBottomSheetSelect(keyFilter);
                },
                onEndSelect: (submitted) {
                  cubit.submitBottomSheetSelect(keyFilter, submitted);
                },
                onDone: () {
                  Navigator.of(context).pop(true);
                },
                children: [children],
              ),
              const Padding(
                padding: EdgeInsets.symmetric(vertical: 16),
                child: Divider(
                  height: 0,
                ),
              ),
            ],
          );
        }

        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            WrapFilterItem(
              title: title,
              children: [children],
            ),
            const Padding(
              padding: EdgeInsets.symmetric(vertical: 16),
              child: Divider(
                height: 0,
              ),
            ),
          ],
        );
      },
    );

    return result;
  }

  Widget filterChildren(
    BuildContext context,
    List<FilterProjects> data, {
    required bool isMultiSelect,
    required String keyFilter,
    dynamic selected,
    ClientCubitType type = ClientCubitType.clientGlobalCubit,
  }) {
    final cubit = type == ClientCubitType.clientGlobalCubit
        ? context.read<ClientGlobalCubit>()
        : context.read<ClientLocalCubit>();

    if (isMultiSelect) {
      final itemWidth = (AppSize.instance.width - 16 * 2) / 2;
      return BlocProvider.value(
        value: cubit,
        child: BlocBuilder<ClientCubit, ClientState>(
          buildWhen: (previous, current) =>
              previous.bottomSheetSelecting != current.bottomSheetSelecting,
          builder: (context, state) {
            final bottomSheetSelected = state.bottomSheetSelecting;
            return Wrap(
                    runSpacing: 8,
                    spacing: 8,
                    children: [
                      GridView.count(
                        childAspectRatio: itemWidth / 40,
                        padding: EdgeInsets.zero,
                        physics: const NeverScrollableScrollPhysics(),
                        shrinkWrap: true,
                        crossAxisCount: 2,
                        children: List.generate(data.length, (index) {
                          final item = data.valueAt(index);
                          final title = item?.name ?? item?.projectName ?? item?.title ?? item?.customerLabel ?? "";
                          final id = item?.iD ?? item?.id ?? "";
                          return CheckboxSheetItem(
                            title: title,
                            value: bottomSheetSelected.contains(id),
                            onChange: (p0) {
                              cubit.selectBottomFilterItem(id);
                            },
                          );
                        }),
                      ),
                      const Divider(
                        thickness: 1,
                        color: UIColors.lightGray,
                        height: 24,
                      ),
                      CheckboxSheetItem(
                        title: "Tất cả",
                        value: bottomSheetSelected.length == data.length,
                        onChange: (p0) {
                          cubit.selectBottomAllFilterItem(p0, data);
                        },
                      ),
                    ],
                  );
          },
        ),
      );
    }

    return Wrap(
      runSpacing: 8,
      spacing: 8,
      children: [
        ...List.generate(data.length, (index) {
          final item = data.valueAt(index);
          final id = item?.iD ?? item?.id ?? "";
          return SelectedChipItem(
            title: item?.name ?? "",
            isSelected: selected is List ? selected.contains(id) : false,
            showAmount: false,
            onTap: () {
              cubit.selectFilterItem(keyFilter, id);
            },
          );
        })
      ],
    );
  }
}
