import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/client/cubit/client/client_cubit.dart';
import 'package:flutter_module/features/client/pages/client/mixin/client_filter_mixin.dart';

import '../../../../../common/constants.dart';
import '../widgets/backdrop_widget.dart';

class FilterComponent extends StatelessWidget with ClientFilterMixin {
  const FilterComponent({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<ClientGlobalCubit, ClientState>(
      builder: (context, state) {
        if (state.status.isInitial) {
          _onGetFilterClient(context);
        }
        final filterSelected = {...state.filterSelected};
        filterSelected.remove('group');
        final hasFilter = filterSelected.values.where((element) => (element as List).isNotEmpty).isNotEmpty;
        return BackdropWidget(
          hasFilter: hasFilter,
          onExpanded: (value) {
            FocusManager.instance.primaryFocus?.unfocus();
          },
          onTapBackdrop: () {
            final cubit = context.read<ClientGlobalCubit>();
            cubit.cancelFilter();
          },
          onFiltered: () {
            final cubit = context.read<ClientGlobalCubit>();
            cubit.submitFilter();
          },
          onCanceled: () {
            final cubit = context.read<ClientGlobalCubit>();
            cubit.removeFilter();
          },
          builder: (isExpanded) {
            final renderListTab = listTab(context, state, isExpanded: isExpanded);
            final renderListFilter = listFilter(context, state);
            return Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  AnimatedSize(
                    alignment: Alignment.topLeft,
                    duration: AppConstants.duration,
                    reverseDuration: AppConstants.duration,
                    child: Stack(
                      children: [
                        Visibility(
                          visible: isExpanded,
                          child: Padding(
                            key: UniqueKey(),
                            padding: const EdgeInsets.only(top: 12, bottom: 16),
                            child: Wrap(
                              spacing: 8,
                              runSpacing: 12,
                              children: [
                                ...renderListTab,
                              ],
                            ),
                          ),
                        ),
                        Visibility(
                          visible: !isExpanded,
                          child: Container(
                            key: UniqueKey(),
                            height: kToolbarHeight,
                            alignment: Alignment.center,
                            padding: const EdgeInsets.only(top: 12),
                            child: ListView.separated(
                              shrinkWrap: true,
                              scrollDirection: Axis.horizontal,
                              itemBuilder: (context, index) {
                                return renderListTab[index];
                              },
                              itemCount: renderListTab.length,
                              separatorBuilder: (_, __) => const SizedBox(width: 8),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const Padding(
                    padding: EdgeInsets.only(top: 4),
                    child: Divider(
                      height: 0,
                    ),
                  ),
                  Flexible(
                    child: SingleChildScrollView(
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      physics: AppConstants.physics,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          ...renderListFilter,
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  _onGetFilterClient(BuildContext context) {
    final cubit = context.read<ClientGlobalCubit>();
    cubit.getFilterClient();
  }
}
