import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/client/client_tab_type.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/format_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/chart/donut_chart/animated_donut_chart.dart';
import 'package:flutter_module/common/widgets/chart/donut_chart/donut_chart_legend.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/client/cubit/ad_link_statistic/ad_link_statistic_cubit.dart';
import 'package:flutter_module/features/client/cubit/client/client_cubit.dart';
import 'package:flutter_module/features/client/pages/client/mixin/client_filter_mixin.dart';
import 'package:flutter_module/models/client_data/filter_client_model.dart';

@RoutePage()
class AdLinkStatisticPage extends StatelessWidget with ClientFilterMixin {
  const AdLinkStatisticPage({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<ClientGlobalCubit, ClientState>(
      buildWhen: (previous, current) => previous.status != current.status,
      builder: (context, clientGlobalState) {
        _onInitFilter(context);
        return BlocConsumer<ClientLocalCubit, ClientState>(
          listenWhen: (previous, current) => previous.filterSelecting != current.filterSelecting,
          listener: (context, state) {
            final selected = state.filterSelecting[ClientDetailType.PAGE_QC.code] as List?;
            final cubit = context.read<AdLinkStatisticCubit>();
            if (selected?.length == cubit.state.data?.links?.length || selected?.isEmpty == true) {
              _onGetData(context);
            } else {
              _onGetData(context, potentialIDs: selected);
            }
          },
          builder: (context, state) {
            final selected = state.filterSelecting[ClientDetailType.PAGE_QC.code] as List?;

            return BlocConsumer<AdLinkStatisticCubit, AdLinkStatisticState>(
              listener: (context, state) {
                _onListenStateChange(context);
              },
              builder: (context, statisticState) {
                if (statisticState.status.isInitial) {
                  WidgetsBinding.instance.addPostFrameCallback((_) {
                    _onGetData(context);
                  });
                }

                final isSelectedAll =
                    selected?.isNotEmpty != true || selected?.length == statisticState.data?.links?.length;

                final cubit = context.read<AdLinkStatisticCubit>();

                return ListView(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  children: [
                    Text(
                      "Thống kê hiệu quả",
                      style: UITextStyle.semiBold.copyWith(
                        fontSize: 18,
                      ),
                    ),
                    const SizedBox(
                      height: 8,
                    ),
                    SplashButton(
                      onTap: () {
                        if (clientGlobalState.status.isSuccess) {
                          _onShowFilter(context);
                        }
                      },
                      child: Container(
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(8),
                          color: UIColors.white,
                        ),
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 10,
                        ),
                        child: Row(
                          children: [
                            const AppImage.asset(
                              asset: "ic_filter",
                              width: 20,
                              height: 20,
                            ),
                            const SizedBox(
                              width: 12,
                            ),
                            clientGlobalState.status.isLoading
                                ? const CupertinoActivityIndicator()
                                : Text(
                                    isSelectedAll ? "Tất cả liên kết" : "Đã chọn ${selected?.length} liên kết tiếp thị",
                                    style: isSelectedAll
                                        ? UITextStyle.semiBold
                                        : UITextStyle.regular.copyWith(
                                            color: UIColors.grayText,
                                          ),
                                  )
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(
                      height: 12,
                    ),
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: UIColors.white,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              AnimatedDonutChart(
                                controller: cubit.controller,
                                size: 108,
                                totalValue: TextUtils.parseDouble(statisticState.data?.total),
                                enableDisplayTitle: true,
                                onDisplayTitle: (value) {
                                  return FormatUtil.formatNumberByThousandSeparator(value, digits: 0)
                                          .split(" ")
                                          .valueAt(0) ??
                                      "";
                                },
                                subtitle: FormatUtil.formatNumberByThousandSeparator(
                                            TextUtils.parseDouble(statisticState.data?.total) ?? 0)
                                        .split(" ")
                                        .valueAt(1) ??
                                    'người',
                              ),
                              const SizedBox(
                                width: 16,
                              ),
                              Expanded(
                                child: Column(
                                  mainAxisSize: MainAxisSize.min,
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      'Tổng khách hàng',
                                      style: UITextStyle.regular.copyWith(
                                        fontSize: 14,
                                        color: UIColors.grayText,
                                      ),
                                    ),
                                    Text(
                                      "${FormatUtil.doubleFormat(TextUtils.parseDouble(statisticState.data?.total ?? 0))} người",
                                      style: UITextStyle.semiBold.copyWith(
                                        fontSize: 18,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(
                            height: 12,
                          ),
                          Text(
                            "Phân loại theo trạng thái tham gia",
                            style: UITextStyle.regular.copyWith(
                              fontSize: 14,
                              color: UIColors.grayText,
                            ),
                          ),
                          DonutChartLegend(
                            controller: cubit.controller,
                            enableShowLoading: false,
                            padding: const EdgeInsets.only(top: 12),
                            onDisplayLabel: (section) {
                              return "${FormatUtil.doubleFormat(section.value)} ${section.unit}";
                            },
                          ),
                        ],
                      ),
                    ),
                  ],
                );
              },
            );
          },
        );
      },
    );
  }

  _onInitFilter(BuildContext context) {
    final cubit = context.read<ClientLocalCubit>();
    final adLinkStatisticCubit = context.read<AdLinkStatisticCubit>();
    final globalCubit = getItInstance.get<ClientGlobalCubit>();
    final globalFilter = globalCubit.state.filterClient;

    List<FilterData> data =
        globalFilter?.data?.where((e) => e.keyFilter == ClientDetailType.PAGE_QC.code).toList() ?? [];

    data = data
        .map((e) => e.copyWith(
              projects: adLinkStatisticCubit.state.data?.links,
            ))
        .toList();

    cubit.initFilters(
      data: FilterClientModel(
        data: data,
        total: globalFilter?.total,
      ),
    );
  }

  _onShowFilter(BuildContext context) {
    final cubit = context.read<ClientLocalCubit>();
    final state = cubit.state;
    final item = (state.filterClient?.data ?? [])
        .firstWhereOrNull((element) => element.keyFilter == ClientDetailType.PAGE_QC.code);
    final isMultiSelect = item?.isMultiSelect == true;
    final title = item?.title ?? '';
    final projects = item?.projects ?? [];
    final keyFilter = item?.keyFilter ?? '';
    dynamic selectValue;
    if (state.filterSelecting[keyFilter] == null ||
        (state.filterSelecting[keyFilter] is List && state.filterSelecting[keyFilter].isEmpty)) {
      selectValue = projects.map((e) => e.iD ?? e.id ?? "").toList();
    } else {
      selectValue = state.filterSelecting[keyFilter];
    }

    cubit.initBottomSheetSelect(keyFilter, initValue: selectValue);
    BottomSheetProvider.instance.show(
      context,
      enabledOnDone: true,
      onDone: () {
        Navigator.of(context).pop(true);
      },
      closeOnRight: false,
      title: "Lọc ${title.replaceAll("từng tham gia", "").toLowerCase()}",
      child: ConstrainedBox(
          constraints: BoxConstraints(
            maxHeight: AppSize.instance.height * 0.5,
          ),
          child: ListView(
            padding: const EdgeInsets.all(16),
            shrinkWrap: true,
            children: [
              filterChildren(context, projects,
                  keyFilter: keyFilter,
                  selected: selectValue,
                  isMultiSelect: isMultiSelect,
                  type: ClientCubitType.clientLocalCubit)
            ],
          )),
    ).then((value) {
      cubit.submitBottomSheetSelect(keyFilter, value == true);
    });
  }

  _onGetData(BuildContext context, {List? potentialIDs}) {
    final cubit = context.read<AdLinkStatisticCubit>();
    cubit.getStatisticLink(potentialIDs: potentialIDs);
  }

  _onListenStateChange(BuildContext context) {
    final cubit = context.read<AdLinkStatisticCubit>();
    if (cubit.state.status.isLoading) {
      cubit.controller.load();
      return;
    }
    if (cubit.state.status.isSuccess) {
      _onInitFilter(context);
      cubit.controller.show(data: cubit.getDonutChartData(), forceDelay: true);
      return;
    }
    if (cubit.state.status.isFailure) {
      cubit.controller.empty();
      return;
    }
  }
}
