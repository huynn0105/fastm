import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/bottom_sheet/views/brochure_view.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/enum/client/ad_link_tab_type.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/debounce_util.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/features/client/cubit/ad_link_list/ad_link_list_cubit.dart';
import 'package:flutter_module/features/client/pages/ad_link/items/ad_link_item.dart';
import 'package:flutter_module/features/mtrade/cubit/link_brochure/mtrade_link_brochure_cubit.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/widgets/mtrade_text_field.dart';
import 'package:flutter_module/features/mtrade/page/order/order_process_state/components/list_selecotor.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';

import '../../../../../common/global_function.dart';

@RoutePage()
class AdLinkListPage extends StatefulWidget {
  const AdLinkListPage({super.key});

  @override
  State<AdLinkListPage> createState() => _AdLinkListPageState();
}

class _AdLinkListPageState extends State<AdLinkListPage> {
  final RefreshController _controller = RefreshController();
  final DebounceUtil debounce = DebounceUtil(milliseconds: 400);

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<AdLinkListCubit, AdLinkListState>(
      builder: (context, state) {
        if (state.status.isInitial) {
          WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
            _onRefresh(context);
          });
        }

        return BlocConsumer<MTradeLinkBrochureCubit, MTradeLinkBrochureState>(
          listener: (context, state) {
            if (state.status.isSuccess) {
              BottomSheetProvider.instance.show(
                context,
                title: 'Bộ nhận diện',
                child: BlocProvider.value(
                  value: context.read<MTradeLinkBrochureCubit>(),
                  child: BrochureView(
                    onSend: () {
                      _onSendBrochure(context);
                    },
                  ),
                ),
              );
            }
          },
          builder: (context, brochureState) {
            final tabList = AdLinkTabType.values.map(
              (e) {
                final total = state.total?.toJson()[e.name] ?? 0;
                return DataWrapper(
                  id: e.name,
                  value: "${e.title}($total)",
                );
              },
            ).toList();
            return Stack(
              children: [
                LoadMoreWidget(
                  refreshController: _controller,
                  onLoadMore: () {
                    return _onLoadMore(context);
                  },
                  child: ListView(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                    ),
                    children: [
                      Text(
                        "Các liên kết tiếp thị đã tạo",
                        style: UITextStyle.semiBold.copyWith(
                          fontSize: 18,
                        ),
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      ListSelector(
                        data: tabList,
                        indexSelected: tabList.indexWhere((element) => element.id == state.tabSelected),
                        onTabItem: (item, index) {
                          if (item is DataWrapper) {
                            _onChangeType(context, type: item.id);
                          }
                        },
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      SizedBox(
                        height: 40,
                        child: MTradeSearchTextField(
                          hintText: "Tìm theo tên kênh",
                          onChanged: (p0) {
                            debounce.run(() {
                              _onSearch(context, text: p0);
                            });
                          },
                          onCleared: () {
                            _onSearch(context, text: "");
                          },
                        ),
                      ),
                      ...List.generate(state.data.length, (index) {
                        final item = state.data[index];
                        return AdLinkItem(
                          item: item,
                          onShare: () {
                            _onShareLink(link: item.linkReview);
                          },
                          onBrochure: () {
                            _onBrochure(context, ID: item.id ?? "");
                          },
                        );
                      }),
                      const SizedBox(
                        height: 100,
                      ),
                    ],
                  ),
                ),
                Visibility(
                  visible: state.status.showLoading || brochureState.status.isLoading,
                  child: const LoadingWidget.withoutText(),
                )
              ],
            );
          },
        );
      },
    );
  }

  _onRefresh(BuildContext context) {
    final cubit = context.read<AdLinkListCubit>();
    _controller.resetNoData();
    cubit.getListAdLink();
  }

  _onShareLink({String? link}) {
    GlobalFunction.shareText(link ?? '');
  }

  _onBrochure(BuildContext context, {required String ID}) {
    final cubit = context.read<MTradeLinkBrochureCubit>();
    cubit.fetchData(ID: ID);
  }

  _onSendBrochure(BuildContext context) {
    final cubit = context.read<MTradeLinkBrochureCubit>();
    cubit.sendBrochureToEmail();
  }

  _onLoadMore(BuildContext context) async {
    final cubit = context.read<AdLinkListCubit>();
    final length = cubit.state.data.length;
    await cubit.getListAdLink(loadmore: true, showLoading: false);
    return length != cubit.state.data.length;
  }

  _onChangeType(BuildContext context, {String? type}) {
    final cubit = context.read<AdLinkListCubit>();
    cubit.updatePayload(type: type);
    _onRefresh(context);
  }

  _onSearch(BuildContext context, {required String text}) {
    final cubit = context.read<AdLinkListCubit>();
    cubit.updatePayload(keySearch: text);
    _onRefresh(context);
  }
}
