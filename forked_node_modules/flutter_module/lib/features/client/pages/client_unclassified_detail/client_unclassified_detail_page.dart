import 'package:auto_route/auto_route.dart';
import 'package:dotted_dashed_line/dotted_dashed_line.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/client/client_tab_type.dart';
import 'package:flutter_module/common/enum/client/client_trash_type.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/extension/map_extension.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/image_picker_utils.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/client/cubit/client/client_cubit.dart';
import 'package:flutter_module/features/client/cubit/client_detail/client_detail_cubit.dart';
import 'package:flutter_module/features/client/cubit/client_list/client_list_cubit.dart';
import 'package:flutter_module/features/client/cubit/update_client_info/update_client_info_cubit.dart';
import 'package:flutter_module/features/client/pages/client_detail/components/filter_component.dart';
import 'package:flutter_module/features/client/pages/client_detail/components/update_client_info_component.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/client_detail_card.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/client_empty_card.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/client_waiting_card.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/dialog/priority_confirm_dialog.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/dialog/trash_all_confirm_dialog.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/dialog/trash_confirm_dialog.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/sale_action_button.dart';
import 'package:flutter_module/features/main_view/pages/main_tabbar/items/primary_bottom_bar_item.dart';
import 'package:flutter_module/general_config.dart';
import 'package:flutter_module/models/client/client_detail/client_detail_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:flutter_module/services/api/client/payload/update_client_payload.dart';

import '../../../../../../common/widgets/stack_card_swiper.dart';

class ClientUnclassifiedDetailPage extends StatefulWidget {
  const ClientUnclassifiedDetailPage({
    Key? key,
    this.clientID,
    this.clientDetail,
    @QueryParam('index') this.initialIndex,
  }) : super(key: key);

  final String? clientID;
  final ClientDetailModel? clientDetail;
  final int? initialIndex;

  @override
  State<ClientUnclassifiedDetailPage> createState() => _ClientUnclassifiedDetailPageState();
}

class _ClientUnclassifiedDetailPageState extends State<ClientUnclassifiedDetailPage> {
  var _currentIndex = 0;

  final _swipeController = AppSwiperController();
  final _directionNotifier = ValueNotifier<AppStackCardSwiperDirection>(AppStackCardSwiperDirection.none);
  final _priorityAlwaysConfirmNotifier = ValueNotifier<bool>(false);
  final _trashAlwaysConfirmNotifier = ValueNotifier<bool>(false);
  final _trashAllTypeNotifier = ValueNotifier<ClientTrashAllType>(ClientTrashAllType.temporary);

  ClientDetailType get _clientDetailType => ClientDetailType.PAGE_QC;

  Map<String, dynamic> get _defaultFilters => {'group': _clientDetailType.code};

  @override
  void initState() {
    super.initState();
    _currentIndex = widget.initialIndex ?? 0;
  }

  @override
  void dispose() {
    _priorityAlwaysConfirmNotifier.dispose();
    _trashAlwaysConfirmNotifier.dispose();
    _directionNotifier.dispose();
    _swipeController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<ClientLocalCubit, ClientState>(
          listenWhen: (previous, current) => previous.filterSelected != current.filterSelected,
          listener: (context, state) {
            _currentIndex = 0;
            final clientDetailCubit = context.read<ClientDetailCubit>();
            clientDetailCubit.clearClient();

            ///
            final cubit = context.read<ClientListLocalCubit>();
            final filters = state.filterSelected.removeFalsyValue()..addAll(_defaultFilters);
            cubit
              ..updatedPayload(filters: filters)
              ..fetchData();
          },
        ),
        BlocListener<ClientListLocalCubit, ClientListState>(
          listenWhen: (pre, cur) {
            return pre.forceRefresh != cur.forceRefresh;
          },
          listener: (context, state) {
            if (state.forceRefresh) {
              _onDetailInit(context);
            }
          },
        ),
        BlocListener<ClientDetailCubit, ClientDetailState>(
          listenWhen: (pre, cur) {
            return pre.updateStatus != cur.updateStatus;
          },
          listener: (context, state) {
            if (state.updateStatus.isSuccess) {
              ToastProvider.instance.showSuccess(
                context: context,
                message: 'Cập nhật thành công',
              );
              return;
            }
            if (state.updateStatus.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: state.errorMessage,
              );
            }
          },
        ),
        BlocListener<ClientDetailCubit, ClientDetailState>(
          listenWhen: (pre, cur) {
            return pre.priorityStatus != cur.priorityStatus;
          },
          listener: (context, state) {
            if (state.priorityStatus.isSuccess) {
              return;
            }
            if (state.priorityStatus.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: state.errorMessage,
              );
              return;
            }
          },
        ),
      ],
      child: Scaffold(
        resizeToAvoidBottomInset: false,
        appBar: MFastAdvanceAppBar(
          context: context,
          title: "Khách hàng chưa phân loại",
          onHome: () {
            context.router.popUntilRoot();
          },
        ),
        body: BlocBuilder<ClientListLocalCubit, ClientListState>(
          builder: (context, listState) {
            if (listState.status.isInitial) {
              _onListInit(context);
            }

            return BlocBuilder<ClientDetailCubit, ClientDetailState>(
              builder: (context, detailState) {
                bool isClientListEmpty = listState.data.isEmpty && !listState.status.showLoading;
                bool showClientDetail = detailState.data != null && !isClientListEmpty;

                return SafeArea(
                  child: Column(
                    children: [
                      Container(
                        height: 40,
                        alignment: Alignment.center,
                        padding: const EdgeInsets.symmetric(horizontal: 16),
                        decoration: const BoxDecoration(
                          color: UIColors.white,
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            SplashButton(
                              onTap: () {
                                _onShowFilter(context);
                              },
                              child: SizedBox(
                                height: 40,
                                child: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    const AppImage.asset(
                                      asset: 'ic_filter',
                                      width: 24,
                                      height: 24,
                                      color: UIColors.primaryColor,
                                    ),
                                    const SizedBox(
                                      width: 4,
                                    ),
                                    Text(
                                      'Chờ phân loại (${listState.data.length} khách)',
                                      style: UITextStyle.regular.copyWith(
                                        fontSize: 13,
                                        color: UIColors.primaryColor,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                            SplashButton(
                              onTap: () => _onShowTrashAllDialog(context),
                              child: SizedBox(
                                height: 40,
                                child: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    const AppImage.asset(
                                      asset: 'ic_trash_outline',
                                      width: 24,
                                      height: 24,
                                      color: UIColors.red,
                                    ),
                                    const SizedBox(
                                      width: 4,
                                    ),
                                    Text(
                                      'Làm trống',
                                      style: UITextStyle.regular.copyWith(
                                        fontSize: 13,
                                        color: UIColors.red,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      Expanded(
                        child: Stack(
                          children: [
                            const ClientWaitingCard(
                              showPreviousTurn: false,
                              showNextTurn: false,
                            ),
                            Visibility(
                              visible: listState.data.isEmpty && !listState.status.showLoading,
                              child: const ClientEmptyCard(),
                            ),
                            Visibility(
                              visible: showClientDetail,
                              child: AppStackCardSwiper(
                                controller: _swipeController,
                                padding: EdgeInsets.zero,
                                duration: const Duration(milliseconds: 300),
                                isDisabled: false,
                                forceGoBackInLeftSwipe: _forceLeftGoBack(context),
                                forceGoBackInRightSwipe: _forceRightGoBack(context),
                                verticalSwipeEnabled: false,
                                onPanEnd: (int index, AppStackCardSwiperDirection direction) {
                                  _directionNotifier.value = AppStackCardSwiperDirection.none;
                                },
                                onSwiping: (int index, AppStackCardSwiperDirection direction) {
                                  _directionNotifier.value = direction;
                                },
                                onSwiped: (int index, AppStackCardSwiperDirection direction) {
                                  if (direction == AppStackCardSwiperDirection.left) {
                                    _onLeftSwiped(context);
                                    return;
                                  }
                                  if (direction == AppStackCardSwiperDirection.right) {
                                    _onRightSwiped(context);
                                    return;
                                  }
                                },
                                cards: List.generate(
                                  1,
                                  (index) {
                                    if (detailState.status.isLoading) {
                                      return const SizedBox();
                                    }
                                    return ValueListenableBuilder(
                                      valueListenable: _directionNotifier,
                                      builder: (context, value, child) {
                                        final showPriorityTag = value == AppStackCardSwiperDirection.right;
                                        final showTrashTag = value == AppStackCardSwiperDirection.left;
                                        return Stack(
                                          children: [
                                            ClientDetailCard(
                                              key: ValueKey('$index'),
                                              onRefresh: () async {
                                                return context.read<ClientDetailCubit>().refreshData();
                                              },
                                              data: detailState.data,
                                              saleActions: (detailState.data?.hideActions == true)
                                                  ? []
                                                  : [
                                                      SaleActionButton.trash(
                                                        showTitle: false,
                                                        onTap: _swipeController.swipeLeft,
                                                      ),
                                                      SaleActionButton.create(
                                                        showTitle: false,
                                                        onTap: () {
                                                          PrimaryBottomBarItem.showMainMenuSheet(
                                                            context,
                                                            client: detailState.data,
                                                          );
                                                        },
                                                      ),
                                                      SaleActionButton.priority(
                                                        showTitle: false,
                                                        onTap: _swipeController.swipeRight,
                                                      ),
                                                    ],
                                              showInfoEditButton: true,
                                              showNoteEditButton: true,
                                              showPriorityButton: false,
                                              showMyClientTag: true,
                                              showPriorityTag: showPriorityTag,
                                              showTrashTag: showTrashTag,
                                              onAvatarEditTap: () => _onUpdateAvatar(context),
                                              onPriorityTap: null,
                                              onInfoEditTap: () =>
                                                  _onShowEditBottomSheet(context, UpdateClientType.info),
                                              onNoteEditTap: () =>
                                                  _onShowEditBottomSheet(context, UpdateClientType.note),
                                            ),
                                            _UserGuideCard(
                                              isUserGuide: detailState.isUserGuideClientUnclassified,
                                              onTap: () {
                                                context
                                                    .read<ClientDetailCubit>()
                                                    .onDisableUserGuideClientUnclassified();
                                              },
                                            ),
                                          ],
                                        );
                                      },
                                    );
                                  },
                                ),
                              ),
                            ),
                            Visibility(
                              visible: detailState.updateStatus.isLoading ||
                                  detailState.priorityStatus.isLoading ||
                                  listState.status.isLoading,
                              child: const LoadingWidget.dark(),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                );
              },
            );
          },
        ),
      ),
    );
  }

  _onListInit(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final cubit = context.read<ClientListLocalCubit>();
      cubit
        ..updatedPayload(filters: _defaultFilters)
        ..fetchData();
    });
  }

  _onDetailInit(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final clientListCubit = context.read<ClientListLocalCubit>();
      final clientDetailCubit = context.read<ClientDetailCubit>();

      // _currentIndex = 0;

      if (widget.clientID != null) {
        int index = clientListCubit.state.data.indexWhere((e) => e.id == widget.clientID);
        if (index >= 0) {
          _currentIndex = index;
          clientDetailCubit.updateInitClient(widget.clientDetail!.merge(clientListCubit.state.data[index]));
        }
      } else {
        final client = clientListCubit.state.data.valueAt(_currentIndex);
        if (client != null) {
          clientDetailCubit
            ..updateInitClient(client)
            ..updateClientID(client.id)
            ..fetchData();
        }
      }
    });
  }

  _forceLeftGoBack(BuildContext context) {
    return false;
  }

  _forceRightGoBack(BuildContext context) {
    return false;
  }

  _onLeftSwiped(BuildContext context) async {
    if (_trashAlwaysConfirmNotifier.value == false) {
      final result = await DialogProvider.instance.show(
        context: context,
        barrierDismissible: true,
        child: ValueListenableBuilder(
          valueListenable: _trashAlwaysConfirmNotifier,
          builder: (context, value, child) {
            return TrashConfirmDialog(
              isAlwaysConfirm: value,
              onAlwaysConfirmToggle: (value) => _trashAlwaysConfirmNotifier.value = value,
            );
          },
        ),
      );

      if (!context.mounted) {
        return;
      }

      if (result == null || result == false) {
        _trashAlwaysConfirmNotifier.value = false;
        Future.delayed(const Duration(milliseconds: 250), _swipeController.unswipe);
        return;
      }
    }

    _onTrashClient(
      context,
      onSuccess: (clientID) {
        context.read<ClientListLocalCubit>().removeLocalClient(clientID: clientID);
        _onNextClient(context);
        eventBus.fire(RefreshGlobalClientFilterEventBus());
      },
    );
  }

  _onRightSwiped(BuildContext context) async {
    if (_priorityAlwaysConfirmNotifier.value == false) {
      final result = await DialogProvider.instance.show(
        context: context,
        barrierDismissible: true,
        child: ValueListenableBuilder(
          valueListenable: _priorityAlwaysConfirmNotifier,
          builder: (context, value, child) {
            return PriorityConfirmDialog(
              isAlwaysConfirm: value,
              onAlwaysConfirmToggle: (value) => _priorityAlwaysConfirmNotifier.value = value,
            );
          },
        ),
      );

      if (!context.mounted) {
        return;
      }

      if (result == null || result == false) {
        _priorityAlwaysConfirmNotifier.value = false;
        Future.delayed(const Duration(milliseconds: 250), _swipeController.unswipe);
        return;
      }
    }

    _onAddPriority(
      context,
      onSuccess: (clientID) {
        context.read<ClientListLocalCubit>().removeLocalClient(clientID: clientID);
        _onNextClient(context);
        eventBus.fire(RefreshGlobalClientFilterEventBus());
        eventBus.fire(RefreshGlobalClientListEventBus());
      },
    );
  }

  _onNextClient(BuildContext context) {
    final clientDetailCubit = context.read<ClientDetailCubit>();
    final clientListCubit = context.read<ClientListLocalCubit>();
    final clients = clientListCubit.state.data;
    final length = clients.length;

    final client = clients.firstOrNull;

    if (client != null) {
      clientDetailCubit
        ..updateInitClient(client)
        ..updateClientID(client.id)
        ..fetchData();
    }
    if (length == 1) {
      clientListCubit.loadMoreData();
    }
  }

  _onUpdateAvatar(
    BuildContext context, {
    Function()? onSuccess,
  }) async {
    final cubit = context.read<ClientDetailCubit>();
    final file = await ImagePickerUtils.pickImage(context: context, type: PickResourceType.gallery);
    if (file != null) {
      cubit.updateAvatar(
        file: file,
        onSuccess: () {
          onSuccess?.call();
        },
      );
    }
  }

  _onAddPriority(
    BuildContext context, {
    Function(String clientID)? onSuccess,
  }) async {
    final cubit = context.read<ClientDetailCubit>();
    final data = cubit.state.data;
    cubit.addPriority(
      clientID: data?.id ?? '',
      onSuccess: () {
        onSuccess?.call(data?.id ?? '');
      },
    );
  }

  _onTrashClient(
    BuildContext context, {
    Function(String clientID)? onSuccess,
  }) async {
    final cubit = context.read<ClientDetailCubit>();
    final data = cubit.state.data;
    cubit.deleteClient(
      clientID: data?.id ?? '',
      permanentlyDeleted: false,
      onSuccess: () {
        onSuccess?.call(data?.id ?? '');
      },
    );
  }

  _onTrashAllClient(
    BuildContext context, {
    bool? permanentlyDeleted,
    bool? deleteAll,
    Function(String)? onSuccess,
  }) async {
    final cubit = context.read<ClientDetailCubit>();
    final data = cubit.state.data;
    cubit.deleteClient(
      permanentlyDeleted: permanentlyDeleted,
      deleteAll: deleteAll,
      onSuccess: () {
        onSuccess?.call(data?.id ?? '');
      },
    );
  }

  _onShowEditBottomSheet(BuildContext context, UpdateClientType type) async {
    final cubit = context.read<ClientDetailCubit>();
    final title = type == UpdateClientType.info ? 'Cập nhật thông tin' : 'Cập nhật ghi chú';
    final result = await BottomSheetProvider.instance.show(
      context,
      title: title,
      child: BlocProvider(
        create: (_) => UpdateClientInfoCubit()..initData(client: cubit.state.data!, type: type),
        child: const UpdateClientInfoComponent(),
      ),
    );
    if (result is UpdateClientPayload) {
      cubit.updateInfo(
        payload: result,
        onSuccess: () {},
      );
    }
  }

  _onShowFilter(BuildContext context) async {
    final cubit = context.read<ClientLocalCubit>();
    final result = await BottomSheetProvider.instance.showTopSheet(
      context,
      child: BlocProvider.value(
        value: cubit,
        child: ClientDetailFilterComponent(
          type: _clientDetailType,
          onNavToTrash: () {
            context.router.push(ClientDetailMiddleRoute(type: ClientDetailType.TRASH));
          },
        ),
      ),
    );
    if (result == null) {
      cubit.cancelFilter();
      return;
    }
    if (result == true) {
      cubit.submitFilter();
      return;
    }
    if (result == false) {
      cubit.removeFilter();
      return;
    }
  }

  _onShowTrashAllDialog(BuildContext context) async {
    final result = await DialogProvider.instance.show(
      context: context,
      barrierDismissible: true,
      child: ValueListenableBuilder(
        valueListenable: _trashAllTypeNotifier,
        builder: (context, value, child) {
          return TrashAllConfirmDialog(
            type: value,
            onTypeSelected: (value) => _trashAllTypeNotifier.value = value,
          );
        },
      ),
    );

    if (!context.mounted) {
      return;
    }

    if (result == null || result == false) {
      _trashAllTypeNotifier.value = ClientTrashAllType.temporary;
      return;
    }

    _onTrashAllClient(
      context,
      permanentlyDeleted: _trashAllTypeNotifier.value == ClientTrashAllType.permanently,
      deleteAll: true,
      onSuccess: (clientID) {
        context.read<ClientListLocalCubit>().removeAllLocalClient();
      },
    );
  }
}

class _UserGuideCard extends StatelessWidget {
  const _UserGuideCard({
    required this.isUserGuide,
    required this.onTap,
  });

  final bool isUserGuide;
  final VoidCallback onTap;

  @override
  Widget build(BuildContext context) {
    return Visibility(
      visible: isUserGuide,
      child: GestureDetector(
        onTap: onTap,
        onPanStart: (_) {
          onTap();
        },
        child: Container(
          margin: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: const Color(0xd60a0a28),
            borderRadius: BorderRadius.circular(16),
          ),
          alignment: Alignment.center,
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Expanded(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const SizedBox(height: 200),
                    const AppImage.asset(
                      asset: 'ic_swipe_left',
                      width: 65,
                      height: 65,
                    ),
                    const SizedBox(height: 20),
                    RichText(
                      text: TextSpan(
                        text: 'Vuốt sang trái để\n',
                        style: UITextStyle.medium.copyWith(
                          color: Colors.white,
                        ),
                        children: [
                          TextSpan(
                            text: 'BỎ QUA',
                            style: UITextStyle.bold.copyWith(
                              color: Colors.white,
                              fontSize: 16,
                            ),
                          )
                        ],
                      ),
                      textAlign: TextAlign.center,
                    )
                  ],
                ),
              ),
              DottedDashedLine(
                width: 2,
                strokeWidth: 2,
                axis: Axis.vertical,
                dashColor: UIColors.white.withOpacity(0.6),
                dashSpace: 10,
                dashHeight: 8,
                height: double.infinity,
              ),
              Expanded(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const SizedBox(height: 200),
                    const AppImage.asset(
                      asset: 'ic_swipe_right',
                      width: 65,
                      height: 65,
                    ),
                    const SizedBox(height: 20),
                    RichText(
                      text: TextSpan(
                        text: 'Vuốt sang phải để\nphân loại là\n',
                        style: UITextStyle.medium.copyWith(
                          color: Colors.white,
                        ),
                        children: [
                          TextSpan(
                            text: 'TIỀM NĂNG',
                            style: UITextStyle.bold.copyWith(
                              color: Colors.white,
                              fontSize: 16,
                            ),
                          )
                        ],
                      ),
                      textAlign: TextAlign.center,
                    )
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
