import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/client/client_tab_type.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/image_picker_utils.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/client/cubit/client_detail/client_detail_cubit.dart';
import 'package:flutter_module/features/client/cubit/client_list/client_list_cubit.dart';
import 'package:flutter_module/features/client/cubit/update_client_info/update_client_info_cubit.dart';
import 'package:flutter_module/features/client/pages/client_detail/components/update_client_info_component.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/client_empty_card.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/client_waiting_card.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/sale_action_button.dart';
import 'package:flutter_module/features/main_view/pages/main_tabbar/items/primary_bottom_bar_item.dart';
import 'package:flutter_module/models/client/client_detail/client_detail_model.dart';
import 'package:flutter_module/services/api/client/payload/update_client_payload.dart';

import '../../../../../../common/widgets/stack_card_swiper.dart';
import 'components/user_guide_card.dart';
import 'widgets/client_detail_card.dart';

class ClientDetailPage extends StatefulWidget {
  const ClientDetailPage({
    Key? key,
    this.clientID,
    this.clientDetail,
    @QueryParam('index') this.initialIndex,
  }) : super(key: key);

  final String? clientID;

  final int? initialIndex;
  final ClientDetailModel? clientDetail;

  @override
  State<ClientDetailPage> createState() => _ClientDetailPageState();
}

class _ClientDetailPageState extends State<ClientDetailPage> {
  var _currentIndex = 0;

  final _swipeController = AppSwiperController();
  final _directionNotifier = ValueNotifier<AppStackCardSwiperDirection>(AppStackCardSwiperDirection.none);

  @override
  void initState() {
    super.initState();
    _currentIndex = widget.initialIndex ?? 0;
  }

  @override
  void dispose() {
    _directionNotifier.dispose();
    _swipeController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: MFastAdvanceAppBar(
        context: context,
        title: "Chi tiết khách hàng",
        onHome: () {
          context.router.popUntilRoot();
        },
      ),
      body: MultiBlocListener(
        listeners: [
          BlocListener<ClientDetailCubit, ClientDetailState>(
            listenWhen: (pre, cur) {
              return pre.updateStatus != cur.updateStatus;
            },
            listener: (context, state) {
              if (state.updateStatus.isSuccess) {
                ToastProvider.instance.showSuccess(
                  context: context,
                  message: 'Cập nhật thành công',
                );
                return;
              }
              if (state.updateStatus.isFailure) {
                DialogProvider.instance.showMTradeErrorDialog(
                  context: context,
                  message: state.errorMessage,
                );
              }
            },
          ),
          BlocListener<ClientDetailCubit, ClientDetailState>(
            listenWhen: (pre, cur) {
              return pre.priorityStatus != cur.priorityStatus;
            },
            listener: (context, state) {
              if (state.priorityStatus.isSuccess) {
                return;
              }
              if (state.priorityStatus.isFailure) {
                DialogProvider.instance.showMTradeErrorDialog(
                  context: context,
                  message: state.errorMessage,
                );
                return;
              }
            },
          ),
        ],
        child: BlocBuilder<ClientListGlobalCubit, ClientListState>(
          builder: (context, listState) {
            if(listState.status.isInitial){
              _onListInit(context);
            }
            return BlocBuilder<ClientDetailCubit, ClientDetailState>(
              builder: (context, detailState) {
                if (detailState.status.isInitial) {
                  _onDetailInit(context);
                }
                final isLoading = detailState.status.isLoading;
                bool isSwipedReachedEndList = _currentIndex == listState.data.length && !listState.status.showLoading;
                bool isClientListEmpty = listState.data.isEmpty && !listState.status.showLoading;
                bool showClientDetail = detailState.data != null && !isClientListEmpty && !isSwipedReachedEndList;

                ///
                return SafeArea(
                  child: Stack(
                    children: [
                      ValueListenableBuilder(
                        valueListenable: _directionNotifier,
                        builder: (context, value, child) {
                          final showPreviousTurn = _directionNotifier.value == AppStackCardSwiperDirection.right;
                          final showNextTurn = _directionNotifier.value == AppStackCardSwiperDirection.left;
                          return ClientWaitingCard(
                            showPreviousTurn: showPreviousTurn,
                            showNextTurn: showNextTurn,
                          );
                        },
                      ),
                      Visibility(
                        visible: isSwipedReachedEndList || isClientListEmpty,
                        child: const ClientEmptyCard(),
                      ),
                      AppStackCardSwiper(
                        controller: _swipeController,
                        padding: EdgeInsets.zero,
                        forceGoBackInLeftSwipe: _forceLeftGoBack(context),
                        forceGoBackInRightSwipe: _forceRightGoBack(context),
                        verticalSwipeEnabled: false,
                        onSwiping: (int index, AppStackCardSwiperDirection direction) {
                          _directionNotifier.value = direction;
                        },
                        onSwiped: (int index, AppStackCardSwiperDirection direction) {
                          _directionNotifier.value = AppStackCardSwiperDirection.none;
                          if (direction == AppStackCardSwiperDirection.left) {
                            _onLeftSwipe(context);
                            return;
                          }
                          if (direction == AppStackCardSwiperDirection.right) {
                            _onRightSwipe(context);
                            return;
                          }
                        },
                        cards: List.generate(
                          1,
                          (index) {
                            if (isLoading) {
                              return const ClientWaitingCard(
                                showPreviousTurn: false,
                                showNextTurn: false,
                              );
                            }
                            return Visibility(
                              visible: showClientDetail,
                              child: Stack(
                                children: [
                                  ClientDetailCard(
                                    key: ValueKey('$index'),
                                    onRefresh: () async {
                                      return context.read<ClientDetailCubit>().refreshData();
                                    },
                                    data: detailState.data,
                                    saleActions: (detailState.data?.hideActions == true)
                                        ? []
                                        : [
                                            SaleActionButton.create(
                                              onTap: () {
                                                PrimaryBottomBarItem.showMainMenuSheet(
                                                  context,
                                                  client: detailState.data,
                                                );
                                              },
                                            ),
                                          ],
                                    onAvatarEditTap: () => _onUpdateAvatar(context),
                                    onPriorityTap: (value) => _onUpdatePriority(context, value),
                                    onInfoEditTap: () => _onShowEditBottomSheet(context, UpdateClientType.info),
                                    onNoteEditTap: () => _onShowEditBottomSheet(context, UpdateClientType.note),
                                  ),
                                  UserGuide(
                                    isUserGuide: detailState.isUserGuideClientDetail,
                                    onTap: () {
                                      context.read<ClientDetailCubit>().onDisableUserGuideClientDetail();
                                    },
                                  ),
                                ],
                              ),
                            );
                          },
                        ),
                      ),
                      Visibility(
                        visible: detailState.updateStatus.isLoading || detailState.priorityStatus.isLoading,
                        child: const LoadingWidget.dark(),
                      ),
                    ],
                  ),
                );
              },
            );
          },
        ),
      ),
    );
  }

  _onListInit(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final cubit = context.read<ClientListGlobalCubit>();
      cubit
        ..updatedPayload(filters: {'group': ClientTabType.all.name})
        ..fetchData();
    });
  }

  _onDetailInit(BuildContext context) {
    // WidgetsBinding.instance.addPostFrameCallback((_) {
    //   final cubit = context.read<ClientDetailCubit>();
    //   cubit
    //     ..updateClientID(widget.clientID)
    //     ..fetchData();
    // });
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final clientListCubit = context.read<ClientListGlobalCubit>();
      final clientDetailCubit = context.read<ClientDetailCubit>();

      // _currentIndex = 0;

      if (widget.clientID != null) {
       
        int index = clientListCubit.state.data.indexWhere((e) => e.id == widget.clientID);
        if (index >= 0) {
          _currentIndex = index;
          clientDetailCubit.updateInitClient(widget.clientDetail!.merge(clientListCubit.state.data[index]));
        }
      } else {
        final client = clientListCubit.state.data.valueAt(_currentIndex);
        if (client != null) {
          clientDetailCubit
            ..updateInitClient(client)
            ..updateClientID(client.id)
            ..fetchData();
        }
      }
    });
  }

  _forceLeftGoBack(BuildContext context) {
    return false;
  }

  _forceRightGoBack(BuildContext context) {
    // final clientDetailCubit = context.read<ClientDetailCubit>();
    // final clientListCubit = context.read<ClientListCubit>();
    // final current = clientDetailCubit.state.data;
    // final clients = clientListCubit.state.data;
    // final index = clients.indexWhere((e) => e.id == (current?.id ?? widget.clientID));
    // return index == 0;
    final index = _currentIndex;
    return index == 0;
  }

  _onLeftSwipe(BuildContext context) {
    // final clientDetailCubit = context.read<ClientDetailCubit>();
    // final clientListCubit = context.read<ClientListCubit>();
    // final current = clientDetailCubit.state.data;
    // final clients = clientListCubit.state.data;
    // final length = clients.length;
    // final index = clients.indexWhere((e) => e.id == current?.id);
    // if (index >= 0) {
    //   if (index > length - 5) {
    //     clientListCubit.loadMoreData();
    //   }
    //   final nextItem = clients.valueAt(index + 1);
    //   if (nextItem != null) {
    //     clientDetailCubit
    //       ..updateClientID(nextItem.id)
    //       ..fetchData();
    //   }
    // }
    _onNextClient(context);
  }

  _onRightSwipe(BuildContext context) {
    // final clientDetailCubit = context.read<ClientDetailCubit>();
    // final clientListCubit = context.read<ClientListCubit>();
    // final current = clientDetailCubit.state.data;
    // final clients = clientListCubit.state.data;
    // final length = clients.length;
    // final index = clients.indexWhere((e) => e.id == current?.id);
    // if (index >= 0) {
    //   // if (index > length - 5) {
    //   //   clientListCubit.loadMoreData();
    //   // }
    //   final nextItem = clients.valueAt(index - 1);
    //   if (nextItem != null) {
    //     clientDetailCubit
    //       ..updateClientID(nextItem.id)
    //       ..fetchData();
    //   }
    // }
    _onPreviousClient(context);
  }

  _onNextClient(BuildContext context) {
    final clientDetailCubit = context.read<ClientDetailCubit>();
    final clientListCubit = context.read<ClientListGlobalCubit>();
    final clients = clientListCubit.state.data;
    final length = clients.length;

    final index = _currentIndex;
    final newIndex = index + 1;
    final client = clients.valueAt(newIndex);

    setState(() {
      _currentIndex = newIndex;
    });
    if (client != null) {
      clientDetailCubit
        ..updateInitClient(client)
        ..updateClientID(client.id)
        ..fetchData();
    }
    if (index > length - 5) {
      clientListCubit.loadMoreData();
    }
  }

  _onPreviousClient(BuildContext context) {
    final clientDetailCubit = context.read<ClientDetailCubit>();
    final clientListCubit = context.read<ClientListGlobalCubit>();
    final clients = clientListCubit.state.data;

    ///
    final index = _currentIndex;
    final newIndex = index - 1;
    final client = clients.valueAt(newIndex);
    _currentIndex = newIndex;
    if (client != null) {
      clientDetailCubit
        ..updateInitClient(client)
        ..updateClientID(client.id)
        ..fetchData();
    }
  }

  _onUpdatePriority(BuildContext context, bool isPriority) async {
    final cubit = context.read<ClientDetailCubit>();
    final data = cubit.state.data;
    cubit.updatePriority(
      clientID: data?.id ?? '',
      isPriority: isPriority,
      onSuccess: () {
        if (widget.initialIndex != null) {
          final clientListCubit = context.read<ClientListGlobalCubit>();
          clientListCubit.updateLocalPriority(clientID: data?.id ?? '', isPriority: isPriority);
        }
      },
    );
  }

  _onUpdateAvatar(BuildContext context) async {
    final cubit = context.read<ClientDetailCubit>();
    final file = await ImagePickerUtils.pickImage(context: context, type: PickResourceType.gallery);
    if (file != null) {
      cubit.updateAvatar(
        file: file,
        onSuccess: () {
          if (widget.initialIndex != null) {
            final clientListCubit = context.read<ClientListGlobalCubit>();
            clientListCubit.updateLocalClient(
              clientID: cubit.state.data?.id ?? '',
              payload: UpdateClientPayload(
                avatar: cubit.state.data?.avatar,
              ),
            );
          }
        },
      );
    }
  }

  _onShowEditBottomSheet(BuildContext context, UpdateClientType type) async {
    final cubit = context.read<ClientDetailCubit>();
    final title = type == UpdateClientType.info ? 'Cập nhật thông tin' : 'Cập nhật ghi chú';
    final result = await BottomSheetProvider.instance.show(
      context,
      title: title,
      child: BlocProvider(
        create: (_) => UpdateClientInfoCubit()..initData(client: cubit.state.data!, type: type),
        child: const UpdateClientInfoComponent(),
      ),
    );
    if (result is UpdateClientPayload) {
      cubit.updateInfo(
        payload: result,
        onSuccess: () {
          if (widget.initialIndex != null) {
            final clientListCubit = context.read<ClientListGlobalCubit>();
            clientListCubit.updateLocalClient(clientID: cubit.state.data?.id ?? '', payload: result);
          }
        },
      );
    }
  }
}
