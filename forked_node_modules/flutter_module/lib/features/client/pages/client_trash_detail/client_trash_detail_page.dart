import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/client/client_tab_type.dart';
import 'package:flutter_module/common/enum/client/client_trash_type.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/extension/map_extension.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/image_picker_utils.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/client/cubit/client/client_cubit.dart';
import 'package:flutter_module/features/client/cubit/client_detail/client_detail_cubit.dart';
import 'package:flutter_module/features/client/cubit/client_list/client_list_cubit.dart';
import 'package:flutter_module/features/client/cubit/update_client_info/update_client_info_cubit.dart';
import 'package:flutter_module/features/client/pages/client_detail/components/update_client_info_component.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/client_detail_card.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/client_empty_card.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/client_waiting_card.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/dialog/delete_trash_dialog.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/sale_action_button.dart';
import 'package:flutter_module/features/main_view/pages/main_tabbar/items/primary_bottom_bar_item.dart';
import 'package:flutter_module/general_config.dart';
import 'package:flutter_module/models/client/client_detail/client_detail_model.dart';
import 'package:flutter_module/services/api/client/payload/update_client_payload.dart';

import '../../../../../../common/widgets/stack_card_swiper.dart';
import '../client_detail/components/user_guide_card.dart';

class ClientTrashDetailPage extends StatefulWidget {
  const ClientTrashDetailPage({
    Key? key,
    this.clientID,
    this.clientDetail,
    @QueryParam('index') this.initialIndex,
  }) : super(key: key);

  final String? clientID;
  final int? initialIndex;
  final ClientDetailModel? clientDetail;

  @override
  State<ClientTrashDetailPage> createState() => _ClientTrashDetailPageState();
}

class _ClientTrashDetailPageState extends State<ClientTrashDetailPage> {
  var _currentIndex = 0;

  final _swipeController = AppSwiperController();
  final _directionNotifier = ValueNotifier<AppStackCardSwiperDirection>(AppStackCardSwiperDirection.none);
  final _priorityAlwaysConfirmNotifier = ValueNotifier<bool>(false);
  final _trashAlwaysConfirmNotifier = ValueNotifier<bool>(false);
  final _trashAllTypeNotifier = ValueNotifier<ClientTrashAllType>(ClientTrashAllType.temporary);

  ClientDetailType get _clientDetailType => ClientDetailType.TRASH;

  Map<String, dynamic> get _defaultFilters => {'group': _clientDetailType.code};

  @override
  void initState() {
    super.initState();
    _currentIndex = widget.initialIndex ?? 0;
  }

  @override
  void dispose() {
    _priorityAlwaysConfirmNotifier.dispose();
    _trashAlwaysConfirmNotifier.dispose();
    _directionNotifier.dispose();
    _swipeController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<ClientLocalCubit, ClientState>(
          listenWhen: (previous, current) => previous.filterSelected != current.filterSelected,
          listener: (context, state) {
            _currentIndex = 0;
            final clientDetailCubit = context.read<ClientDetailCubit>();
            clientDetailCubit.clearClient();

            ///
            final cubit = context.read<ClientListLocalCubit>();
            final filters = state.filterSelected.removeFalsyValue()..addAll(_defaultFilters);
            cubit
              ..updatedPayload(filters: filters)
              ..fetchData();
          },
        ),
        BlocListener<ClientListLocalCubit, ClientListState>(
          listenWhen: (pre, cur) {
            return pre.forceRefresh != cur.forceRefresh;
          },
          listener: (context, state) {
            if (state.forceRefresh) {
              _onDetailInit(context);
            }
          },
        ),
        BlocListener<ClientDetailCubit, ClientDetailState>(
          listenWhen: (pre, cur) {
            return pre.updateStatus != cur.updateStatus;
          },
          listener: (context, state) {
            if (state.updateStatus.isSuccess) {
              ToastProvider.instance.showSuccess(
                context: context,
                message: 'Cập nhật thành công',
              );
              return;
            }
            if (state.updateStatus.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: state.errorMessage,
              );
            }
          },
        ),
        BlocListener<ClientDetailCubit, ClientDetailState>(
          listenWhen: (pre, cur) {
            return pre.priorityStatus != cur.priorityStatus;
          },
          listener: (context, state) {
            if (state.priorityStatus.isSuccess) {
              return;
            }
            if (state.priorityStatus.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: state.errorMessage,
              );
              return;
            }
          },
        ),
        BlocListener<ClientDetailCubit, ClientDetailState>(
          listenWhen: (pre, cur) {
            return pre.deleteStatus != cur.deleteStatus;
          },
          listener: (context, state) {
            if (state.deleteStatus.isSuccess) {
              ToastProvider.instance.showSuccess(
                context: context,
                message: 'Xoá thành công',
              );
              context.router.pop();
              return;
            }
            if (state.deleteStatus.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: state.errorMessage,
              );
              return;
            }
          },
        ),
      ],
      child: Scaffold(
        resizeToAvoidBottomInset: false,
        appBar: MFastAdvanceAppBar(
          context: context,
          title: "Khách hàng bỏ qua",
          onHome: () {
            context.router.popUntilRoot();
          },
        ),
        body: BlocBuilder<ClientListLocalCubit, ClientListState>(
          builder: (context, listState) {
            if (listState.status.isInitial) {
              _onListInit(context);
            }

            return BlocBuilder<ClientDetailCubit, ClientDetailState>(
              builder: (context, detailState) {
                bool isSwipedReachedEndList = _currentIndex == listState.data.length && !listState.status.showLoading;
                bool isClientListEmpty = listState.data.isEmpty && !listState.status.showLoading;
                bool showClientDetail = detailState.data != null && !isClientListEmpty && !isSwipedReachedEndList;

                return SafeArea(
                  child: Column(
                    children: [
                      Container(
                        height: 40,
                        alignment: Alignment.center,
                        padding: const EdgeInsets.symmetric(horizontal: 16),
                        decoration: const BoxDecoration(
                          color: UIColors.white,
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Flexible(
                              child: Container(
                                height: 40,
                                alignment: Alignment.centerLeft,
                                child: RichText(
                                  text: TextSpan(
                                    style: UITextStyle.regular.copyWith(
                                      fontSize: 13,
                                      color: UIColors.grayText,
                                    ),
                                    children: [
                                      const TextSpan(
                                        text: 'Có ',
                                      ),
                                      TextSpan(
                                        text: '${listState.data.length} ',
                                        style: UITextStyle.semiBold.copyWith(
                                          fontSize: 13,
                                          color: UIColors.defaultText,
                                        ),
                                      ),
                                      const TextSpan(
                                        text: 'khách hàng trong danh sách bỏ qua',
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                            SplashButton(
                              onTap: () => _onShowDeleteTrashDialog(context),
                              child: SizedBox(
                                height: 40,
                                child: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    const AppImage.asset(
                                      asset: 'ic_trash_outline',
                                      width: 24,
                                      height: 24,
                                      color: UIColors.red,
                                    ),
                                    const SizedBox(
                                      width: 4,
                                    ),
                                    Text(
                                      'Làm trống',
                                      style: UITextStyle.regular.copyWith(
                                        fontSize: 13,
                                        color: UIColors.red,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      Expanded(
                        child: Stack(
                          children: [
                            ValueListenableBuilder(
                              valueListenable: _directionNotifier,
                              builder: (context, value, child) {
                                final showPreviousTurn = _directionNotifier.value == AppStackCardSwiperDirection.right;
                                final showNextTurn = _directionNotifier.value == AppStackCardSwiperDirection.left;
                                return ClientWaitingCard(
                                  showPreviousTurn: showPreviousTurn,
                                  showNextTurn: showNextTurn,
                                );
                              },
                            ),
                            Visibility(
                              visible: isSwipedReachedEndList || isClientListEmpty,
                              child: const ClientEmptyCard(),
                            ),
                            Visibility(
                              visible: showClientDetail,
                              child: AppStackCardSwiper(
                                controller: _swipeController,
                                padding: EdgeInsets.zero,
                                duration: const Duration(milliseconds: 300),
                                isDisabled: false,
                                forceGoBackInLeftSwipe: _forceLeftGoBack(context),
                                forceGoBackInRightSwipe: _forceRightGoBack(context),
                                verticalSwipeEnabled: false,
                                onPanEnd: (int index, AppStackCardSwiperDirection direction) {
                                  _directionNotifier.value = AppStackCardSwiperDirection.none;
                                },
                                onSwiping: (int index, AppStackCardSwiperDirection direction) {
                                  _directionNotifier.value = direction;
                                },
                                onSwiped: (int index, AppStackCardSwiperDirection direction) {
                                  if (direction == AppStackCardSwiperDirection.left) {
                                    _onLeftSwiped(context);
                                    return;
                                  }
                                  if (direction == AppStackCardSwiperDirection.right) {
                                    _onRightSwiped(context);
                                    return;
                                  }
                                },
                                cards: List.generate(
                                  1,
                                  (index) {
                                    if (detailState.status.isLoading) {
                                      return const SizedBox();
                                    }
                                    return Stack(
                                      children: [
                                        ClientDetailCard(
                                          key: ValueKey('$index'),
                                          onRefresh: () async {
                                            return context.read<ClientDetailCubit>().refreshData();
                                          },
                                          data: detailState.data,
                                          saleActions: (detailState.data?.hideActions == true)
                                              ? []
                                              : [
                                                  SaleActionButton.create(
                                                    showTitle: true,
                                                    onTap: () {
                                                      PrimaryBottomBarItem.showMainMenuSheet(
                                                        context,
                                                        client: detailState.data,
                                                      );
                                                    },
                                                  ),
                                                ],
                                          showInfoEditButton: true,
                                          showNoteEditButton: true,
                                          showPriorityButton: true,
                                          showMyClientTag: false,
                                          showPriorityTag: false,
                                          showTrashTag: false,
                                          onAvatarEditTap: () => _onUpdateAvatar(context),
                                          onPriorityTap: (value) => _onUpdatePriority(context, value),
                                          onInfoEditTap: () => _onShowEditBottomSheet(context, UpdateClientType.info),
                                          onNoteEditTap: () => _onShowEditBottomSheet(context, UpdateClientType.note),
                                        ),
                                        UserGuide(
                                          isUserGuide: detailState.isUserGuideClientTrash,
                                          onTap: () {
                                            context.read<ClientDetailCubit>().onDisableUserGuideClientTrash();
                                          },
                                        ),
                                      ],
                                    );
                                  },
                                ),
                              ),
                            ),
                            Visibility(
                              visible: detailState.updateStatus.isLoading ||
                                  detailState.priorityStatus.isLoading ||
                                  detailState.deleteStatus.isLoading ||
                                  listState.status.isLoading,
                              child: const LoadingWidget.dark(),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                );
              },
            );
          },
        ),
      ),
    );
  }

  _onListInit(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final cubit = context.read<ClientListLocalCubit>();
      cubit
        ..updatedPayload(filters: _defaultFilters)
        ..fetchData();
    });
  }

  _onDetailInit(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final clientListCubit = context.read<ClientListLocalCubit>();
      final clientDetailCubit = context.read<ClientDetailCubit>();

      // _currentIndex = 0;

      if (widget.clientID != null) {
        int index = clientListCubit.state.data.indexWhere((e) => e.id == widget.clientID);
        if (index >= 0) {
          _currentIndex = index;
          clientDetailCubit.updateInitClient(widget.clientDetail!.merge(clientListCubit.state.data[index]));
        }
      } else {
        final client = clientListCubit.state.data.valueAt(_currentIndex);
        if (client != null) {
          clientDetailCubit
            ..updateInitClient(client)
            ..updateClientID(client.id)
            ..fetchData();
        }
      }
    });
  }

  _forceLeftGoBack(BuildContext context) {
    return false;
  }

  _forceRightGoBack(BuildContext context) {
    final index = _currentIndex;
    return index == 0;
  }

  _onLeftSwiped(BuildContext context) async {
    _onNextClient(context);
  }

  _onRightSwiped(BuildContext context) async {
    _onPreviousClient(context);
  }

  _onNextClient(BuildContext context) {
    final clientDetailCubit = context.read<ClientDetailCubit>();
    final clientListCubit = context.read<ClientListLocalCubit>();
    final clients = clientListCubit.state.data;
    final length = clients.length;

    final index = _currentIndex;
    final newIndex = index + 1;
    final client = clients.valueAt(newIndex);

    setState(() {
      _currentIndex = newIndex;
    });
    if (client != null) {
      clientDetailCubit
        ..updateInitClient(client)
        ..updateClientID(client.id)
        ..fetchData();
    }
    if (index > length - 5) {
      clientListCubit.loadMoreData();
    }
  }

  _onPreviousClient(BuildContext context) {
    final clientDetailCubit = context.read<ClientDetailCubit>();
    final clientListCubit = context.read<ClientListLocalCubit>();
    final clients = clientListCubit.state.data;

    ///
    final index = _currentIndex;
    final newIndex = index - 1;
    final client = clients.valueAt(newIndex);
    _currentIndex = newIndex;
    if (client != null) {
      clientDetailCubit
        ..updateInitClient(client)
        ..updateClientID(client.id)
        ..fetchData();
    }
  }

  _onUpdatePriority(
    BuildContext context,
    bool isPriority, {
    Function()? onSuccess,
  }) async {
    final cubit = context.read<ClientDetailCubit>();
    final data = cubit.state.data;
    cubit.updatePriority(
      clientID: data?.id ?? '',
      isPriority: isPriority,
      onSuccess: () {
        onSuccess?.call();
        eventBus.fire(RefreshGlobalClientListEventBus());
      },
    );
  }

  _onUpdateAvatar(
    BuildContext context, {
    Function()? onSuccess,
  }) async {
    final cubit = context.read<ClientDetailCubit>();
    final file = await ImagePickerUtils.pickImage(context: context, type: PickResourceType.gallery);
    if (file != null) {
      cubit.updateAvatar(
        file: file,
        onSuccess: () {
          onSuccess?.call();
        },
      );
    }
  }

  _onShowEditBottomSheet(BuildContext context, UpdateClientType type) async {
    final cubit = context.read<ClientDetailCubit>();
    final title = type == UpdateClientType.info ? 'Cập nhật thông tin' : 'Cập nhật ghi chú';
    final result = await BottomSheetProvider.instance.show(
      context,
      title: title,
      child: BlocProvider(
        create: (_) => UpdateClientInfoCubit()..initData(client: cubit.state.data!, type: type),
        child: const UpdateClientInfoComponent(),
      ),
    );
    if (result is UpdateClientPayload) {
      cubit.updateInfo(
        payload: result,
        onSuccess: () {},
      );
    }
  }

  _onShowDeleteTrashDialog(BuildContext context) async {
    final cubit = context.read<ClientDetailCubit>();
    final result = await DialogProvider.instance.show(
      context: context,
      barrierDismissible: true,
      child: const DeleteTrashConfirmDialog(),
    );

    if (!context.mounted) {
      return;
    }

    if (result == null || result == false) {
      return;
    }

    cubit.deleteTrash(onSuccess: () {
      context.read<ClientListLocalCubit>().removeAllLocalClient();
    });
  }
}
