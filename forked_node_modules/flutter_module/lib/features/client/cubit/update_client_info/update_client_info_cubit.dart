import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/features/client/repository/client_repository.dart';
import 'package:flutter_module/models/client/client_detail/client_detail_model.dart';
import 'package:flutter_module/models/client/client_detail/client_district_model.dart';
import 'package:flutter_module/services/api/client/payload/update_client_payload.dart';

part 'update_client_info_state.dart';

class UpdateClientInfoCubit extends Cubit<UpdateClientInfoState> {
  UpdateClientInfoCubit() : super(const UpdateClientInfoState());

  final TextEditingController fullNameController = TextEditingController();
  final TextEditingController idNumberController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController addressController = TextEditingController();
  final TextEditingController noteController = TextEditingController();

  final _repository = ClientRepository();

  ClientDetailModel? client;
  UpdateClientType? type;

  initData({
    required ClientDetailModel client,
    required UpdateClientType type,
  }) {
    fetchDistrict();
    this.client = client;
    this.type = type;
    fullNameController.text = client.fullName ?? '';
    idNumberController.text = client.idNumber ?? '';
    phoneController.text = client.mobilePhone ?? '';
    noteController.text = client.note ?? '';
    addressController.text = '${client.districtName ?? ''} - ${client.provinceName ?? ''}';
    emit(state.copyWith(
      selectedDistrictCode: client.district ?? '',
    ));
  }

  fetchDistrict() async {
    final result = await _repository.getDistricts();
    if (result.status) {
      emit(state.copyWith(
        districts: result.data,
      ));
    }
  }

  onFullNameChanged(String value) {
    _validateErrorFields(fields: _validateFullNameField());
  }

  onIDNumberChanged(String value) {
    _validateErrorFields(fields: _validateIDNumberField());
  }

  onPhoneChanged(String value) {
    _validateErrorFields(fields: _validatePhoneField());
  }

  selectDistrict(DataWrapper data) {
    addressController.text = data.value ?? '';
    emit(state.copyWith(
      selectedDistrictCode: data.id,
    ));
    _validateErrorFields(fields: _validateAddressField());
  }

  onNoteChanged(String value) {
    _validateErrorFields(fields: _validateNoteField());
  }

  _validateFullNameField() {
    final errorFields = {...state.errorFields};
    final key = UpdateClientInfoFields.fullName.name;

    if (fullNameController.text.trim().isEmpty) {
      errorFields[key] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(key);
    }

    return errorFields;
  }

  _validateIDNumberField() {
    final errorFields = {...state.errorFields};
    final key = UpdateClientInfoFields.idNumber.name;

    if (idNumberController.text.trim().isEmpty) {
      errorFields[key] = 'Thông tin này là bắt buộc';
    } else if (idNumberController.text.length != 9 && idNumberController.text.length != 12) {
      errorFields[key] = 'Độ dài CMND/CCCD là 9 hoặc 12 chữ số';
    } else {
      errorFields.remove(key);
    }

    return errorFields;
  }

  _validatePhoneField() {
    final errorFields = {...state.errorFields};
    final key = UpdateClientInfoFields.phone.name;

    if (phoneController.text.trim().isEmpty) {
      errorFields[key] = 'Thông tin này là bắt buộc';
    } else if (phoneController.text.length < 10) {
      errorFields[key] = 'Số điện thoại phải bao gồm 10 chữ số';
    } else {
      errorFields.remove(key);
    }

    return errorFields;
  }

  _validateAddressField() {
    final errorFields = {...state.errorFields};
    final key = UpdateClientInfoFields.address.name;

    if (addressController.text.trim().isEmpty) {
      errorFields[key] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(key);
    }

    return errorFields;
  }

  _validateNoteField() {
    final errorFields = {...state.errorFields};
    final key = UpdateClientInfoFields.note.name;

    if (noteController.text.trim().isEmpty) {
      errorFields[key] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(key);
    }

    return errorFields;
  }

  _validateErrorFields({Map<String, String>? fields}) {
    final errorFields = {...(fields ?? state.errorFields)};
    final enabledSubmit = errorFields.isEmpty;
    emit(state.copyWith(
      errorFields: errorFields,
      enabledSubmit: enabledSubmit,
    ));
    return enabledSubmit;
  }

  validateInfo() {
    final errorFields = {...state.errorFields};

    errorFields.addAll(_validateFullNameField());
    errorFields.addAll(_validateIDNumberField());
    errorFields.addAll(_validatePhoneField());
    errorFields.addAll(_validateAddressField());

    return _validateErrorFields(fields: errorFields);
  }

  validateNote() {
    final errorFields = {...state.errorFields};

    errorFields.addAll(_validateNoteField());

    return _validateErrorFields(fields: errorFields);
  }

  submit({
    Function(UpdateClientPayload)? onSuccess,
  }) {
    if (type == UpdateClientType.info) {
      _submitInfo(onSuccess: onSuccess);
      return;
    }
    if (type == UpdateClientType.note) {
      _submitNote(onSuccess: onSuccess);
      return;
    }
  }

  _submitInfo({
    Function(UpdateClientPayload)? onSuccess,
  }) {
    if (!validateInfo()) {
      return;
    }
    onSuccess?.call(
      UpdateClientPayload(
        id: client?.id,
        fullName: fullNameController.text,
        idNumber: idNumberController.text,
        mobilePhone: phoneController.text,
        district: state.selectedDistrictCode,
      ),
    );
  }

  _submitNote({
    Function(UpdateClientPayload)? onSuccess,
  }) {
    if (!validateNote()) {
      return;
    }
    onSuccess?.call(
      UpdateClientPayload(
        id: client?.id,
        note: noteController.text.trim(),
      ),
    );
  }

  @override
  Future<void> close() {
    fullNameController.dispose();
    idNumberController.dispose();
    phoneController.dispose();
    addressController.dispose();
    noteController.dispose();
    return super.close();
  }
}
