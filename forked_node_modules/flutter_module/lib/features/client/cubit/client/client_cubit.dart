import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/enum/client/client_tab_type.dart';
import 'package:flutter_module/features/client/repository/client_repository.dart';
import 'package:flutter_module/models/client_data/client_statistic_model.dart';
import 'package:flutter_module/models/client_data/filter_client_model.dart';

part 'client_state.dart';

class ClientGlobalCubit extends Cubit<ClientState> with ClientCubit {
  ClientGlobalCubit() : super(const ClientState());
}

class ClientLocalCubit extends Cubit<ClientState> with ClientCubit {
  ClientLocalCubit() : super(const ClientState());
}

enum ClientCubitType {
  clientGlobalCubit,
  clientLocalCubit,
}

mixin ClientCubit on Cubit<ClientState> {
  ClientRepository repository = ClientRepository();
  initCubit() {
    changeTab(ClientTabType.all.name);
  }

  initFilters({FilterClientModel? data}) {
    if (data == null) {
      return;
    }
    emit(state.copyWith(
      status: BlocStatus.success,
      filterClient: data,
    ));
  }

  getFilterClient() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await repository.getFilterClient();

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        filterClient: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  updateFilterSelecting(String key, List data) {
    Map<String, dynamic> filterSelecting = {...state.filterSelecting};
    filterSelecting[key] = data;
    emit(state.copyWith(
      filterSelecting: filterSelecting,
    ));
  }

  submitFilter() {
    emit(state.copyWith(
      filterSelected: {...state.filterSelecting},
    ));
  }

  cancelFilter() {
    emit(state.copyWith(
      filterSelecting: {...state.filterSelected},
    ));
  }

  removeFilter() {
    changeTab(ClientTabType.all.name);
  }

  selectFilterItem(String key, String value) {
    final isUpdateTab = key == 'group';
    Map<String, dynamic> filterSelecting = isUpdateTab ? {} : {...state.filterSelecting};
    final List selectValue = filterSelecting[key] ?? [];

    if (isUpdateTab) {
      filterSelecting[key] = value;
      emit(state.copyWith(
        filterSelecting: filterSelecting,
      ));

      return;
    }

    //
    final bool isExist = (selectValue).contains(value);

    //
    if (isExist) {
      filterSelecting[key] = [];
    } else {
      filterSelecting[key] = [value];
    }

    emit(state.copyWith(
      filterSelecting: filterSelecting,
    ));
  }

  changeTab(String value) {
    Map<String, dynamic> filterSelected = {};
    Map<String, dynamic> filterSelecting = {};
    filterSelected['group'] = value;
    filterSelecting['group'] = value;
    emit(state.copyWith(
      filterSelected: filterSelected,
      filterSelecting: filterSelecting,
    ));
  }

  initBottomSheetSelect(String key, {List<dynamic>? initValue}) {
    final List value = initValue ?? state.filterSelecting[key] ?? [];
    emit(state.copyWith(
      bottomSheetSelecting: value,
    ));
  }

  submitBottomSheetSelect(String key, bool submitted) {
    if (submitted) {
      final filterSelecting = {...state.filterSelecting};
      filterSelecting[key] = [...state.bottomSheetSelecting];
      emit(state.copyWith(
        bottomSheetSelecting: [],
        filterSelecting: filterSelecting,
      ));
      return;
    }
    emit(state.copyWith(
      bottomSheetSelecting: [],
    ));
  }

  selectBottomFilterItem(String value) {
    List filterSelecting = [...state.bottomSheetSelecting];

    //
    final bool isExist = filterSelecting.contains(value);

    //
    if (isExist) {
      filterSelecting = filterSelecting.where((e) => e != value).toList();
    } else {
      filterSelecting = [...filterSelecting, value];
    }

    emit(state.copyWith(
      bottomSheetSelecting: filterSelecting,
    ));
  }

  selectBottomAllFilterItem(bool isSelectAll, List<FilterProjects> data) {
    List filterSelecting;

    if (isSelectAll) {
      filterSelecting = data.map((e) => e.iD ?? e.id ?? "").toList();
    } else {
      filterSelecting = [];
    }

    emit(state.copyWith(
      bottomSheetSelecting: filterSelecting,
    ));
  }

  selectStatisticItem(StatisticData? item) {
    if (item == null || item.filters == null || item.filters?.isEmpty == true) return;
    final Map<String, dynamic> filterSelecting = {};
    for (var element in item.filters!) {
      if (element.key == 'group') {
        filterSelecting[element.key ?? ""] = element.value;
      } else {
        filterSelecting[element.key ?? ""] = [...?filterSelecting[element.key], element.value];
      }
    }
    if (filterSelecting['group'] == null) {
      filterSelecting['group'] = ClientTabType.all.name;
    }
    emit(state.copyWith(
      filterSelecting: filterSelecting,
    ));
    submitFilter();
  }

  clearData() {
    emit(const ClientState());
    initCubit();
  }
}
