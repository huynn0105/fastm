import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/chart/donut_chart/donut_chart_controller.dart';
import 'package:flutter_module/common/widgets/chart/donut_chart/donut_chart_data.dart';
import 'package:flutter_module/features/client/repository/client_repository.dart';
import 'package:flutter_module/models/client/ad_link/ad_link_statistic_model.dart';

part 'ad_link_statistic_state.dart';

class AdLinkStatisticCubit extends Cubit<AdLinkStatisticState> {
  AdLinkStatisticCubit() : super(const AdLinkStatisticState());
  final ClientRepository _repository = ClientRepository();
  DonutChartController controller = DonutChartController();

  getStatisticLink({List? potentialIDs}) async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.getStatisticLink(potentialIDs: potentialIDs);

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        guideStatus: BlocStatus.success,
        data: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
        guideStatus: BlocStatus.success,
      ));
    }
  }

  getAdLinkGuide() async {
    emit(state.copyWith(
      guideStatus: BlocStatus.loading,
    ));

    final result = await _repository.getStatisticLink();

    if (result.status) {
      emit(state.copyWith(
        guideStatus: BlocStatus.success,
        data: result.data,
      ));
    } else {
      emit(state.copyWith(
        guideStatus: BlocStatus.failure,
      ));
    }
  }

  DonutChartData getDonutChartData() {
    return DonutChartData.success(
      sections: (state.data?.data ?? [])
          .mapIndexed(
            (i, e) => DonutChartSectionData(
              color: UIColors.statisticColors.valueAt(i) ?? UIColors.primaryColor,
              label: "${e.title}",
              unit: 'người',
              value: TextUtils.parseDouble(e.count) ?? 0,
              percent: e.percent,
            ),
          )
          .toList(),
    );
  }

  @override
  Future<void> close() {
    controller.dispose();
    return super.close();
  }
}
