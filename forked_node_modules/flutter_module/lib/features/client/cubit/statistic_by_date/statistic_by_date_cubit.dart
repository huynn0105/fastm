import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/enum/client/client_statistic_chart_filter.dart';
import 'package:flutter_module/features/client/repository/client_repository.dart';
import 'package:flutter_module/models/client_data/client_statistic_by_date_model.dart';
import 'package:flutter_module/services/api/client/payload/get_stastis_by_date_pay_load.dart';

part 'statistic_by_date_state.dart';

class StatisticByDateCubit extends Cubit<StatisticByDateState> {
  StatisticByDateCubit() : super(const StatisticByDateState());

  ClientRepository repository = ClientRepository();

  GetStatisticByDatePayload _payload = GetStatisticByDatePayload(
    year: DateTime.now().year.toString(),
  );

  fetchData() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));
    final result = await repository.getStatisTicByDate(_payload);
    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        statistic: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  updatePayload({
    String? month,
  }) {
    _payload = _payload.copyWith(
      month: month,
    );
  }

  updateTypePayload(ClientStatisticChartFilterType type) {
    updatePayload(
      month: type == ClientStatisticChartFilterType.year ? '-1' : DateTime.now().month.toString(),
    );
  }

  changeType(ClientStatisticChartFilterType type) {
    emit(state.copyWith(
      selectingType: type,
    ));
  }

  fillSelectedType() {
    emit(state.copyWith(
      selectedType: state.selectingType,
    ));
    updateTypePayload(state.selectedType);
  }

  fillSelectingType() {
    emit(state.copyWith(
      selectingType: state.selectedType,
    ));
  }
}
