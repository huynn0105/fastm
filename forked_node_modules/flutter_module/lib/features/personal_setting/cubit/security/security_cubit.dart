import 'package:bloc/bloc.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/services/local/local_data_helper.dart';

import '../../../../common/utils/debounce_util.dart';
import '../../../account/repository/user_repository.dart';

part 'security_state.dart';

class SecurityCubit extends Cubit<SecurityState> {
  SecurityCubit() : super(const SecurityState());
  final _repository = UserRepository();
  final _debounce = DebounceUtil(milliseconds: 250);

  init() async {
    BaseModel<bool> result = await _repository.checkUsePassCode(LocalDataHelper.instance.getLoginPhone());
    LocalDataHelper.instance.setUsePassword(result.data == true);
    emit(state.copyWith(
      loginByPassword: result.data,
      useBiometric: LocalDataHelper.instance.getUseBiometric() == true,
    ));
  }

  toggleBiometric() {
    emit(state.copyWith(useBiometric: !state.useBiometric));
    LocalDataHelper.instance.setUseBiometric(state.useBiometric);
  }

  toggleLoginByPassword() {
    emit(state.copyWith(loginByPassword: !state.loginByPassword));
    _debounce.run(() {
      LocalDataHelper.instance.setUsePassword(state.loginByPassword);
      _repository.changeUsePassCode(state.loginByPassword ? 1 : 0);
    });
  }

  @override
  Future<void> close() {
    _debounce.cancel();
    return super.close();
  }
}
