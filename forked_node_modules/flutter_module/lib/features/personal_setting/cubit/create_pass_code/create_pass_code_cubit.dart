import 'dart:convert';

import 'package:bloc/bloc.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/account/repository/user_repository.dart';
import 'package:flutter_module/services/api/user/payload/create_pass_code_payload.dart';
import 'package:flutter_module/services/local/local_data_helper.dart';
import 'package:crypto/crypto.dart';

import '../../../account/cubit/user/user_cubit.dart';

part 'create_pass_code_state.dart';

class CreatePassCodeCubit extends Cubit<CreatePassCodeState> {
  CreatePassCodeCubit() : super(const CreatePassCodeState());

  final _repository = UserRepository();

  createPassCode(String passCode) async {
    emit(state.copyWith(status: BlocStatus.loading));
    final md5PassCode = md5.convert(utf8.encode(passCode)).toString();
    BaseModel<bool> result = await _repository.createPassCode(payload: CreatePassCodePayload(
      mobilePhone: LocalDataHelper.instance.getLoginPhone(),
      password: md5PassCode,
    ));
    if (result.status) {
      await LocalDataHelper.instance.setPassword(md5PassCode);
      await getItInstance.get<UserCubit>().getUserInfo();
      emit(state.copyWith(status: BlocStatus.success));
    } else {
      emit(state.copyWith(status: BlocStatus.failure, errMsg: state.errMsg));
    }
  }
}
