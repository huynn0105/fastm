import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/account/repository/user_repository.dart';
import 'package:flutter_module/models/personal_setting/login_history_model.dart';
import 'package:flutter_module/services/api/user/payload/get_login_history_payload.dart';

part 'login_history_state.dart';

class LoginHistoryCubit extends Cubit<LoginHistoryState> {
  LoginHistoryCubit() : super(const LoginHistoryState());

  final _repository = UserRepository();
  GetLoginHistoryPayload _payload = GetLoginHistoryPayload();

  fetchData({bool showLoading = true, bool loadMore = false}) async {
    updatePayload(page: loadMore ? (_payload.page ?? 0) + 1 : 1);

    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getLoginHistory(
      payload: _payload,
    );

    if (result.status) {
      var data = [...?result.data];
      if (loadMore) {
        data = [...state.histories, ...data];
      }
      final group = groupBy(data, (e) => e.formattedMonth);
      emit(state.copyWith(
        status: BlocStatus.success,
        histories: data,
        groupHistories: group,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }
  }

  updatePayload({
    int? page,
  }) {
    _payload = _payload.copyWith(
      userID: AppData.instance.userID,
      page: page,
      perPage: 20,
    );
  }

  refreshData() async {
    await fetchData(showLoading: false);
  }

  loadMoreData() async {
    final length = state.histories.length;
    await fetchData(showLoading: false, loadMore: true);
    return length != state.histories.length;
  }
}
