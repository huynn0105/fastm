import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/enum/personal_setting/personal_setting_block_type.dart';
import 'package:flutter_module/features/personal_setting/repository/personal_setting_repository.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/models/personal_setting/core_agent_model.dart';
import 'package:flutter_module/models/personal_setting/personal_setting_model.dart';
import '../../../../models/user/user_info_model.dart';

part 'personal_setting_state.dart';

class PersonalSettingCubit extends Cubit<PersonalSettingState> {
  PersonalSettingCubit() : super(const PersonalSettingState());

  final _repository = PersonalSettingRepository();

  Future<void> fetchData({bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(status: BlocStatus.loading));
    }

    List<BaseModel> results = await Future.wait([
      _repository.getPersonalSetting(),
      _repository.getCoreAgent()
    ]);

    final personalSettingresult = results[0] as BaseModel<List<PersonalSettingModel>>;
    final coreAgentResult = results[1] as BaseModel<CoreAgent>;

    if (personalSettingresult.status) {
      final data = personalSettingresult.data;
      data?.insert(
        1,
        PersonalSettingModel(
          id: PersonalSettingBlockType.mySupporter.id,
          title: "Người dẫn dắt",
          data: [],
        ),
      );
      emit(state.copyWith(
        status: BlocStatus.success,
        data: data,
        coreAgent: coreAgentResult.data ?? CoreAgent(),
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }
}
