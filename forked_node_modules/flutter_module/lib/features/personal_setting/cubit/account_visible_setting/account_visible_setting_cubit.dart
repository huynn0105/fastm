import 'package:bloc/bloc.dart';
import 'package:ekyc/common/bloc_status.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/features/personal_setting/repository/personal_setting_repository.dart';
import 'package:flutter_module/models/personal_setting/visible_setting_model.dart';
import 'package:flutter_module/services/api/personal_setting/payload/update_setting_payload.dart';

part 'account_visible_setting_state.dart';

class AccountVisibleSettingCubit extends Cubit<AccountVisibleSettingState> {
  AccountVisibleSettingCubit() : super(const AccountVisibleSettingState());

  final _repository = PersonalSettingRepository();

  fetchData() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.getVisibleSettings();

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        settings: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  updateSetting(int index, String categoryID, bool status) async {
    emit(state.copyWith(
      updateStatus: BlocStatus.loading,
    ));

    final result = await _repository.updateVisibleSetting(
      UpdateSettingPayload(
        categoryID: categoryID,
        status: status,
      ),
    );
    if (result.status) {
      final newSettings = [...state.settings];
      emit(
        state.copyWith(
          updateStatus: BlocStatus.success,
          settings: newSettings.updateAt(
            index,
            newSettings[index].copyWith(status: status ? '1' : '0'),
          ),
        ),
      );
    } else {
      emit(state.copyWith(
        updateStatus: BlocStatus.failure,
        errorMessage: result.errorMessage,
      ));
    }
  }
}
