import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/personal_setting/personal_setting_block_type.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/html_widget.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/common/widgets/mascot/mascot_no_login_widget.dart';
import 'package:flutter_module/common/widgets/ticket_item.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/account/cubit/user/user_cubit.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/features/legendary/cubit/legendary_change_supporter/legendary_change_supporter_cubit.dart';
import 'package:flutter_module/features/legendary/cubit/legendary_supporter/legendary_supporter_cubit.dart';
import 'package:flutter_module/features/legendary/pages/legendary/children/community/components/your_supporter_component.dart';
import 'package:flutter_module/features/personal_setting/cubit/personal_setting/personal_setting_cubit.dart';
import 'package:flutter_module/features/personal_setting/cubit/time_checking_config/time_checking_config_cubit.dart';
import 'package:flutter_module/features/personal_setting/pages/personal_setting/components/countdown_delete_account_component.dart';
import 'package:flutter_module/features/personal_setting/pages/personal_setting/components/del_mfast_lead_component.dart';
import 'package:flutter_module/features/personal_setting/pages/personal_setting/components/layout_component.dart';
import 'package:flutter_module/features/personal_setting/pages/personal_setting/components/personal_setting_app_bar.dart';
import 'package:flutter_module/features/personal_setting/pages/personal_setting/components/personal_setting_component.dart';
import 'package:flutter_module/features/personal_setting/pages/personal_setting/components/statistic_config_component.dart';
import 'package:flutter_module/features/personal_setting/pages/personal_setting/components/time_checking_config_component.dart';
import 'package:flutter_module/features/personal_setting/pages/personal_setting/items/ekyc/no_ekyc_item.dart';
import 'package:flutter_module/features/personal_setting/pages/personal_setting/widgets/personal_setting_block_widget.dart';
import 'package:flutter_module/general_config.dart';
import 'package:flutter_module/models/personal_setting/core_agent_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:percent_indicator/circular_percent_indicator.dart';
import 'package:popover/popover.dart';

import '../../../../common/widgets/images.dart';

part 'components/kpi_component.dart';

part 'widgets/kpi_tooltip_widget.dart';

@RoutePage()
class PersonalSettingPage extends StatefulWidget implements AutoRouteWrapper {
  const PersonalSettingPage({super.key});

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => PersonalSettingCubit(),
        ),
        BlocProvider(
          create: (_) =>
          LegendarySupporterCubit()
            ..getReviewFilter(),
        ),
        BlocProvider(
          create: (_) => LegendaryChangeSupporterCubit(),
        ),
        BlocProvider(
          create: (_) =>
          TimeCheckingConfigCubit()
            ..fetchData(),
        ),
      ],
      child: this,
    );
  }

  @override
  State<PersonalSettingPage> createState() => _PersonalSettingPageState();
}

class _PersonalSettingPageState extends State<PersonalSettingPage> {
  late final StreamSubscription _subscription;

  @override
  void initState() {
    super.initState();
    getItInstance.get<UserCubit>().getUserDelete();
    _subscription = eventBus.on<PersonalSettingEventBus>().listen(_onEventListen);
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<AuthCubit, AuthState>(
          listenWhen: (pre, cur) {
            return pre.status != cur.status;
          },
          listener: (context, state) {
            if (state.status.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: state.errorMessage ?? 'Đã xảy ra lỗi',
              );
            }
          },
        ),
        BlocListener<AuthCubit, AuthState>(
          listenWhen: (pre, cur) {
            return pre.hasLoggedIn != cur.hasLoggedIn;
          },
          listener: (context, state) {
            if (state.hasLoggedIn) {
              _onRefresh(context, showLoading: true);
            } else {
              _onClear(context);
            }
          },
        ),
      ],
      child: BlocBuilder<AuthCubit, AuthState>(
        builder: (context, authState) {
          bool hasLoggedIn = authState.hasLoggedIn;

          ///
          if (!hasLoggedIn) {
            return Scaffold(
              backgroundColor: UIColors.background,
              body: SafeArea(
                top: false,
                child: Column(
                  children: [
                    PersonalSettingAppBar(
                      hasLoggedIn: hasLoggedIn,
                    ),
                    Expanded(
                      child: Align(
                        alignment: const FractionalOffset(0.5, 0.35),
                        child: MascotNoLoginWidget(
                          onLogin: () {
                            context.router.push(LoginRoute());
                          },
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            );
          }

          ///
          return BlocBuilder<PersonalSettingCubit, PersonalSettingState>(
            builder: (context, state) {
              if (state.status.isInitial) {
                context.read<PersonalSettingCubit>().fetchData();
              }

              ///
              return Stack(
                children: [
                  Scaffold(
                    backgroundColor: UIColors.background,
                    body: SafeArea(
                      top: false,
                      child: LoadMoreWidget(
                        onRefresh: () async {
                          await _onRefresh(context);
                        },
                        child: ListView(
                          padding: const EdgeInsets.only(bottom: 30),
                          children: [
                            PersonalSettingAppBar(
                              hasLoggedIn: hasLoggedIn,
                            ),
                            const SizedBox(
                              height: 20,
                            ),
                            Visibility(
                              visible: hasLoggedIn,
                              child: const DelMFastLeadComponent(),
                            ),
                            Visibility(
                              visible: hasLoggedIn,
                              child: const StatisticConfigComponent(),
                            ),
                            Visibility(
                              visible: hasLoggedIn,
                              child: const TimeCheckingConfigComponent(),
                            ),
                            Visibility(
                              visible: hasLoggedIn,
                              child: BlocBuilder<UserCubit, UserState>(
                                builder: (context, state) {
                                  if (state.userDelete?.requestDeleteDate == null) {
                                    return const SizedBox();
                                  }
                                  return Padding(
                                    padding: const EdgeInsets.only(
                                      right: 16,
                                      left: 16,
                                      bottom: 24,
                                    ),
                                    child: Column(
                                      children: [
                                        CountdownDeleteAccountComponent(
                                          dateString: state.userDelete?.requestDeleteDate,
                                        ),
                                      ],
                                    ),
                                  );
                                },
                              ),
                            ),
                            Visibility(
                              visible: !state.status.isLoading,
                              child: PersonalSettingLayoutComponent(
                                builder: (userState, supporterState) {
                                  final hasVerified = userState.userMetaData?.isCTVConfirmed == true;
                                  final hideSupporter = AppData.instance.appInfo.isEcomRegistration == true ||
                                      supporterState.filters == null ||
                                      supporterState.filters?.hideSupporter == true;

                                  ///
                                  return Column(
                                    children: [
                                      Visibility(
                                        visible: state.coreAgent?.items != null,
                                        child: PersonalSettingBlockWidget(
                                          margin: const EdgeInsets.fromLTRB(16, 0, 16, 24),
                                          title: state.coreAgent?.label ?? '',
                                          trailing: const _Tooltips(),
                                          child: _KPIComponent(coreAgent: state.coreAgent),
                                        ),
                                      ),
                                      Visibility(
                                        visible: !hasVerified,
                                        child: const Column(
                                          children: [
                                            PersonalSettingBlockWidget(
                                              title: 'Hồ sơ cá nhân',
                                              padding: EdgeInsets.all(16),
                                              margin: EdgeInsets.symmetric(horizontal: 16),
                                              child: NoEkycItem(),
                                            ),
                                            SizedBox(
                                              height: 24,
                                            ),
                                          ],
                                        ),
                                      ),
                                      ListView.separated(
                                        shrinkWrap: true,
                                        physics: const NeverScrollableScrollPhysics(),
                                        padding: EdgeInsets.zero,
                                        itemBuilder: (context, index) {
                                          final block = state.data[index];

                                          /// Custom
                                          if (block.id == PersonalSettingBlockType.profile.id && !hasVerified) {
                                            return const SizedBox();
                                          }
                                          if (block.id == PersonalSettingBlockType.mySupporter.id) {
                                            if (hideSupporter) {
                                              return const SizedBox();
                                            }
                                            return Padding(
                                              padding: const EdgeInsets.symmetric(horizontal: 16),
                                              child: YourSupporterComponent(
                                                showToolTips: false,
                                                hasVerified: hasVerified,
                                                title: "Người dẫn dắt",
                                                titleStyle: UITextStyle.semiBold.copyWith(
                                                  fontSize: 14,
                                                  color: UIColors.grayText,
                                                ),
                                              ),
                                            );
                                          }

                                          ///
                                          return PersonalSettingComponent(
                                            data: block,
                                          );
                                        },
                                        separatorBuilder: (context, index) {
                                          final block = state.data[index];

                                          /// Custom
                                          if (block.id == PersonalSettingBlockType.profile.id && !hasVerified) {
                                            return const SizedBox();
                                          }
                                          if (block.id == PersonalSettingBlockType.mySupporter.id) {
                                            if (hideSupporter) {
                                              return const SizedBox();
                                            }
                                            return const SizedBox(
                                              height: 24,
                                            );
                                          }

                                          ///
                                          return const SizedBox(
                                            height: 24,
                                          );
                                        },
                                        itemCount: state.data.length,
                                      ),
                                    ],
                                  );
                                },
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                  if (state.status.isLoading) const LoadingWidget.dark(),
                ],
              );
            },
          );
        },
      ),
    );
  }

  Future _onRefresh(BuildContext context, {bool showLoading = false}) async {
    return await Future.wait([
      getItInstance.get<UserCubit>().fetchData(),
      context.read<LegendarySupporterCubit>().getReviewFilter(),
      context.read<PersonalSettingCubit>().fetchData(showLoading: showLoading),
      context.read<TimeCheckingConfigCubit>().fetchData(),
    ]).then((_) => eventBus.fire(RefreshSupporterEventBus()));
  }

  void _onEventListen(PersonalSettingEventBus event) {
    if (event is RefreshSupporterEventBus) {
      context.read<LegendarySupporterCubit>().getReviewFilter();
      context.read<PersonalSettingCubit>().fetchData(showLoading: false);
      return;
    }
    if (event is RefresshUserEventBus) {
      getItInstance.get<UserCubit>().getUserMetaData();
      getItInstance.get<UserCubit>().getUserInfo();
      context.read<PersonalSettingCubit>().fetchData(showLoading: false);
      return;
    }
    if (event is RefresshTimeCheckingEventBus) {
      context.read<TimeCheckingConfigCubit>().fetchData();
      return;
    }
  }

  void _onClear(BuildContext context) {
    context.read<TimeCheckingConfigCubit>().clearData();
    context.read<PersonalSettingCubit>().clearData();
  }
}
