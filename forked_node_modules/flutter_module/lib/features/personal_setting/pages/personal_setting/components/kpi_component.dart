part of '../personal_setting_page.dart';

class _KPIComponent extends StatelessWidget {
  const _KPIComponent({
    super.key,
    required this.coreAgent,
  });

  final CoreAgent? coreAgent;

  @override
  Widget build(BuildContext context) {
    return TicketWidget(
      leadingPadding: const EdgeInsets.all(16),
      trailingPadding: const EdgeInsets.all(16),
      leading: Column(
        children: [
          Row(
            children: [
              SizedBox(
                width: 180,
                child: __KPIItem(
                  leading: const AppImage.asset(
                    asset: 'ic_target',
                    height: 44,
                    width: 44,
                  ),
                  title: coreAgent?.items?.kpiTarget?.label ?? '',
                  subtitle: coreAgent!.items?.kpiTarget?.value ?? '',
                ),
              ),
              __KPIItem(
                title: coreAgent?.items?.kpiCurrent?.label ?? '',
                subtitle: coreAgent?.items?.kpiCurrent?.value ?? '',
              ),
            ],
          ),
          const SizedBox(height: 14),
          Row(
            children: [
              __KPIItem(
                leading: CircularPercentIndicator(
                  radius: 22.0,
                  lineWidth: 8.0,
                  percent: coreAgent?.items?.kpiCurrentPercent?.percent ?? 0,
                  progressColor: UIColors.boldBlue,
                  backgroundColor: UIColors.extraLightBlue,
                  circularStrokeCap: CircularStrokeCap.round,
                ),
                title: coreAgent?.items?.kpiCurrentPercent?.label ?? '',
                subtitle: '${coreAgent?.items?.kpiCurrentPercent?.value ?? '0%'}',
              ),
              const SizedBox(width: 20),
              __KPIItem(
                leading: CircularPercentIndicator(
                  radius: 22.0,
                  lineWidth: 8.0,
                  percent: coreAgent?.items?.kpiExpectedPercent?.percent ?? 0,
                  progressColor: UIColors.orange,
                  backgroundColor: UIColors.lightSecondaryColor,
                  circularStrokeCap: CircularStrokeCap.round,
                ),
                title: coreAgent?.items?.kpiExpectedPercent?.label ?? '',
                subtitle: '${coreAgent?.items?.kpiExpectedPercent?.value ?? '0%'}',
              ),
            ],
          ),
        ],
      ),
      trailing: Column(
        children: [
          Row(
            children: [
              Expanded(
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  decoration: const BoxDecoration(
                    borderRadius: BorderRadius.all(Radius.circular(8)),
                    color: UIColors.extraLightBlue,
                  ),
                  child: __KPIItem(
                    title: coreAgent?.items?.fixedSalary?.label ?? '',
                    subtitle: coreAgent?.items?.fixedSalary?.value ?? '',
                  ),
                ),
              ),
              const SizedBox(width: 7),
              Expanded(
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  decoration: const BoxDecoration(
                    borderRadius: BorderRadius.all(Radius.circular(8)),
                    color: UIColors.lightSecondaryColor,
                  ),
                  child: __KPIItem(
                    title: coreAgent?.items?.expectedReward?.label ?? '',
                    subtitle: coreAgent?.items?.expectedReward?.value ?? '',
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Container(
            decoration: const BoxDecoration(
              borderRadius: BorderRadius.all(Radius.circular(8)),
              color: UIColors.backgroundAccentGreen,
            ),
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
            child: Row(
              children: [
                Text(
                  coreAgent?.items?.totalIncome?.label ?? '',
                  style: UITextStyle.regular.copyWith(
                    fontSize: 13,
                    color: UIColors.lightText,
                  ),
                ),
                const SizedBox(width: 12),
                Text(
                  coreAgent?.items?.totalIncome?.value ?? '',
                  style: UITextStyle.semiBold.copyWith(
                    fontSize: 16,
                    color: UIColors.white,
                  ),
                )
              ],
            ),
          ),
          const SizedBox(height: 8),
          _Note(
            htmlValue: coreAgent?.html ?? '',
          )
        ],
      ),
    );
  }
}

class _Note extends StatelessWidget {
  const _Note({
    super.key,
    required this.htmlValue,
  });
  final String htmlValue;
  @override
  Widget build(BuildContext context) {
    return HtmlWidget(
      data: htmlValue,
      customRowViewMatcher: (renderContext, buildChildren) {
        final markupText = renderContext.tree.element?.text ?? '';
        final markupTextStyle =
            renderContext.tree.children.firstOrNull?.children.firstOrNull?.style.generateTextStyle();

        final children = <InlineSpan>[];
        if (markupText.contains('â€¢')) {
          final texts = markupText.split('\n');
          children.add(
            TextSpan(
              children: [
                WidgetSpan(
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        texts.first,
                        style: markupTextStyle,
                      ),
                      const SizedBox(width: 5),
                      Expanded(
                        child: Text(
                          texts.last.trim(),
                          style: markupTextStyle,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        } else {
          children.add(
            TextSpan(
              text: markupText,
              style: markupTextStyle,
            ),
          );
        }
        return TextSpan(children: children, style: markupTextStyle);
      },
    );
  }
}

class __KPIItem extends StatelessWidget {
  const __KPIItem({
    super.key,
    this.leading,
    required this.title,
    required this.subtitle,
  });
  final Widget? leading;
  final String title;
  final String subtitle;

  @override
  Widget build(BuildContext context) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        leading ?? const SizedBox.shrink(),
        Visibility(visible: leading != null, child: const SizedBox(width: 12)),
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: UITextStyle.regular.copyWith(
                fontSize: 13,
                color: UIColors.grayText,
              ),
            ),
            Text(
              subtitle,
              style: UITextStyle.semiBold.copyWith(
                fontSize: 16,
              ),
            ),
          ],
        ),
      ],
    );
  }
}
