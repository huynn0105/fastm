import 'dart:convert';

import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/personal_setting/personal_setting_action_type.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/common/utils/deeplink_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/ticket_item.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/models/personal_setting/personal_setting_model.dart';
import 'package:url_launcher/url_launcher_string.dart';
import '../../../../../routes/routes.gr.dart';
import '../items/profile/horizontal_personal_setting_item.dart';
import '../items/profile/vertical_personal_setting_item.dart';
import '../widgets/personal_setting_block_widget.dart';

class PersonalSettingComponent extends StatelessWidget {
  const PersonalSettingComponent({
    Key? key,
    required this.data,
  }) : super(key: key);

  final PersonalSettingModel data;

  @override
  Widget build(BuildContext context) {
    final headers = data.headerData ?? [];
    final items = data.data ?? [];
    final isHorizontal = data.horizontal ?? false;

    ///
    return PersonalSettingBlockWidget(
      title: data.title ?? "",
      margin: const EdgeInsets.symmetric(horizontal: 16),
      child: headers.isNotEmpty
          ? TicketWidget(
              leadingPadding: const EdgeInsets.only(bottom: 10),
              trailingPadding: const EdgeInsets.only(top: 10),
              leading: Row(
                children: List.generate(
                  headers.length,
                  (index) {
                    final item = headers[index];
                    return Expanded(
                      child: VerticalPersonalSettingItem(
                        title: item.label ?? '',
                        url: item.icon ?? '',
                        iconSize: 30,
                        showPending: item.isPending ?? false,
                        onTap: () {
                          _handle(context, item: headers[index]);
                        },
                      ),
                    );
                  },
                ),
              ),
              trailing: Column(
                children: List.generate(
                  items.length,
                  (index) {
                    final item = items[index];
                    return HorizontalPersonalSettingItem(
                      title: item.label ?? '',
                      url: item.icon ?? '',
                      content: item.rightLabel ?? '',
                      showBottomBorder: index < items.length - 1,
                      onTap: () {
                        _handle(context, item: items[index]);
                      },
                    );
                  },
                ),
              ),
            )
          : isHorizontal
              ? Row(
                  children: List.generate(
                    items.length,
                    (index) {
                      final item = items[index];
                      return Expanded(
                        child: VerticalPersonalSettingItem(
                          title: item.label ?? '',
                          url: item.icon ?? '',
                          showPending: item.isPending ?? false,
                          onTap: () {
                            _handle(context, item: items[index]);
                          },
                        ),
                      );
                    },
                  ),
                )
              : Column(
                  children: List.generate(
                    items.length,
                    (index) {
                      final item = items[index];
                      return HorizontalPersonalSettingItem(
                        title: item.label ?? '',
                        url: item.icon ?? '',
                        content: item.rightLabel ?? '',
                        showBottomBorder: index < items.length - 1,
                        onTap: () {
                          _handle(context, item: items[index]);
                        },
                      );
                    },
                  ),
                ),
    );
  }

  _onOpenDeepLink(BuildContext context, {String? url}) {
    if (url == null || !TextUtils.isDeeplink(url)) return;
    DeepLinkUtil.open(url, forceOpenDeeplink: true);
  }

  _handle(BuildContext context, {required PersonalItemModel item}) {
    debugPrint(jsonEncode(item.toJson()));
    final action = PersonalSettingActionType.values.firstWhereOrNull((e) => e.value == item.action);
    switch (action) {
      case PersonalSettingActionType.openSupport:
        _onOpenSupport(context);
        break;
      case PersonalSettingActionType.logout:
        _onLogout(context);
        break;
      default:
        _onOpenDeepLink(context, url: item.action);
        break;
    }
  }

  _onOpenSupport(BuildContext context) {
    context.pushRoute(ChatRoute());
  }

  _onLogout(BuildContext context) {
    DialogProvider.instance.showMTradeDialog(
      context: context,
      showDottedDivider: true,
      asset: 'ic_mtrade_mascot_waiting',
      title: 'MFast',
      message: 'Xác nhận đăng xuất tài khoản',
      negativeTitle: 'Huỷ',
      negativeCallback: () {},
      positiveTitle: 'Đăng xuất',
      positiveCallback: () {
        getItInstance.get<AuthCubit>().onLogout();
      },
    );
  }
}
