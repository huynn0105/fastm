import 'package:dotted_decoration/dotted_decoration.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/image_picker_utils.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/account/cubit/user/user_cubit.dart';
import 'package:flutter_module/features/personal_setting/cubit/edit_nick_name/edit_nick_name_cubit.dart';
import 'package:flutter_module/features/personal_setting/pages/personal_setting/components/edit_nickname_component.dart';

class UserInfoComponent extends StatelessWidget {
  const UserInfoComponent({
    super.key,
    this.hasLoggedIn = false,
  });

  final bool hasLoggedIn;

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserCubit, UserState>(
      builder: (context, state) {
        final userInfo = state.userInfo;
        final userMetaData = state.userMetaData;
        final avatar = userInfo?.avatarImage ?? '';
        final nickName = userMetaData?.fullName ?? '';
        final hasVerified = userMetaData?.isCTVConfirmed == true;

        ///
        return Visibility(
          visible: hasLoggedIn,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              BlocConsumer<UserCubit, UserState>(
                listenWhen: (pre, cur) {
                  return pre.avatarStatus != cur.avatarStatus;
                },
                listener: (context, state) {
                  if (state.avatarStatus.isSuccess) {
                    ToastProvider.instance.showSuccess(
                      context: context,
                      message: 'Cập nhật ảnh đại diện thành công',
                    );
                  } else if (state.avatarStatus.isFailure) {
                    ToastProvider.instance.showSuccess(
                      context: context,
                      message: 'Cập nhật ảnh đại diện thất bại',
                    );
                  }
                },
                builder: (context, state) {
                  return SizedBox(
                    width: 96,
                    height: 96,
                    child: Stack(
                      children: [
                        Container(
                          width: 96,
                          height: 96,
                          decoration: BoxDecoration(
                            color: UIColors.lightGray,
                            shape: BoxShape.circle,
                            border: Border.all(
                              color: UIColors.white,
                              width: 2,
                            ),
                          ),
                          alignment: Alignment.center,
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(50),
                            child: AppImage.network(
                              url: avatar,
                              width: 96,
                              height: 96,
                              fit: BoxFit.cover,
                              errorBuilder: () {
                                return const AppImage.asset(
                                  asset: 'ic_no_avatar',
                                  width: 56,
                                  height: 56,
                                  fit: BoxFit.cover,
                                );
                              },
                            ),
                          ),
                        ),
                        Visibility(
                          visible: state.avatarStatus.isLoading,
                          child: Container(
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              color: UIColors.blurBackground.withOpacity(0.5),
                            ),
                            alignment: Alignment.center,
                            child: Transform.scale(
                              scale: 1.2,
                              child: const CupertinoActivityIndicator(
                                color: UIColors.primaryColor,
                              ),
                            ),
                          ),
                        ),
                        if (hasLoggedIn)
                          Positioned(
                            left: -3,
                            bottom: -3,
                            child: Padding(
                              padding: const EdgeInsets.all(3),
                              child: Container(
                                width: 28,
                                height: 28,
                                decoration: const BoxDecoration(
                                  color: UIColors.background,
                                  shape: BoxShape.circle,
                                ),
                                child: hasVerified
                                    ? const AppImage.asset(
                                        asset: "ic_shield_success",
                                        fit: BoxFit.contain,
                                      )
                                    : const AppImage.asset(
                                        asset: "ic_shield_fail",
                                        fit: BoxFit.contain,
                                      ),
                              ),
                            ),
                          ),
                        if (hasLoggedIn)
                          Positioned(
                            right: -3,
                            bottom: -3,
                            child: SplashButton(
                              isDisabled: state.avatarStatus.isLoading,
                              onTap: () => _onShowImagePicker(context),
                              borderRadius: BorderRadius.circular(14),
                              child: Container(
                                width: 28,
                                height: 28,
                                padding: const EdgeInsets.all(3),
                                decoration: const BoxDecoration(
                                  color: UIColors.background,
                                  shape: BoxShape.circle,
                                ),
                                child: const AppImage.asset(
                                  asset: "ic_camera",
                                  fit: BoxFit.contain,
                                ),
                              ),
                            ),
                          ),
                      ],
                    ),
                  );
                },
              ),
              AppSplashButton(
                onTap: () {
                  showNicknameBottomSheet(context);
                },
                child: Container(
                  height: 40,
                  padding: const EdgeInsets.only(top: 8),
                  decoration: DottedDecoration(
                    shape: Shape.line,
                    linePosition: LinePosition.bottom,
                  ),
                  child: Text(
                    nickName,
                    style: UITextStyle.semiBold.copyWith(
                      fontSize: 18,
                    ),
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  showNicknameBottomSheet(BuildContext context) {
    final nickName = context.read<UserCubit>().state.userMetaData?.fullName ?? '';
    BottomSheetProvider.instance.show(
      context,
      title: "Thay đổi nickname",
      child: BlocProvider(
        create: (context) => EditNickNameCubit()..initNickName(nickName),
        child: EditNicknameComponent(
          nickname: nickName,
        ),
      ),
    );
  }

  _onShowImagePicker(BuildContext context) async {
    final cubit = context.read<UserCubit>();
    final file = await ImagePickerUtils.pickImage(
      context: context,
      type: PickResourceType.gallery,
    );
    if (file != null) {
      cubit.updateAvatar(
        file: file,
        onSuccess: () {},
      );
    }
  }
}
