import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/bottom_sheet/views/review_view.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/chat/media_type.dart';
import 'package:flutter_module/common/enum/deeplink_path.dart';
import 'package:flutter_module/common/enum/webview/webview_mode.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/extension/map_extension.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/deeplink_handler_util.dart';
import 'package:flutter_module/common/utils/deeplink_util.dart';
import 'package:flutter_module/common/utils/image_gallery_util.dart';
import 'package:flutter_module/common/utils/image_picker_utils.dart';
import 'package:flutter_module/common/utils/location_util.dart';
import 'package:flutter_module/common/utils/log_util.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/env_data.dart';
import 'package:flutter_module/features/app_cubit.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/features/camera/page/custom_camera_page.dart';
import 'package:flutter_module/features/chat/cubit/chat_contact/chat_contact_cubit.dart';
import 'package:flutter_module/features/chat/cubit/file_handler/file_handler_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/check_project_code/mtrade_check_project_code_cubit.dart';
import 'package:flutter_module/features/webview/component/no_internet_component.dart';
import 'package:flutter_module/features/webview/component/unknown_component.dart';
import 'package:flutter_module/features/webview/cubit/download_images/download_images_cubit.dart';
import 'package:flutter_module/features/webview/cubit/webview_cubit.dart';
import 'package:flutter_module/features/webview/utils/webview_share_util.dart';
import 'package:flutter_module/models/chat/file/media_model.dart';
import 'package:flutter_module/models/mtrade/review/mtrade_select_user_review_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:flutter_module/services/bridge/bridge_service.dart';
import 'package:image_cropper/image_cropper.dart';
import 'package:internet_connection_checker/internet_connection_checker.dart';
import 'package:url_launcher/url_launcher_string.dart';

import '../../app_data.dart';
import '../../common/enum/webview/webview_error_type.dart';
import '../../common/widgets/appbar.dart';
import '../../models/mtrade/order/payment_method_model.dart';
import '../../routes/deeplink/mfast_deeplink_path.dart';
import '../../routes/routes.dart';

@RoutePage()
class WebViewPage extends StatelessWidget {
  const WebViewPage({
    Key? key,
    @QueryParam("url") this.url,
    @QueryParam("title") this.title = "MTrade",
    @QueryParam("showTitle") this.showTitle = true,
    @QueryParam("isShowNotificationButton") this.isShowNotificationButton,
    @QueryParam("indexTabNotification") this.indexTabNotification,
    @QueryParam("isBackableInside") this.isBackableInside,
    @QueryParam("urlsStack") this.urlsStack,
    @QueryParam("unbackableURLs") this.unbackableURLs,
    @QueryParam("needDecode") this.needDecode = true,
    @QueryParam("injectFunc") this.injectFunc,
    this.backgroundColor = UIColors.white,
    this.showSafeBottom = true,
  }) : super(key: key);

  final String? title;
  final String? url;
  final bool? showTitle;
  final bool? isShowNotificationButton;
  final int? indexTabNotification;
  final bool? isBackableInside;
  final List<String>? urlsStack;
  final List<String>? unbackableURLs;
  final bool needDecode;
  final String? injectFunc;
  final Color backgroundColor;
  final bool showSafeBottom;

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => WebViewCubit(),
        ),
        BlocProvider(
          create: (_) => DownloadImagesCubit(),
        ),
        BlocProvider(
          create: (_) => FileHandlerCubit(),
        ),
      ],
      child: _WebViewPage(
        url: url,
        title: title,
        showTitle: showTitle,
        isShowNotificationButton: isShowNotificationButton,
        indexTabNotification: indexTabNotification,
        isBackableInside: isBackableInside,
        needDecode: needDecode,
        injectFunc: injectFunc,
        backgroundColor: backgroundColor,
        showSafeBottom: showSafeBottom,
      ),
    );
  }
}

class _WebViewPage extends StatefulWidget {
  const _WebViewPage({
    Key? key,
    this.url,
    this.title = "MTrade",
    this.showTitle = true,
    this.needDecode = true,
    this.isShowNotificationButton,
    this.indexTabNotification,
    this.isBackableInside,
    this.injectFunc,
    this.backgroundColor = UIColors.white,
    this.showSafeBottom = true,
  }) : super(key: key);

  final String? title;
  final String? url;
  final bool? showTitle;
  final bool? isShowNotificationButton;
  final int? indexTabNotification;
  final bool? isBackableInside;
  final bool needDecode;
  final String? injectFunc;
  final Color backgroundColor;
  final bool showSafeBottom;

  @override
  State<_WebViewPage> createState() => _WebViewPageState();
}

class _WebViewPageState extends State<_WebViewPage> {
  final String _tag = "WebView";

  String _url = "";
  String _title = "";

  List<String> history = [];

  bool _showTitle = true;
  bool _forceRouterPop = false;
  bool _hideBackButton = false;

  WebViewBackMode _webViewBackMode = WebViewBackMode.NORMAL;

  StreamSubscription? internetSubscription;

  InAppWebViewController? webViewController;
  InAppWebViewGroupOptions options = InAppWebViewGroupOptions(
    crossPlatform: InAppWebViewOptions(
      useShouldOverrideUrlLoading: true,
      mediaPlaybackRequiresUserGesture: false,
    ),
    android: AndroidInAppWebViewOptions(
      useHybridComposition: false,
      geolocationEnabled: true,
    ),
    ios: IOSInAppWebViewOptions(
      allowsInlineMediaPlayback: true,
      sharedCookiesEnabled: true,
    ),
  );
  late PullToRefreshController pullToRefreshController;

  @override
  void initState() {
    super.initState();
    _url = widget.needDecode ? _convertToPrivateUrl(widget.url ?? "") : widget.url;
    _formatURL();
    _title = widget.title ?? "";
    _showTitle = widget.showTitle ?? true;

    ///
    pullToRefreshController = PullToRefreshController(
      options: PullToRefreshOptions(
        color: Colors.blue,
      ),
      onRefresh: () async {
        _showLoading(context);
        if (Platform.isAndroid) {
          webViewController?.reload();
        } else if (Platform.isIOS) {
          webViewController?.loadUrl(
            urlRequest: URLRequest(
              url: await webViewController?.getUrl(),
            ),
          );
        }
      },
    );
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (kIsWeb) {
        context.read<WebViewCubit>().initFrame(_url);
      } else {
        internetSubscription = InternetConnectionChecker().onStatusChange.listen(_listenConnectivityChanged);
      }
    });
  }

  _formatURL() {
    if (_url.endsWith('/')) {
      return;
    }
    if (!_url.endsWith('/') && !_url.contains('?')) {
      _url = '$_url/';
    }
    if (!_url.endsWith('/') && _url.contains('?') && !_url.contains('/?')){
      _url = _url.replaceFirst('?', '/?');
      return;
    }
  }

  @override
  void dispose() {
    internetSubscription?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        if (_forceRouterPop) {
          if (!context.router.canPop()) {
            RedirectUtil.backToMFast();
            return false;
          }
          return true;
        }
        bool canGoBack = await webViewController?.canGoBack() ?? false;
        if (canGoBack == true) {
          webViewController?.goBack();
          return false;
        }
        if (mounted && !context.router.canPop()) {
          RedirectUtil.backToMFast();
          return false;
        }
        return true;
      },
      child: Scaffold(
        // floatingActionButton: FloatingActionButton(
        //   onPressed: () {
        //     webViewController?.evaluateJavascript(
        //       source: action,
        //     );
        //   },
        // ),
        appBar: !_showTitle
            ? null
            : MFastAdvanceAppBar(
                context: context,
                title: _title,
                centerTitle: true,
                onBack: () => _handleBackButton(context),
                autoEnablePop: !_hideBackButton,
                onHome: () => _forcePop(context),
                actions: [
                  if (widget.isShowNotificationButton == true) ...[
                    AppSplashButton(
                      onTap: () {
                        context.pushRoute(const MFastNotificationRoute());
                      },
                      child: Container(
                        height: 40,
                        width: 40,
                        alignment: Alignment.center,
                        child: const AppImage.asset(
                          asset: "ic_notification_outline",
                          height: 24,
                          width: 24,
                          color: UIColors.grayText,
                        ),
                      ),
                    ),
                  ],
                ],
              ),
        backgroundColor: widget.backgroundColor,
        resizeToAvoidBottomInset: kIsWeb || Platform.isAndroid,
        body: SafeArea(
          child: Column(
            children: [
              BlocBuilder<WebViewCubit, WebViewState>(
                builder: (context, state) {
                  return Visibility(
                    visible: state.showLoading,
                    child: const LinearProgressIndicator(
                      color: UIColors.primaryColor,
                    ),
                  );
                },
              ),
              Expanded(
                child: Stack(
                  children: [
                    // kIsWeb
                    //     ? BlocBuilder<WebViewCubit, WebViewState>(
                    //         builder: (context, state) {
                    //           if (state.iframeKey.isEmpty) {
                    //             return const SizedBox();
                    //           }
                    //           return HtmlElementView(
                    //             viewType: state.iframeKey,
                    //           );
                    //         },
                    //       )
                    //     :
                    InAppWebView(
                      initialUrlRequest: URLRequest(url: Uri.parse(_url)),
                      initialUserScripts: UnmodifiableListView<UserScript>([]),
                      initialOptions: options,
                      pullToRefreshController: pullToRefreshController,
                      onWebViewCreated: (controller) {
                        webViewController = controller;
                        _handlePostMessage(context);
                      },
                      androidOnPermissionRequest: (controller, origin, resources) async {
                        return PermissionRequestResponse(
                          resources: resources,
                          action: PermissionRequestResponseAction.GRANT,
                        );
                      },
                      androidOnGeolocationPermissionsShowPrompt: (controller, origin) async {
                        return GeolocationPermissionShowPromptResponse(
                          origin: origin,
                          allow: true,
                          retain: true,
                        );
                      },
                      onLoadStart: (controller, url) {
                        _webViewBackMode = WebViewBackMode.NORMAL;
                        _url = url.toString();
                        AppLog.d(_tag, "onLoadStart: $url");
                        if (TextUtils.isDeeplink(_url) || TextUtils.forceOpenBrowser(_url)) {
                          GlobalFunction.launchScheme(
                            url?.toString() ?? "",
                            mode: LaunchMode.externalApplication,
                          );
                          _forcePop(context);
                        }
                        if (url?.path.contains('goHome') == true) {
                          context.router.pop();
                        }
                        _showLoading(context);
                      },
                      onLoadStop: (controller, url) async {
                        _triggerInjectFunc();
                        pullToRefreshController.endRefreshing();
                        _hideLoading(context);
                      },
                      onLoadError: (controller, url, code, message) {
                        AppLog.d(_tag, "onLoadError: $code -> $message");
                        _handleLoadError(
                          controller: controller,
                          url: url,
                          code: code,
                          message: message,
                        );
                        pullToRefreshController.endRefreshing();
                        _hideLoading(context);
                      },
                      onLoadHttpError: (controller, url, statusCode, message) {
                        _handleLoadError(controller: controller, url: url, code: statusCode, message: message);
                      },
                      onProgressChanged: (controller, progress) {
                        if (progress == 100) {
                          pullToRefreshController.endRefreshing();
                        }
                      },
                      onConsoleMessage: (controller, consoleMessage) {
                        AppLog.d(_tag, "onConsoleMessage: $consoleMessage");
                      },
                      shouldOverrideUrlLoading: (controller, navigationAction) async {
                        _webViewBackMode = WebViewBackMode.NORMAL;
                        // Handle before running onLoadStart
                        final String scheme = navigationAction.request.url!.toString();
                        AppLog.d(_tag, "shouldOverrideUrlLoading: $scheme");
                        if (TextUtils.isDeeplink(scheme) || TextUtils.forceOpenBrowser(scheme)) {
                          final paths = DeepLinkHandlerUtil.decodeURL(scheme);
                          final path = paths['path'];

                          if (path == DeepLinkPath.copy.getPath()) {
                            DeepLinkUtil.open(scheme);
                            return NavigationActionPolicy.CANCEL;
                          }
                          final params = paths["params"] ?? {};
                          final isSingleChat = path == DeepLinkPath.singleChat.getPath();
                          final isGroupChat = path == DeepLinkPath.groupChat.getPath();
                          if (isSingleChat || isGroupChat) {
                            getItInstance.get<AppRouter>().push(
                                  ChatRoute(
                                    chatUserID: params["userID"],
                                    threadID: params["threadID"],
                                  ),
                                );
                            return NavigationActionPolicy.CANCEL;
                          }
                          DeepLinkUtil.open(scheme, requiredLogin: true);

                          if ((TextUtils.isDeeplink(scheme) || TextUtils.forceOpenBrowser(scheme)) &&
                              path != DeepLinkPath.share.getPath()) {
                            _forcePop(context);
                          }
                          return NavigationActionPolicy.CANCEL;
                        }

                        ///
                        _updateHistory(scheme);
                        return NavigationActionPolicy.ALLOW;
                      },
                    ),
                    BlocBuilder<WebViewCubit, WebViewState>(
                      builder: (context, state) {
                        if (state.errorType == null) {
                          return const SizedBox();
                        }
                        switch (state.errorType) {
                          case WebViewErrorType.notFound:
                            return UnknownComponent(
                              onTap: () {
                                _forcePop(context);
                              },
                            );
                          case WebViewErrorType.noInternet:
                            return NoInternetComponent(
                              onTap: () {
                                context.read<WebViewCubit>().clearErrorType();
                                _reloadWebView();
                              },
                            );
                          default:
                            return const SizedBox();
                        }
                      },
                    ),
                    BlocBuilder<FileHandlerCubit, FileHandlerState>(
                      builder: (context, fileState) {
                        return BlocBuilder<DownloadImagesCubit, DownloadImagesState>(
                          builder: (context, downloadState) {
                            final isLoading =
                                fileState.data[_tag]?.status.isLoading == true || downloadState.status.isLoading;
                            return Visibility(
                              visible: isLoading,
                              child: const LoadingWidget.dark(),
                            );
                          },
                        );
                      },
                    ),
                  ],
                ),
              ),
              Visibility(
                visible: widget.showSafeBottom,
                child: SizedBox(
                  height: AppSize.instance.safeBottom,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  _convertToPrivateUrl(String? url) {
    if (TextUtils.isEmpty(url)) {
      return '';
    }
    var uri = Uri.parse(Uri.decodeFull(url!));
    final queryParameters = {
      ...uri.queryParameters,
      ...AppData.instance.defaultParam.toJson(),
    }.removeFalsyValue();
    uri = uri.replace(
      queryParameters: queryParameters,
    );
    return uri.toString();
  }

  _showLoading(BuildContext context) {
    if (mounted) {
      context.read<WebViewCubit>().showLoading();
    }
  }

  _hideLoading(BuildContext context) {
    if (mounted) {
      context.read<WebViewCubit>().hideLoading();
    }
  }

  _forcePop(BuildContext context) {
    _forceRouterPop = true;
    context.router.pop();
  }

  _handlePostMessage(BuildContext context) {
    webViewController?.addJavaScriptHandler(
      handlerName: "OPEN_MOMO",
      callback: (args) {
        if (args.isNotEmpty) {
          GlobalFunction.launchScheme(
            args.first['data']?['target'],
            mode: LaunchMode.externalApplication,
          );
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "GO_HOME",
      callback: (args) {
        context.router.popUntilRoot();
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "EXIT_FLUTTER",
      callback: (args) {
        RedirectUtil.backToMFast();
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "DEEP_LINK",
      callback: (args) {
        RedirectUtil.backToMFast();
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "MTRADE_PROJECT_CODE_SUCCESS",
      callback: (args) {
        getItInstance.get<MTradeCheckProjectCodeCubit>().refreshPayNow();
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "LOCATION_KEY",
      callback: (args) {
        _handleGetLocation(context);
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "SHARE_BY_OS",
      callback: (args) {
        if (args.isNotEmpty) {
          final json = args.valueAt(0);
          if (json is Map) {
            GlobalFunction.shareText(
              json['text'],
              subject: json['subject'],
            );
          }
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "SAVE_IMAGES",
      callback: (args) {
        if (args.isNotEmpty) {
          final json = args.valueAt(0);
          if (json is Map) {
            List<String> images = (json["images"] as List?)?.cast<String>() ?? [];
            final cubit = context.read<DownloadImagesCubit>();
            cubit.download(
              urls: images,
              onSuccess: (paths) {
                ImageGalleryUtil.instance.saveLocalImage(
                  paths: paths,
                  context: context,
                  onSuccess: () {
                    ToastProvider.instance.show(
                      context: context,
                      message: "Lưu ảnh thành công",
                      backgroundColor: UIColors.green,
                      duration: const Duration(seconds: 2),
                    );
                  },
                  onFailure: () {
                    ToastProvider.instance.show(
                      context: context,
                      message: "Lưu ảnh thất bại",
                      backgroundColor: UIColors.red,
                      duration: const Duration(seconds: 2),
                    );
                  },
                );
              },
            );
          }
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "OPEN_BROWSER",
      callback: (args) {
        if (args.isNotEmpty) {
          GlobalFunction.launchScheme(
            "${args.first?['url'] ?? ""}",
            mode: LaunchMode.externalApplication,
          );
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "OPEN_VN_PAY",
      callback: (args) {
        if (args.isNotEmpty) {
          // final data = {"data": args.first};
          // EventUtil.sendEventToRN('OPEN_VN_PAY', data: jsonEncode(data));
          BridgeService.instance.openVNPayFromWebView(json: {"data": args.first}, title: _title);
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "COPY_TEXT",
      callback: (args) {
        if (args.isNotEmpty) {
          GlobalFunction.copyText("${args.valueAt(0) ?? ""}").then((_) {
            ToastProvider.instance.showCopy(context: context);
          });
        }
      },
    );

    /// Affiliate
    webViewController?.addJavaScriptHandler(
      handlerName: "affiliate_open_tel_link",
      callback: (args) {
        if (args.isNotEmpty) {
          GlobalFunction.launchPhone(
            "${args.valueAt(0) ?? ""}",
          );
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "affiliate_close_webview",
      callback: (args) {
        _forcePop(context);
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "affiliate_open_home",
      callback: (args) {
        RedirectUtil.backToMFast();
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "affiliate_open_notification",
      callback: (args) {
        RedirectUtil.openMFastDeepLink(MFastDeeplinkPath.openNotification());
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "affiliate_open_redirect_link",
      callback: (args) {
        if (args.isNotEmpty) {
          GlobalFunction.launchScheme(
            args.valueAt(0) ?? "",
            mode: LaunchMode.externalApplication,
          );
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "affiliate_open_help_center",
      callback: (args) async {
        RedirectUtil.openMFastDeepLink(
          MFastDeeplinkPath.openOSTicket(
            params: {
              "screenMode": "Start",
              "messageDefault": "Yêu cầu hỗ trợ dự án MFast eCom Affiliate",
            },
          ),
        );
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "CLOSE_WEBVIEW",
      callback: (args) async {
        _forcePop(context);
      },
    );
    // webViewController?.addJavaScriptHandler(
    //   handlerName: "LOG_EVENT",
    //   callback: (args) async {
    //     if (args.isNotEmpty) {
    //       final dataJSON = args.getFirst();
    //       if (dataJSON is Map) {
    //         getItInstance.get<AppCubit>().trackingEvent(
    //               event: TrackingEventType.empty,
    //               eventName: dataJSON['eventName'],
    //               params: dataJSON['data'],
    //             );
    //       }
    //     }
    //   },
    // );
    webViewController?.addJavaScriptHandler(
      handlerName: "REVIEW_USER",
      callback: (args) async {
        if (args.isNotEmpty) {
          _reviewUser(args.first);
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "OPEN_WEBVIEW",
      callback: (args) async {
        if (args.isNotEmpty) {
          final data = args.first;
          if (data is Map<String, dynamic>) {
            context.pushRoute(WebViewRoute(url: data['url'], title: data['title']));
          }
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "OPEN_VIEW",
      callback: (args) async {
        if (args.isNotEmpty) {
          final path = args.first;
          getItInstance.get<AppRouter>().pushNamed(path);
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "OPEN_MFAST_DEEPLINK",
      callback: (args) {
        if (args.isNotEmpty) {
          RedirectUtil.openMFastDeepLink(args.first);
        }
      },
    );

    webViewController?.addJavaScriptHandler(
      handlerName: "SELECT_PAYMENT_METHOD",
      callback: (args) {
        if (args.isNotEmpty) {
          final data = args.first;
          if (data is Map) {
            final selectedPaymentMethod = PaymentMethodModel.fromJson(data);
            Navigator.pop(context, selectedPaymentMethod);
          }
        }
      },
    );

    ///
    webViewController?.addJavaScriptHandler(
      handlerName: "required_login", //
      callback: (args) {
        final hasLoggedIn = context.read<AuthCubit>().state.hasLoggedIn;
        if (!hasLoggedIn) {
          context.router.push(LoginRoute(
            onSuccess: () {
            getItInstance.get<AppRouter>().push(WebViewRoute(title: widget.title, url: _url));
            },
          ));
        }
      },
    );

    /// TODO: RN not used
    // webViewController?.addJavaScriptHandler(
    //   handlerName: "MB_SHARE_CLICK",
    //   callback: (args) {
    //     ///
    //   },
    // );
    webViewController?.addJavaScriptHandler(
      handlerName: "CONTACT_KEY", // contacts in chat
      callback: (args) {
        final contacts = getItInstance.get<ChatContactCubit>().state.contacts;
        final trackingInfo = AppData.instance.getTrackingInfo();
        _sendMessageToWebView({
          "key": "CONTACT_KEY",
          "data": contacts,
          ...trackingInfo,
        });
      },
    );

    /// TODO: BE not used
    // webViewController?.addJavaScriptHandler(
    //   handlerName: "CONFIG_KEY",
    //   callback: (args) {
    //     if (args.isNotEmpty) {
    //       final dataJSON = args.getFirst();
    //       if (dataJSON is Map) {
    //         String title = dataJSON["title"]?.toString() ?? "";
    //         if (title.isNotEmpty) {
    //           setState(() {
    //             _title = title;
    //           });
    //         }
    //       }
    //     }
    //   },
    // );
    webViewController?.addJavaScriptHandler(
      handlerName: "TITLE_KEY",
      callback: (args) {
        if (args.isNotEmpty) {
          final dataJSON = args.getFirst();
          if (dataJSON is Map) {
            String title = dataJSON["title"]?.toString() ?? "";
            if (title.isNotEmpty) {
              setState(() {
                _title = title;
              });
            }
          }
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "CUSTOM_BACK_KEY",
      callback: (args) {
        if (args.isEmpty) {
          return;
        }
        final dataJSON = args.getFirst();
        if (dataJSON is! Map<String, dynamic>) {
          return;
        }
        final mode = WebViewBackMode.values.firstWhereOrNull((e) => e.name == dataJSON['mode']);
        _webViewBackMode = mode ?? WebViewBackMode.NONE;
        if (_webViewBackMode == WebViewBackMode.HIDDEN) {
          setState(() {
            _hideBackButton = true;
          });
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "ON_BACK_KEY",
      callback: (args) {
        _handleBackButton(context);
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "NUMBER_BACK_KEY",
      callback: (args) {
        if (args.isNotEmpty) {
          final dataJSON = args.getFirst();
          if (dataJSON is Map) {
            int? numberOfBack = TextUtils.parseInt(dataJSON["step"]);
            if (numberOfBack != null) {
              _removeHistory(numberOfBack);
            }
          }
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "BROAD_CAST_DATA_KEY",
      callback: (args) {
        if (args.isNotEmpty) {
          final dataJSON = args.getFirst();
          _sendMessageToWebView(dataJSON);
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "PHOTO_PICKER_KEY",
      callback: (args) async {
        if (args.isEmpty) {
          return;
        }
        final dataJSON = args.getFirst();
        if (dataJSON is! Map<String, dynamic>) {
          return;
        }
        _handlePicker(
          context: context,
          dataJSON: dataJSON,
          type: PickResourceType.gallery,
          onDone: (dataJSON, hasChoose, imageURL) {
            _sendMessageToWebView({
              ...dataJSON,
              "hasChoose": hasChoose,
              if (hasChoose) "path": imageURL,
            });
          },
        );
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "CAMERA_PICKER_KEY",
      callback: (args) async {
        if (args.isEmpty) {
          return;
        }
        final dataJSON = args.getFirst();
        if (dataJSON is! Map<String, dynamic>) {
          return;
        }
        _handlePicker(
          context: context,
          dataJSON: dataJSON,
          type: PickResourceType.camera,
          onDone: (dataJSON, hasChoose, imageURL) {
            _sendMessageToWebView({
              ...dataJSON,
              "hasChoose": hasChoose,
              if (hasChoose) "path": imageURL,
            });
          },
        );
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "LOG_EVENT",
      callback: (args) async {
        if (args.isEmpty) {
          return;
        }
        final dataJSON = args.getFirst();
        if (dataJSON is! Map<String, dynamic>) {
          return;
        }
        final params = dataJSON["params"] ?? {};
        if (params is Map && params.isNotEmpty) {
          getItInstance.get<AppCubit>().trackingEvent(
                event: null,
                eventName: params["eventName"],
                params: params["data"],
              );
        }
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "SHARE_FACEBOOK",
      callback: (args) async {
        /// BE not used
        if (args.isEmpty) {
          return;
        }
        final dataJSON = args.getFirst();
        if (dataJSON is! Map<String, dynamic>) {
          return;
        }

        String urlShare = dataJSON['url_share'] ?? "";
        String message = dataJSON['message'] ?? "";

        Map<String, dynamic> shareLinkContent = {
          'contentType': 'link',
          'contentUrl': urlShare,
          'contentDescription': message,
        };

        /// TODO: implement Share content on Facebook app
        final result = await WebViewShareUtil.shareNewFeedZalo(shareLinkContent);

        _sendMessageToWebView({
          ...dataJSON,
          'success': result != null,
        });
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "SHARE_ZALO",
      callback: (args) async {
        if (args.isEmpty) {
          return;
        }
        final dataJSON = args.getFirst();
        if (dataJSON is! Map<String, dynamic>) {
          return;
        }

        String urlShare = dataJSON['url_share'] ?? "";
        String message = dataJSON['message'] ?? "";

        Map<String, dynamic> feedData = {
          'message': message,
          'link': urlShare,
          'linkTitle': urlShare,
          'linkSource': urlShare,
          'linkDesc': urlShare,
          'linkThumb': [urlShare],
          'others': {},
          'appName': 'MFast',
        };

        final result = await WebViewShareUtil.shareNewFeedZalo(feedData);

        _sendMessageToWebView({
          ...dataJSON,
          'success': result != null && result['success'] != null,
        });
      },
    );

    /// TODO: BE not used
    // webViewController?.addJavaScriptHandler(
    //   handlerName: "INJECT_FUNC",
    //   callback: (args) async {
    //     if (args.isEmpty) {
    //       return;
    //     }
    //     final dataJSON = args.getFirst();
    //     if (dataJSON is! Map<String, dynamic>) {
    //       return;
    //     }
    //     String injectFunc = dataJSON['data']?['injectFunc'] ?? '';
    //     webViewController?.evaluateJavascript(
    //       source: '$injectFunc;true;',
    //     );
    //   },
    // );
    webViewController?.addJavaScriptHandler(
      handlerName: "HIDE_NAVIGATION_KEY",
      callback: (args) async {
        setState(() {
          _showTitle = false;
        });
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "IN_APP_REVIEW",
      callback: (args) async {
        GlobalFunction.showInAppReview(
          onSuccess: () {
            _sendMessageToWebView({
              "success": true,
            });
          },
          onFailure: () {
            _sendMessageToWebView({
              "success": false,
            });
          },
        );
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "OPEN_SCREEN_APP",
      callback: (args) async {
        /// TODO
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "BACK_TO_HOME",
      callback: (args) async {
        _forcePop(context);
        context.router.popUntilRoot();
      },
    );
    webViewController?.addJavaScriptHandler(
      handlerName: "GET_DEVICE_ID",
      callback: (args) async {
        _sendMessageToWebView({
          "key": "GET_DEVICE_ID",
          ...AppData.instance.getTrackingInfo(),
        });
      },
    );

    /// TODO: BE not used
    // webViewController?.addJavaScriptHandler(
    //   handlerName: "CONTACT_PHONE_KEY",
    //   callback: (args) async {
    //
    //     if (args.isEmpty) {
    //       return;
    //     }
    //     final dataJSON = args.getFirst();
    //     if (dataJSON is! Map<String, dynamic>) {
    //       return;
    //     }
    //     final result = await ContactUtil.instance.getContacts(
    //       context: context,
    //     );
    //     final contacts = result?.map((e) => e.toJson()).toList();
    //     _sendMessageToWebView({
    //       "key": "CONTACT_PHONE_KEY",
    //       "uid": dataJSON["uid"],
    //       "contacts": contacts,
    //       ...AppData.instance.getTrackingInfo(),
    //     });
    //   },
    // );
  }

  String _injectedJavaScriptData({String? data}) {
    return """(function() {
                if (typeof listenData !== 'undefined') {
                  listenData('$data');
                };
              })();
              true;
            """;
  }

  _sendMessageToWebView(Map<String, dynamic> data) {
    webViewController?.evaluateJavascript(
      source: _injectedJavaScriptData(
        data: jsonEncode(data),
      ),
    );
  }

  _handleGetLocation(BuildContext context) async {
    try {
      final location = await LocationUtil.instance.getCurrentLocationRequire(context: context);
      final data = {
        'key': 'LOCATION_KEY',
        'location': {
          "longitude": location?.longitude,
          "latitude": location?.latitude,
        },
        ...AppData.instance.getTrackingInfo(),
      };
      webViewController?.evaluateJavascript(
        source: _injectedJavaScriptData(
          data: jsonEncode(data),
        ),
      );
    } catch (_) {
      ///
    }
  }

  _sendBackMessageToWebView(List<String> history) {
    _sendMessageToWebView({
      'key': 'CUSTOM_BACK_KEY',
      if (history.isNotEmpty) 'data': history,
    });
  }

  _handleLoadError({
    required InAppWebViewController controller,
    required Uri? url,
    required int code,
    required String message,
  }) {
    AppLog.d(_tag, "onLoadHttpError: $code -> $message");
    final type = WebViewErrorType.values.firstWhereOrNull(
      (e) => message.contains(e.androidCode) || e.iosCode == code.toString(),
    );
    if (type == null) {
      return;
    }
    context.read<WebViewCubit>().changeErrorType(type);
  }

  _listenConnectivityChanged(InternetConnectionStatus value) {
    if (value == InternetConnectionStatus.disconnected) {
      pullToRefreshController.endRefreshing();
      _hideLoading(context);
      context.read<WebViewCubit>().changeErrorType(WebViewErrorType.noInternet);
    }
  }

  _reviewUser(String appID) async {
    final user = await BottomSheetProvider.instance.show(
      context,
      title: 'Chọn người xử lý muốn đánh giá',
      child: ReviewView(appID: appID),
    );
    if (user is MTradeSelectUserReviewModel && mounted) {
      final isReviewSuccess = await BottomSheetProvider.instance.show(
        context,
        title: 'Bạn đánh giá sao về chất lượng làm việc của ${user.fullName}?',
        child: ReviewView(user: user, appID: appID),
      );
      if (isReviewSuccess is bool) {
        if (isReviewSuccess == true) {
          final data = {
            'key': 'REVIEW_SUCCESS',
          };
          webViewController?.evaluateJavascript(
            source: _injectedJavaScriptData(
              data: jsonEncode(data),
            ),
          );
        }
      }
    }
  }

  _handlePicker({
    required BuildContext context,
    required Map<String, dynamic> dataJSON,
    required PickResourceType type,
    required Function(Map<String, dynamic> dataJSON, bool hasChoose, String imageURL) onDone,
  }) async {
    final cubit = context.read<FileHandlerCubit>();
    String? path;
    if (type == PickResourceType.gallery) {
      final pickedFile = await ImagePickerUtils.pickImage(context: context, type: type);
      if (TextUtils.isEmpty(pickedFile?.path)) {
        onDone(dataJSON, false, "");
        return;
      }

      ///
      final croppedFile = await ImageCropper().cropImage(
        sourcePath: pickedFile!.path,
        aspectRatioPresets: [
          CropAspectRatioPreset.square,
          CropAspectRatioPreset.ratio3x2,
          CropAspectRatioPreset.original,
          CropAspectRatioPreset.ratio4x3,
          CropAspectRatioPreset.ratio16x9,
        ],
      );
      if (TextUtils.isEmpty(croppedFile?.path)) {
        onDone(dataJSON, false, "");
        return;
      }

      ///
      path = croppedFile?.path;
    } else if (type == PickResourceType.camera) {
      // final width = dataJSON['width'];
      // final height = dataJSON['height'];
      final cameraTitle = dataJSON['cameraTitle'];
      final cameraDetail = dataJSON['cameraDetail'];
      final galleryTitle = dataJSON['galleryTitle'];
      if (context.mounted) {
        final result = await Navigator.of(context).push(
          MaterialPageRoute(
            builder: (_) => CustomCameraPage(
              title: cameraTitle ?? galleryTitle ?? '',
              subtitle: '',
              description: cameraDetail,
            ),
          ),
        );
        if (result is String && TextUtils.isNotEmpty(result)) {
          path = result;
        } else {
          onDone(dataJSON, false, "");
          return;
        }
      }
    }

    if (TextUtils.isEmpty(path)) {
      onDone(dataJSON, false, "");
      return;
    }

    ///
    cubit.upload(
      id: _tag,
      media: MediaModel(
        id: _tag,
        path: path,
        type: MediaType.image.name,
      ),
      onSuccess: (urls) {
        final imageURL = urls.getFirst() ?? "";
        final hasChoose = imageURL.isNotEmpty;
        onDone(dataJSON, hasChoose, imageURL);
      },
    );
    return;
  }

  _reloadWebView() {
    _url = _convertToPrivateUrl(_url);
    webViewController?.loadUrl(urlRequest: URLRequest(url: Uri.parse(_url)));
  }

  List<String> get _listWebviewDisableCustomBack {
    final serverURL = EnvData.instance.baseUrl;
    return [
      '$serverURL/finance/home?projectID=376',
      '$serverURL/finance/home?projectID=377',
      '$serverURL/finance/home?projectID=378',
      '$serverURL/mfast/shb',
      '$serverURL/app/home_credit',
      '$serverURL/finance/home?projectID=381',
      '$serverURL/finance/home?projectID=382',
      '$serverURL/finance/home?projectID=383',
    ];
  }

  void _updateHistory(String url) {
    if (history.isNotEmpty) {
      if (history.getLast() != url) {
        history.add(url);
      }
    } else {
      history.add(url);
    }
  }

  void _removeHistory(int numberOfBack) {
    final int startIndex = history.length - numberOfBack;
    try {
      history.removeRange(startIndex, history.length);
      debugPrint('_removeHistory: $history');
    } on Exception catch (_) {
      //
    }
  }

  _handleBackButton(BuildContext context) {
    switch (_webViewBackMode) {
      case WebViewBackMode.CUSTOM:
        _listWebviewDisableCustomBack.contains(_url) && Platform.isAndroid
            ? _forcePop(context)
            : _sendBackMessageToWebView(history);
        break;
      case WebViewBackMode.CUSTOM_URL:
        _sendBackMessageToWebView([]);
        break;
      default:
        context.popRoute(); // handle webview back or route pop in onWillPop
        break;
    }
  }

  _triggerInjectFunc() {
    final injectFunc = widget.injectFunc ?? '';
    if (TextUtils.isNotEmpty(injectFunc)) {
      webViewController?.evaluateJavascript(
        source: '''window.flutter_inappwebview.callHandler("INJECT_FUNC", data: { injectFunc: $injectFunc });''',
      );
    }
  }
}

String get action => '''window.flutter_inappwebview.callHandler("CUSTOM_BACK_KEY", {"mode": "CUSTOM"});''';
