import 'package:auto_route/auto_route.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/checkbox.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/authentication/register_name/cubit/register_name/register_name_cubit.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:flutter_module/services/api/authentication/payload/register_payload.dart';

@RoutePage()
class RegisterNamePage extends StatefulWidget implements AutoRouteWrapper {
  const RegisterNamePage({
    super.key,
    this.payload,
  });
  final RegisterPayload? payload;

  @override
  State<RegisterNamePage> createState() => _RegisterNamePageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (context) {
        final cubit = RegisterNameCubit();
        return cubit;
      },
      child: this,
    );
  }
}

class _RegisterNamePageState extends State<RegisterNamePage> {
  final regex = RegExp(r'[!@#%^&*(),.?":{}|<>]');
  bool isPolicyCheck = false;
  String nickname = '';
  @override
  Widget build(BuildContext context) {
    return BlocConsumer<RegisterNameCubit, RegisterNameState>(
      listener: (context, state) {
        if (state.status.isSuccess) {
          context.router.popAndPush(NewSupporterRoute(
            payload: widget.payload?.copyWith(
              fullName: nickname,
            ),
          ));
        }
      },
      builder: (context, state) {
        String errorMessage = nickname.contains(" ")
            ? "Nickname không được chứa khoảng trắng"
            : regex.hasMatch(nickname)
                ? "Nickname không được chứa kí tự đặc biệt"
                : state.errorMessage;
        return Scaffold(
          body: SafeArea(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      SplashButton(
                        onTap: context.router.pop,
                        child: Container(
                          margin: const EdgeInsets.only(left: 4),
                          padding: const EdgeInsets.all(12),
                          child: const AppImage.asset(
                            asset: "ic_arrow_left",
                            width: 24,
                            height: 24,
                            color: UIColors.grayText,
                          ),
                        ),
                      ),
                      const AppImage.asset(
                        asset: "ic_academy_mfast_logo",
                        width: 116,
                        height: 32,
                      ),
                      const SizedBox(
                        width: 52,
                      )
                    ],
                  ),
                  const SizedBox(
                    height: 42,
                  ),
                  Text(
                    "Sử dụng 1 nickname để gợi nhớ và giúp\nngười khác kết nối với bạn trên MFast",
                    style: UITextStyle.medium.copyWith(
                      fontSize: 16,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(
                    height: 84,
                  ),
                  CollectDataView(
                    errorMsg: errorMessage,
                    child: TextField(
                      decoration: const InputDecoration(
                        hintText: "Nhập nickname",
                        focusedBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: UIColors.primaryColor,
                          ),
                        ),
                      ),
                      textAlign: TextAlign.center,
                      style: UITextStyle.medium.copyWith(
                        fontSize: 16,
                      ),
                      onChanged: (value) {
                        _onChangeNickname(context, value);
                      },
                    ),
                  ),
                  const SizedBox(
                    height: 12,
                  ),
                  RichText(
                    textAlign: TextAlign.center,
                    text: TextSpan(
                      style: UITextStyle.regular.copyWith(
                        fontSize: 13,
                        fontStyle: FontStyle.italic,
                      ),
                      children: [
                        const TextSpan(text: "Nickname này cũng sẽ đại diện cho tên của bạn trên\nMFast. Nickname "),
                        TextSpan(
                          text: "không được gồm khoảng trắng.",
                          style: UITextStyle.regular.copyWith(
                            fontSize: 13,
                            fontStyle: FontStyle.italic,
                            color: UIColors.darkRed,
                          ),
                        )
                      ],
                    ),
                  ),
                  const SizedBox(
                    height: 16,
                  ),
                  Row(
                    mainAxisSize: MainAxisSize.min,
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      AppCheckbox.rectangle(
                        value: isPolicyCheck,
                        onChanged: (p0) {
                          setState(() {
                            isPolicyCheck = p0;
                          });
                        },
                      ),
                      const SizedBox(
                        width: 16,
                      ),
                      Flexible(
                        child: RichText(
                          text: TextSpan(
                            style: UITextStyle.regular.copyWith(
                              fontSize: 13,
                            ),
                            children: [
                              const TextSpan(text: "Tôi đã đọc và đồng ý với "),
                              TextSpan(
                                recognizer: TapGestureRecognizer()..onTap = () => _onTapPolicy(context),
                                text: "điều khoản sử dụng.",
                                style: UITextStyle.regular.copyWith(
                                  fontSize: 13,
                                  color: UIColors.primaryColor,
                                ),
                              ),
                              const TextSpan(text: "\nvà "),
                              TextSpan(
                                recognizer: TapGestureRecognizer()..onTap = () => _onTapPrivacy(context),
                                text: "chính sách bảo mật",
                                style: UITextStyle.regular.copyWith(
                                  fontSize: 13,
                                  color: UIColors.primaryColor,
                                ),
                              ),
                              const TextSpan(text: " của MFast"),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(
                    height: 32,
                  ),
                  PrimaryButton(
                    isLoading: state.status.isLoading,
                    enabled: isPolicyCheck && nickname.isNotEmpty && errorMessage.isEmpty,
                    onPressed: () {
                      _onCheckName(context);
                    },
                    title: "Tiếp tục",
                    width: 250,
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  _onCheckName(BuildContext context) {
    final cubit = context.read<RegisterNameCubit>();
    cubit.checkNickname(nickname);
  }

  _onTapPolicy(BuildContext context) {
    context.pushRoute(WebViewRoute(url: AppData.instance.appInfo.termsOfUsageUrl, title: "Điều khoản sử dụng"));
  }

  _onTapPrivacy(BuildContext context) {
    context.pushRoute(WebViewRoute(url: AppData.instance.appInfo.privacyPolicyUrl, title: "Chính sách bảo mật"));
  }

  _onChangeNickname(BuildContext context, String value) {
    final cubit = context.read<RegisterNameCubit>();
    cubit.clearErrorMessage();
    setState(() {
      nickname = value;
    });
  }
}
