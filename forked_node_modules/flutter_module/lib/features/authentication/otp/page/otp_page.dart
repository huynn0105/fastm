import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/pin_code/pin_code_component.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';

import '../../../../common/colors.dart';
import '../../../../common/widgets/images.dart';
import '../../../../common/widgets/loading.dart';
import '../cubit/otp_cubit.dart';

@RoutePage()
class OTPPage extends StatelessWidget implements AutoRouteWrapper {
  const OTPPage({
    super.key,
    required this.phoneNumber,
    required this.onSuccess,
    this.onRegister,
  });

  final String phoneNumber;
  final Function() onSuccess;
  final Function(String otpCode)? onRegister;

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => OTPCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<OTPCubit>();
    String otpCode = '';
    return Scaffold(
      backgroundColor: UIColors.extraLightGray,
      body: MultiBlocListener(
        listeners: [
          BlocListener<AuthCubit, AuthState>(
            listenWhen: (pre, cur) {
              return pre.hasLoggedIn != cur.hasLoggedIn;
            },
            listener: (context, state) {
              if (state.hasLoggedIn) {
                context.router.pop();
                onSuccess.call();
              }
            },
          ),
          BlocListener<OTPCubit, OTPState>(
            listener: (context, state) {
              if (state.isRegister) {
                onRegister?.call(otpCode);
              }
            },
            listenWhen: (previous, current) => previous.isRegister != current.isRegister,
          ),
        ],
        child: BlocBuilder<OTPCubit, OTPState>(
          builder: (context, state) {
            if (!state.requestedOtp) {
              cubit.requestOtp(phoneNumber: phoneNumber);
            }
            return Stack(
              children: [
                SafeArea(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          SplashButton(
                            onTap: context.router.pop,
                            child: Container(
                              margin: const EdgeInsets.only(left: 4),
                              padding: const EdgeInsets.all(12),
                              child: const AppImage.asset(
                                asset: "ic_arrow_left",
                                width: 24,
                                height: 24,
                                color: UIColors.grayText,
                              ),
                            ),
                          ),
                          const AppImage.asset(
                            asset: "ic_academy_mfast_logo",
                            width: 116,
                            height: 32,
                          ),
                          const SizedBox(
                            width: 52,
                          )
                        ],
                      ),
                      Container(
                        margin: const EdgeInsets.all(16),
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
                        decoration: BoxDecoration(color: UIColors.white, borderRadius: BorderRadius.circular(16)),
                        child: PinCodeComponent(
                          data: phoneNumber,
                          allowRetryEmail: state.otpModel?.allowRetryEmail ?? false,
                          errorMsg: state.errorFields[AppConstants.otpKey],
                          onOtpChange: cubit.otpChange,
                          countdownTime: state.otpModel?.waitRetry,
                          onComplete: (code) {
                            otpCode = code;
                            cubit.verifyOtp(
                              phoneNumber: phoneNumber,
                              otpCode: code,
                            );
                          },
                          onTapResendOption: (String option) {
                            cubit.requestOtp(phoneNumber: phoneNumber, isRetry: true, type: option);
                          },
                        ),
                      ),
                      const SizedBox(height: 22),
                      SplashButton(
                        onTap: context.router.pop,
                        child: Text(
                          'Đổi số điện thoại khác',
                          style: UITextStyle.medium.copyWith(
                            fontSize: 16,
                            color: UIColors.primaryColor,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                Visibility(
                  visible: state.completeStatus.isLoading,
                  child: const LoadingWidget.dark(isFullScreen: true),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}
