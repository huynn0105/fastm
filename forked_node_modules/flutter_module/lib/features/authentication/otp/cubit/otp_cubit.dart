import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/models/authentication/otp_model.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/services/api/authentication/payload/request_otp_payload.dart';
import 'package:flutter_module/services/api/authentication/payload/verify_otp_payload.dart';
import 'package:flutter_module/services/local/local_data_helper.dart';

import '../../../../app_data.dart';
import '../../../../common/bloc_status.dart';
import '../../../../common/constants.dart';
import '../../../../common/enum/error_code_type.dart';
import '../../../../models/user/user_info_model.dart';
import '../../auth/auth_cubit.dart';
import '../../repository/authentication_repository.dart';

part 'otp_state.dart';

class OTPCubit extends Cubit<OTPState> {
  OTPCubit() : super(OTPState());

  final _repository = AuthenticationRepository();

  requestOtp({
    required String phoneNumber,
    bool isRetry = false,
    String type = 'voice',
  }) async {
    state.errorFields.removeWhere((key, value) => key == AppConstants.otpKey);
    emit(state.copyWith(requestedOtp: true));
    final result = await _repository.requestOTP(RequestOtpPayload(
      mobilePhone: phoneNumber,
      isRetry: isRetry,
      type: type,
    ));
    emit(state.copyWith(otpModel: result.data));
  }

  otpChange(String text) {
    state.errorFields.removeWhere((key, value) => key == AppConstants.otpKey);
    validateData();
  }

  validateData() {
    emit(state.copyWith(completeStatus: BlocStatus.initial));
  }

  verifyOtp({
    required String phoneNumber,
    required String otpCode,
  }) async {
    emit(state.copyWith(completeStatus: BlocStatus.loading));
    BaseModel<UserInfoModel> result = await _repository.verifyOtp(VerifyOtpPayload(
      platform: 'phone',
      accessToken: phoneNumber,
      deviceUDID: AppData.instance.deviceUDID,
      otpCode: otpCode,
    ));
    if (result.status) {
      await LocalDataHelper.instance.setTryTimeLogin(3);
      emit(state.copyWith(completeStatus: BlocStatus.success));
      getItInstance.get<AuthCubit>().onLogin(phoneNumber: phoneNumber, user: result.data);
    } else {
      handleError(result.errorCode, result.errorMessage);
    }
  }

  handleError(String? errorCode, String? errorMessage) async {
    if (errorCode == ErrorCodeType.userNotExist.value) {
      emit(state.copyWith(isRegister: true));
    } else {
      state.errorFields[AppConstants.otpKey] = errorMessage ?? '';
      emit(state.copyWith(completeStatus: BlocStatus.failure));
    }
  }
}
