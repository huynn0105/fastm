import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/enum/tracking_event_type.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/account/cubit/user/user_cubit.dart';
import 'package:flutter_module/features/app_cubit.dart';
import 'package:flutter_module/features/authentication/repository/authentication_repository.dart';
import 'package:flutter_module/features/chat/cubit/chat_contact/chat_contact_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_thread/chat_thread_cubit.dart';
import 'package:flutter_module/features/client/cubit/client_list/client_list_cubit.dart';
import 'package:flutter_module/features/legendary/cubit/legendary_hier_user_info/legendary_hier_user_info_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/check_project_code/mtrade_check_project_code_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/delivery_support/mtrade_delivery_support_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/filter/mtrade_filter_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/order_filter/mtrade_order_filter_cubit.dart';
import 'package:flutter_module/features/notification/cubit/push_notification/push_notification_cubit.dart';
import 'package:flutter_module/models/chat/message/author_model.dart';
import 'package:flutter_module/services/api/authentication/payload/logout_payload.dart';
import 'package:flutter_module/services/local/local_data_helper.dart';
import 'package:flutter_module/services/notification/device_token.dart';
import 'package:flutter_module/services/notification/notification_service.dart';

import '../../../common/utils/text_util.dart';
import '../../../models/user/user_info_model.dart';
import '../../client/cubit/client/client_cubit.dart';
import '../../main_view/cubit/customer_requirements/customer_requirements_cubit.dart';
import '../../personal_setting/cubit/security/security_cubit.dart';

part 'auth_state.dart';

class AuthCubit extends Cubit<AuthState> {
  AuthCubit() : super(const AuthState());

  final _repository = AuthenticationRepository();

  onInit() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));
    final user = LocalDataHelper.instance.getUser();
    final hasLoggedIn = user != null;

    setUserInstance();

    await Future.wait([
      fetchPrivateData(hasLoggedIn),
      fetchPublicData(),
    ]);

    emit(state.copyWith(
      status: BlocStatus.success,
      hasLoggedIn: hasLoggedIn,
    ));
  }

  onLogin({
    required String? phoneNumber,
    required UserInfoModel? user,
  }) async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));
    await LocalDataHelper.instance.setLoginPhone(phoneNumber ?? '');
    await LocalDataHelper.instance.setUser(user?.toJson() ?? {});
    // await LocalDataHelper.instance.setPassword(user?.passcode ?? '');

    setUserInstance();
    getItInstance.get<AppCubit>().trackingEvent(event: TrackingEventType.userLogin);
    await Future.wait([
      fetchPrivateData(true),
      fetchPublicData(),
    ]);

    DeviceToken.instance.syncToServer();

    _subscribeToTopic();

    emit(state.copyWith(
      status: BlocStatus.success,
      hasLoggedIn: true,
    ));
  }

  onLogout({
    bool forceLogoutAllOfSessions = false,
    bool forceLogout = false,
  }) async {
    if (!state.hasLoggedIn) {
      return;
    }

    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    NotificationService().clearNotificationTray();

    final result = await _repository.logout(
      LogoutPayload(
        userID: AppData.instance.userID,
        deviceUDID: AppData.instance.deviceUDID,
        accessToken: AppData.instance.accessToken,
        logoutAllOfSessions: forceLogoutAllOfSessions,
      ),
    );

    if (result.status) {
      _unsubscribeFromTopic();
      getItInstance.get<AppCubit>().trackingEvent(event: TrackingEventType.userLogout);
      await clearUserData();
      await fetchPublicData();
      setUserInstance();
      emit(state.copyWith(
        status: BlocStatus.success,
        hasLoggedIn: false,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
        errorMessage: result.errorMessage,
      ));
    }
  }

  void _subscribeToTopic() {
    NotificationService().onSubscribeToTopic('user_${AppData.instance.userID}');
  }

  void _unsubscribeFromTopic() {
    NotificationService().onUnsubscribeFromTopic('user_${AppData.instance.userID}');
  }

  // need accessToken
  Future fetchPrivateData(bool hasLoggedIn) async {
    if (hasLoggedIn) {
      getItInstance.get<LegendaryHierUserInfoCubit>().updatePayloadUserID(userID: AppData.instance.userID);
      await Future.wait([
        getItInstance.get<UserCubit>().fetchData(),
        getItInstance.get<ClientListGlobalCubit>().fetchData(),
        getItInstance.get<LegendaryHierUserInfoCubit>().fetchData(),
      ]);
      getItInstance.get<ChatContactCubit>().fetchContacts();
      if (TextUtils.isNotEmpty(LocalDataHelper.instance.getLoginPhone())) {
        getItInstance.get<SecurityCubit>().init();
      }
    }
  }

  Future fetchPublicData() async {
    await Future.wait([
      getItInstance.get<AppCubit>().getConfigs(),
      getItInstance.get<CustomerRequirementsCubit>().fetchData(),
    ]);
  }

  clearUserData() async {
    await LocalDataHelper.instance.removeUser();
    getItInstance.get<UserCubit>().clearData();
    getItInstance.get<CustomerRequirementsCubit>().clearSelectedRequirement();
    getItInstance.get<ChatThreadCubit>().clearData();
    getItInstance.get<PushNotificationCubit>().clearData();
    getItInstance.get<ClientListGlobalCubit>().clearData();
    getItInstance.get<ClientGlobalCubit>().clearData();
    getItInstance.get<LegendaryHierUserInfoCubit>().clearData();
    getItInstance.get<MTradeDeliverySupportCubit>().clearData();
    getItInstance.get<MTradeFilterCubit>().clearData();
    getItInstance.get<MTradeCheckProjectCodeCubit>().clearData();
    getItInstance.get<MTradeOrderFilterCubit>().clearData();
  }

  setUserInstance() {
    final UserInfoModel? user = LocalDataHelper.instance.getUser();
    AppData.instance.accessToken = user?.accessToken ?? '';
    AppData.instance.userID = user?.id ?? '';
    AppData.instance.author = user == null
        ? null
        : AuthorModel(
            id: user.id,
            fullName: user.fullName,
            avatar: user.avatarImage,
          );
    AppData.instance.setDefaultParam();
  }
}
