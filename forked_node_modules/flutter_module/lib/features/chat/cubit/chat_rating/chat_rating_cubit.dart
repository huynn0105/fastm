import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/chat/repository/chat_repository.dart';
import 'package:flutter_module/models/chat/rating/user_rating_model.dart';
import 'package:flutter_module/models/mtrade/my_review/mentor_rating_model.dart';
import 'package:flutter_module/services/api/chat/payload/rating/user_review_payload.dart';

part 'chat_rating_state.dart';

class ChatRatingCubit extends Cubit<ChatRatingState> {
  ChatRatingCubit() : super(const ChatRatingState());

  final _repository = ChatRepository();
  UserReviewPayload payload = UserReviewPayload();

  getReviews({bool loadMore = false}) async {
    if (loadMore) {
      payload = payload.copyWith(
        page: (payload.page ?? 0) + 1,
      );
    } else {
      payload = payload.copyWith(
        page: 1,
      );
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getReviews(payload: payload);

    if (result.status) {
      final List<MentorRatingUserModel> reviews =
          loadMore ? [...state.reviews, ...?result.data?.ratingUser] : [...?result.data?.ratingUser];

      emit(state.copyWith(
        status: BlocStatus.success,
        reviews: reviews,
        totalAmount: result.data?.amountRating,
        totalAvg: result.data?.avgRating,
        totalPercent: result.data?.percent,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  getUserRating() async {
    final result = await _repository.getUserRating(userID: payload.userID ?? "");

    if (result.status == true) {
      emit(state.copyWith(
        level: result.data?.rank?.level,
        user: result.data?.user,
      ));
    }
  }
}
