import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/chat/repository/chat_repository.dart';
import 'package:flutter_module/models/chat/contact/chat_contact_model.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';

part 'chat_add_member_state.dart';

class ChatAddMemberCubit extends Cubit<ChatAddMemberState> {
  ChatAddMemberCubit() : super(const ChatAddMemberState());

  final ChatRepository _repository = ChatRepository();

  changeUserSelected(ChatContactModel user) {
    List<ChatContactModel> usersSelected = [...state.usersSelected];
    final isExist = state.usersSelected.indexWhere((element) => element.uid == user.uid) != -1;

    if (isExist) {
      usersSelected = usersSelected.where((element) => element.uid != user.uid).toList();
    } else {
      usersSelected.add(user);
    }

    emit(state.copyWith(
      usersSelected: usersSelected,
    ));
  }

  addMember(String threadID) async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));
    final users = state.usersSelected
        .map((e) => ThreadUserDetail(avatarImage: e.avatar, fullName: e.fullName, uid: e.uid))
        .toList();

    final result = await _repository.addUsersToGroupThread(threadID: threadID, users: users);

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }
}
