import 'dart:io';

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/enum/chat/media_type.dart';
import 'package:flutter_module/models/chat/file/media_model.dart';
import 'package:path_provider/path_provider.dart';
import 'package:photo_manager/photo_manager.dart';
import 'package:path/path.dart' as p;

part 'device_media_state.dart';

class DeviceMediaCubit extends Cubit<DeviceMediaState> {
  DeviceMediaCubit() : super(const DeviceMediaState());

  int page = 0;

  Future<bool> requestPermission() async {
    final PermissionState permission = await PhotoManager.requestPermissionExtend();
    if (Platform.isIOS && permission == PermissionState.limited) {
      emit(state.copyWith(
        hasIOSLimitedPermission: true,
      ));
    }
    return permission.hasAccess;
  }

  Future<void> presentLimited() async {
    if (!state.hasIOSLimitedPermission) {
      return;
    }
    await PhotoManager.presentLimited();
    await refreshData();
  }

  fetchData({
    Function()? onDeniedPermission,
    bool showLoading = true,
    bool loadMore = false,
  }) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final bool hasPermission = await requestPermission();
    if (!hasPermission) {
      emit(state.copyWith(
        status: BlocStatus.failure,
        hasPermission: false,
      ));
      onDeniedPermission?.call();
      return;
    }

    emit(state.copyWith(
      hasPermission: true,
    ));

    try {
      final List<AssetPathEntity> albums = await PhotoManager.getAssetPathList(
        onlyAll: true,
        filterOption: FilterOptionGroup(
          imageOption: const FilterOption(
            sizeConstraint: SizeConstraint(ignoreSize: true),
          ),
        ),
      );

      if (albums.isEmpty) {
        onDeniedPermission?.call();
        emit(state.copyWith(
          status: BlocStatus.failure,
        ));
        return;
      }

      page = loadMore ? page + 1 : 0;

      int totalCount = await albums.first.assetCountAsync;
      List<AssetEntity> entities = await albums.first.getAssetListPaged(
        size: 100,
        page: page,
      );

      if (loadMore) {
        entities = [...state.assets, ...entities];
      }

      emit(state.copyWith(
        status: BlocStatus.success,
        assets: entities,
        total: totalCount,
      ));
    } on Exception catch (_) {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  refreshData() async {
    await fetchData(showLoading: false);
  }

  loadMoreData() async {
    final length = state.assets.length;
    await fetchData(showLoading: false, loadMore: true);
    return length != state.assets.length;
  }

  select(
    int index, {
    Function(String message)? onFailure,
  }) {
    var item = state.assets[index];
    var assets = [...state.selectedAssets];
    var checkedIndex = assets.indexWhere((e) => e.id == item.id);

    if (checkedIndex >= 0) {
      assets.removeAt(checkedIndex);
    } else if (assets.length < AppConstants.maxSelectedMedia) {
      assets = [...assets, item];
    } else {
      onFailure?.call('Chọn tối đa ${AppConstants.maxSelectedMedia} hình ảnh/video');
      return;
    }

    emit(state.copyWith(
      selectedAssets: assets,
    ));
  }

  convertAssetToFile() async {
    emit(state.copyWith(
      convertStatus: BlocStatus.loading,
    ));

    var futures = state.selectedAssets.map((e) => e.file).toList();
    var files = await Future.wait(futures);
    var data = <MediaModel>[];

    for (int i = 0; i < state.selectedAssets.length; i++) {
      MediaModel? thumbMedia;
      var file = files[i];
      var now = DateTime.now().microsecondsSinceEpoch;

      final fileBytes = await file?.readAsBytes();
      final limitSize = AppData.instance.appInfo.limitUploadMediaSize;
      if (fileBytes != null && limitSize != null) {
        final size = fileBytes.lengthInBytes;
        final maxSize = limitSize * (1024 * 1024);
        if (size > maxSize) {
          emit(state.copyWith(
            convertStatus: BlocStatus.failure,
            convertErrorMessage: 'Vượt quá dung lượng tối đa (${limitSize}MB/file)',
          ));
          return;
        }
      }

      final asset = state.selectedAssets[i];
      final assetID = asset.id.replaceAll('/', '__'); // iOS: assetID contain '/' => remove '/'

      final item = MediaModel.fromAssetEntity(asset);

      final bytes = await asset.thumbnailDataWithSize(const ThumbnailSize(720, 720));
      if (bytes != null) {
        final thumbID = 'thumbnail_${i}_${assetID}_$now';
        final thumbDir = await getTemporaryDirectory();
        final thumbPath = p.join(thumbDir.path, '$thumbID.png');
        final thumbFile = await File(thumbPath).writeAsBytes(bytes);
        thumbMedia = MediaModel(
          id: thumbID,
          path: thumbFile.path,
          type: MediaType.image.name,
        );
      }

      data.add(
        item.copyWith(
          id: '${item.type}_${i}_${assetID}_$now',
          path: file?.path,
          thumbnail: thumbMedia,
        ),
      );
    }

    if (files.isNotEmpty) {
      emit(state.copyWith(
        convertStatus: BlocStatus.success,
        files: data,
      ));
      Future.delayed(const Duration(milliseconds: 200), () {
        resetSelection();
      });
    } else {
      emit(state.copyWith(
        convertStatus: BlocStatus.failure,
        convertErrorMessage: 'Đã có lỗi xảy ra',
      ));
    }
  }

  resetSelection() {
    emit(state.copyWith(
      convertStatus: BlocStatus.initial,
      selectedAssets: const [],
      files: const [],
    ));
  }

  getSelectedTitle() {
    final images = state.selectedAssets.where((e) => e.type == AssetType.image).toList().length;
    final videos = state.selectedAssets.where((e) => e.type == AssetType.video).toList().length;

    final result = [
      if (images > 0) '$images ảnh',
      if (videos > 0) '$videos video',
    ];

    return result.join(', ');
  }
}
