import 'dart:convert';

import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/features/chat/cubit/device_audio_player/device_audio_player.dart';
import 'package:just_audio/just_audio.dart';

part 'device_audio_player_state.dart';

class DeviceAudioPlayerCubit extends Cubit<DeviceAudioPlayerState> {
  DeviceAudioPlayerCubit() : super(const DeviceAudioPlayerState());

  final ListEquality compare = const ListEquality<double>();

  initAudioPlayer(String id, String waveform) {
    emit(state.copyWith(
      data: AudioPlayerData(
        id: id,
        samples: _decode(waveform),
      ),
    ));
  }

  updateStatus(BlocStatus status) {
    emit(state.copyWith(
      status: status,
    ));
  }

  updateTotalDuration(String id, Duration? value) {
    final data = state.data!;
    emit(state.copyWith(
      data: data.copyWith(
        duration: data.duration.copyWith(total: value),
      ),
    ));
  }

  updateBufferDuration(String id, Duration value) {
    final data = state.data!;
    emit(state.copyWith(
      data: data.copyWith(
        duration: data.duration.copyWith(buffer: value),
      ),
    ));
  }

  updateCurrentDuration(String id, Duration value) {
    final data = state.data!;
    final hasOverDuration = value.inMilliseconds > state.data!.duration.total.inMilliseconds;
    emit(state.copyWith(
      data: data.copyWith(
        duration: data.duration.copyWith(current: hasOverDuration ? data.duration.total : value),
      ),
    ));
  }

  updateButtonStatus(String id, AudioPlayerButtonStatus value) {
    final data = state.data!;
    emit(state.copyWith(
      data: data.copyWith(
        button: value,
      ),
    ));
  }

  updateProcessingState(String id, ProcessingState value) {
    final data = state.data!;
    emit(state.copyWith(
      data: data.copyWith(
        processingState: value,
      ),
    ));
  }

  List<double> _decode(String? data) {
    if (TextUtils.isEmpty(data)) {
      return [];
    }
    try {
      return (jsonDecode(data!) as List).cast<double>();
    } on Exception catch (_) {
      return [];
    }
  }
}
