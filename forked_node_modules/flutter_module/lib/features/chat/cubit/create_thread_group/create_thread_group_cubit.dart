import 'dart:io';

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/chat/repository/chat_repository.dart';
import 'package:flutter_module/models/chat/contact/chat_contact_model.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';
import 'package:flutter_module/services/api/chat/payload/create_thread/create_group_thread_payload.dart';
import 'package:flutter_module/services/api/chat/payload/file_upload_payload.dart';

part 'create_thread_group_state.dart';

class CreateThreadGroupCubit extends Cubit<CreateThreadGroupState> {
  CreateThreadGroupCubit() : super(CreateThreadGroupCubitInitial());

  final ChatRepository _repository = ChatRepository();
  CreateGroupThreadPayload _payload = CreateGroupThreadPayload();

  createThreadGroup() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.createThreadGroup(payload: _payload);

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        thread: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  updatePayload({List<ThreadUserDetail>? users, String? title, String? image}) {
    _payload = _payload.copyWith(users: users, title: title, photoImage: image);
  }

  changeUserSelected(ChatContactModel user) {
    List<ChatContactModel> usersSelected = [...state.usersSelected];
    final index = usersSelected.indexWhere((element) => element.uid == user.uid);

    if (index >= 0) {
      usersSelected = usersSelected.where((element) => element.uid != user.uid).toList();
    } else {
      usersSelected.add(user);
    }

    emit(state.copyWith(
      usersSelected: usersSelected,
    ));
  }

  uploadImage(File file) async {
    emit(state.copyWith(uploadStatus: BlocStatus.loading));

    final result = await _repository.uploadMultiFile(
      payload: FileUploadPayload(
        files: [
          File(file.path),
        ],
        // onSendProgress: (count, total) => emit(state.copyWith(id: id, sendProgressing: count / total)),
      ),
    );

    if (result.status) {
      emit(state.copyWith(
        uploadStatus: BlocStatus.success,
        image: result.data?.first.url,
      ));
    } else {
      emit(state.copyWith(
        uploadStatus: BlocStatus.failure,
      ));
    }
  }
}
