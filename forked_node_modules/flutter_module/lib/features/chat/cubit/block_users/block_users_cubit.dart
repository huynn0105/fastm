import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/chat/repository/chat_repository.dart';
import 'package:flutter_module/models/chat/contact/blocked_user_model.dart';

part 'block_users_state.dart';

class BlockUsersCubit extends Cubit<BlockUsersState> {
  BlockUsersCubit() : super(const BlockUsersState());

  final _repository = ChatRepository();

  fetchData() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.getBlockedUsers();

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        users: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  unblockUser({
    required String userID,
  }) async {
    emit(state.copyWith(
      unblockStatus: BlocStatus.loading,
    ));

    final result = await _repository.unblock(userID: userID);

    if (result.status) {
      emit(state.copyWith(
        unblockStatus: BlocStatus.success,
        users: [...state.users]..removeWhere((e) => e.uid == userID),
      ));
    } else {
      emit(state.copyWith(
        unblockStatus: BlocStatus.failure,
        errorMessage: result.errorMessage,
      ));
    }
  }
}
