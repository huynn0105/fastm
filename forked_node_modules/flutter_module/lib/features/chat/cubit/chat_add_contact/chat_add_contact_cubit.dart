import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/utils/debounce_util.dart';
import 'package:flutter_module/features/chat/repository/chat_repository.dart';
import 'package:flutter_module/models/chat/contact/chat_search_contact_model.dart';

part 'chat_add_contact_state.dart';

class ChatAddContactCubit extends Cubit<ChatAddContactState> {
  ChatAddContactCubit() : super(const ChatAddContactState());

  final ChatRepository _repository = ChatRepository();
  final DebounceUtil debounce = DebounceUtil(milliseconds: 400);

  searchContact(String keyword) async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final results = await _repository.searchContact(keyword: keyword);

    if (results.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        contacts: results.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  resetState() {
    emit(state.copyWith(
      status: BlocStatus.initial,
      requestStatus: BlocStatus.initial,
    ));
  }

  sendRequestAddContact({String? phoneNumber, String? nickname}) async {
    emit(state.copyWith(
      requestStatus: BlocStatus.loading,
    ));

    final results = await _repository.sendRequestAddContact(
      nickname: nickname ?? '',
      phoneNumber: phoneNumber ?? '',
    );

    if (results.status) {
      emit(state.copyWith(
        requestStatus: BlocStatus.success,
      ));
    } else {
      emit(state.copyWith(
        requestStatus: BlocStatus.failure,
      ));
    }
  }
}
