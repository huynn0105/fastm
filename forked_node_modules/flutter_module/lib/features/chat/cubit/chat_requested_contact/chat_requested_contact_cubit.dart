import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/chat/repository/chat_repository.dart';
import 'package:flutter_module/models/chat/contact/chat_request_contact_model.dart';

part 'chat_requested_contact_state.dart';

class ChatRequestedContactCubit extends Cubit<ChatRequestedContactState> {
  ChatRequestedContactCubit() : super(const ChatRequestedContactState());

  final ChatRepository _repository = ChatRepository();

  fetchInvitationAndSendingRequest() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));
    final results = await _repository.getInvitationAndSendingRequest();

    if (results.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        invitations: results.data?['invitations'],
        sentRequests: results.data?['sendingRequests'],
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  initData({
    List<ChatRequestContactModel>? invitations,
    List<ChatRequestContactModel>? sentRequests,
  }) {
    emit(state.copyWith(
      invitations: invitations,
      sentRequests: sentRequests,
    ));
  }

  cancelRequestContact(String phoneNumber) async {
    emit(state.copyWith(
      actionStatus: BlocStatus.loading,
    ));
    final results = await _repository.cancelRequestContact(phoneNumber: phoneNumber);

    if (results.status) {
      List<ChatRequestContactModel> sentRequests = [...state.sentRequests];
      sentRequests = sentRequests.where((element) => element.phoneNumber != phoneNumber).toList();

      emit(state.copyWith(
        actionStatus: BlocStatus.success,
        sentRequests: sentRequests,
      ));
      return true;
    } else {
      emit(state.copyWith(
        actionStatus: BlocStatus.failure,
      ));
      return false;
    }
  }

  acceptRequestContact({
    required String invitationID,
  }) async {
    emit(state.copyWith(
      actionStatus: BlocStatus.loading,
    ));
    final results = await _repository.acceptRequestContact(
      acceptedUserID: AppData.instance.userID,
      invitationID: invitationID,
    );

    if (results.status) {
      List<ChatRequestContactModel> invitations = [...state.invitations];
      invitations = invitations.where((element) => element.uid != invitationID).toList();

      emit(state.copyWith(
        actionStatus: BlocStatus.success,
        invitations: invitations,
      ));
      return true;
    } else {
      emit(state.copyWith(
        actionStatus: BlocStatus.failure,
      ));
      return false;
    }
  }

  rejectRequestContact({
    required String senderID,
  }) async {
    emit(state.copyWith(
      actionStatus: BlocStatus.loading,
    ));
    final results = await _repository.rejectRequestContact(senderID: senderID);

    if (results.status) {
      List<ChatRequestContactModel> invitations = [...state.invitations];
      invitations = invitations.where((element) => element.senderID != senderID).toList();

      emit(state.copyWith(
        actionStatus: BlocStatus.success,
        invitations: invitations,
      ));
      return true;
    } else {
      emit(state.copyWith(
        actionStatus: BlocStatus.failure,
      ));
      return false;
    }
  }
}
