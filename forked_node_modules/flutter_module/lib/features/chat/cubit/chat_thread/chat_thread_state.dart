// ignore_for_file: public_member_api_docs, sort_constructors_first
part of 'chat_thread_cubit.dart';

class ChatThreadState extends Equatable {
  const ChatThreadState({
    this.status = BlocStatus.initial,
    this.openChatThreadStatus = BlocStatus.initial,
    this.threads = const [],
    this.errorMessage = '',
    this.threadMessages = const {},
    this.threadUnread = const {},
    this.blockThreads = const {},
    this.isDataRemote = false,
  });

  final BlocStatus status;
  final BlocStatus openChatThreadStatus;
  final List<ChatThreadModel> threads;
  final String errorMessage;
  final Map<String, List<ChatMessageModel>> threadMessages;
  final Map<String, int> threadUnread;
  final Map<String, bool> blockThreads;
  final bool isDataRemote;

  @override
  List<Object?> get props => [
        status,
        openChatThreadStatus,
        threads,
        errorMessage,
        threadMessages,
        threadUnread,
        blockThreads,
        isDataRemote,
      ];

  ChatThreadState copyWith({
    BlocStatus? status,
    BlocStatus? openChatThreadStatus,
    List<ChatThreadModel>? threads,
    String? errorMessage,
    Map<String, List<ChatMessageModel>>? threadMessages,
    Map<String, int>? threadUnread,
    Map<String, bool>? blockThreads,
    bool? isDataRemote,
  }) {
    return ChatThreadState(
      status: status ?? this.status,
      openChatThreadStatus: openChatThreadStatus ?? this.openChatThreadStatus,
      threads: threads ?? this.threads,
      errorMessage: errorMessage ?? this.errorMessage,
      threadMessages: threadMessages ?? this.threadMessages,
      threadUnread: threadUnread ?? this.threadUnread,
      blockThreads: blockThreads ?? this.blockThreads,
      isDataRemote: isDataRemote ?? this.isDataRemote,
    );
  }
}
