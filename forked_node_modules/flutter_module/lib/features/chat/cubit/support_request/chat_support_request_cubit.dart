import 'dart:convert';

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/chat/repository/chat_repository.dart';
import 'package:flutter_module/models/chat/support_request/chat_support_request_model.dart';

part 'chat_support_request_state.dart';

class ChatSupportRequestCubit extends Cubit<ChatSupportRequestState> {
  ChatSupportRequestCubit({
    required this.type,
  }) : super(const ChatSupportRequestState());

  final String type;
  int page = 1;

  final ChatRepository _repository = ChatRepository();

  fetchData({bool showLoading = true, String type = 'ALL', bool loadmore = false}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    if (loadmore) {
      page += 1;
    } else {
      page = 1;
    }

    final result = await _repository.getListSupportRequest(userID: AppData.instance.userID, type: type, page: page);
    if (result.status) {
      final supportRequests;

      if (loadmore) {
        supportRequests = state.supportRequests?.copyWith(
          total: result.data?.total,
          tickets: loadmore ? [...?state.supportRequests?.tickets, ...?result.data?.tickets] : result.data?.tickets,
        );
      } else {
        supportRequests = result.data;
      }

      emit(state.copyWith(
        status: BlocStatus.success,
        supportRequests: supportRequests,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }
}
