import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/chat/repository/chat_repository.dart';
import 'package:flutter_module/models/chat/message/message_model.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';

part 'chat_general_media_state.dart';

class ChatGeneralMediaCubit extends Cubit<ChatGeneralMediaState> {
  ChatGeneralMediaCubit() : super(const ChatGeneralMediaState());

  final ChatRepository _repository = ChatRepository();
  String threadID = '';

  initState(ChatThreadModel thread) {
    threadID = thread.uid ?? '';
  }

  getImageMessagesInThread({int? maxMessages}) async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.getImageMessagesInThread(
      threadID: threadID,
      maxMessages: maxMessages,
    );

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        images: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  getVideoMessagesInThread({int? maxMessages}) async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.getVideoMessagesInThread(
      threadID: threadID,
      maxMessages: maxMessages,
    );

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        videos: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  deletedVideoMessage({String? messageID}) {
    final videos = [...state.videos];
    emit(state.copyWith(
      videos: videos.where((e) => e.uid == messageID).toList(),
    ));
  }

  deletedImageMessage({String? messageID}) {
    final images = [...state.images];
    emit(state.copyWith(
      images: images.where((e) => e.uid == messageID).toList(),
    ));
  }
}
