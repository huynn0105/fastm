import 'dart:io';

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/features/chat/repository/chat_repository.dart';
import 'package:flutter_module/models/chat/file/media_model.dart';
import 'package:flutter_module/services/api/chat/payload/file_upload_payload.dart';

part 'file_handler_state.dart';

class FileHandlerCubit extends Cubit<FileHandlerState> {
  FileHandlerCubit() : super(const FileHandlerState());

  final ChatRepository _repository = ChatRepository();

  Future upload({
    required String id,
    required MediaModel media,
    required Function(List<String> urls) onSuccess,
  }) async {
    emit(state.copyWith(
      data: clone(id, (value) => value.copyWith(id: id, status: BlocStatus.loading)),
    ));
    final result = await _repository.uploadMultiFile(
      payload: FileUploadPayload(
        files: [
          File(media.path ?? ''),
          if (TextUtils.isNotEmpty(media.thumbnail?.path)) ...[
            File(media.thumbnail?.path ?? ''),
          ],
        ],
        onSendProgress: (count, total) {
          emit(state.copyWith(
            data: clone(id, (value) => value.copyWith(id: id, progress: count / total)),
          ));
        },
      ),
    );
    if (result.status) {
      onSuccess(result.data?.map((e) => e.url ?? '').toList() ?? []);
      emit(state.copyWith(
        data: clone(id, (value) => value.copyWith(id: id, status: BlocStatus.success)),
      ));
    } else {
      emit(state.copyWith(
        data: clone(id, (value) => value.copyWith(id: id, status: BlocStatus.failure)),
      ));
    }
  }

  Map<String, FileHandlerData> clone(
    String id,
    FileHandlerData Function(FileHandlerData) onUpdated,
  ) {
    final data = {...state.data};
    data.putIfAbsent(id, () => const FileHandlerData());
    data.update(id, onUpdated);
    return data;
  }
}
