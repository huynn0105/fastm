import 'package:hive/hive.dart';

import 'entities/chat_message/chat_message_entity.dart';
import 'entities/chat_thread/chat_thread_entity.dart';
import 'entities/message/message_entity.dart';


class HiveTypes {
  static const int chatThread = 1;
  static const int threadUserDetail = 2;
  static const int chatMessage = 3;
  static const int message = 4;
  static const int author = 5;
  static const int location = 6;
  static const int media = 7;
}

class HiveBoxName {
  static const String chatThread = 'chatThread';
  static const String message = 'message';
}

class HiveBoxMap {
  static Map<Type, MyHive> hiveBoxMap = {
    ChatThreadEntity: MyHive<ChatThreadEntity>(
        boxName: HiveBoxName.chatThread,
        registerAdapterFunction: () {
          Hive.registerAdapter(ChatThreadEntityAdapter());
          Hive.registerAdapter(ThreadUserDetailEntityAdapter());
          Hive.registerAdapter(ChatMessageEntityAdapter());
        }),

    MessageEntity: MyHive<MessageEntity>(
        boxName: HiveBoxName.message,
        registerAdapterFunction: () {
          Hive.registerAdapter(MessageEntityAdapter());
          Hive.registerAdapter(AuthorEntityAdapter());
          Hive.registerAdapter(LocationEntityAdapter());
          Hive.registerAdapter(MediaEntityAdapter());
        })
  };
}

class MyHive<EntityT> {
  String boxName;
  late Future<void> Function() openBoxFunction;
  void Function() registerAdapterFunction;

  MyHive({required this.boxName, required this.registerAdapterFunction}) {
    this.openBoxFunction = () async {
      await Hive.openBox<EntityT>(boxName);
    };
  }
}
