// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';
import 'package:hive/hive.dart';


import '../../hive_constants.dart';
import '../base_entity.dart';
import '../chat_message/chat_message_entity.dart';

part 'chat_thread_entity.g.dart';

@HiveType(typeId: HiveTypes.chatThread)
class ChatThreadEntity extends BaseEntity {
  @HiveField(1)
  bool? isDeleted;
  @HiveField(2)
  int? updateTime;
  @HiveField(3)
  List<ThreadUserDetailEntity>? usersDetails;
  @HiveField(4)
  Map<String, int>? readTimes;
  @HiveField(5)
  String? type;
  @HiveField(6)
  List<ThreadUserDetailEntity>? users;
  @HiveField(7)
  int? createTime;
  @HiveField(8)
  String? title;
  @HiveField(9)
  String? backgroundImage;
  @HiveField(10)
  Map<String, bool>? typings;
  @HiveField(11)
  Map<String, bool>? isFavorites;
  @HiveField(12)
  Map<String, bool>? isNotificationOns;
  @HiveField(13)
  Map<String, bool>? isDeletedByUsers;
  @HiveField(14)
  String? adminID;
  @HiveField(15)
  String? photoImage;
  @HiveField(16)
  ChatMessageEntity? lastMessage;

  ChatThreadEntity({
    required super.uid,
    this.isDeleted,
    this.updateTime,
    this.usersDetails,
    this.readTimes,
    this.type,
    this.users,
    this.createTime,
    this.title,
    this.backgroundImage,
    this.typings,
    this.isFavorites,
    this.isNotificationOns,
    this.isDeletedByUsers,
    this.adminID,
    this.photoImage,
    this.lastMessage,
  });

  factory ChatThreadEntity.fromModel(ChatThreadModel model) {
    return ChatThreadEntity(
      uid: model.uid!,
      adminID: model.adminID,
      backgroundImage: model.backgroundImage,
      createTime: model.createTime,
      isDeleted: model.isDeleted,
      isDeletedByUsers: model.isDeletedByUsers,
      isFavorites: model.isFavorites,
      isNotificationOns: model.isNotificationOns,
      photoImage: model.photoImage,
      readTimes: model.readTimes,
      title: model.title,
      type: model.type,
      typings: model.typings,
      updateTime: model.updateTime,
      users: model.users?.map((e) => ThreadUserDetailEntity.fromEntity(e)).toList(),
      usersDetails: model.usersDetails?.map((e) => ThreadUserDetailEntity.fromEntity(e)).toList(),
      lastMessage: model.lastMessage != null ? ChatMessageEntity.fromModel(model.lastMessage!) : null,
    );
  }
}

@HiveType(typeId: HiveTypes.threadUserDetail)
class ThreadUserDetailEntity extends BaseEntity {
  @HiveField(1)
  String? fullName;
  @HiveField(2)
  String? avatarImage;

  ThreadUserDetailEntity({
    this.fullName,
    this.avatarImage,
    required super.uid,
  });

  factory ThreadUserDetailEntity.fromEntity(ThreadUserDetail model) {
    return ThreadUserDetailEntity(
      uid: model.uid!,
      avatarImage: model.avatarImage,
      fullName: model.fullName,
    );
  }
}
