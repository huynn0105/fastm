import 'package:flutter_module/models/chat/file/media_model.dart';
import 'package:flutter_module/models/chat/location_model.dart';
import 'package:flutter_module/models/chat/message/message_model.dart';
import 'package:hive/hive.dart';

import '../../../../../models/chat/message/author_model.dart';
import '../../hive_constants.dart';
import '../base_entity.dart';
part 'message_entity.g.dart';

@HiveType(typeId: HiveTypes.message)
class MessageEntity extends BaseEntity {
  MessageEntity({
    required super.uid,
    this.threadID,
    this.text,
    this.type,
    this.author,
    this.location,
    this.createTime,
    this.updateTime,
    this.isEdited,
    this.isRecalled,
    this.medias,
    this.typeCreateTime,
    this.mediaWidth,
    this.mediaHeight,
    this.htmlText,
    this.reaction,
    this.quotedMessage,
    this.quotedType,
    this.isDeletedBy,
  });

  @HiveField(1)
  String? type;
  @HiveField(2)
  String? text;
  @HiveField(3)
  int? createTime;
  @HiveField(4)
  int? updateTime;
  @HiveField(5)
  AuthorEntity? author;
  @HiveField(6)
  LocationEntity? location;
  @HiveField(7)
  bool? isEdited;
  @HiveField(8)
  bool? isRecalled;
  @HiveField(9)
  List<MediaEntity>? medias;
  @HiveField(10)
  String? typeCreateTime;
  @HiveField(11)
  int? mediaWidth;
  @HiveField(12)
  int? mediaHeight;
  @HiveField(13)
  String? htmlText;
  @HiveField(14)
  Map<String, String>? reaction;
  @HiveField(15)
  MessageEntity? quotedMessage;
  @HiveField(16)
  String? quotedType;
  @HiveField(17)
  Map<String, bool>? isDeletedBy;
  @HiveField(18)
  String? threadID;

  factory MessageEntity.fromModel(MessageModel model) {
    return MessageEntity(
      uid: model.uid!,
      author: model.author != null ? AuthorEntity.fromModel(model.author!) : null,
      createTime: model.createTime,
      htmlText: model.htmlText,
      isDeletedBy: model.isDeletedBy,
      isEdited: model.isEdited,
      isRecalled: model.isRecalled,
      location: model.location != null ? LocationEntity.fromModel(model.location!) : null,
      mediaHeight: model.mediaHeight,
      mediaWidth: model.mediaWidth,
      medias: model.medias != null ? model.medias!.map((e) => MediaEntity.fromModel(e)).toList() : null,
      quotedMessage: model.quotedMessage != null ? MessageEntity.fromModel(model.quotedMessage!) : null,
      quotedType: model.quotedType,
      reaction: model.reaction,
      text: model.text,
      threadID: model.threadID,
      type: model.type,
      typeCreateTime: model.typeCreateTime,
      updateTime: model.updateTime,
    );
  }
}

@HiveType(typeId: HiveTypes.author)
class AuthorEntity extends BaseEntity {
  AuthorEntity({
    required super.uid,
    this.fullName,
    this.avatar,
  });
  @HiveField(1)
  String? fullName;
  @HiveField(2)
  String? avatar;

  factory AuthorEntity.fromModel(AuthorModel model) {
    return AuthorEntity(
      uid: model.id ?? '',
      avatar: model.avatar,
      fullName: model.fullName,
    );
  }
}

@HiveType(typeId: HiveTypes.location)
class LocationEntity extends HiveObject {
  LocationEntity({
    this.latitude,
    this.longitude,
  });
  @HiveField(0)
  double? latitude;
  @HiveField(1)
  double? longitude;

  factory LocationEntity.fromModel(LocationModel model) {
    return LocationEntity(
      longitude: model.longitude,
      latitude: model.latitude,
    );
  }
}

@HiveType(typeId: HiveTypes.media)
class MediaEntity extends BaseEntity {
  MediaEntity({
    required super.uid,
    this.path,
    this.base64,
    required this.type,
    this.name,
    this.url,
    this.width,
    this.height,
    this.mimeType,
    this.extraData,
    this.thumbnail,
    this.duration,
  });

  @HiveField(1)
  String? url;
  @HiveField(2)
  String? path;
  @HiveField(3)
  String? base64;
  @HiveField(4)
  String? type;
  @HiveField(5)
  String? name;
  @HiveField(6)
  int? width;
  @HiveField(7)
  int? height;
  @HiveField(8)
  String? mimeType;
  @HiveField(9)
  Map<String, dynamic>? extraData;
  @HiveField(10)
  MediaEntity? thumbnail;
  @HiveField(11)
  int? duration; // Duration.inMilliseconds

  factory MediaEntity.fromModel(MediaModel model) {
    return MediaEntity(
      uid: model.id ?? '',
      path: model.path,
      type: model.type,
      duration: model.duration,
      extraData: model.extraData,
      height: model.height,
      mimeType: model.mimeType,
      name: model.name,
      thumbnail: null,
      url: model.url,
      width: model.width,
    );
  }
}
