import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/chat/cubit/chat_add_contact/chat_add_contact_cubit.dart';
import 'package:flutter_module/features/chat/page/add_contact/components/empty_search_component.dart';
import 'package:flutter_module/features/chat/page/add_contact/components/error_search_component.dart';
import 'package:flutter_module/features/chat/page/add_contact/components/list_add_contacts_component.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/widgets/mtrade_text_field.dart';
import 'package:flutter_module/routes/routes.gr.dart';

@RoutePage()
class ChatAddContactPage extends StatefulWidget implements AutoRouteWrapper {
  const ChatAddContactPage({super.key});

  @override
  State<ChatAddContactPage> createState() => _ChatAddContactPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (context) => ChatAddContactCubit(),
      child: this,
    );
  }
}

class _ChatAddContactPageState extends State<ChatAddContactPage> {
  bool showClearButton = false;
  final TextEditingController controller = TextEditingController();

  @override
  initState() {
    super.initState();
    controller.addListener(() {
      onListen(context);
    });
  }

  @override
  dispose() {
    controller.removeListener(() {
      onListen(context);
    });
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: MFastSimpleAppBar(
        context: context,
        title: "Thêm liên hệ mới",
      ),
      body: BlocConsumer<ChatAddContactCubit, ChatAddContactState>(
        listener: (context, state) async {
          if (state.requestStatus.isSuccess) {
            ToastProvider.instance.show(context: context, message: 'Đã gửi kết bạn thành công');
            context.pushRoute(ChatContactRequestRoute(initialIndex: 1));
            onClearSearch(context);
          }
          if (state.requestStatus.isFailure) {
            ToastProvider.instance.show(context: context, message: 'Gửi lời mời kết bạn thất bại');
          }
        },
        builder: (context, state) {
          bool isShowErrorMessage = ((state.status.isFailure || state.status.isSuccess) &&
              state.contacts.isEmpty &&
              controller.text.isNotEmpty);

          return Stack(
            children: [
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const SizedBox(
                      height: 20,
                    ),
                    SizedBox(
                      height: 40,
                      child: Row(
                        children: [
                          Expanded(
                            child: MTradeSearchTextField(
                              controller: controller,
                              borderRadius: BorderRadius.circular(8),
                              hintText: 'Nhập mã MFast',
                              inputFormatters: [
                                FilteringTextInputFormatter.digitsOnly,
                                // LengthLimitingTextInputFormatter(6),
                              ],
                              showClearButton: showClearButton,
                              autoFocus: true,
                              keyboardType: TextInputType.number,
                              onCleared: () {
                                onClearSearch(context);
                              },
                            ),
                          ),
                          const SizedBox(
                            width: 12,
                          ),
                          PrimaryButton(
                            onPressed: () {
                              onSearchContact(context);
                            },
                            title: 'Tìm kiếm',
                            padding: const EdgeInsets.symmetric(horizontal: 12),
                            radius: 8,
                          ),
                        ],
                      ),
                    ),
                    if (state.status.isInitial) ...{
                      const EmptySearchComponent(),
                    } else if (isShowErrorMessage) ...{
                      ErrorSearchComponent(code: controller.text),
                    } else if (state.status.isLoading) ...{
                      const LoadingWidget.withoutText(),
                    } else if (state.contacts.isNotEmpty) ...{
                      const SizedBox(
                        height: 24,
                      ),
                      Text(
                        'Kết quả',
                        style: UITextStyle.regular.copyWith(
                          color: UIColors.grayText,
                        ),
                      ),
                      Expanded(
                        child: ListAddContactsComponent(
                          data: state.contacts,
                        ),
                      ),
                    },
                  ],
                ),
              ),
              Visibility(
                visible: state.requestStatus.isLoading,
                child: const Center(child: LoadingWidget.withoutText()),
              ),
            ],
          );
        },
      ),
    );
  }

  onListen(BuildContext context) {
    onShowClearButton(controller.text);
  }

  onShowClearButton(String value) {
    if (value.isEmpty) {
      final cubit = context.read<ChatAddContactCubit>();
      cubit.resetState();
    }
    if (value.isEmpty && showClearButton) {
      setState(() {
        showClearButton = false;
      });
      return;
    }
    if (value.isNotEmpty && !showClearButton) {
      setState(() {
        showClearButton = true;
      });
      return;
    }
  }

  onSearchContact(BuildContext context) {
    final cubit = context.read<ChatAddContactCubit>();
    if (controller.text.isNotEmpty) {
      cubit.searchContact(controller.text);
    }
    if (controller.text.isEmpty) {
      cubit.resetState();
    }
  }

  onClearSearch(BuildContext context) {
    final cubit = context.read<ChatAddContactCubit>();
    controller.text = '';
    cubit.resetState();
  }
}
