import 'package:auto_route/auto_route.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/image_gallery_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/chat/page/preview_image/components/components/header_preview_component.dart';
import 'package:flutter_module/features/webview/cubit/download_images/download_images_cubit.dart';
import 'package:photo_view/photo_view.dart';
import 'package:photo_view/photo_view_gallery.dart';
import 'package:scroll_to_index/scroll_to_index.dart';

@RoutePage()
class ChatPreviewImagePage extends StatefulWidget implements AutoRouteWrapper {
  const ChatPreviewImagePage({
    super.key,
    this.images,
    this.initialIndex = 0,
    this.onForwardMessage,
    this.onDeleteMessage,
  });

  final List<String>? images;
  final int initialIndex;
  final Function(int index)? onForwardMessage;
  final Function(int index)? onDeleteMessage;

  @override
  State<ChatPreviewImagePage> createState() => _ChatPreviewImagePageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (context) => DownloadImagesCubit(),
      child: this,
    );
  }
}

class _ChatPreviewImagePageState extends State<ChatPreviewImagePage> {
  int currentIndex = 0;
  late final PageController pageController;
  late final AutoScrollController scrollController;

  @override
  void initState() {
    super.initState();
    currentIndex = widget.initialIndex;
    scrollController = AutoScrollController();
    pageController = PageController(initialPage: currentIndex);
  }

  @override
  void dispose() {
    scrollController.dispose();
    pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: UIColors.blurBackground,
      body: Stack(
        children: [
          PhotoViewGallery.builder(
            pageController: pageController,
            scrollPhysics: const ClampingScrollPhysics(),
            builder: (BuildContext context, int index) {
              return PhotoViewGalleryPageOptions(
                imageProvider: CachedNetworkImageProvider(widget.images![index]),
                initialScale: PhotoViewComputedScale.contained,
                minScale: PhotoViewComputedScale.contained,
                maxScale: 2.0,
              );
            },
            backgroundDecoration: const BoxDecoration(
              color: UIColors.blurBackground,
            ),
            itemCount: widget.images?.length ?? 0,
            loadingBuilder: (context, _) => const SizedBox(),
            onPageChanged: (index) {
              setState(() {
                currentIndex = index;
              });
              scrollController.scrollToIndex(
                index,
                preferPosition: AutoScrollPosition.middle,
              );
            },
          ),
          Positioned(
            top: 0,
            left: 0,
            right: 0,
            child: HeaderPreviewComponent(
              current: currentIndex + 1,
              length: widget.images?.length,
              onDownload: () {
                _onSaveImage(context, [widget.images![currentIndex]]);
              },
              onShare: () {
                _onShareImage(context, [widget.images![currentIndex]]);
              },
              onForward: () {
                widget.onForwardMessage?.call(currentIndex);
              },
              onDelete: () {
                widget.onDeleteMessage?.call(currentIndex);
              },
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              padding: EdgeInsets.only(
                top: 12,
                bottom: 16 + AppSize.instance.safeBottomBarHeight,
              ),
              decoration: BoxDecoration(
                color: UIColors.blurBackground.withOpacity(.85),
              ),
              child: SizedBox(
                height: 32,
                child: Center(
                  child: ListView.builder(
                    controller: scrollController,
                    scrollDirection: Axis.horizontal,
                    shrinkWrap: true,
                    itemBuilder: (context, index) {
                      final image = widget.images![index];
                      final isSelected = index == currentIndex;
                      return AutoScrollTag(
                        key: ValueKey(index),
                        controller: scrollController,
                        index: index,
                        child: SplashButton(
                          onTap: () {
                            setState(() {
                              currentIndex = index;
                            });
                            pageController.jumpToPage(index);
                            scrollController.scrollToIndex(
                              index,
                              preferPosition: AutoScrollPosition.middle,
                            );
                          },
                          child: Container(
                            margin: const EdgeInsets.symmetric(horizontal: 2),
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(8),
                            ),
                            clipBehavior: Clip.hardEdge,
                            child: Opacity(
                              opacity: isSelected ? 1 : .3,
                              child: AppImage.network(
                                url: image,
                                width: 32,
                                height: 32,
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                    itemCount: widget.images?.length ?? 0,
                  ),
                ),
              ),
            ),
          ),
          BlocBuilder<DownloadImagesCubit, DownloadImagesState>(
            builder: (context, state) {
              return Visibility(
                visible: state.shareStatus.isLoading,
                child: const LoadingWidget.withoutText(),
              );
            },
          ),
        ],
      ),
    );
  }

  _onSaveImage(BuildContext context, List<String> images) {
    final cubit = context.read<DownloadImagesCubit>();
    cubit.download(
      urls: images,
      onSuccess: (paths) {
        ImageGalleryUtil.instance.saveLocalImage(
          paths: paths,
          context: context,
          onSuccess: () {
            ToastProvider.instance.show(
              context: context,
              message: "Lưu ảnh thành công",
              backgroundColor: UIColors.green,
              duration: const Duration(seconds: 2),
            );
          },
          onFailure: () {
            ToastProvider.instance.show(
              context: context,
              message: "Lưu ảnh thất bại",
              backgroundColor: UIColors.red,
              duration: const Duration(seconds: 2),
            );
          },
        );
      },
    );
  }

  _onShareImage(BuildContext context, List<String> images) {
    final cubit = context.read<DownloadImagesCubit>();
    cubit.share(
      urls: images,
    );
  }
}
