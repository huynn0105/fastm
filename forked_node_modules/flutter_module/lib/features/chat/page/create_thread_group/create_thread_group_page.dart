import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/image_picker_utils.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/avatar/chat_avatar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/empty_widget.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/chat/cubit/create_thread_group/create_thread_group_cubit.dart';
import 'package:flutter_module/features/chat/page/create_thread_group/items/thread_contact_item.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/widgets/mtrade_text_field.dart';
import 'package:flutter_module/models/chat/contact/chat_contact_model.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';
import 'package:flutter_module/services/firebase/firebase_database/firebase_database_util.dart';

@RoutePage()
class CreateThreadGroupPage extends StatefulWidget implements AutoRouteWrapper {
  const CreateThreadGroupPage({
    super.key,
    required this.contacts,
  });

  final List<ChatContactModel> contacts;

  @override
  State<CreateThreadGroupPage> createState() => _CreateThreadGroupPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (context) => CreateThreadGroupCubit(),
      child: this,
    );
  }
}

class _CreateThreadGroupPageState extends State<CreateThreadGroupPage> {
  String textSearch = '';
  TextEditingController controller = TextEditingController();
  final int limitMember = AppData.instance.appInfo.getLimitMemberGroupChat() - 1; // trừ 1 admin
  final bool isLimitMember = AppData.instance.appInfo.getLimitMemberGroupChat() > 0;

  @override
  void initState() {
    super.initState();
    controller.addListener(() {
      setState(() {});
    });
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final dataSearch = widget.contacts.where(
      (element) => element.fullName?.toLowerCase().contains(textSearch.toLowerCase()) ?? false,
    );
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: MFastSimpleAppBar(
        context: context,
        title: 'Tạo nhóm',
      ),
      body: BlocConsumer<CreateThreadGroupCubit, CreateThreadGroupState>(
        listener: (context, state) {
          if (state.status.isSuccess) {
            context.popRoute();
          }
        },
        builder: (context, state) {
          final bool isValidLimit = !isLimitMember || (isLimitMember && state.usersSelected.length <= limitMember);
          final bool enabledButton = state.usersSelected.isNotEmpty &&
              controller.value.text.isNotEmpty &&
              !state.uploadStatus.isLoading &&
              isValidLimit;

          return Stack(
            children: [
              ListView(
                padding: const EdgeInsets.symmetric(
                  horizontal: 16,
                ),
                children: [
                  const SizedBox(
                    height: 20,
                  ),
                  Row(
                    children: [
                      SplashButton(
                        onTap: () {
                          _onPickAvatar(context);
                        },
                        child: Stack(
                          children: [
                            Container(
                              width: 56,
                              height: 56,
                              clipBehavior: Clip.hardEdge,
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(56 / 2),
                                color: UIColors.gray,
                              ),
                              child: state.image?.isNotEmpty == true
                                  ? AppImage.network(
                                      url: state.image,
                                      width: 56,
                                      height: 56,
                                    )
                                  : const Center(
                                      child: AppImage.asset(
                                        asset: 'ic_camera',
                                        width: 32,
                                        height: 32,
                                        color: UIColors.grayBackground,
                                      ),
                                    ),
                            ),
                            if (state.uploadStatus.isLoading)
                              const Positioned.fill(
                                child: Center(
                                  child: SizedBox(
                                    width: 24,
                                    height: 24,
                                    child: CircularProgressIndicator(
                                      color: UIColors.primaryColor,
                                      strokeWidth: 2,
                                    ),
                                  ),
                                ),
                              )
                          ],
                        ),
                      ),
                      const SizedBox(
                        width: 20,
                      ),
                      Expanded(
                        child: TextField(
                          controller: controller,
                          cursorColor: UIColors.primaryColor,
                          inputFormatters: [
                            LengthLimitingTextInputFormatter(50),
                          ],
                          decoration: const InputDecoration(
                            enabledBorder: UnderlineInputBorder(
                              borderSide: BorderSide(
                                color: UIColors.gray,
                                width: 1,
                              ),
                            ),
                            focusedBorder: UnderlineInputBorder(
                              borderSide: BorderSide(
                                color: UIColors.primaryColor,
                                width: 1,
                              ),
                            ),
                            hintText: "Nhập tên nhóm",
                          ),
                          style: UITextStyle.medium.copyWith(
                            fontSize: 16,
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(
                    height: 20,
                  ),
                  MTradeSearchTextField(
                    // controller: controller,
                    borderRadius: BorderRadius.circular(8),
                    hintText: 'Tìm kiếm liên hệ',
                    // showClearButton: showClearButton,
                    onChanged: (p0) {
                      setState(() {
                        textSearch = p0;
                      });
                    },
                  ),
                  const SizedBox(
                    height: 24,
                  ),
                  AnimatedSize(
                    duration: const Duration(milliseconds: 300),
                    child: Visibility(
                      visible: state.usersSelected.isNotEmpty,
                      child: Column(
                        children: [
                          SizedBox(
                            height: 56,
                            child: ListView(
                              scrollDirection: Axis.horizontal,
                              children: [
                                ...state.usersSelected.map(
                                  (item) {
                                    return Padding(
                                      padding: const EdgeInsets.only(right: 12),
                                      child: Stack(
                                        clipBehavior: Clip.none,
                                        children: [
                                          ChatAvatar(
                                            url: item.avatar ?? "",
                                            name: item.fullName ?? '',
                                            size: 56,
                                          ),
                                          Positioned(
                                            top: -4,
                                            right: 0,
                                            child: SplashButton(
                                              onTap: () {
                                                _onChangeUserSelected(context, user: item);
                                              },
                                              child: Container(
                                                width: 20,
                                                height: 20,
                                                decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(20 / 2),
                                                  color: UIColors.lightGray,
                                                ),
                                                child: const Center(
                                                  child: AppImage.asset(
                                                    asset: 'ic_close',
                                                    width: 16,
                                                    height: 16,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                    );
                                  },
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(
                            height: 20,
                          ),
                        ],
                      ),
                    ),
                  ),
                  Text(
                    textSearch.isNotEmpty ? "Tìm kiếm" : "Gợi ý",
                    style: UITextStyle.regular.copyWith(
                      color: UIColors.grayBackground,
                    ),
                  ),
                  const SizedBox(
                    height: 8,
                  ),
                  Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(8),
                      color: UIColors.white,
                    ),
                    padding: const EdgeInsets.all(12),
                    child: dataSearch.isEmpty
                        ? const EmptyWidget(
                            message: 'Không tìm thấy liên hệ',
                          )
                        : Column(
                            children: [
                              ...dataSearch.map((item) {
                                final isSelected =
                                    state.usersSelected.indexWhere((element) => element.uid == item.uid) != -1;
                                return ThreadContactItem(
                                  item: item,
                                  isSelected: isSelected,
                                  onTap: () {
                                    _onChangeUserSelected(context, user: item);
                                  },
                                );
                              }),
                            ],
                          ),
                  )
                ],
              ),
              Positioned(
                bottom: 24 + AppSize.instance.safeBottomBarHeight,
                left: 16,
                right: 16,
                child: Column(
                  children: [
                    CollectDataView(
                      errorMsg: isValidLimit ? "" : "Chỉ có thể thêm tối đa ${limitMember} thành viên vào nhóm",
                      child: const SizedBox(),
                    ),
                    PrimaryButton(
                      enabled: enabledButton,
                      width: double.infinity,
                      onPressed: () {
                        _onCreateThreadGroup(context);
                      },
                      title: 'Tạo nhóm',
                      height: 48,
                    ),
                  ],
                ),
              ),
              Visibility(
                visible: state.status.isLoading,
                child: const LoadingWidget.withoutText(),
              )
            ],
          );
        },
      ),
    );
  }

  _onPickAvatar(BuildContext context) async {
    try {
      final cubit = context.read<CreateThreadGroupCubit>();
      final file = await ImagePickerUtils.pickImage(context: context, type: PickResourceType.gallery);
      if (file != null) {
        cubit.uploadImage(file);
      }
    } catch (_) {}
  }

  _onChangeUserSelected(BuildContext context, {required ChatContactModel user}) {
    final cubit = context.read<CreateThreadGroupCubit>();
    cubit.changeUserSelected(user);
  }

  _onCreateThreadGroup(BuildContext context) {
    final cubit = context.read<CreateThreadGroupCubit>();
    final users = [
      ...cubit.state.usersSelected,
      ChatContactModel(
        uid: AppData.instance.author?.id,
        avatar: AppData.instance.author?.avatar,
        fullName: AppData.instance.author?.fullName,
      ),
    ];

    cubit.updatePayload(
        title: controller.text,
        users: users.map((e) => ThreadUserDetail(uid: e.uid, fullName: e.fullName, avatarImage: e.avatar)).toList(),
        image: cubit.state.image);

    cubit.createThreadGroup();
  }
}
