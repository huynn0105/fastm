import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/features/chat/cubit/chat_thread/chat_thread_cubit.dart';
import 'package:flutter_module/features/chat/page/chat/children/thread/components/contacts_online_component.dart';
import 'package:flutter_module/features/chat/page/chat/children/thread/items/thread_item.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';
import 'package:flutter_module/models/mfast/app_info/chat_bot_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';

@RoutePage()
class ChatThreadPage extends StatelessWidget {
  const ChatThreadPage({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<ChatThreadCubit, ChatThreadState>(
      builder: (context, state) {
        if (state.status.isInitial) {
          _onGetData(context);
        }

        final systemThreads = state.threads.where((e) => e.isSystemThread()).toList();
        final normalThreads = state.threads.where((e) => !e.isSystemThread() && e.isFavorite() != true).toList();
        final favoriteThreads = state.threads.where((e) => !e.isSystemThread() && e.isFavorite() == true).toList();

        /// Add Chat Bot thread
        List<ChatThreadModel> chatBotThreads = [];
        List<ChatBotModel> chatBots = (AppData.instance.appInfo.chatBots ?? []).where((e) => e.showChatBot == true).toList();
        if (chatBots.isNotEmpty) {
          chatBotThreads = chatBots.map((e) => ChatThreadModel.fromChatBot(e)).toList();
        }

        return LoadMoreWidget(
          child: CustomScrollView(
            slivers: [
              const SliverToBoxAdapter(
                child: ContactsOnlineComponent(),
              ),
              if (systemThreads.isNotEmpty == true || chatBotThreads.isNotEmpty) ...{
                SliverPadding(
                  padding: const EdgeInsets.only(
                    top: 26,
                    left: 16,
                    right: 16,
                  ),
                  sliver: SliverToBoxAdapter(
                    child: Text(
                      'Hệ thống',
                      style: UITextStyle.semiBold.copyWith(
                        color: UIColors.grayText,
                      ),
                    ),
                  ),
                ),
                if (chatBotThreads.isNotEmpty) ...[
                  SliverPadding(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                    ),
                    sliver: SliverList(
                      delegate: SliverChildBuilderDelegate(
                        (context, index) {
                          final thread = chatBotThreads[index];
                          return ThreadItem(
                            item: thread,
                            unread: 0,
                            isBlock: false,
                            showUpdateTime: false,
                            ignoreLongPress: true,
                            showToastMessage: (message) => ToastProvider.instance.show(
                              context: context,
                              message: message,
                            ),
                            onTap: () {
                              context.pushRoute(ChatBotRoute(title: thread.title, botID: thread.uid, type: thread.type));
                            },
                          );
                        },
                        childCount: chatBotThreads.length,
                      ),
                    ),
                  ),
                ],
                SliverPadding(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 16,
                  ),
                  sliver: SliverList(
                    delegate: SliverChildBuilderDelegate(
                      (context, index) {
                        final thread = systemThreads[index];
                        final unread = state.threadUnread[thread.uid];
                        final isBlock = state.blockThreads[thread.uid];
                        return ThreadItem(
                          item: thread,
                          unread: unread,
                          isBlock: isBlock,
                          showToastMessage: (message) => ToastProvider.instance.show(
                            context: context,
                            message: message,
                          ),
                        );
                      },
                      childCount: systemThreads.length,
                    ),
                  ),
                ),
              },
              if (favoriteThreads.isNotEmpty == true) ...{
                SliverPadding(
                  padding: const EdgeInsets.only(
                    top: 26,
                    left: 16,
                    right: 16,
                  ),
                  sliver: SliverToBoxAdapter(
                    child: Text(
                      'Ưa thích',
                      style: UITextStyle.semiBold.copyWith(
                        color: UIColors.grayText,
                      ),
                    ),
                  ),
                ),
                SliverPadding(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 16,
                  ),
                  sliver: SliverList(
                    delegate: SliverChildBuilderDelegate(
                      (context, index) {
                        final thread = favoriteThreads[index];
                        final unread = state.threadUnread[thread.uid];
                        final isBlock = state.blockThreads[thread.uid];
                        return ThreadItem(
                          item: thread,
                          unread: unread,
                          isBlock: isBlock,
                          showToastMessage: (message) => ToastProvider.instance.show(
                            context: context,
                            message: message,
                          ),
                        );
                      },
                      childCount: favoriteThreads.length,
                    ),
                  ),
                ),
              },
              if (normalThreads.isNotEmpty == true) ...{
                SliverPadding(
                  padding: const EdgeInsets.only(
                    top: 24,
                    left: 16,
                    right: 16,
                  ),
                  sliver: SliverToBoxAdapter(
                    child: Text(
                      'Gần đây',
                      style: UITextStyle.semiBold.copyWith(
                        color: UIColors.grayText,
                      ),
                    ),
                  ),
                ),
                SliverPadding(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 16,
                  ),
                  sliver: SliverList(
                    delegate: SliverChildBuilderDelegate(
                      (context, index) {
                        final thread = normalThreads[index];
                        final unread = state.threadUnread[thread.uid];
                        final isBlock = state.blockThreads[thread.uid];
                        return ThreadItem(
                          item: thread,
                          unread: unread,
                          isBlock: isBlock,
                          showToastMessage: (message) => ToastProvider.instance.show(
                            context: context,
                            message: message,
                          ),
                        );
                      },
                      childCount: normalThreads.length,
                    ),
                  ),
                ),
              },
            ],
          ),
        );
      },
    );
  }

  _onGetData(BuildContext context) {
    final cubit = context.read<ChatThreadCubit>();
    return cubit.fetchThreads();
  }

  _onLoadMore(BuildContext context) {
    final cubit = context.read<ChatThreadCubit>();
    return cubit.fetchThreads(loadmore: true);
  }
}
