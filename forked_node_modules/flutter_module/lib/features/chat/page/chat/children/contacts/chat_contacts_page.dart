import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/features/chat/cubit/chat_contact/chat_contact_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_requested_contact/chat_requested_contact_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_thread/chat_thread_cubit.dart';
import 'package:flutter_module/features/chat/page/chat/children/contacts/components/count_all_contacts_component.dart';
import 'package:flutter_module/features/chat/page/chat/children/contacts/components/count_request_contact_component.dart';
import 'package:flutter_module/features/chat/page/chat/children/contacts/components/list_contacts_component.dart';

@RoutePage()
class ChatContactsPage extends StatelessWidget {
  const ChatContactsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<ChatContactCubit, ChatContactState>(
      builder: (context, state) {
        if (state.status.isInitial) {
          _onFetchContacts(context);
        }

        if (state.status.isLoading) {
          return const LoadingWidget.withoutText();
        }
        return Stack(
          children: [
            Positioned.fill(
              child: Column(
                children: [
                  const CountRequestContactComponent(),
                  CountAllContactsComponent(
                    count: state.contacts.length,
                  ),
                  ListContactsComponent(
                    data: state.contacts,
                    onRefresh: () {
                      return _onFetchContacts(context, showLoading: false);
                    },
                  ),
                ],
              ),
            ),
            BlocBuilder<ChatThreadCubit, ChatThreadState>(
              builder: (context, state) {
                return Visibility(
                  visible: state.openChatThreadStatus.isLoading,
                  child: const LoadingWidget.dark(),
                );
              },
            ),
          ],
        );
      },
    );
  }

  _onFetchContacts(BuildContext context, {bool showLoading = true}) {
    final cubit = context.read<ChatContactCubit>();
    final requestedCubit = context.read<ChatRequestedContactCubit>();
    requestedCubit.fetchInvitationAndSendingRequest();
    return cubit.fetchContacts(showLoading: showLoading);
  }
}
