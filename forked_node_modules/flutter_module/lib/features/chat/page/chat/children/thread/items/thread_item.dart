import 'package:auto_route/auto_route.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/datetime_util.dart';
import 'package:flutter_module/common/widgets/avatar/chat_avatar.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/chat/cubit/chat_setting/chat_setting_cubit.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';

class ThreadItem extends StatelessWidget {
  const ThreadItem({
    super.key,
    required this.item,
    this.unread = 0,
    this.showToastMessage,
    this.isBlock,
    this.showUpdateTime = true,
    this.onTap,
    this.ignoreLongPress = false,
  });

  final ChatThreadModel item;
  final int? unread;
  final Function(String)? showToastMessage;
  final bool? isBlock;
  final bool showUpdateTime;
  final Function()? onTap;
  final bool ignoreLongPress;

  @override
  Widget build(BuildContext context) {
    DateTime date = DateTime.fromMillisecondsSinceEpoch(
      item.updateTime ?? 0,
    );

    return GestureDetector(
      behavior: HitTestBehavior.opaque,
      onLongPress: () {
        if (ignoreLongPress) {
          return;
        }
        _onShowActionSheet(
          context,
          thread: item,
          onChangeNotification: () {
            final newValue = !item.isNotificationOn();
            _onChangeNotification(
              context,
              isOn: newValue,
              onResult: (isSuccess) {
                showToastMessage?.call(
                  '${newValue ? "Bật" : "Tắt"} thông báo ${isSuccess ? "thành công" : "thất bại"}',
                );
              },
            );
          },
          onChangeFavorite: () {
            final newValue = !item.isFavorite();
            _onChangeFavorite(
              context,
              isFavorite: newValue,
              onResult: (isSuccess) {
                showToastMessage?.call(
                  '${newValue ? "Thêm vào" : "Xoá khỏi"} danh sách yêu thích ${isSuccess ? "thành công" : "thất bại"}',
                );
              },
            );
          },
          onDelete: () {
            DialogProvider.instance.showConfirmDialog(
              context,
              message: 'Bạn muốn xoá cuộc trò chuyện với ${item.getDefaultThreadTitle()} không?',
              negativeTitle: 'Quay lại',
              positiveTitle: 'Xoá',
              positiveCallback: () {
                _onDeleteThread(
                  context,
                  onResult: (isSuccess) {
                    showToastMessage?.call(
                      'Xoá cuộc trò chuyện ${isSuccess ? "thành công" : "thất bại"}',
                    );
                  },
                );
              },
            );
          },
        );
      },
      onTap: () {
        if (onTap != null) {
          onTap!();
          return;
        }
        context.pushRoute(ThreadMessagesRoute(threadID: item.uid, thread: item));
      },
      child: Column(
        children: [
          const SizedBox(
            height: 8,
          ),
          Row(
            children: [
              Stack(
                children: [
                  Container(
                    width: 48,
                    height: 48,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(48 / 2),
                      color: UIColors.white,
                    ),
                    clipBehavior: Clip.hardEdge,
                    child: Center(
                      child: ChatAvatar(
                        url: item.photoImageURI() ?? '',
                        name: item.getDefaultThreadTitle(),
                        isSingleThread: item.isSingleThread() == true,
                        size: 48,
                      ),
                    ),
                  ),
                  if ((unread ?? 0) > 0)
                    Positioned(
                      bottom: 0,
                      right: 0,
                      child: Container(
                        clipBehavior: Clip.none,
                        width: 16,
                        height: 16,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(12),
                          color: UIColors.red,
                        ),
                        child: Center(
                          child: Text(
                            unread! > 9 ? '9+' : "$unread",
                            style: UITextStyle.bold.copyWith(
                              color: UIColors.white,
                              height: 1.3,
                              fontSize: 10,
                            ),
                          ),
                        ),
                      ),
                    )
                ],
              ),
              const SizedBox(
                width: 14,
              ),
              Expanded(
                child: Column(
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Expanded(
                              child: Text(
                                item.getDefaultThreadTitle(),
                                style: UITextStyle.medium.copyWith(
                                  color: UIColors.boolText,
                                  fontSize: 15,
                                ),
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                            ),
                            Visibility(
                              visible: showUpdateTime,
                              child: Text(
                                DateTimeUtil.convertDate(
                                  date.toIso8601String(),
                                  fromFormat: DateTimeFormat.yyyy_MM_ddTHH_mm_ssSS,
                                  toFormat: _calculateDifferenceDate(date) == 0
                                      ? DateTimeFormat.HHmm
                                      : DateTimeFormat.dd_MM_yyyy,
                                  isFromUtc: false,
                                ),
                                style: UITextStyle.medium.copyWith(
                                  fontSize: 12,
                                  color: UIColors.grayText,
                                ),
                              ),
                            )
                          ],
                        ),
                        Visibility(
                          visible: [
                            item.typingUsers().isNotEmpty,
                            (item.lastMessage?.getDisplayTextForLastMessage() ?? '').isNotEmpty,
                            !item.isNotificationOn(),
                            isBlock == true,
                          ].any((e) => e == true),
                          child: Column(
                            children: [
                              const SizedBox(
                                height: 2,
                              ),
                              Row(
                                children: [
                                  Expanded(
                                    child: Text(
                                      item.typingUsers().isNotEmpty
                                          ? 'Đang nhập...'
                                          : item.lastMessage?.getDisplayTextForLastMessage() ?? '',
                                      style: (item.typingUsers().isEmpty && (unread ?? 0) > 0)
                                          ? UITextStyle.semiBold.copyWith(
                                              fontSize: 14,
                                            )
                                          : UITextStyle.regular.copyWith(
                                              fontSize: 14,
                                              color: UIColors.grayText,
                                            ),
                                      maxLines: 1,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                  if (!item.isNotificationOn())
                                    const AppImage.asset(
                                      asset: 'mute',
                                      width: 16,
                                      height: 16,
                                    ),
                                  if (isBlock == true)
                                    const AppImage.asset(
                                      asset: 'ic_null',
                                      width: 16,
                                      height: 16,
                                    ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              )
            ],
          ),
          const SizedBox(
            height: 8,
          ),
          const Divider(
            color: UIColors.lightGray,
            thickness: 1,
            height: 1,
            indent: 66,
          ),
        ],
      ),
    );
  }

  _onChangeNotification(
    BuildContext context, {
    bool isOn = false,
    Function(bool)? onResult,
  }) async {
    final cubit = context.read<ChatSettingCubit>();
    final isSuccess = await cubit.toggleUserNotificationOnInThread(isOn: isOn);
    onResult?.call(isSuccess);
  }

  _onChangeFavorite(
    BuildContext context, {
    bool isFavorite = false,
    Function(bool)? onResult,
  }) async {
    final cubit = context.read<ChatSettingCubit>();
    final isSuccess = await cubit.toggleUserFavoriteInThread(isFavorite: isFavorite);
    onResult?.call(isSuccess);
  }

  _onDeleteThread(
    BuildContext context, {
    Function(bool)? onResult,
  }) async {
    final cubit = context.read<ChatSettingCubit>();
    final isSuccess = await cubit.deleteChatThread();
    onResult?.call(isSuccess);
  }

  _onShowActionSheet(
    BuildContext context, {
    required ChatThreadModel thread,
    VoidCallback? onChangeNotification,
    VoidCallback? onChangeFavorite,
    VoidCallback? onDelete,
  }) {
    final cubit = context.read<ChatSettingCubit>();
    cubit.initState(thread);

    showCupertinoModalPopup<void>(
      context: context,
      builder: (BuildContext context) => BlocProvider.value(
        value: cubit,
        child: Builder(builder: (context) {
          return CupertinoActionSheet(
            actions: <CupertinoActionSheetAction>[
              CupertinoActionSheetAction(
                onPressed: () {
                  Navigator.pop(context);
                  onChangeNotification?.call();
                },
                child: Text(
                  '${thread.isNotificationOn() ? "Tắt" : "Bật"} thông báo',
                  style: UITextStyle.medium.copyWith(
                    color: UIColors.primaryColor,
                    fontSize: 18,
                  ),
                ),
              ),
              CupertinoActionSheetAction(
                onPressed: () {
                  Navigator.pop(context);
                  onChangeFavorite?.call();
                },
                child: Text(
                  '${thread.isFavorite() ? "Xoá" : "Thêm vào"} ưa thích',
                  style: UITextStyle.medium.copyWith(
                    color: UIColors.primaryColor,
                    fontSize: 18,
                  ),
                ),
              ),
              CupertinoActionSheetAction(
                isDestructiveAction: true,
                onPressed: () {
                  Navigator.pop(context);
                  onDelete?.call();
                },
                child: Text(
                  'Xoá trò chuyện',
                  style: UITextStyle.semiBold.copyWith(
                    color: UIColors.red,
                    fontSize: 18,
                  ),
                ),
              ),
              CupertinoActionSheetAction(
                isDefaultAction: true,
                isDestructiveAction: true,
                onPressed: () {
                  Navigator.pop(context);
                },
                child: Text(
                  'Đóng',
                  style: UITextStyle.semiBold.copyWith(
                    color: UIColors.primaryColor,
                    fontSize: 18,
                  ),
                ),
              ),
            ],
          );
        }),
      ),
    );
  }

  int _calculateDifferenceDate(DateTime date) {
    DateTime now = DateTime.now();
    return DateTime(date.year, date.month, date.day).difference(DateTime(now.year, now.month, now.day)).inDays;
  }
}
