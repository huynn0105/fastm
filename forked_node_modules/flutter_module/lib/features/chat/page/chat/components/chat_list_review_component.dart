import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/avatar/chat_avatar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/features/chat/cubit/chat_rating/chat_rating_cubit.dart';
import 'package:flutter_module/features/chat/page/chat/items/overall_rating_item.dart';
import 'package:flutter_module/features/chat/page/chat/items/rating_item.dart';
import 'package:flutter_module/services/firebase/firebase_database/firebase_database_util.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';

class ChatListReviewComponent extends StatefulWidget {
  const ChatListReviewComponent({
    super.key,
    this.avatarImage,
    this.fullName,
  });

  final String? avatarImage;
  final String? fullName;

  @override
  State<ChatListReviewComponent> createState() => _ChatListReviewComponentState();
}

class _ChatListReviewComponentState extends State<ChatListReviewComponent> {
  late String skillSelected;
  late String ratingSelected;
  final RefreshController _controller = RefreshController();

  @override
  void initState() {
    super.initState();
    skillSelected = AppConstants.defaultSkillChatFilters.valueAt(0)?.id ?? "";
    ratingSelected = AppConstants.defaultRatingFilters.valueAt(0)?.id ?? "";
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return ConstrainedBox(
      constraints: BoxConstraints(
        minWidth: double.infinity,
        maxHeight: AppSize.instance.height * 0.7,
      ),
      child: BlocBuilder<ChatRatingCubit, ChatRatingState>(
        builder: (context, state) {
          if (state.status.isInitial) {
            final cubit = context.read<ChatRatingCubit>();
            cubit.getUserRating();
            _onGetData(context);
          }

          final avatarImage = state.user?.avatarImage ?? widget.avatarImage;
          final fullName = state.user?.fullName ?? widget.fullName ?? "";
          final levelTitle = state.level?.title ?? "---";
          return LoadMoreWidget(
            refreshController: _controller,
            onLoadMore: () async {
              final length = state.reviews.length;
              await _onLoadMore(context);

              return length != state.reviews.length;
            },
            child: ListView(
              padding: const EdgeInsets.only(
                top: 16,
                left: 16,
                right: 16,
              ),
              shrinkWrap: true,
              children: [
                Row(
                  children: [
                    ChatAvatar(
                      url: FirebaseDatabaseUtil.convertUrlAvatar(avatarImage),
                      name: fullName,
                      size: 64,
                    ),
                    const SizedBox(
                      width: 16,
                    ),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              fullName,
                              style: UITextStyle.semiBold.copyWith(
                                fontSize: 18,
                              ),
                            ),
                            Text(
                              levelTitle,
                              style: UITextStyle.semiBold.copyWith(
                                color: UIColors.darkBlue,
                              ),
                            ),
                          ],
                        ),
                      ],
                    )
                  ],
                ),
                const SizedBox(
                  height: 12,
                ),
                const Divider(
                  color: UIColors.white,
                  thickness: 1,
                  height: 1,
                ),
                const SizedBox(
                  height: 12,
                ),
                SizedBox(
                  height: 32,
                  child: ListView.separated(
                    scrollDirection: Axis.horizontal,
                    shrinkWrap: true,
                    itemBuilder: (context, index) {
                      final item = AppConstants.defaultSkillChatFilters[index];
                      final isSelected = skillSelected == item.id;

                      return SplashButton(
                        onTap: () {
                          setState(() {
                            skillSelected = item.id ?? "";
                          });
                          _onGetData(context);
                        },
                        child: Chip(
                          label: Text(
                            item.value ?? "",
                            style: isSelected
                                ? UITextStyle.medium.copyWith(
                                    color: UIColors.white,
                                  )
                                : UITextStyle.regular.copyWith(
                                    color: UIColors.grayText,
                                  ),
                          ),
                          padding: const EdgeInsets.only(left: 12, right: 12, bottom: 7, top: 5),
                          backgroundColor: isSelected ? UIColors.primaryColor : UIColors.white,
                        ),
                      );
                    },
                    separatorBuilder: (context, index) {
                      return const SizedBox(
                        width: 8,
                      );
                    },
                    itemCount: AppConstants.defaultSkillChatFilters.length,
                  ),
                ),
                const SizedBox(
                  height: 12,
                ),
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: UIColors.white,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      OverallRatingItem(
                        avg: state.totalAvg ?? 0,
                        amount: state.totalAmount ?? 0,
                        percent: state.totalPercent,
                      ),
                      const SizedBox(
                        height: 12,
                      ),
                      const Divider(
                        color: UIColors.lightGray,
                        height: 1,
                      ),
                      const SizedBox(
                        height: 15,
                      ),
                      Text(
                        "Chi tiết đánh giá",
                        style: UITextStyle.regular.copyWith(
                          color: UIColors.grayText,
                        ),
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      SizedBox(
                        height: 32,
                        child: ListView.separated(
                          scrollDirection: Axis.horizontal,
                          shrinkWrap: true,
                          itemBuilder: (context, index) {
                            final item = AppConstants.defaultRatingFilters[index];
                            final isSelected = ratingSelected == item.id;

                            return SplashButton(
                              onTap: () {
                                setState(() {
                                  ratingSelected = item.id ?? "";
                                });
                                _onGetData(context);
                              },
                              child: Chip(
                                label: Text(
                                  item.value ?? "",
                                  style: isSelected
                                      ? UITextStyle.medium.copyWith(
                                          color: UIColors.white,
                                        )
                                      : UITextStyle.regular.copyWith(
                                          color: UIColors.grayText,
                                        ),
                                ),
                                padding: const EdgeInsets.only(left: 12, right: 12, bottom: 7, top: 5),
                                backgroundColor: isSelected ? UIColors.primaryColor : UIColors.background,
                              ),
                            );
                          },
                          separatorBuilder: (context, index) {
                            return const SizedBox(
                              width: 8,
                            );
                          },
                          itemCount: AppConstants.defaultRatingFilters.length,
                        ),
                      ),
                      const SizedBox(
                        height: 16,
                      ),
                      if (state.status.showLoading) ...[
                        const LoadingWidget.withoutText(),
                      ] else if (state.reviews.isEmpty) ...[
                        const EmptyRatingItem(),
                      ] else ...[
                        ...List.generate(max(0, state.reviews.length * 2 - 1), (index) {
                          final int itemIndex = index ~/ 2;
                          final item = state.reviews[itemIndex];
                          if (index.isEven) {
                            return RatingItem(
                              data: item,
                            );
                          }
                          return const SizedBox(
                            height: 12,
                          );
                        }),
                      ],
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  _onGetData(BuildContext context) {
    final cubit = context.read<ChatRatingCubit>();
    cubit.payload = cubit.payload.copyWith(
      skill: skillSelected,
      tab: ratingSelected,
    );
    _controller.resetNoData();
    cubit.getReviews();
  }

  _onLoadMore(BuildContext context) {
    final cubit = context.read<ChatRatingCubit>();
    cubit.getReviews(loadMore: true);
  }
}
