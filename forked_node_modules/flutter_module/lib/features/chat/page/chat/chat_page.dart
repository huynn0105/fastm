import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:ekyc/common/utils/text_util.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/dialogs/dialog_view/mtrade/mtrade_dialog_view.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/tabbar/tabbar.dart';
import 'package:flutter_module/features/chat/cubit/chat_contact/chat_contact_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_contact_online/chat_contact_online_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_requested_contact/chat_requested_contact_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_setting/chat_setting_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_thread/chat_thread_cubit.dart';
import 'package:flutter_module/features/chat/page/chat/components/chat_search_bar_component.dart';
import 'package:flutter_module/models/chat/message/chat_message_model.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:flutter_module/services/firebase/firebase_database/firebase_database_subscription.dart';
import 'package:flutter_module/services/firebase/firebase_database/firebase_database_util.dart';

@RoutePage()
class ChatPage extends StatefulWidget implements AutoRouteWrapper {
  const ChatPage({
    super.key,
    @QueryParam("chatBotID") this.chatBotID,
    @QueryParam("chatUserID") this.chatUserID,
    @QueryParam("threadID") this.threadID,
  });

  final String? chatBotID;
  final String? chatUserID;
  final String? threadID;

  @override
  State<ChatPage> createState() => _ChatPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (context) => ChatContactOnlineCubit()..fetchContactsOnline(),
        ),
        BlocProvider(
          create: (context) => ChatRequestedContactCubit()..fetchInvitationAndSendingRequest(),
        ),
        BlocProvider(
          create: (context) => ChatSettingCubit(),
        ),
      ],
      child: this,
    );
  }
}

class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin {
  late final TabController _tabController;
  late final FirebaseDatabaseSubscription _firebaseDatabaseSubscription;
  bool isOpenInitThread = false;

  //custom tab bar
  bool isUseGenieChat = false;
  bool isUseFlutterChat = false;
  bool isOnlyShowGenieChat = false;
  bool isOnlyShowFlutterChat = false;
  bool isShowAll = false;
  bool isCustomAppBar = false;
  List<String> tabTitles = [];
  List<PageRouteInfo<dynamic>> tabRoutes = [];

  @override
  void initState() {
    super.initState();
    _initTabBar(context);
    _tabController = TabController(length: tabRoutes.length, vsync: this);
    _firebaseDatabaseSubscription = FirebaseDatabaseSubscription();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<ChatThreadCubit>().fetchThreads(forceResetData: true);
      context.read<ChatContactCubit>().fetchContacts();
      _firebaseDatabaseSubscription.subscribeBlockedThread(
        onChangeBlockThread: (event) => _onChangeBlockThread(context, event),
      );
      _onOpenChatBotThread(context);
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<ChatThreadCubit, ChatThreadState>(
      listenWhen: (pre, cur) {
        return pre.threads.length != cur.threads.length || pre.isDataRemote != cur.isDataRemote;
      },
      listener: (context, state) {
        if (state.threads.isNotEmpty && state.isDataRemote) {
          _firebaseDatabaseSubscription.subscribeNewMessage(
            state.threads,
            onGetLastMessages: _onGetLastMessages,
            onNewMessage: (event) => _onNewMessage(context, event),
            onChangeMessage: (event) => _onChangeMessage(context, event),
          );
          _firebaseDatabaseSubscription.subscribeMyThreadsChange(
            state.threads.map((e) => e.uid).whereType<String>().toList(),
            onThreadChange: (event) => _onThreadChange(context, event),
            onThreadTypingDataChange: (event, threadID) => _onThreadTypingDataChange(context, event, threadID),
          );
          _firebaseDatabaseSubscription.subscribeNewThread(
            onNewThread: (event) {
              _onNewThread(context, event);
            },
          );
          if (isOpenInitThread == false) {
            _onOpenInitThread(context);
          }
          context.read<ChatThreadCubit>().getTotalUnreadMessageInThreads(threads: state.threads);
        }
      },
      child: WillPopScope(
        onWillPop: () async {
          if (!context.router.canPop()) {
            RedirectUtil.backToMFast();
            return false;
          }
          return true;
        },
        child: Scaffold(
          appBar: !isCustomAppBar
              ? MFastSimpleAppBar(
                  title: "Phòng hỗ trợ",
                  context: context,
                  onBack: context.popRoute,
                )
              : null,
          body: Column(
            children: [
              if ((!isOnlyShowGenieChat && isOnlyShowFlutterChat) || isShowAll) ...{
                SizedBox(
                  height: AppSize.instance.safeTop,
                ),
                const SizedBox(
                  height: 4,
                ),
                ChatSearchBarComponent(
                  readOnly: true,
                  onTap: () {
                    final contacts = context.read<ChatContactCubit>().state.contacts;
                    context.pushRoute(ChatSearchContactRoute(
                      contacts: contacts,
                    ));
                  },
                ),
              },
              const SizedBox(
                height: 16,
              ),
              if (tabRoutes.isNotEmpty) ...{
                Expanded(
                  child: AutoTabsRouter(
                    routes: tabRoutes,
                    builder: (BuildContext context, Widget child) {
                      return Column(
                        children: [
                          if ((!isOnlyShowGenieChat && isOnlyShowFlutterChat) || isShowAll)
                            UnderlineIndicatorTabbar(
                              controller: _tabController,
                              backgroundColor: UIColors.background,
                              titles: tabTitles,
                              onTap: (index) {
                                AutoTabsRouter.of(context).setActiveIndex(index);
                              },
                            ),
                          Expanded(
                            child: child,
                          ),
                        ],
                      );
                    },
                  ),
                )
              } else ...{
                const SizedBox(
                  height: 60,
                ),
                const Padding(
                  padding: EdgeInsets.symmetric(horizontal: 16),
                  child: MTradeDialogView(
                    asset: 'ic_mtrade_mascot_announce',
                    title: "Loa loa loa loa!!!",
                    message: "Tính năng năng hiện tại đang bảo trì, vui lòng quay lại sau!",
                    titleColor: UIColors.darkBlue,
                    messageColor: UIColors.grayText,
                  ),
                )
              },
            ],
          ),
        ),
      ),
    );
  }

  ChatMessageModel _onGetLastMessages(String threadID) {
    return ChatMessageModel();
  }

  _onNewMessage(BuildContext context, DatabaseEvent event) {
    // debugPrint("onNewMessage: ${jsonEncode(event.snapshot.value)}");

    final cubit = context.read<ChatThreadCubit>();
    final message = ChatMessageModel.fromJson(FirebaseDatabaseUtil.convertObjectToMap(event.snapshot.value));
    // final user = UserChatDataHelper.instance.getExistUser(message.authorID ?? '');
    // if (user == null) {
    //   UserChatDataHelper.instance.addUser(UserOnMessageModel(
    //     id: message.authorID,
    //     fullName: message.authorFullName,
    //     avatar: message.authorAvatarImage,
    //   ));
    // }
    cubit.addNewMessage(message: message);
  }

  _onChangeMessage(BuildContext context, DatabaseEvent event) {
    // debugPrint("onChangeMessage: ${jsonEncode(event.snapshot.value)}");

    final cubit = context.read<ChatThreadCubit>();
    final message = ChatMessageModel.fromJson(FirebaseDatabaseUtil.convertObjectToMap(event.snapshot.value));
    // final user = UserChatDataHelper.instance.getExistUser(message.authorID ?? '');
    // if (user == null) {
    //   UserChatDataHelper.instance.addUser(UserOnMessageModel(
    //     id: message.authorID,
    //     fullName: message.authorFullName,
    //     avatar: message.authorAvatarImage,
    //   ));
    // }
    cubit.changeMessage(message: message);
  }

  _onThreadChange(BuildContext context, DatabaseEvent event) {
    // debugPrint("onThreadChange: ${jsonEncode(event.snapshot.value)}");

    final cubit = context.read<ChatThreadCubit>();
    final thread = ChatThreadModel.fromJson(FirebaseDatabaseUtil.convertObjectToMap(event.snapshot.value));
    cubit.changeThread(thread: thread);
  }

  _onNewThread(BuildContext context, DatabaseEvent event) {
    // debugPrint("onThreadChange: ${jsonEncode(event.snapshot.value)}");

    final cubit = context.read<ChatThreadCubit>();
    cubit.newThread(threadID: event.snapshot.key ?? '');
  }

  _onThreadTypingDataChange(BuildContext context, DatabaseEvent event, String threadID) {
    // debugPrint("onThreadTypingDataChange: ${jsonEncode(event.snapshot.value)}");

    final cubit = context.read<ChatThreadCubit>();
    final typings = Map<String, bool>.from(FirebaseDatabaseUtil.convertObjectToMap(event.snapshot.value));
    cubit.typingThread(typings: typings, threadID: threadID);
  }

  _onOpenChatBotThread(BuildContext context) {
    final chatBotID = widget.chatBotID;

    final chatBot = AppData.instance.appInfo.chatBots?.firstWhereOrNull((e) => e.id == chatBotID);

    if (chatBot != null) {
      isOpenInitThread = true;
      context.pushRoute(ChatBotRoute(title: chatBot.title, botID: chatBot.id, type: chatBot.type));
    }
  }

  _onOpenInitThread(BuildContext context) async {
    final cubit = context.read<ChatThreadCubit>();
    final chatUserID = widget.chatUserID ?? AppData.instance.chatUserID;
    final chatThreadID = widget.threadID ?? AppData.instance.threadID;

    if (TextUtils.isEmpty(chatUserID) && TextUtils.isEmpty(chatThreadID)) {
      return;
    } else {
      isOpenInitThread = true;
    }

    ChatThreadModel? thread;
    // Single thread
    if (TextUtils.isNotEmpty(chatUserID)) {
      thread = await cubit.getSingleThreadAndCreateIfNotExisted(userID: chatUserID);
    }
    // Group thread
    if (TextUtils.isNotEmpty(chatThreadID)) {
      thread = cubit.getThreadWithThreadID(threadID: chatThreadID!);
    }

    if (thread != null && context.mounted) {
      context.pushRoute(ThreadMessagesRoute(thread: thread, threadID: thread.uid));
    } else if (context.mounted) {
      DialogProvider.instance.showMTradeErrorDialog(
        context: context,
        message: 'Không tìm thấy đoạn hội thoại',
      );
    }
  }

  _onChangeBlockThread(BuildContext context, DatabaseEvent event) {
    // debugPrint("_onChangeBlockThread: ${jsonEncode(event.snapshot.value)}");

    final cubit = context.read<ChatThreadCubit>();
    final blockThreads = Map<String, bool>.from(FirebaseDatabaseUtil.convertObjectToMap(event.snapshot.value));
    cubit.updateBlockThreads(blockThreads: blockThreads);
  }

  _initTabBar(BuildContext context) {
    // isUseGenieChat = AppData.instance.appInfo.useGenieChat == true;
    isUseFlutterChat = AppData.instance.appInfo.useFlutterChat == true;
    isOnlyShowGenieChat = (isUseGenieChat && !isUseFlutterChat);
    isOnlyShowFlutterChat = (!isUseGenieChat && isUseFlutterChat);
    isShowAll = isUseGenieChat && isUseFlutterChat;
    isCustomAppBar = (!isOnlyShowGenieChat && isOnlyShowFlutterChat) || isShowAll;

    tabTitles = isShowAll
        ? [
            "Phòng hỗ trợ",
            "Trò chuyện",
            "Liên hệ",
          ]
        : isOnlyShowFlutterChat
            ? [
                "Trò chuyện",
                "Liên hệ",
              ]
            : isOnlyShowGenieChat
                ? [
                    "Phòng hỗ trợ",
                  ]
                : [];
    tabRoutes = isShowAll
        ? [
            ChatSupportRequestRoute(),
            const ChatThreadRoute(),
            const ChatContactsRoute(),
          ]
        : isOnlyShowFlutterChat
            ? [
                const ChatThreadRoute(),
                const ChatContactsRoute(),
              ]
            : isOnlyShowGenieChat
                ? [
                    ChatSupportRequestRoute(),
                  ]
                : [];
  }
}
