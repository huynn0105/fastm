import 'package:ezanimation/ezanimation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/separated_widget.dart';
import 'package:flutter_module/features/chat/common/data_source/reaction_data_source.dart';
import 'package:lottie/lottie.dart';

class ReactionPickerComponent extends StatefulWidget {
  const ReactionPickerComponent({
    super.key,
    required this.value,
    required this.onSelected,
  });

  final String? value;
  final Function(String?) onSelected;

  @override
  State<ReactionPickerComponent> createState() => _ReactionPickerComponentState();
}

class _ReactionPickerComponentState extends State<ReactionPickerComponent> {
  late final List<String> data;
  late final List<EzAnimation> animations;

  @override
  void initState() {
    super.initState();
    _onInit();
  }

  @override
  void dispose() {
    _onDispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return TweenAnimationBuilder<double>(
      tween: Tween(begin: 0, end: 1),
      curve: Curves.easeInOutBack,
      duration: const Duration(milliseconds: 500),
      builder: (context, value, child) => Transform.scale(
        scale: value,
        child: child,
      ),
      child: Container(
        height: 50,
        width: 300,
        padding: const EdgeInsets.symmetric(horizontal: 5),
        decoration: BoxDecoration(
          color: UIColors.white,
          borderRadius: BorderRadius.circular(8),
        ),
        child: SeparatedRow(
          separatorBuilder: (_, __) => const SizedBox(width: 5),
          children: List.generate(
            data.length,
            (index) {
              final item = data[index];
              final selected = item == widget.value;
              return Expanded(
                child: SplashButton(
                  onTap: () {
                    widget.onSelected(selected ? null : item);
                  },
                  child: AnimatedBuilder(
                    animation: animations[index],
                    builder: (context, child) {
                      return Transform.scale(
                        scale: animations[index].value,
                        child: child,
                      );
                    },
                    child: Container(
                      width: 40,
                      height: 40,
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(8),
                        color: selected ? UIColors.lightGray : null,
                      ),
                      child: Lottie.asset(
                        ReactionDataSource.getLottie(data[index]),
                        width: 30,
                        height: 30,
                      ),
                    ),
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }

  _onInit() async {
    data = ReactionDataSource.data;
    animations = data.map(
      (e) {
        return EzAnimation.tween(
          Tween(begin: 0.0, end: 1.0),
          const Duration(milliseconds: 350),
          curve: Curves.easeInOutBack,
        );
      },
    ).toList();
    await Future.delayed(const Duration(milliseconds: 50));
    for (final a in animations) {
      a.start();
      await Future.delayed(const Duration(milliseconds: 50));
    }
  }

  _onDispose() {
    for (final a in animations) {
      a.dispose();
    }
  }
}
