import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/enum/chat/quoted_message_type.dart';
import 'package:flutter_module/features/chat/cubit/thread_messages/thread_messages_cubit.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/message/quoted_message_widget.dart';

class QuotedMessageComponent extends StatefulWidget {
  const QuotedMessageComponent({super.key});

  @override
  State<QuotedMessageComponent> createState() => _QuotedMessageComponentState();
}

class _QuotedMessageComponentState extends State<QuotedMessageComponent> with SingleTickerProviderStateMixin {
  late final AnimationController _animationController;
  late final Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );
    _animation = CurvedAnimation(
      parent: _animationController,
      curve: Curves.linear,
    );
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<ThreadMessagesCubit, ThreadMessagesState>(
      listenWhen: (pre, cur) {
        return pre.quotedMessage != cur.quotedMessage;
      },
      listener: (context, state) {
        if (state.quotedMessage != null) {
          _animationController.forward();
        } else {
          _animationController.reverse();
        }
      },
      buildWhen: (pre, cur) {
        return cur.quotedMessage != null;
      },
      builder: (context, state) {
        return SizeTransition(
          sizeFactor: _animation,
          axisAlignment: -1,
          child: QuotedMessageWidget(
            data: state.quotedMessage,
            type: state.quotedType,
            padding: const EdgeInsets.fromLTRB(16, 8, 0, 8),
            onDeleted: () {
              final threadCubit = context.read<ThreadMessagesCubit>();
              threadCubit.removeQuotedMessage();
            },
          ),
        );
      },
    );
  }
}
