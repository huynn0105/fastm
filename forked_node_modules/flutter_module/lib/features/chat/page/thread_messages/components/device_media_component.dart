import 'dart:io';

import 'package:app_settings/app_settings.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/chat/media_type.dart';
import 'package:flutter_module/common/extension/duration_extension.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/image_picker_utils.dart';
import 'package:flutter_module/common/utils/image_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/empty_widget.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/features/chat/common/typedef.dart';
import 'package:flutter_module/features/chat/cubit/device_media/device_media_cubit.dart';
import 'package:flutter_module/models/chat/file/media_model.dart';
import 'package:image_size_getter/image_size_getter.dart';
import 'package:path_provider/path_provider.dart';
import 'package:photo_manager/photo_manager.dart';
import 'package:path/path.dart' as p;

class DeviceMediaComponent extends StatelessWidget {
  const DeviceMediaComponent({
    super.key,
    required this.onSelected,
    this.height = AppConstants.keyboardHeight,
  });

  final OnMessageMediaSent onSelected;
  final double height;

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<DeviceMediaCubit, DeviceMediaState>(
          listenWhen: (pre, cur) {
            return pre.convertStatus != cur.convertStatus;
          },
          listener: (context, state) {
            if (state.convertStatus.isSuccess) {
              onSelected(context, state.files);
            } else if (state.convertStatus.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: state.convertErrorMessage ?? '',
              );
            }
          },
        ),
      ],
      child: BlocBuilder<DeviceMediaCubit, DeviceMediaState>(
        builder: (context, state) {
          final cubit = context.read<DeviceMediaCubit>();
          if (state.status.showLoading) {
            return SizedBox(
              height: height,
              child: const LoadingWidget.dark(),
            );
          }
          if (!state.hasPermission) {
            return Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Column(
                children: [
                  const AppImage.asset(
                    asset: 'ic_mtrade_mascot_happy_waiting',
                    width: 100,
                    height: 100,
                  ),
                  const SizedBox(
                    height: 12,
                  ),
                  Text(
                    'Quyền truy cập',
                    style: UITextStyle.semiBold.copyWith(
                      fontSize: 18,
                      color: UIColors.darkBlue,
                    ),
                  ),
                  const SizedBox(
                    height: 6,
                  ),
                  Text(
                    'Vui lòng cấp quyền truy cập thư viện ảnh để gửi cho bạn bè',
                    style: UITextStyle.regular.copyWith(
                      fontSize: 14,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(
                    height: 12,
                  ),
                  PrimaryButton(
                    onPressed: () async {
                      final result = await cubit.requestPermission();
                      if (result) {
                        cubit.fetchData();
                      } else {
                        AppSettings.openAppSettings();
                      }
                    },
                    radius: 8,
                    width: double.infinity,
                    title: 'Đồng ý',
                  ),
                ],
              ),
            );
          }
          if (state.assets.isEmpty) {
            return SizedBox(
              height: height,
              child: const EmptyWidget(
                message: 'Không có dữ liệu',
              ),
            );
          }
          return Container(
            height: height,
            padding: const EdgeInsets.only(top: 3),
            decoration: const BoxDecoration(
              color: UIColors.background,
            ),
            child: Stack(
              children: [
                Positioned.fill(
                  child: Column(
                    children: [
                      Visibility(
                        visible: state.hasIOSLimitedPermission,
                        child: Container(
                          padding: const EdgeInsets.all(8),
                          constraints: const BoxConstraints(
                            minHeight: 50,
                          ),
                          child: Row(
                            children: [
                              Expanded(
                                child: Text(
                                  'Bạn đang hạn chế quyền truy cập thư viện ảnh của MFast',
                                  style: UITextStyle.regular.copyWith(
                                    color: UIColors.grayText,
                                    height: 1.25,
                                  ),
                                ),
                              ),
                              const SizedBox(
                                width: 8,
                              ),
                              SplashButton(
                                onTap: () => _onShowIOSLimitedPermission(context),
                                child: Container(
                                  height: 40,
                                  width: 90,
                                  alignment: Alignment.center,
                                  decoration: BoxDecoration(
                                    color: UIColors.primaryColor,
                                    borderRadius: BorderRadius.circular(20),
                                  ),
                                  child: Text(
                                    'Quản lý',
                                    style: UITextStyle.regular.copyWith(
                                      color: UIColors.white,
                                      height: 1,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      Expanded(
                        child: LoadMoreWidget(
                          onLoadMore: () async => cubit.loadMoreData(),
                          child: GridView.custom(
                            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                              crossAxisCount: 3,
                              mainAxisSpacing: 1,
                              crossAxisSpacing: 1,
                            ),
                            childrenDelegate: SliverChildBuilderDelegate(
                              (BuildContext context, int index) {
                                if (index == 0) {
                                  return GestureDetector(
                                    key: ValueKey<int>(index),
                                    behavior: HitTestBehavior.opaque,
                                    onTap: () => _onCameraPicker(context),
                                    child: Container(
                                      decoration: const BoxDecoration(
                                        color: UIColors.white,
                                      ),
                                      child: Column(
                                        mainAxisAlignment: MainAxisAlignment.center,
                                        children: [
                                          const AppImage.asset(
                                            asset: "ic_chat_camera_outline",
                                            width: 30,
                                            height: 30,
                                            color: UIColors.grayText,
                                          ),
                                          const SizedBox(
                                            height: 4,
                                          ),
                                          Text(
                                            "Chụp ảnh",
                                            style: UITextStyle.regular.copyWith(
                                              color: UIColors.grayText,
                                              height: 1,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  );
                                }
                                final renderIndex = index - 1;
                                final item = state.assets[renderIndex];
                                final selectedIndex = state.selectedAssets.indexWhere((e) => e.id == item.id);
                                return ImageItemWidget(
                                  key: ValueKey<int>(renderIndex),
                                  entity: item,
                                  selectedIndex: selectedIndex,
                                  option: const ThumbnailOption(
                                    size: ThumbnailSize.square(200),
                                  ),
                                  onTap: () {
                                    cubit.select(
                                      renderIndex,
                                      onFailure: (message) {
                                        DialogProvider.instance.showMTradeErrorDialog(
                                          context: context,
                                          message: message,
                                        );
                                      },
                                    );
                                  },
                                );
                              },
                              childCount: state.assets.length + 1,
                              findChildIndexCallback: (Key key) {
                                if (key is ValueKey<int>) {
                                  return key.value;
                                }
                                return null;
                              },
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  _onCameraPicker(BuildContext context) async {
    final xFile = await ImagePickerUtils.pickXFileImage(context: context);
    if (xFile != null) {
      final decodedImage = await decodeImageFromList(await xFile.readAsBytes());
      final file = File(xFile.path);
      Size size = Size(decodedImage.width, decodedImage.height);
      MediaModel? thumbMedia;
      final now = DateTime.now().microsecondsSinceEpoch;
      final compressedFile = await ImageUtil.compressImage(file: file, width: 720, height: 720);
      final bytes = await compressedFile?.readAsBytes();
      if (bytes != null) {
        final thumbID = 'thumbnail_0_camera_$now';
        final thumbDir = await getTemporaryDirectory();
        final thumbPath = p.join(thumbDir.path, '$thumbID.png');
        final thumbFile = await File(thumbPath).writeAsBytes(bytes);
        thumbMedia = MediaModel(
          id: thumbID,
          path: thumbFile.path,
          type: MediaType.image.name,
        );
      }
      final media = MediaModel(
        id: 'camera_$now',
        path: file.path,
        type: MediaType.image.name,
        width: size.width,
        height: size.height,
        thumbnail: thumbMedia,
      );
      if (context.mounted) {
        onSelected(context, [media]);
      }
    }
  }

  _onShowIOSLimitedPermission(BuildContext context) {
    final cubit = context.read<DeviceMediaCubit>();
    showCupertinoModalPopup(
      context: context,
      builder: (context) {
        return CupertinoActionSheet(
          actions: <CupertinoActionSheetAction>[
            CupertinoActionSheetAction(
              onPressed: () {
                Navigator.pop(context);
                Future.delayed(const Duration(milliseconds: 200), () {
                  cubit.presentLimited();
                });
              },
              child: Text(
                'Chọn thêm ảnh',
                style: UITextStyle.regular.copyWith(
                  color: UIColors.primaryColor,
                  fontSize: 18,
                ),
              ),
            ),
            CupertinoActionSheetAction(
              onPressed: () {
                Navigator.pop(context);
                Future.delayed(const Duration(milliseconds: 200), () {
                  AppSettings.openAppSettings();
                });
              },
              child: Text(
                'Thay đổi quyền truy cập',
                style: UITextStyle.regular.copyWith(
                  color: UIColors.primaryColor,
                  fontSize: 18,
                ),
              ),
            ),
          ],
          cancelButton: CupertinoActionSheetAction(
            isDefaultAction: true,
            isDestructiveAction: true,
            onPressed: () {
              Navigator.pop(context);
            },
            child: Text(
              'Huỷ',
              style: UITextStyle.regular.copyWith(
                color: UIColors.red,
                fontSize: 18,
              ),
            ),
          ),
        );
      },
    );
  }
}

class ImageItemWidget extends StatelessWidget {
  const ImageItemWidget({
    Key? key,
    required this.entity,
    required this.option,
    this.onTap,
    this.selectedIndex = -1,
  }) : super(key: key);

  final AssetEntity entity;
  final ThumbnailOption option;
  final GestureTapCallback? onTap;
  final int selectedIndex;

  @override
  Widget build(BuildContext context) {
    final selected = selectedIndex >= 0;
    return SplashButton(
      onTap: onTap,
      child: Stack(
        children: [
          Positioned.fill(
            child: AssetEntityImage(
              entity,
              isOriginal: false,
              thumbnailSize: option.size,
              thumbnailFormat: option.format,
              fit: BoxFit.cover,
            ),
          ),
          if (selected)
            Positioned.fill(
              child: Container(
                decoration: BoxDecoration(
                  color: UIColors.blurBackground.withOpacity(0.5),
                ),
              ),
            ),
          Positioned(
            top: 4,
            right: 4,
            child: AnimatedCrossFade(
              duration: const Duration(milliseconds: 300),
              crossFadeState: selected ? CrossFadeState.showFirst : CrossFadeState.showSecond,
              firstChild: Container(
                width: 24,
                height: 24,
                alignment: Alignment.center,
                decoration: const BoxDecoration(
                  shape: BoxShape.circle,
                  color: UIColors.primaryColor,
                ),
                child: Text(
                  "${selectedIndex + 1}",
                  style: UITextStyle.bold.copyWith(
                    fontSize: 12,
                    color: UIColors.white,
                    height: 0,
                  ),
                ),
              ),
              secondChild: Container(
                width: 24,
                height: 24,
                alignment: Alignment.center,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: UIColors.white.withOpacity(0.5),
                  border: Border.all(
                    width: 1,
                    color: UIColors.gray,
                  ),
                ),
              ),
            ),
          ),
          if (entity.type == AssetType.video)
            Positioned(
              bottom: 4,
              right: 4,
              child: Container(
                height: 20,
                alignment: Alignment.center,
                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(10),
                  color: UIColors.blurBackground.withOpacity(0.7),
                ),
                child: Text(
                  entity.videoDuration.getMMss(),
                  style: UITextStyle.semiBold.copyWith(
                    fontSize: 10,
                    color: UIColors.white,
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }
}
