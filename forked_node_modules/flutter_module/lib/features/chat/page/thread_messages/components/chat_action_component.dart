import 'package:flutter/cupertino.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/enum/chat/quoted_message_type.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/html_widget.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/chat/common/typedef.dart';
import 'package:flutter_module/features/chat/cubit/device_audio_recorder/device_audio_recorder_cubit.dart';
import 'package:flutter_module/features/chat/cubit/device_media/device_media_cubit.dart';
import 'package:flutter_module/features/chat/cubit/thread_action/thread_action_cubit.dart';
import 'package:flutter_module/features/chat/cubit/thread_messages/thread_messages_cubit.dart';
import 'package:flutter_module/features/chat/page/thread_messages/components/device_audio_recorder_component.dart';
import 'package:flutter_module/features/chat/page/thread_messages/components/device_icon_component.dart';
import 'package:flutter_module/features/chat/page/thread_messages/components/device_media_component.dart';
import 'package:flutter_module/common/enum/chat/thread_action_type.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/features/chat/page/thread_messages/components/chat_input_component.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/asset_button.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/markup_input/models/markup_config_model.dart';
import 'package:flutter_module/features/shipper/page/detail_bill_lading/components/verify_location_component.dart';
import 'package:flutter_module/models/chat/location_model.dart';

class ChatActionComponent extends StatelessWidget {
  const ChatActionComponent({
    super.key,
    required this.onTextActionSent,
    required this.onMentionActionSent,
    required this.onLocationActionSent,
    required this.onMediaActionSent,
    required this.onStickerActionSent,
    required this.onAudioActionSent,
    required this.onEditingActionSent,
    required this.markupConfigs,
    this.disabled = false,
    this.disabledMessage,
  });

  final List<MarkupConfigModel> markupConfigs;

  final bool disabled;
  final String? disabledMessage;
  final OnMessageTextSent onTextActionSent;
  final OnMessageMentionSent onMentionActionSent;
  final OnMessageLocationSent onLocationActionSent;
  final OnMessageMediaSent onMediaActionSent;
  final OnMessageStickerSent onStickerActionSent;
  final OnMessageAudioSent onAudioActionSent;
  final OnMessageTextSent onEditingActionSent;

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<ThreadActionCubit, ThreadActionState>(
          listenWhen: (pre, cur) => cur.action.isNone,
          listener: (context, state) {
            _onResetByAction(context);
          },
        ),
      ],
      child: BlocBuilder<ThreadActionCubit, ThreadActionState>(
        builder: (context, state) {
          if (disabled) {
            return Container(
              width: double.infinity,
              alignment: Alignment.center,
              margin: const EdgeInsets.only(top: 4),
              padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 12),
              constraints: const BoxConstraints(
                minHeight: 45,
              ),
              decoration: const BoxDecoration(
                color: UIColors.lightGray,
              ),
              child: SafeArea(
                child: HtmlWidget(
                  data: disabledMessage ?? '',
                  fontSize: 13,
                  lineHeight: 1,
                  shrinkWrap: true,
                  alignment: Alignment.center,
                  textAlign: TextAlign.center,
                  textColor: UIColors.grayText,
                ),
              ),
            );
          }

          ///
          final cubit = context.read<ThreadActionCubit>();
          return Container(
            width: double.infinity,
            constraints: const BoxConstraints(
              minHeight: 45,
            ),
            decoration: const BoxDecoration(
              color: UIColors.white,
            ),
            child: Column(
              children: [
                Stack(
                  children: [
                    ChatInputComponent(
                      inputController: cubit.inputController,
                      inputFocusNode: cubit.inputFocusNode,
                      markupConfigs: markupConfigs,
                      isDisabledTap: state.action.isInput == true,
                      onTap: () => _onInput(context),
                      leading: [
                        AssetButton(
                          asset: "ic_chat_emoji_outline",
                          padding: const EdgeInsets.symmetric(horizontal: 10),
                          assetColor: state.action.isIcon == true ? UIColors.primaryColor : null,
                          onTap: () => _onEmojiPicker(context),
                        ),
                      ],
                      trailing: [
                        ValueListenableBuilder(
                          valueListenable: cubit.inputController,
                          builder: (context, value, child) {
                            String text = value.text;
                            return AnimatedCrossFade(
                              duration: AppConstants.duration,
                              crossFadeState: text.isEmpty ? CrossFadeState.showFirst : CrossFadeState.showSecond,
                              firstChild: Visibility(
                                visible: text.isEmpty,
                                child: Row(
                                  children: [
                                    AssetButton(
                                      asset: "ic_chat_location_outline",
                                      padding: const EdgeInsets.symmetric(horizontal: 10),
                                      onTap: () => _onLocationPicker(context),
                                    ),
                                    AssetButton(
                                      asset: "ic_chat_recorder_outline",
                                      assetColor: state.action.isAudio == true ? UIColors.primaryColor : null,
                                      padding: const EdgeInsets.symmetric(horizontal: 10),
                                      onTap: () => _onAudioRecorder(context),
                                    ),
                                    AssetButton(
                                      asset: "ic_chat_gallery_outline",
                                      assetColor: state.action.isMedia == true ? UIColors.primaryColor : null,
                                      padding: const EdgeInsets.symmetric(horizontal: 10),
                                      onTap: () => _onGalleryPicker(context),
                                    ),
                                  ],
                                ),
                              ),
                              secondChild: BlocBuilder<ThreadMessagesCubit, ThreadMessagesState>(
                                buildWhen: (pre, cur) {
                                  return true;
                                },
                                builder: (context, threadState) {
                                  final isEdit = threadState.quotedType?.isEdit == true;
                                  return AssetButton(
                                    asset: "ic_chat_send",
                                    padding: const EdgeInsets.symmetric(horizontal: 16),
                                    assetColor: TextUtils.isEmpty(text.trim()) ? UIColors.gray : null,
                                    onTap: TextUtils.isEmpty(text.trim())
                                        ? () {}
                                        : () {
                                            if (isEdit) {
                                              onEditingActionSent(
                                                context,
                                                cubit.inputController.markupText,
                                              );
                                              return;
                                            }
                                            if (cubit.inputController.hasMarkup) {
                                              onMentionActionSent(
                                                context,
                                                cubit.inputController.text,
                                                cubit.inputController.markupText,
                                              );
                                              return;
                                            }
                                            onTextActionSent(
                                              context,
                                              cubit.inputController.text,
                                            );
                                          },
                                  );
                                },
                              ),
                            );
                          },
                        ),
                      ],
                    ),
                    BlocBuilder<DeviceMediaCubit, DeviceMediaState>(
                      buildWhen: (pre, cur) {
                        return pre.selectedAssets.length != cur.selectedAssets.length;
                      },
                      builder: (context, deviceMediaState) {
                        final deviceMediaCubit = context.read<DeviceMediaCubit>();
                        return Visibility(
                          visible: deviceMediaState.selectedAssets.isNotEmpty,
                          child: Positioned.fill(
                            child: Container(
                              decoration: const BoxDecoration(
                                color: UIColors.white,
                              ),
                              child: Row(
                                children: [
                                  const SizedBox(
                                    width: 10,
                                  ),
                                  SplashButton(
                                    onTap: () {
                                      deviceMediaCubit.resetSelection();
                                      _onInput(context);
                                    },
                                    child: const Padding(
                                      padding: EdgeInsets.all(4),
                                      child: AppImage.asset(
                                        asset: 'ic_arrow_left',
                                        width: 24,
                                        height: 24,
                                      ),
                                    ),
                                  ),
                                  Expanded(
                                    child: Center(
                                      child: Text(
                                        'Đã chọn: ${deviceMediaCubit.getSelectedTitle()}',
                                        style: UITextStyle.regular.copyWith(
                                          fontSize: 13,
                                          color: UIColors.grayText,
                                        ),
                                      ),
                                    ),
                                  ),
                                  SplashButton(
                                    onTap: deviceMediaCubit.convertAssetToFile,
                                    child: const Padding(
                                      padding: EdgeInsets.all(4),
                                      child: AppImage.asset(
                                        asset: 'ic_chat_send',
                                        width: 24,
                                        height: 24,
                                      ),
                                    ),
                                  ),
                                  const SizedBox(
                                    width: 10,
                                  ),
                                ],
                              ),
                            ),
                          ),
                        );
                      },
                    ),
                  ],
                ),
                Container(
                  alignment: Alignment.topCenter,
                  height: state.action.height,
                  child: GestureDetector(
                    onTap: () {},
                    behavior: HitTestBehavior.opaque,
                    child: ListView(
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      children: [
                        Visibility(
                          visible: state.action.isMedia == true,
                          child: DeviceMediaComponent(
                            height: state.action.height,
                            onSelected: onMediaActionSent,
                          ),
                        ),
                        Visibility(
                          visible: state.action.isIcon == true,
                          child: DeviceIconComponent(
                            height: state.action.height,
                            onInputSelected: () => _onInput(context),
                            onEmojiSelected: _onEmojiSelected,
                            onStickerSelected: _onStickerSelected,
                            onEmojiDeleted: (value) => _onEmojiDeleted(context, value),
                          ),
                        ),
                        Visibility(
                          visible: state.action.isAudio == true,
                          child: DeviceAudioRecorderComponent(
                            height: state.action.height,
                            onSent: onAudioActionSent,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                SizedBox(
                  height: state.action.height > 0 ? 0 : AppSize.instance.safeBottom,
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  _onInput(BuildContext context) {
    final cubit = context.read<ThreadActionCubit>();
    // cubit.unfocusInput(delay: false);
    cubit.updateAction(ThreadActionType.input);
    // cubit.focusInput(delay: true);
  }

  _onAudioRecorder(BuildContext context) async {
    final cubit = context.read<ThreadActionCubit>();
    cubit.updateAction(ThreadActionType.audio);
    cubit.unfocusInput(delay: true);
  }

  _onGalleryPicker(BuildContext context) async {
    final cubit = context.read<ThreadActionCubit>();
    cubit.updateAction(ThreadActionType.media);
    cubit.unfocusInput(delay: true);
    final mediaCubit = context.read<DeviceMediaCubit>();
    mediaCubit.resetSelection();
    if (cubit.state.action.isMedia) {
      if (mediaCubit.state.status.isInitial) {
        mediaCubit.fetchData();
      } else {
        mediaCubit.refreshData();
      }
    }
  }

  _onLocationPicker(BuildContext context) async {
    final cubit = context.read<ThreadActionCubit>();
    cubit.unfocusInput(delay: false);
    BottomSheetProvider.instance.show(
      context,
      title: 'Vị trí hiện tại của bạn',
      isDismissible: false,
      closeOnRight: false,
      child: VerifyLocationComponent(
        onConfirm: () {},
        errorPermissionTitle: 'Truy cập vị trí',
        onLocationConfirm: (longitude, latitude) {
          onLocationActionSent(
            context,
            LocationModel(
              longitude: longitude,
              latitude: latitude,
            ),
          );
        },
      ),
    );
  }

  _onEmojiPicker(BuildContext context) {
    final cubit = context.read<ThreadActionCubit>();
    cubit.updateAction(ThreadActionType.icon);
    cubit.unfocusInput(delay: true);
  }

  _onEmojiDeleted(BuildContext context, String? value) {
    final cubit = context.read<ThreadActionCubit>();
    final text = cubit.inputController.text;
    if (value != null) {
      final matches = value.allMatches(text).toList();
      if (matches.isNotEmpty) {
        final match = matches.getLast()!;
        cubit.inputController.text = text.replaceRange(match.start, match.end, '');
      }
      return;
    }
    final length = text.length - 1;
    if (length >= 0) {
      cubit.inputController.text = text.substring(0, length);
    }
  }

  _onEmojiSelected(BuildContext context, String value) {
    final cubit = context.read<ThreadActionCubit>();
    String text = cubit.inputController.text;
    cubit.inputController.text = '$text$value';
  }

  _onStickerSelected(BuildContext context, String sticker) {
    onStickerActionSent(context, sticker);
  }

  _onResetByAction(BuildContext context) {
    context.read<DeviceMediaCubit>().resetSelection();
    context.read<DeviceAudioRecorderCubit>().resetWaveRecorder();
  }
}
