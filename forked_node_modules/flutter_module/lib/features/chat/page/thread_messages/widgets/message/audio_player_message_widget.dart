import 'dart:async';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_audio_waveforms/flutter_audio_waveforms.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/extension/duration_extension.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/chat/cubit/device_audio_player/device_audio_player.dart';
import 'package:flutter_module/features/chat/cubit/device_audio_player/device_audio_player_cubit.dart';
import 'package:flutter_module/features/chat/page/thread_messages/inheritance/message_widget_provider.dart';
import 'package:flutter_module/models/chat/file/media_model.dart';
import 'package:flutter_module/models/chat/message/message_wrapper_model.dart';
import 'package:just_audio/just_audio.dart';

class AudioPlayerMessageWidget extends StatefulWidget {
  const AudioPlayerMessageWidget({super.key, required this.data});

  final MessageWrapperModel data;

  @override
  State<AudioPlayerMessageWidget> createState() => _AudioPlayerMessageWidgetState();
}

class _AudioPlayerMessageWidgetState extends State<AudioPlayerMessageWidget> {
  bool _initialized = false;

  final AudioPlayer audioPlayer = AudioPlayer();
  StreamSubscription? subPlayerState;
  StreamSubscription? subCurrentDurationState;
  StreamSubscription? subBufferDurationState;
  StreamSubscription? subTotalDurationState;

  @override
  void initState() {
    _onInit();
    super.initState();
  }

  @override
  void dispose() {
    _onDispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final borderRadius = MessageWidgetProvider.of(context).borderRadius;
    return Container(
      height: 55,
      decoration: BoxDecoration(
        color: UIColors.white,
        borderRadius: borderRadius,
        border: Border.all(color: UIColors.gray),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const SizedBox(
            width: 10,
          ),
          BlocBuilder<DeviceAudioPlayerCubit, DeviceAudioPlayerState>(
            buildWhen: (pre, cur) {
              return pre.data?.button != cur.data?.button || pre.status != cur.status;
            },
            builder: (context, state) {
              final button = state.data?.button;
              if (button == AudioPlayerButtonStatus.loading || state.status.isLoading) {
                return const SizedBox(
                  width: 30,
                  height: 30,
                  child: CupertinoActivityIndicator(),
                );
              }
              switch (button) {
                case AudioPlayerButtonStatus.loading:
                  return const SizedBox(
                    width: 30,
                    height: 30,
                    child: CupertinoActivityIndicator(),
                  );
                case AudioPlayerButtonStatus.playing:
                  return SplashButton(
                    onTap: () => _onPause(context),
                    child: const AppImage.asset(
                      asset: 'ic_chat_pause_media',
                      width: 30,
                      height: 30,
                    ),
                  );
                case AudioPlayerButtonStatus.paused:
                  return SplashButton(
                    onTap: () => _onPlay(context),
                    child: const AppImage.asset(
                      asset: 'ic_chat_play_media',
                      width: 30,
                      height: 30,
                    ),
                  );
                default:
                  return const SizedBox(
                    width: 30,
                    height: 30,
                  );
              }
            },
          ),
          const SizedBox(
            width: 5,
          ),
          BlocBuilder<DeviceAudioPlayerCubit, DeviceAudioPlayerState>(
            buildWhen: (pre, cur) {
              final cubit = context.read<DeviceAudioPlayerCubit>();
              final duration = pre.data?.duration != cur.data?.duration;
              final samples = !cubit.compare.equals(pre.data?.samples, cur.data?.samples);
              return (duration || samples);
            },
            builder: (context, state) {
              final duration = state.data?.duration;
              final samples = state.data?.samples ?? [];
              return Container(
                width: 110,
                alignment: Alignment.centerLeft,
                padding: const EdgeInsets.symmetric(horizontal: 5),
                child: Visibility(
                  visible: samples.isNotEmpty,
                  child: RectangleWaveform(
                    samples: samples,
                    maxDuration: duration?.total != Duration.zero ? duration!.total : const Duration(milliseconds: 1),
                    elapsedDuration: duration?.current,
                    width: 100,
                    height: 50,
                    borderWidth: 0,
                    isCentered: true,
                    isRoundedRectangle: true,
                    activeColor: UIColors.darkGray,
                    inactiveColor: UIColors.gray.withOpacity(0.3),
                  ),
                ),
              );
            },
          ),
          BlocBuilder<DeviceAudioPlayerCubit, DeviceAudioPlayerState>(
            buildWhen: (pre, cur) {
              return pre.data?.duration != cur.data?.duration;
            },
            builder: (context, state) {
              Duration currentDuration = state.data?.duration.current ?? Duration.zero;
              Duration duration = currentDuration != Duration.zero ? (totalDuration - currentDuration) : totalDuration;
              return Container(
                width: 50,
                alignment: Alignment.center,
                child: Text(
                  duration.getMMss(),
                  style: UITextStyle.regular.copyWith(
                    fontSize: 14,
                  ),
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  MediaModel? get media => widget.data.message?.medias?.getFirst();

  String get id => media?.id ?? '';

  String get url => media?.url ?? '';

  String get path => media?.path ?? '';

  String get waveform => media?.getWaveform() ?? '';

  Duration get totalDuration => Duration(milliseconds: media?.duration ?? 0);

  _onInit() async {
    context.read<DeviceAudioPlayerCubit>().initAudioPlayer(id, waveform);
  }

  _onDispose() {
    subPlayerState?.cancel();
    subCurrentDurationState?.cancel();
    subBufferDurationState?.cancel();
    subTotalDurationState?.cancel();
    audioPlayer.dispose();
  }

  _onPlay(BuildContext context) async {
    final cubit = context.read<DeviceAudioPlayerCubit>();
    if (!_initialized) {
      cubit.updateStatus(BlocStatus.loading);

      _initialized = true;

      ///
      if (url.isNotEmpty) {
        await audioPlayer.setUrl(url);
      } else if (path.isNotEmpty) {
        await audioPlayer.setFilePath(path);
      }

      ///
      subPlayerState = audioPlayer.playerStateStream.listen((playerState) {
        final isPlaying = playerState.playing;
        final processingState = playerState.processingState;
        cubit.updateProcessingState(id, processingState);
        if (processingState == ProcessingState.ready) {
          cubit.updateStatus(BlocStatus.success);
        }
        if (processingState == ProcessingState.loading || processingState == ProcessingState.buffering) {
          cubit.updateButtonStatus(id, AudioPlayerButtonStatus.loading);
        } else if (!isPlaying) {
          cubit.updateButtonStatus(id, AudioPlayerButtonStatus.paused);
        } else if (processingState != ProcessingState.completed) {
          cubit.updateButtonStatus(id, AudioPlayerButtonStatus.playing);
        } else {
          audioPlayer.pause();
        }
      });
      subCurrentDurationState = audioPlayer.positionStream.listen((duration) {
        cubit.updateCurrentDuration(id, duration);
      });
      subBufferDurationState = audioPlayer.bufferedPositionStream.listen((duration) {
        cubit.updateBufferDuration(id, duration);
      });
      subTotalDurationState = audioPlayer.durationStream.listen((duration) {
        cubit.updateTotalDuration(id, duration);
      });
    }

    final state = cubit.state;
    if (state.data?.processingState == ProcessingState.completed) {
      await audioPlayer.seek(Duration.zero);
    }
    audioPlayer.play();
  }

  _onPause(BuildContext context) {
    audioPlayer.pause();
  }
}
