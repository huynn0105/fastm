import 'package:flutter/material.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/chat/quoted_message_type.dart';
import 'package:flutter_module/common/enum/chat/thread_message_type.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/message/preview_message_widget.dart';
import 'package:flutter_module/models/chat/message/message_model.dart';

class QuotedMessageWidget extends StatelessWidget {
  const QuotedMessageWidget({
    super.key,
    required this.data,
    this.padding = EdgeInsets.zero,
    this.borderRadius = BorderRadius.zero,
    this.isMe = true,
    this.parentMessage,
    this.onDeleted,
    this.onTap,
    this.type,
  });

  final MessageModel? data;
  final MessageModel? parentMessage;
  final EdgeInsets padding;
  final BorderRadius borderRadius;
  final bool isMe;
  final Function()? onDeleted;
  final Function()? onTap;
  final QuotedMessageType? type;

  @override
  Widget build(BuildContext context) {
    final bool isReplied = type?.isReply == true;
    final bool isEdited = type?.isEdit == true;
    return AppSplashButton(
      onTap: onTap,
      child: Container(
        padding: padding,
        decoration: BoxDecoration(
          color: UIColors.lightGray,
          borderRadius: !isReplied && !isEdited
              ? borderRadius
              : const BorderRadius.only(
                  topLeft: Radius.circular(8),
                  topRight: Radius.circular(8),
                ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Flexible(
              fit: isReplied ? FlexFit.tight : FlexFit.loose,
              child: QuotedMessageItem(
                data: data,
                isReplied: isReplied,
                isEdited: isEdited,
              ),
            ),
            if (isReplied || isEdited)
              AppSplashButton(
                onTap: onDeleted,
                borderRadius: BorderRadius.circular(20),
                child: Container(
                  width: 40,
                  height: 40,
                  alignment: Alignment.center,
                  child: const AppImage.asset(
                    asset: 'ic_chat_delete_x',
                    width: 24,
                    height: 24,
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
}

class QuotedMessageItem extends StatelessWidget {
  const QuotedMessageItem({
    super.key,
    required this.data,
    required this.isReplied,
    required this.isEdited,
  });

  final MessageModel? data;
  final bool isReplied;
  final bool isEdited;

  @override
  Widget build(BuildContext context) {
    final isQuotedTextType = data?.getMessageType().isText == true;
    final isQuoted = isReplied || isEdited;
    double size = isQuotedTextType && !isQuoted ? 20 : 35;
    return SizedBox(
      height: size,
      child: IntrinsicHeight(
        child: Row(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(1),
                border: Border.all(
                  width: 1,
                  color: UIColors.primaryColor,
                ),
              ),
            ),
            const SizedBox(
              width: 10,
            ),
            Flexible(
              fit: isQuoted ? FlexFit.tight : FlexFit.loose,
              child: PreviewMessageWidget(
                data: data,
                size: size,
                isEdited: isEdited,
                header: _header(),
              ),
            ),
            const SizedBox(
              width: 10,
            ),
          ],
        ),
      ),
    );
  }

  Widget? _header() {
    if (isReplied) {
      return RichText(
        text: TextSpan(
          children: [
            TextSpan(
              text: 'Đang trả lời ',
              style: UITextStyle.regular.copyWith(
                fontSize: 13,
                color: UIColors.grayText,
                height: 1,
              ),
            ),
            TextSpan(
              text: data?.author?.fullName ?? '',
              style: UITextStyle.semiBold.copyWith(
                fontSize: 13,
                color: UIColors.defaultText,
                height: 1,
              ),
            ),
          ],
        ),
      );
    }
    if (isEdited) {
      return RichText(
        text: TextSpan(
          children: [
            TextSpan(
              text: 'Đang chỉnh sửa ',
              style: UITextStyle.semiBold.copyWith(
                fontSize: 13,
                color: UIColors.defaultText,
                height: 1,
              ),
            ),
          ],
        ),
      );
    }

    return null;
  }
}
