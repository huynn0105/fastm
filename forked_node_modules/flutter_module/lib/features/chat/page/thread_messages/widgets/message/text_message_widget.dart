import 'package:any_link_preview/any_link_preview.dart';
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_linkify/flutter_linkify.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/separated_widget.dart';
import 'package:flutter_module/features/chat/page/thread_messages/inheritance/message_widget_provider.dart';
import 'package:flutter_module/models/chat/message/message_wrapper_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';

class TextMessageWidget extends StatelessWidget {
  const TextMessageWidget({
    super.key,
    required this.data,
    this.showPreviewData = true,
  });

  final MessageWrapperModel data;
  final bool showPreviewData;

  @override
  Widget build(BuildContext context) {
    final message = data.message;
    final isMe = data.message?.isMe() == true;
    final isRecalled = message?.isRecalled == true;
    final borderRadius = MessageWidgetProvider.of(context).borderRadius;

    String text = '';
    Color? textColor;
    Color? backgroundColor;
    FontStyle? fontStyle;

    if (isRecalled) {
      text = 'Tin nhắn đã được thu hồi';
      textColor = isMe ? UIColors.lightBlue : UIColors.gray;
      backgroundColor = isMe ? UIColors.primaryColor : UIColors.white;
      fontStyle = FontStyle.italic;
    } else {
      text = message?.text ?? '';
      textColor = isMe ? UIColors.white : UIColors.defaultText;
      backgroundColor = isMe ? UIColors.primaryColor : UIColors.white;
    }

    final urlRegexp = RegExp(
      r'''((http|ftp|https)://)?([\w_-]+(?:\.[\w_-]+)+)([\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])?''',
      caseSensitive: false,
    );
    final matches = urlRegexp.allMatches(text);
    final url = matches.toList().getFirst()?.group(0) ?? '';

    if (url.isEmpty) {
      return Container(
        color: backgroundColor,
        padding: const EdgeInsets.all(12),
        constraints: const BoxConstraints(minHeight: 32),
        child: Text(
          text,
          style: UITextStyle.regular.copyWith(
            fontSize: 14,
            color: textColor,
            fontStyle: fontStyle,
            height: 1.2,
          ),
        ),
      );
    }

    return Container(
      decoration: BoxDecoration(
        color: backgroundColor,
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(12),
            child: Linkify(
              text: text,
              style: UITextStyle.regular.copyWith(
                fontSize: 14,
                color: textColor,
                fontStyle: fontStyle,
                height: 1.2,
              ),
              linkStyle: UITextStyle.regular.copyWith(
                fontSize: 14,
                color: textColor,
                fontStyle: fontStyle,
                height: 1.2,
                decoration: TextDecoration.underline,
              ),
              onOpen: (LinkableElement link) {
                context.pushRoute(WebViewRoute(
                  url: link.url,
                  title: link.text,
                ));
              },
              options: const LinkifyOptions(
                humanize: false,
              ),
            ),
          ),
          if (url.isNotEmpty)
            SizedBox(
              // height: 260,
              child: AnyLinkPreview.builder(
                link: url,
                cache: const Duration(days: 1),
                errorWidget: const SizedBox(),
                placeholderWidget: const SizedBox(),
                itemBuilder: (context, metadata, imageProvider) {
                  if (imageProvider == null) {
                    return const SizedBox();
                  }
                  return SplashButton(
                    borderRadius: const BorderRadius.only(
                      bottomLeft: Radius.circular(12),
                      bottomRight: Radius.circular(12),
                    ),
                    onTap: () {
                      context.pushRoute(WebViewRoute(
                        url: url,
                        title: metadata.title ?? url,
                      ));
                    },
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        AspectRatio(
                          aspectRatio: 228 / 120,
                          child: Container(
                            height: 180,
                            decoration: BoxDecoration(
                              color: UIColors.lightGray,
                              image: DecorationImage(
                                image: imageProvider,
                                fit: BoxFit.fill,
                              ),
                            ),
                          ),
                        ),
                        Container(
                          alignment: Alignment.centerLeft,
                          padding: const EdgeInsets.all(12),
                          decoration: const BoxDecoration(
                            color: UIColors.lightGray,
                          ),
                          child: SeparatedColumn(
                            mainAxisSize: MainAxisSize.min,
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            separatorBuilder: (_, __) => const SizedBox(height: 5),
                            children: [
                              if (TextUtils.isNotEmpty(metadata.title))
                                Text(
                                  metadata.title!,
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                  style: UITextStyle.semiBold.copyWith(
                                    fontSize: 14,
                                    height: 1.1,
                                  ),
                                ),
                              if (TextUtils.isNotEmpty(metadata.desc))
                                Text(
                                  metadata.desc!,
                                  maxLines: 2,
                                  style: UITextStyle.regular.copyWith(
                                    fontSize: 13,
                                    height: 1.2,
                                  ),
                                ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
        ],
      ),
    );
  }
}
