import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:screenshot/screenshot.dart';

class MapWidget extends StatefulWidget {
  const MapWidget({
    super.key,
    required this.position,
    required this.onImageCreated,
  });

  final LatLng position;
  final Function(String) onImageCreated;

  @override
  State<MapWidget> createState() => _MapWidgetState();
}

class _MapWidgetState extends State<MapWidget> {
  bool _isLoading = true;

  late CameraPosition _position;
  late ScreenshotController _screenshotController;

  @override
  void initState() {
    super.initState();
    _screenshotController = ScreenshotController();
    _position = CameraPosition(
      target: widget.position,
      zoom: 16,
    );
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      fit: StackFit.expand,
      children: [
        Positioned.fill(
          child: Screenshot(
            controller: _screenshotController,
            child: GoogleMap(
              mapType: MapType.normal,
              initialCameraPosition: _position,
              markers: const <Marker>{},
              scrollGesturesEnabled: false,
              polylines: const <Polyline>{},
              zoomControlsEnabled: false,
              myLocationButtonEnabled: false,
              myLocationEnabled: true,
              onMapCreated: (GoogleMapController controller) async {
                WidgetsBinding.instance.addPostFrameCallback((_) {
                  if (mounted) {
                    setState(() {
                      _isLoading = false;
                    });
                    _screenshotController.capture(delay: const Duration(seconds: 1)).then((image) {
                      if (image != null) {
                        widget.onImageCreated(base64Encode(image));
                      }
                    });
                  }
                });
              },
            ),
          ),
        ),
        if (_isLoading)
          const Positioned.fill(
            child: Center(
              child: CircularProgressIndicator(),
            ),
          ),
      ],
    );
  }
}
