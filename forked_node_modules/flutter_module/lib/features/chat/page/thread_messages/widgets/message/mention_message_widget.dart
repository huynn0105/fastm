import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/widgets/html_widget.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/markup_input/utils/markup_util.dart';
import 'package:flutter_module/models/chat/message/message_wrapper_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:flutter_parsed_text/flutter_parsed_text.dart';

class MentionMessageWidget extends StatelessWidget {
  const MentionMessageWidget({
    super.key,
    required this.data,
  });

  final MessageWrapperModel data;

  @override
  Widget build(BuildContext context) {
    final message = data.message;
    final isMe = data.message?.isMe() == true;
    final isRecalled = message?.isRecalled == true;

    String text = '';
    Color? textColor;
    Color? mentionTextColor;
    Color? backgroundColor;
    FontStyle? fontStyle;

    if (isRecalled) {
      text = 'Tin nhắn đã được thu hồi';
      textColor = isMe ? UIColors.lightBlue : UIColors.gray;
      mentionTextColor = textColor;
      backgroundColor = isMe ? UIColors.primaryColor : UIColors.white;
      fontStyle = FontStyle.italic;
    } else {
      text = message?.htmlText ?? message?.text ?? '';
      textColor = isMe ? UIColors.white : UIColors.defaultText;
      mentionTextColor = isMe ? UIColors.white : UIColors.primaryColor;
      backgroundColor = isMe ? UIColors.primaryColor : UIColors.white;
    }

    // final hasHTML = RegExp(r'''<(\"[^\"]*\"|'[^']*'|[^'\">])*>''').hasMatch(text);
    // if (!hasHTML) {
    //   return Container(
    //     color: backgroundColor,
    //     padding: const EdgeInsets.all(12),
    //     constraints: const BoxConstraints(minHeight: 32),
    //     child: ParsedText(
    //       text: text,
    //       style: UITextStyle.regular.copyWith(
    //         fontSize: 13,
    //         color: textColor,
    //         fontStyle: fontStyle,
    //         height: 1.2,
    //       ),
    //       parse: <MatchText>[
    //         MatchText(
    //           type: ParsedType.URL,
    //           style: UITextStyle.regular.copyWith(
    //             fontSize: 13,
    //             color: textColor,
    //             fontStyle: fontStyle,
    //             height: 1.2,
    //             decoration: TextDecoration.underline,
    //           ),
    //           onTap: (url) {
    //             context.pushRoute(WebViewRoute(
    //               url: url,
    //               title: url,
    //             ));
    //           },
    //         ),
    //         MatchText(
    //           type: ParsedType.CUSTOM,
    //           pattern: MarkupUtil.validPattern,
    //           style: UITextStyle.bold.copyWith(
    //             fontSize: 13,
    //             color: textColor,
    //             fontStyle: fontStyle,
    //             height: 1.2,
    //           ),
    //           renderText: ({required pattern, required str}) {
    //             Match match = RegExp(MarkupUtil.validPattern).firstMatch(str)!;
    //             String trigger = match[2] ?? '';
    //             String display = match[3] ?? '';
    //             return {
    //               'display': '$trigger$display',
    //             };
    //           },
    //           onTap: (value) {
    //             Match match = RegExp(MarkupUtil.validPattern).firstMatch(value)!;
    //             String id = match[4] ?? '';
    //             String display = match[3] ?? '';
    //             ToastProvider.instance.show(context: context, message: '$display - $id');
    //           },
    //         ),
    //       ],
    //     ),
    //   );
    // }
    // final markupHTMLText = text.replaceAllMapped(
    //   RegExp(MarkupUtil.validPattern),
    //   (match) => MarkupUtil.getHTMLMarkup(match[0]!),
    // );

    return Container(
      color: backgroundColor,
      padding: const EdgeInsets.all(12),
      constraints: const BoxConstraints(minHeight: 32),
      child: HtmlWidget(
        data: text,
        fontSize: 14,
        lineHeight: 1.2,
        shrinkWrap: true,
        textColor: textColor,
        mentionTextColor: mentionTextColor,
        onMarkupMentionTap: (data) {
          ToastProvider.instance.show(
            context: context,
            message: '${data.display} - ${data.id}',
          );
        },
        // markupBuilder: (context, value) {
        //   return ParsedText(
        //     text: value,
        //     style: UITextStyle.regular.copyWith(
        //       fontSize: 13,
        //       color: textColor,
        //       fontStyle: fontStyle,
        //       height: 1.2,
        //     ),
        //     parse: <MatchText>[
        //       MatchText(
        //         type: ParsedType.URL,
        //         style: UITextStyle.regular.copyWith(
        //           fontSize: 13,
        //           color: textColor,
        //           fontStyle: fontStyle,
        //           height: 1.2,
        //           decoration: TextDecoration.underline,
        //         ),
        //         onTap: (url) {
        //           context.pushRoute(WebViewRoute(
        //             url: url,
        //             title: url,
        //           ));
        //         },
        //       ),
        //       MatchText(
        //         type: ParsedType.CUSTOM,
        //         pattern: MarkupUtil.validPattern,
        //         style: UITextStyle.bold.copyWith(
        //           fontSize: 13,
        //           color: textColor,
        //           fontStyle: fontStyle,
        //           height: 1.2,
        //         ),
        //         renderText: ({required pattern, required str}) {
        //           Match match = RegExp(MarkupUtil.validPattern).firstMatch(str)!;
        //           String trigger = match[2] ?? '';
        //           String display = match[3] ?? '';
        //           return {
        //             'display': '$trigger$display',
        //           };
        //         },
        //         onTap: (value) {
        //           Match match = RegExp(MarkupUtil.validPattern).firstMatch(value)!;
        //           String id = match[4] ?? '';
        //           String display = match[3] ?? '';
        //           ToastProvider.instance.show(context: context, message: '$display - $id');
        //         },
        //       ),
        //     ],
        //   );
        // },
      ),
    );
  }
}
