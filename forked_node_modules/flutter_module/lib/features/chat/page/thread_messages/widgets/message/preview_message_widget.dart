import 'package:flutter/material.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/chat/thread_message_type.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/chat/common/data_source/sticker_data_source.dart';
import 'package:flutter_module/models/chat/message/message_model.dart';

class PreviewMessageWidget extends StatelessWidget {
  const PreviewMessageWidget({
    super.key,
    required this.data,
    this.size = 35,
    this.header,
    this.isEdited = false,
  });

  final MessageModel? data;
  final Widget? header;
  final double size;
  final bool isEdited;

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: size,
      child: Row(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          _icon(context, data),
          _space(context, data),
          _label(context, data, header),
        ],
      ),
    );
  }

  Widget _icon(BuildContext context, MessageModel? data) {
    Widget result = const SizedBox();
    switch (data?.getMessageType()) {
      case ThreadMessageType.text:
      case ThreadMessageType.mention:
        if (isEdited) {
          result = Container(
            width: size,
            height: size,
            alignment: Alignment.center,
            decoration: const BoxDecoration(
              shape: BoxShape.circle,
              color: UIColors.white,
            ),
            child: const AppImage.asset(
              asset: 'ic_chat_edit',
              width: 18,
              height: 18,
              color: UIColors.darkGray,
            ),
          );
          break;
        }
        result = const SizedBox();
        break;
      case ThreadMessageType.images:
      case ThreadMessageType.videos:
        final src = data?.medias?.getFirst();
        result = Container(
          width: size,
          height: size,
          alignment: Alignment.center,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(8),
            color: UIColors.gray,
          ),
          child: AppImage.network(
            url: src?.thumbnail?.url ?? '',
            width: size,
            height: size,
            borderRadius: BorderRadius.circular(8),
          ),
        );
        break;
      case ThreadMessageType.audios:
        result = Container(
          width: size,
          height: size,
          alignment: Alignment.center,
          decoration: const BoxDecoration(
            shape: BoxShape.circle,
            color: UIColors.white,
          ),
          child: AppImage.asset(
            asset: 'ic_chat_recorder_outline',
            width: 18,
            height: 18,
            color: UIColors.darkGray,
            borderRadius: BorderRadius.circular(8),
          ),
        );
        break;
      case ThreadMessageType.sticker:
        final src = data?.htmlText ?? '';
        result = Container(
          width: size,
          height: size,
          alignment: Alignment.center,
          child: Image.asset(
            StickerDataSource.getAsset(src),
            width: size,
            height: size,
            fit: BoxFit.contain,
            errorBuilder: (_, __, ___) {
              return Container(
                height: size,
                width: size,
                decoration: BoxDecoration(
                  color: UIColors.gray,
                  borderRadius: BorderRadius.circular(8),
                ),
              );
            },
          ),
        );
        break;
      case ThreadMessageType.location:
        result = Container(
          width: size,
          height: size,
          alignment: Alignment.center,
          decoration: const BoxDecoration(
            shape: BoxShape.circle,
            color: UIColors.white,
          ),
          child: const AppImage.asset(
            asset: 'ic_chat_location_outline',
            width: 18,
            height: 18,
            color: UIColors.darkGray,
          ),
        );
        break;
      default:
        result = const SizedBox();
        break;
    }
    return AnimatedSize(
      duration: const Duration(milliseconds: 300),
      alignment: Alignment.centerLeft,
      child: result,
    );
  }

  Widget _space(BuildContext context, MessageModel? data) {
    Widget result = const SizedBox();
    switch (data?.getMessageType()) {
      case ThreadMessageType.text:
      case ThreadMessageType.mention:
        if (isEdited) {
          result = const SizedBox(width: 8);
          break;
        }
        result = const SizedBox();
        break;
      case ThreadMessageType.images:
      case ThreadMessageType.videos:
      case ThreadMessageType.audios:
      case ThreadMessageType.sticker:
      case ThreadMessageType.location:
        result = const SizedBox(width: 8);
        break;
      default:
        result = const SizedBox();
        break;
    }
    return result;
  }

  Widget _label(BuildContext context, MessageModel? data, Widget? header) {
    String result = '';
    switch (data?.getMessageType()) {
      case ThreadMessageType.text:
      case ThreadMessageType.mention:
        result = data?.text ?? '';
        break;
      case ThreadMessageType.images:
        result = '[Hình ảnh]';
        break;
      case ThreadMessageType.videos:
        result = '[Video]';
        break;
      case ThreadMessageType.audios:
        result = '[Tin nhắn thoại]';
        break;
      case ThreadMessageType.sticker:
        result = '[Sticker]';
        break;
      case ThreadMessageType.location:
        result = '[Vị trí]';
        break;
      default:
        result = '';
        break;
    }
    return Flexible(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (header != null) ...[
            header,
            const SizedBox(height: 4),
          ],
          Text(
            result,
            style: UITextStyle.regular.copyWith(
              fontSize: 14,
              color: UIColors.grayText,
              height: 1,
            ),
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
        ],
      ),
    );
  }
}
