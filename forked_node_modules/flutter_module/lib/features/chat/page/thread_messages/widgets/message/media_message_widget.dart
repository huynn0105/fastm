import 'dart:io';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/chat/media_type.dart';
import 'package:flutter_module/common/extension/duration_extension.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/chat/cubit/file_handler/file_handler_cubit.dart';
import 'package:flutter_module/features/chat/cubit/thread_messages/thread_messages_cubit.dart';
import 'package:flutter_module/features/chat/page/thread_messages/inheritance/message_widget_provider.dart';
import 'package:flutter_module/models/chat/file/media_model.dart';
import 'package:flutter_module/models/chat/message/message_model.dart';
import 'package:flutter_module/models/chat/message/message_wrapper_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';

class MediaMessageWidget extends StatelessWidget {
  const MediaMessageWidget({
    super.key,
    required this.data,
  });

  final MessageWrapperModel data;

  @override
  Widget build(BuildContext context) {
    final borderRadius = MessageWidgetProvider.of(context).borderRadius;
    final message = data.message;
    final isMe = data.message?.isMe() == true;
    final files = data.message?.medias ?? [];
    final length = files.length;

    ///
    if (files.isEmpty) {
      return const SizedBox();
    }

    double w = 250;

    ///
    if (length == 1) {
      final item = files[0];
      double width = (message?.mediaWidth ?? item.width ?? 0).toDouble();
      double height = (message?.mediaHeight ?? item.height ?? 0).toDouble();
      bool isVertical = (width / height) < 1;
      if (width == height) {
        width = height = 100;
      } else if (isVertical) {
        width = w * 3 / 4;
        height = 300;
      } else {
        width = w;
        height = 150;
      }
      return Container(
        constraints: const BoxConstraints(
          minHeight: 35,
        ),
        decoration: BoxDecoration(
          borderRadius: borderRadius,
        ),
        child: ClipRRect(
          borderRadius: borderRadius,
          child: MediaMessage(
            data: item,
            width: width,
            height: height,
            onTap: () {
              _onPreviewMedia(
                context,
                medias: files,
                index: 0,
                onForwardMessage: (_) {
                  _onForwardMessage(context, message: message);
                },
                onDeleteMessage: (_) {
                  _onDeleteMessage(context, messageID: message?.uid);
                },
              );
            },
          ),
        ),
      );
    }

    ///
    final crossAxisCount = length <= 3
        ? length
        : length == 4
            ? 2
            : 3;
    if (crossAxisCount == 3) {
      w = 300;
    }
    final width = w / crossAxisCount;
    final height = w / crossAxisCount;
    final direction = isMe ? TextDirection.rtl : TextDirection.ltr;

    return Container(
      width: w,
      constraints: const BoxConstraints(
        minHeight: 35,
      ),
      decoration: BoxDecoration(
        borderRadius: borderRadius,
      ),
      child: ClipRRect(
        borderRadius: borderRadius,
        child: Directionality(
          textDirection: direction,
          child: GridView.custom(
            shrinkWrap: true,
            padding: EdgeInsets.zero,
            physics: const NeverScrollableScrollPhysics(),
            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: crossAxisCount,
              mainAxisSpacing: 2,
              crossAxisSpacing: 2,
            ),
            childrenDelegate: SliverChildBuilderDelegate(
              (BuildContext context, int index) {
                return MediaMessage(
                  key: ValueKey('${message?.uid}__$index'),
                  data: files[index],
                  width: width,
                  height: height,
                  onTap: () {
                    _onPreviewMedia(
                      context,
                      medias: files,
                      index: index,
                      onForwardMessage: (_) {
                        _onForwardMessage(context, message: message);
                      },
                      onDeleteMessage: (_) {
                        _onDeleteMessage(context, messageID: message?.uid);
                      },
                    );
                  },
                );
              },
              childCount: files.length,
              findChildIndexCallback: (Key key) {
                if (key is ValueKey<String>) {
                  return TextUtils.parseInt(key.value.split('__').last);
                }
                return null;
              },
            ),
          ),
        ),
      ),
    );
  }

  _onForwardMessage(BuildContext context, {MessageModel? message}) {
    context.pushRoute(ChatForwardMessageRoute(message: message));
  }

  _onDeleteMessage(BuildContext context, {String? messageID}) async {
    final cubit = context.read<ThreadMessagesCubit>();
    await cubit.updateDeletedForMessage(
      messageID: messageID ?? '',
    );
    if (context.mounted) {
      ToastProvider.instance.show(
        context: context,
        message: "Xoá tin nhắn thành công",
        backgroundColor: UIColors.green,
        duration: const Duration(seconds: 2),
      );
    }
  }

  _onPreviewMedia(
    BuildContext context, {
    required List<MediaModel> medias,
    required int index,
    Function(int index)? onForwardMessage,
    Function(int index)? onDeleteMessage,
  }) {
    final isImage = medias.first.type == MediaType.image.name;
    if (isImage) {
      context.pushRoute(ChatPreviewImageRoute(
        images: medias.map((e) => e.url).whereType<String>().toList(),
        initialIndex: index,
        onForwardMessage: onForwardMessage,
        onDeleteMessage: onDeleteMessage,
      ));
    } else {
      context.pushRoute(ChatPreviewVideoRoute(
        videos: medias.map((e) => e.url).whereType<String>().toList(),
        initialIndex: index,
        onForwardMessage: onForwardMessage,
        onDeleteMessage: onDeleteMessage,
      ));
    }
  }
}

class MediaMessage extends StatelessWidget {
  const MediaMessage({
    super.key,
    required this.data,
    required this.width,
    required this.height,
    this.onTap,
  });

  final MediaModel data;
  final double width;
  final double height;
  final VoidCallback? onTap;

  @override
  Widget build(BuildContext context) {
    final rounded = MessageWidgetProvider.of(context);
    final mediaID = data.id ?? '';
    final isVideo = data.type == MediaType.video.name;
    final thumbnail = data.thumbnail;
    final thumbURL = thumbnail?.getServerURL() ?? '';
    final thumbURI = thumbnail?.getLocalURI() ?? '';

    ///
    Widget widget = const SizedBox();
    if (TextUtils.isNotEmpty(thumbURL)) {
      widget = AppImage.network(
        url: thumbURL,
        width: width,
        height: height,
        fit: BoxFit.cover,
      );
    } else if (TextUtils.isNotEmpty(thumbURI)) {
      widget = Image.file(
        File(thumbURI),
        width: width,
        height: height,
        fit: BoxFit.cover,
        errorBuilder: (_, __, ___) {
          return SizedBox(
            width: width,
            height: height,
          );
        },
      );
    }
    return BlocBuilder<FileHandlerCubit, FileHandlerState>(
      buildWhen: (pre, cur) {
        return cur.data[mediaID]?.id == mediaID;
      },
      builder: (context, state) {
        final item = state.data[mediaID];
        final progress = item?.progress ?? 0;
        final isLoading = item?.status.isLoading == true;
        return AppSplashButton(
          onTap: onTap,
          isDisable: isLoading,
          child: Container(
            width: width,
            height: height,
            decoration: BoxDecoration(
              color: UIColors.lightGray,
              borderRadius: BorderRadius.circular(rounded.minRadius),
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(rounded.minRadius),
              child: Stack(
                children: [
                  Positioned.fill(
                    child: widget,
                  ),
                  if (isVideo)
                    Positioned.fill(
                      child: Container(
                        color: UIColors.blurBackground.withOpacity(0.5),
                      ),
                    ),
                  if (isVideo && !isLoading)
                    Center(
                      child: Container(
                        width: 35,
                        height: 35,
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: UIColors.blurBackground.withOpacity(0.7),
                        ),
                        child: const AppImage.asset(
                          asset: 'ic_chat_video',
                          width: 25,
                          height: 25,
                        ),
                      ),
                    ),
                  if (isVideo)
                    Positioned(
                      bottom: 4,
                      right: 4,
                      child: Container(
                        height: 20,
                        alignment: Alignment.center,
                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10),
                          color: UIColors.blurBackground.withOpacity(0.7),
                        ),
                        child: Text(
                          Duration(milliseconds: data.duration ?? 0).getMMss(),
                          style: UITextStyle.semiBold.copyWith(
                            fontSize: 10,
                            color: UIColors.white,
                          ),
                        ),
                      ),
                    ),
                  Center(
                    child: Visibility(
                      visible: isLoading,
                      child: SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator(
                          value: progress < 0 && isLoading ? progress : null,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}
