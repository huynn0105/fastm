import 'package:assorted_layout_widgets/assorted_layout_widgets.dart';
import 'package:ezanimation/ezanimation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/chat/quoted_message_type.dart';
import 'package:flutter_module/common/enum/chat/thread_message_type.dart';
import 'package:flutter_module/common/widgets/avatar/chat_avatar.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/chat/cubit/device_audio_player/device_audio_player_cubit.dart';
import 'package:flutter_module/features/chat/cubit/thread_messages/thread_messages_cubit.dart';
import 'package:flutter_module/features/chat/page/thread_messages/components/reaction_selection_component.dart';
import 'package:flutter_module/features/chat/page/thread_messages/inheritance/message_action_provider.dart';
import 'package:flutter_module/features/chat/page/thread_messages/inheritance/message_widget_provider.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/message/audio_player_message_widget.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/message/location_message_widget.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/message/media_message_widget.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/message/mention_message_widget.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/message/quoted_message_title_widget.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/message/quoted_message_widget.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/message/sticker_message_widget.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/message/text_message_widget.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/message_layout.dart';
import 'package:flutter_module/features/chat/page/thread_messages/widgets/message_time.dart';
import 'package:flutter_module/models/chat/message/message_wrapper_model.dart';

import '../../../../../common/styles.dart';

class MessageContentItem extends StatefulWidget {
  const MessageContentItem({
    super.key,
    required this.data,
    required this.isPreviewMode,
    required this.onLongPress,
  });

  final MessageWrapperModel data;
  final bool isPreviewMode;
  final Function() onLongPress;

  @override
  State<MessageContentItem> createState() => _MessageContentItemState();
}

class _MessageContentItemState extends State<MessageContentItem> {
  late final EzAnimation ezAnimation;

  @override
  void initState() {
    super.initState();
    ezAnimation = EzAnimation.tween(
      Tween(begin: 1.0, end: 1.2),
      const Duration(milliseconds: 300),
      curve: Curves.linear,
      context: context,
    );
  }

  @override
  void dispose() {
    ezAnimation.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final message = widget.data.message;
    final isMe = message?.isMe() == true;
    final isEdited = message?.isEdited == true;
    final isRecalled = message?.isRecalled == true;
    final isForwarded = message?.getQuotedType()?.isForward == true;
    final isDeletedByMe = message?.isDeletedByMe() == true;
    final hasReactions = message?.getReactions().isNotEmpty == true;

    ///
    if (isDeletedByMe) {
      return const SizedBox();
    }

    ///
    double offset = 0;
    if (hasReactions) {
      offset = 10;
    }

    final child = MessageColumn(
      isMe: isMe,
      children: [
        if (!isRecalled)
          MessageRow(
            isMe: isMe,
            children: [
              Visibility(
                visible: !widget.isPreviewMode,
                child: const SizedBox(
                  width: 40,
                ),
              ),
              MessageColumn(
                isMe: isMe,
                children: [
                  if (isForwarded) ...[
                    ForwardedMessageTitleWidget(
                      data: widget.data,
                    ),
                  ],
                  if (message?.quotedMessage != null) ...[
                    RepliedMessageTitleWidget(
                      currentMessage: message,
                      quotedMessage: message?.quotedMessage,
                    ),
                  ],
                ],
              ),
            ],
          ),
        MessageRow(
          isMe: isMe,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Visibility(
              visible: !widget.isPreviewMode,
              child: Container(
                width: 40,
                height: 40,
                alignment: Alignment.centerLeft,
                child: Visibility(
                  visible: !isMe && widget.data.isFirstMessageInGroup,
                  child: ChatAvatar(
                    url: widget.data.message?.author?.avatar ?? '',
                    name: widget.data.message?.author?.fullName ?? '',
                    uid: widget.data.message?.author?.id,
                    isSingleThread: true,
                    size: 35,
                  ),
                ),
              ),
            ),
            Visibility(
              visible: isMe,
              child: const SizedBox(
                width: 40,
              ),
            ),
            if (isRecalled)
              Container(
                decoration: BoxDecoration(
                  border: Border.all(color: UIColors.white),
                  borderRadius: MessageWidgetProvider.of(context).borderRadius,
                ),
                child: ClipRRect(
                  borderRadius: MessageWidgetProvider.of(context).borderRadius,
                  child: TextMessageWidget(data: widget.data),
                ),
              ),
            if (!isRecalled)
              Flexible(
                child: MessageColumn(
                  isMe: isMe,
                  children: [
                    Visibility(
                      visible: !isMe && widget.data.isFirstMessageInGroup,
                      child: Text(
                        widget.data.message?.author?.fullName ?? '',
                        style: UITextStyle.medium.copyWith(
                          fontSize: 13,
                          color: UIColors.grayText,
                        ),
                      ),
                    ),
                    const SizedBox(
                      height: 4,
                    ),
                    ColumnSuper(
                      invert: false,
                      innerDistance: -offset,
                      alignment: isMe ? Alignment.centerRight : Alignment.centerLeft,
                      children: [
                        MessageRow(
                          isMe: isMe,
                          children: [
                            if (isMe && isEdited) ...[
                              const AppImage.asset(
                                asset: 'ic_chat_edit',
                                width: 18,
                                height: 18,
                                color: UIColors.darkGray,
                              ),
                              const SizedBox(
                                width: 8,
                              ),
                            ],
                            Flexible(
                              child: ColumnSuper(
                                invert: false,
                                innerDistance: -12,
                                alignment: isMe ? Alignment.centerRight : Alignment.centerLeft,
                                children: [
                                  if (message?.quotedMessage != null) ...[
                                    QuotedMessageWidget(
                                      data: message?.quotedMessage,
                                      borderRadius: MessageWidgetProvider.of(context).borderRadius,
                                      padding: const EdgeInsets.fromLTRB(12, 12, 12, 18),
                                      onTap: () {
                                        MessageActionProvider.of(context).onQuotedMessageTap(
                                          context,
                                          message!.quotedMessage!,
                                        );
                                      },
                                    ),
                                  ],
                                  GestureDetector(
                                    behavior: HitTestBehavior.opaque,
                                    onLongPress: widget.onLongPress,
                                    child: Container(
                                      decoration: !MessageWidgetProvider.of(context).showBorder
                                          ? null
                                          : BoxDecoration(
                                              border: Border.all(color: UIColors.white),
                                              borderRadius: MessageWidgetProvider.of(context).borderRadius,
                                            ),
                                      child: ClipRRect(
                                        borderRadius: MessageWidgetProvider.of(context).borderRadius,
                                        child: _getMessageContent(
                                          widget.data,
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            if (!isMe && isEdited) ...[
                              const SizedBox(
                                width: 8,
                              ),
                              const AppImage.asset(
                                asset: 'ic_chat_edit',
                                width: 18,
                                height: 18,
                                color: UIColors.darkGray,
                              ),
                            ],
                          ],
                        ),
                        Visibility(
                          visible: !isRecalled && hasReactions,
                          child: Padding(
                            padding: EdgeInsets.only(
                              left: isMe ? 0 : 8,
                              right: isMe ? 8 : 0,
                            ),
                            child: ReactionSelectionComponent(
                              data: widget.data,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            Visibility(
              visible: !isMe,
              child: const SizedBox(
                width: 40,
              ),
            ),
          ],
        ),
        MessageRow(
          isMe: isMe,
          children: [
            Visibility(
              visible: !isMe,
              child: const SizedBox(
                width: 40,
              ),
            ),
            Visibility(
              visible: message?.createTime != null && widget.data.showMessageCreateTime,
              child: Padding(
                padding: const EdgeInsets.only(top: 4, bottom: 0),
                child: MessageTime(
                  isMe: isMe,
                  data: message?.getCreatedTime()?.toIso8601String() ?? '',
                ),
              ),
            ),
          ],
        ),
      ],
    );

    return BlocListener<ThreadMessagesCubit, ThreadMessagesState>(
      listenWhen: (pre, cur) {
        return pre.highlightMessageID != cur.highlightMessageID && cur.highlightMessageID == message?.uid;
      },
      listener: (context, state) async {
        ezAnimation.start();
        await Future.delayed(ezAnimation.duration);
        ezAnimation.reverse();
      },
      child: AnimatedBuilder(
        animation: ezAnimation,
        builder: (context, child) {
          return Transform.scale(
            scale: ezAnimation.value,
            child: child,
          );
        },
        child: child,
      ),
    );
  }

  _getMessageContent(MessageWrapperModel data) {
    final isRecalled = data.message?.isRecalled == true;
    if (isRecalled) {
      return TextMessageWidget(data: data);
    }
    switch (data.message?.getMessageType()) {
      case ThreadMessageType.text:
        return TextMessageWidget(data: data);
      case ThreadMessageType.mention:
        return MentionMessageWidget(data: data);
      case ThreadMessageType.location:
        return LocationMessageWidget(data: data);
      case ThreadMessageType.images:
      case ThreadMessageType.videos:
        return MediaMessageWidget(data: data);
      case ThreadMessageType.sticker:
        return StickerWidgetMessage(data: data);
      case ThreadMessageType.audios:
        return BlocProvider(
          create: (_) => DeviceAudioPlayerCubit(),
          child: AudioPlayerMessageWidget(data: data),
        );
      default:
        return const SizedBox();
    }
  }
}
