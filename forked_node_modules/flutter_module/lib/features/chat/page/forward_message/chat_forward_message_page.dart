import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/chat/cubit/chat_contact/chat_contact_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_forward_message/forward_message_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_thread/chat_thread_cubit.dart';
import 'package:flutter_module/features/chat/page/forward_message/components/forward_component.dart';
import 'package:flutter_module/features/chat/page/forward_message/components/friend_contact_component.dart';
import 'package:flutter_module/features/chat/page/forward_message/components/group_contact_component.dart';
import 'package:flutter_module/features/chat/page/forward_message/components/recent_contact_component.dart';
import 'package:flutter_module/features/chat/page/forward_message/components/input_component.dart';
import 'package:flutter_module/features/chat/page/forward_message/components/search_component.dart';
import 'package:flutter_module/models/chat/message/message_model.dart';

@RoutePage()
class ChatForwardMessagePage extends StatelessWidget implements AutoRouteWrapper {
  const ChatForwardMessagePage({
    super.key,
    @QueryParam('message') this.message,
  });

  final MessageModel? message;

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (_) => ChatForwardMessageCubit()
        ..initData(
          message: message,
          threads: context.read<ChatThreadCubit>().state.threads,
          contacts: context.read<ChatContactCubit>().state.contacts,
        ),
      child: this,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: MFastSimpleAppBar(
        context: context,
        title: 'Chuyển tiếp',
        actions: [
          BlocConsumer<ChatForwardMessageCubit, ChatForwardMessageState>(
            listenWhen: (pre, cur) {
              return pre.submitStatus != cur.submitStatus;
            },
            listener: (context, state) {
              if (state.submitStatus.isSuccess) {
                ToastProvider.instance.show(
                  context: context,
                  message: 'Chuyển tiếp thành công',
                  backgroundColor: UIColors.green,
                );
                context.popRoute();
              }
            },
            builder: (context, state) {
              final cubit = context.read<ChatForwardMessageCubit>();
              final enabled = !state.submitStatus.isLoading && message != null && cubit.getAllContacts().isNotEmpty;
              return AppSplashButton(
                onTap: cubit.submit,
                isDisable: !enabled,
                child: Padding(
                  padding: const EdgeInsets.all(8),
                  child: Text(
                    'Gửi',
                    style: UITextStyle.regular.copyWith(
                      fontSize: 14,
                      color: UIColors.primaryColor,
                    ),
                  ),
                ),
              );
            },
          ),
        ],
      ),
      body: BlocBuilder<ChatForwardMessageCubit, ChatForwardMessageState>(
        builder: (context, state) {
          final cubit = context.read<ChatForwardMessageCubit>();
          return Stack(
            children: [
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: Column(
                  children: [
                    ForwardComponent(
                      message: message,
                      onDescriptionChanged: cubit.updateDescription,
                    ),
                    const SizedBox(height: 20),
                    InputComponent(
                      readOnly: true,
                      onTap: () async {
                        final cubit = context.read<ChatForwardMessageCubit>();
                        final result = await Navigator.of(context).push(
                          MaterialPageRoute(
                            builder: (_) {
                              return SearchComponent(
                                recentContacts: state.recentContacts,
                                groupContacts: state.groupContacts,
                                friendContacts: state.friendContacts,
                                selectedRecentContacts: state.selectedRecentContacts,
                                selectedGroupContacts: state.selectedGroupContacts,
                                selectedFriendContacts: state.selectedFriendContacts,
                              );
                            },
                          ),
                        );
                        if (result != null) {
                          cubit.selectAll(result);
                        }
                      },
                    ),
                    Expanded(
                      child: CustomScrollView(
                        slivers: [
                          RecentContactComponent(
                            data: state.recentContacts,
                            selectedData: state.selectedRecentContacts,
                            onSelected: (value) {
                              context.read<ChatForwardMessageCubit>().selectRecentContact(value);
                            },
                          ),
                          GroupContactComponent(
                            data: state.groupContacts,
                            selectedData: state.selectedGroupContacts,
                            onSelected: (value) {
                              context.read<ChatForwardMessageCubit>().selectGroupContact(value);
                            },
                          ),
                          FriendContactComponent(
                            data: state.friendContacts,
                            selectedData: state.selectedFriendContacts,
                            onSelected: (value) {
                              context.read<ChatForwardMessageCubit>().selectFriendContact(value);
                            },
                          ),
                          const SliverToBoxAdapter(
                            child: SizedBox(
                              height: 100,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              Visibility(
                visible: state.submitStatus.isLoading,
                child: const LoadingWidget.dark(),
              ),
            ],
          );
        },
      ),
    );
  }
}
