import 'package:flutter/material.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/utils/vietnamese_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/chat/page/forward_message/components/friend_contact_component.dart';
import 'package:flutter_module/features/chat/page/forward_message/components/group_contact_component.dart';
import 'package:flutter_module/features/chat/page/forward_message/components/input_component.dart';
import 'package:flutter_module/features/chat/page/forward_message/components/recent_contact_component.dart';
import 'package:flutter_module/features/chat/page/forward_message/items/contact_item.dart';
import 'package:flutter_module/models/chat/contact/forward_contact_model.dart';

class SearchComponent extends StatefulWidget {
  const SearchComponent({
    super.key,
    required this.recentContacts,
    required this.groupContacts,
    required this.friendContacts,
    required this.selectedRecentContacts,
    required this.selectedGroupContacts,
    required this.selectedFriendContacts,
  });

  final List<ForwardContactModel> recentContacts;
  final List<ForwardContactModel> groupContacts;
  final List<ForwardContactModel> friendContacts;
  final List<ForwardContactModel> selectedRecentContacts;
  final List<ForwardContactModel> selectedGroupContacts;
  final List<ForwardContactModel> selectedFriendContacts;

  @override
  State<SearchComponent> createState() => _SearchComponentState();
}

class _SearchComponentState extends State<SearchComponent> {
  late final TextEditingController inputController;
  late final FocusNode focusNode;

  late List<ForwardContactModel> data;
  late List<ForwardContactModel> searchedData;
  late List<ForwardContactModel> selectedData;

  @override
  void initState() {
    super.initState();
    inputController = TextEditingController();
    focusNode = FocusNode();
    data = [
      ...widget.recentContacts,
      ...widget.groupContacts,
      ...widget.friendContacts,
    ];
    selectedData = [
      ...widget.selectedRecentContacts,
      ...widget.selectedGroupContacts,
      ...widget.selectedFriendContacts,
    ];
    searchedData = [];
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Future.delayed(const Duration(milliseconds: 200), focusNode.requestFocus);
    });
  }

  @override
  void dispose() {
    inputController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        elevation: 0,
        titleSpacing: 0,
        centerTitle: true,
        leading: SizedBox(
          width: 40,
          height: 40,
          child: BackButton(
            color: UIColors.darkGray,
            onPressed: () {
              Navigator.of(context).pop(selectedData);
            },
          ),
        ),
        backgroundColor: UIColors.background,
        title: Row(
          children: [
            Expanded(
              child: InputComponent(
                controller: inputController,
                focusNode: focusNode,
                readOnly: false,
                autofocus: false,
                onChanged: onChanged,
              ),
            ),
            const SizedBox(
              width: 10,
            ),
            SplashButton(
              onTap: inputController.clear,
              borderRadius: BorderRadius.circular(15),
              child: Container(
                width: 30,
                height: 30,
                alignment: Alignment.center,
                child: const AppImage.asset(
                  asset: 'ic_chat_delete_x',
                  width: 24,
                  height: 24,
                  color: UIColors.darkGray,
                ),
              ),
            ),
            const SizedBox(
              width: 10,
            ),
          ],
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16),
        child: Stack(
          children: [
            Visibility(
              visible: inputController.text.isEmpty,
              child: CustomScrollView(
                slivers: [
                  RecentContactComponent(
                    data: widget.recentContacts,
                    selectedData: selectedData,
                    onSelected: onSelected,
                  ),
                  GroupContactComponent(
                    data: widget.groupContacts,
                    selectedData: selectedData,
                    onSelected: onSelected,
                  ),
                  FriendContactComponent(
                    data: widget.friendContacts,
                    selectedData: selectedData,
                    onSelected: onSelected,
                  ),
                  const SliverToBoxAdapter(
                    child: SizedBox(
                      height: 100,
                    ),
                  )
                ],
              ),
            ),
            Visibility(
              visible: inputController.text.isNotEmpty,
              child: ListView.separated(
                padding: const EdgeInsets.only(bottom: 100),
                itemBuilder: (context, index) {
                  final item = searchedData[index];
                  final selected = selectedData.indexWhere((e) => e.uid == item.uid) >= 0;
                  return ChatContactItem(
                    name: item.title ?? '',
                    avatar: item.avatar ?? '',
                    isSelected: selected,
                    isSingleThread: true,
                    onTap: () => onSelected(item),
                  );
                },
                separatorBuilder: (_, __) => const SizedBox(height: 12),
                itemCount: searchedData.length,
              ),
            ),
          ],
        ),
      ),
    );
  }

  onChanged(String value) {
    if (value.isNotEmpty) {
      setState(() {
        searchedData = data.where((e) {
          String query = VietnameseUtils.toEnglish(value).toLowerCase();
          String source = VietnameseUtils.toEnglish(e.title ?? '').toLowerCase();
          return source.contains(query) == true;
        }).toList();
      });
    } else {
      setState(() {
        searchedData = [];
      });
    }
  }

  onSelected(ForwardContactModel value) {
    final data = [...selectedData];
    final index = data.indexWhere((e) => e.uid == value.uid);
    if (index >= 0) {
      data.removeAt(index);
    } else {
      data.add(value);
    }
    setState(() {
      selectedData = data;
    });
  }
}
