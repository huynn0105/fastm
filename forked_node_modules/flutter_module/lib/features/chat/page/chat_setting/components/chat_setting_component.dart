import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/image_picker_utils.dart';
import 'package:flutter_module/features/chat/cubit/chat_setting/chat_setting_cubit.dart';
import 'package:flutter_module/features/chat/page/chat_setting/items/chat_setting_option_item.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';
import 'package:flutter_module/services/firebase/firebase_database/firebase_database_util.dart';

class ChatSettingComponent extends StatelessWidget {
  const ChatSettingComponent({
    super.key,
    required this.thread,
    required this.isSystemThread,
  });

  final ChatThreadModel thread;
  final bool isSystemThread;

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<ChatSettingCubit, ChatSettingState>(
      builder: (context, state) {
        return Container(
          padding: const EdgeInsets.only(left: 12, right: 12, bottom: 4),
          decoration: BoxDecoration(
            color: UIColors.white,
            borderRadius: BorderRadius.circular(8),
          ),
          child: Column(
            children: [
              if (!isSystemThread)
                ChatSettingOptionItem(
                  title: 'Đổi hình nền',
                  icon: 'ic_image',
                  onTap: () {
                    _onShowOptionsUpdateBackgroundImage(context);
                  },
                ),
              ChatSettingOptionItem(
                title: 'Thông báo',
                icon: 'ic_notification',
                iconColor: UIColors.primaryColor,
                isSwitch: true,
                switchValue: state.isNotificationOn,
                onSwitchChange: (val) {
                  _onChangeNotification(
                    context,
                    isOn: val,
                    onResult: (isSuccess) {
                      ToastProvider.instance.show(
                        context: context,
                        message: '${val ? "Bật" : "Tắt"} thông báo ${isSuccess ? "thành công" : "thất bại"}',
                      );
                      if (isSuccess) {
                        thread.isNotificationOns?.addAll({FirebaseDatabaseUtil.getFirebaseUserID(): val});
                      }
                    },
                  );
                },
              ),
              ChatSettingOptionItem(
                title: 'Thêm vào danh sách yêu thích',
                icon: 'ic_heart',
                isSwitch: true,
                switchValue: state.isFavorite,
                onSwitchChange: (val) {
                  _onChangeFavorite(
                    context,
                    isFavorite: val,
                    onResult: (isSuccess) {
                      ToastProvider.instance.show(
                        context: context,
                        message:
                            '${val ? "Thêm vào" : "Xoá khỏi"} danh sách yêu thích ${isSuccess ? "thành công" : "thất bại"}',
                      );
                      if (isSuccess) {
                        thread.isFavorites?.addAll({FirebaseDatabaseUtil.getFirebaseUserID(): val});
                      }
                    },
                  );
                },
              ),
              if (thread.isSingleThread())
                ChatSettingOptionItem(
                  title: 'Chặn trò chuyện',
                  icon: 'ic_danger',
                  isSwitch: true,
                  switchValue: state.isBlock,
                  onSwitchChange: (val) {
                    _onConfirmBlock(
                      context,
                      isBlock: val,
                      userID: thread.getSingleThreadTargetUser()?.uid ?? '',
                      name: thread.getDefaultThreadTitle(),
                      onResult: (isSuccess) {
                        ToastProvider.instance.show(
                          context: context,
                          message: '${val ? "Chặn" : "Bỏ chặn"} ${isSuccess ? "thành công" : "thất bại"}',
                        );
                      },
                    );
                  },
                ),
            ],
          ),
        );
      },
    );
  }

  _onChangeNotification(
    BuildContext context, {
    bool isOn = false,
    Function(bool)? onResult,
  }) async {
    final cubit = context.read<ChatSettingCubit>();
    final isSuccess = await cubit.toggleUserNotificationOnInThread(isOn: isOn);
    onResult?.call(isSuccess);
  }

  _onChangeFavorite(
    BuildContext context, {
    bool isFavorite = false,
    Function(bool)? onResult,
  }) async {
    final cubit = context.read<ChatSettingCubit>();
    final isSuccess = await cubit.toggleUserFavoriteInThread(isFavorite: isFavorite);
    onResult?.call(isSuccess);
  }

  _onShowOptionsUpdateBackgroundImage(BuildContext context) async {
    final cubit = context.read<ChatSettingCubit>();
    final result = await showCupertinoModalPopup(
      context: context,
      builder: (BuildContext _) => BlocProvider.value(
        value: cubit,
        child: Builder(builder: (context) {
          return const OptionUpdateBackgroundImage();
        }),
      ),
    );

    if (result is int && context.mounted) {
      switch (result) {
        case 0:
          _onUpdateBackgroundImage(context, type: PickResourceType.camera);
          break;
        case 1:
          _onUpdateBackgroundImage(context, type: PickResourceType.gallery);
          break;
        case 2:
          _onUpdateBackgroundImage(context);
          break;
      }
    }
  }

  _onUpdateBackgroundImage(
    BuildContext context, {
    PickResourceType? type,
  }) async {
    final cubit = context.read<ChatSettingCubit>();
    File? file;
    if (type != null) {
      file = await ImagePickerUtils.pickImage(context: context, type: type);
      if (file == null) return;
    }
    if (context.mounted) {
      ToastProvider.instance.show(context: context, message: 'Đang cập nhật hình nền');
    }
    await cubit.updateBackgroundImage(file: file);
  }

  _onBlock(
    BuildContext context, {
    required String userID,
    bool isBlock = false,
    Function(bool)? onResult,
  }) async {
    final cubit = context.read<ChatSettingCubit>();
    final isSuccess = await cubit.toggleUserBlockInThread(isBlock: isBlock, userID: userID);
    onResult?.call(isSuccess);
  }

  _onConfirmBlock(
    BuildContext context, {
    required String userID,
    bool isBlock = false,
    Function(bool)? onResult,
    String? name,
  }) {
    DialogProvider.instance.showConfirmDialog(
      context,
      message: "Bạn có muốn ${isBlock ? "chặn" : "bỏ chặn"} ${name?.isNotEmpty == true ? "'$name' không?": "người dùng này?"}",
      negativeTitle: 'Quay lại',
      positiveTitle: isBlock ? "Chặn" : "Bỏ chặn",
      positiveCallback: () {
        _onBlock(
          context,
          userID: userID,
          isBlock: isBlock,
          onResult: onResult,
        );
      },
    );
  }
}

class OptionUpdateBackgroundImage extends StatelessWidget {
  const OptionUpdateBackgroundImage({super.key});

  @override
  Widget build(BuildContext context) {
    return CupertinoActionSheet(
      actions: <CupertinoActionSheetAction>[
        CupertinoActionSheetAction(
          onPressed: () {
            Navigator.pop(context, 0);
          },
          child: Text(
            'Chụp hình mới',
            style: UITextStyle.medium.copyWith(
              color: UIColors.primaryColor,
              fontSize: 18,
            ),
          ),
        ),
        CupertinoActionSheetAction(
          onPressed: () {
            Navigator.pop(context, 1);
          },
          child: Text(
            'Chọn từ thư viện',
            style: UITextStyle.medium.copyWith(
              color: UIColors.primaryColor,
              fontSize: 18,
            ),
          ),
        ),
        CupertinoActionSheetAction(
          onPressed: () {
            Navigator.pop(context, 2);
          },
          child: Text(
            'Bỏ hình nền',
            style: UITextStyle.medium.copyWith(
              color: UIColors.primaryColor,
              fontSize: 18,
            ),
          ),
        ),
        CupertinoActionSheetAction(
          isDestructiveAction: true,
          onPressed: () {
            Navigator.pop(context);
          },
          child: Text(
            'Đóng',
            style: UITextStyle.semiBold.copyWith(
              color: UIColors.red,
              fontSize: 18,
            ),
          ),
        ),
      ],
    );
  }
}
