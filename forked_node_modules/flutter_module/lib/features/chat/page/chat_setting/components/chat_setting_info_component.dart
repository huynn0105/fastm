import 'dart:io';

import 'package:app_settings/app_settings.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/image_picker_utils.dart';
import 'package:flutter_module/common/widgets/avatar/chat_avatar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/chat/cubit/chat_setting/chat_setting_cubit.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';

class ChatSettingInfoComponent extends StatefulWidget {
  const ChatSettingInfoComponent({
    super.key,
    required this.thread,
    required this.isSystemThread,
  });

  final ChatThreadModel thread;
  final bool isSystemThread;

  @override
  State<ChatSettingInfoComponent> createState() => _ChatSettingInfoComponentState();
}

class _ChatSettingInfoComponentState extends State<ChatSettingInfoComponent> {
  bool isEdit = false;
  final TextEditingController _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return AppSplashButton(
      isDisable: !widget.thread.isSingleThread(),
      onTap: () {
        BottomSheetProvider.instance.showBottomSheetUserReviews(
          context,
          uid: widget.thread.getSingleThreadTargetUser()?.uid ?? "",
          fullName: widget.thread.getDefaultThreadTitle(),
          avatarImage: widget.thread.photoImageURI(),
        );
      },
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: UIColors.white,
          borderRadius: BorderRadius.circular(8),
        ),
        child: Row(
          children: [
            SplashButton(
              isDisabled: widget.isSystemThread || widget.thread.isSingleThread(),
              onTap: () async {
                try {
                  _onUpdateAvatarImage(
                    context,
                    type: PickResourceType.gallery,
                  );
                } catch (error) {
                  if (context.mounted) {
                    DialogProvider.instance.showConfirmDialog(
                      context,
                      title: 'Thông báo',
                      message: 'Vui lòng cho phép Quyền truy cập thư viện ảnh để sử dụng chức năng này!',
                      negativeTitle: 'Hủy',
                      positiveTitle: 'Đồng ý',
                      positiveCallback: () {
                        AppSettings.openAppSettings();
                      },
                    );
                  }
                }
              },
              child: ChatAvatar(
                url: widget.thread.photoImageURI() ?? '',
                isSingleThread: widget.thread.isSingleThread(),
                name: widget.thread.getDefaultThreadTitle(),
                size: 56,
              ),
            ),
            const SizedBox(
              width: 16,
            ),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  if (isEdit) ...{
                    SizedBox(
                      height: 24,
                      child: TextField(
                        controller: _controller,
                        style: UITextStyle.medium.copyWith(
                          fontSize: 16,
                          color: UIColors.boolText,
                        ),
                        scrollPadding: EdgeInsets.zero,
                        inputFormatters: [
                          LengthLimitingTextInputFormatter(50),
                        ],
                        decoration: const InputDecoration(
                          isDense: true,
                          contentPadding: EdgeInsets.zero,
                          enabledBorder: UnderlineInputBorder(
                            borderSide: BorderSide(
                              color: UIColors.grayText,
                            ),
                          ),
                          focusedBorder: UnderlineInputBorder(
                            borderSide: BorderSide(
                              color: UIColors.primaryColor,
                            ),
                          ),
                        ),
                        autofocus: true,
                        cursorColor: UIColors.primaryColor,
                        onSubmitted: (value) {
                          setState(() {
                            setState(() {
                              isEdit = !isEdit;
                            });
                          });
                          _onUpdateTitleGroupThread(context, title: value);
                        },
                      ),
                    ),
                  } else ...{
                    Text(
                      widget.thread.getDefaultThreadTitle(),
                      style: UITextStyle.medium.copyWith(
                        fontSize: 16,
                        color: UIColors.boolText,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    )
                  },
                  if (!widget.thread.isSingleThread())
                    Text(
                      "${widget.thread.users?.length ?? 0} người tham gia",
                      style: UITextStyle.regular.copyWith(
                        fontSize: 13,
                        color: UIColors.lightBlackText,
                      ),
                    ),
                ],
              ),
            ),
            if (!widget.thread.isSingleThread() && !widget.isSystemThread)
              SplashButton(
                onTap: () {
                  final newIsEdit = !isEdit;
                  if (newIsEdit) {
                    _controller.text = widget.thread.getDefaultThreadTitle();
                  }
                  setState(() {
                    isEdit = newIsEdit;
                  });
                },
                child: Padding(
                  padding: const EdgeInsets.all(4),
                  child: AppImage.asset(
                    asset: 'ic_edit',
                    width: 24,
                    height: 24,
                    color: isEdit ? null : UIColors.grayText,
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }

  _onUpdateTitleGroupThread(BuildContext context, {required String title}) {
    final cubit = context.read<ChatSettingCubit>();
    cubit.updateTitleGroupThread(title: title);
  }

  _onUpdateAvatarImage(
    BuildContext context, {
    PickResourceType? type,
  }) async {
    final cubit = context.read<ChatSettingCubit>();
    File? file;
    if (type != null) {
      file = await ImagePickerUtils.pickImage(context: context, type: type);
      if (file == null) return;
    }
    if (context.mounted) {
      ToastProvider.instance.show(context: context, message: 'Đang cập nhật ảnh đại diện');
    }
    await cubit.updateAvatarImage(file: file);
  }
}
