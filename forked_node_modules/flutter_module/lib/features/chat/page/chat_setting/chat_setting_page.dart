import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/chat/cubit/chat_general_media/chat_general_media_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_setting/chat_setting_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_thread/chat_thread_cubit.dart';
import 'package:flutter_module/features/chat/page/chat_setting/components/chat_member_component.dart';
import 'package:flutter_module/features/chat/page/chat_setting/components/chat_general_media_component.dart';
import 'package:flutter_module/features/chat/page/chat_setting/components/chat_setting_component.dart';
import 'package:flutter_module/features/chat/page/chat_setting/components/chat_setting_info_component.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';

@RoutePage()
class ChatSettingPage extends StatefulWidget implements AutoRouteWrapper {
  const ChatSettingPage({
    super.key,
    required this.thread,
  });

  final ChatThreadModel thread;

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (context) {
            final cubit = ChatSettingCubit();
            return cubit;
          },
        ),
        BlocProvider(
          create: (context) {
            final cubit = ChatGeneralMediaCubit();
            cubit.initState(thread);
            cubit.getImageMessagesInThread(maxMessages: 5);
            cubit.getVideoMessagesInThread(maxMessages: 5);
            return cubit;
          },
        ),
      ],
      child: this,
    );
  }

  @override
  State<ChatSettingPage> createState() => _ChatSettingPageState();
}

class _ChatSettingPageState extends State<ChatSettingPage> {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final cubit = context.read<ChatSettingCubit>();
      final threadCubit = context.read<ChatThreadCubit>();
      final isBlock = threadCubit.state.blockThreads[widget.thread.uid];
      cubit.initState(
        widget.thread,
        isBlock: isBlock,
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<ChatThreadCubit, ChatThreadState>(
      builder: (context, state) {
        final ChatThreadModel? cubitThread = state.threads.firstWhereOrNull(
          (element) => element.uid == widget.thread.uid,
        );

        return Scaffold(
          appBar: MFastSimpleAppBar(
            context: context,
            title: 'Quản lý chat',
            onBack: () {
              context.popRoute(cubitThread);
            },
          ),
          body: BlocConsumer<ChatSettingCubit, ChatSettingState>(
            listener: (context, state) {
              if (state.backgroundImageStatus.isSuccess || state.backgroundImageStatus.isFailure) {
                ToastProvider.instance.show(
                  context: context,
                  message: 'Cập nhận hình nền ${state.backgroundImageStatus.isSuccess ? "thành công" : "thất bại"}',
                );
              }

              if (state.avatarStatus.isSuccess || state.avatarStatus.isFailure) {
                ToastProvider.instance.show(
                  context: context,
                  message: 'Cập nhận ảnh đại diện ${state.avatarStatus.isSuccess ? "thành công" : "thất bại"}',
                );
              }

              if (state.leaveStatus.isSuccess || state.leaveStatus.isFailure) {
                ToastProvider.instance.show(
                  context: context,
                  message: 'Rời nhóm ${state.leaveStatus.isSuccess ? "thành công" : "thất bại"}',
                );
                if (state.leaveStatus.isSuccess) {
                  context.router.popUntilRouteWithName(ChatRoute.name);
                }
              }
            },
            builder: (context, state) {
              if (cubitThread == null) return const SizedBox();

              final isSystemThread = cubitThread.isSystemThread();

              return ListView(
                padding: const EdgeInsets.symmetric(
                  horizontal: 16,
                ),
                children: [
                  const SizedBox(
                    height: 20,
                  ),
                  ChatSettingInfoComponent(
                    thread: cubitThread,
                    isSystemThread: isSystemThread,
                  ),
                  const SizedBox(
                    height: 24,
                  ),
                  Text(
                    'Cài đặt trò chuyện',
                    style: UITextStyle.medium.copyWith(
                      fontSize: 16,
                      color: UIColors.grayText,
                    ),
                  ),
                  const SizedBox(
                    height: 8,
                  ),
                  ChatSettingComponent(
                    thread: cubitThread,
                    isSystemThread: isSystemThread,
                  ),
                  if (cubitThread.isGroupThread()) ...{
                    const SizedBox(
                      height: 24,
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          'Thành viên (${cubitThread.users?.length ?? 0})',
                          style: UITextStyle.medium.copyWith(
                            fontSize: 16,
                            color: UIColors.grayText,
                          ),
                        ),
                        SplashButton(
                          onTap: () {
                            context.pushRoute(ChatMemberThreadRoute(thread: cubitThread));
                          },
                          child: Text(
                            "Tất cả",
                            style: UITextStyle.regular.copyWith(
                              color: UIColors.primaryColor,
                            ),
                          ),
                        )
                      ],
                    ),
                    const SizedBox(
                      height: 8,
                    ),
                    ChatMemberComponent(
                      thread: cubitThread,
                      isSystemThread: isSystemThread,
                    ),
                  },
                  const SizedBox(
                    height: 24,
                  ),
                  ChatGeneralMediaComponent(
                    thread: cubitThread,
                  ),
                  const SizedBox(
                    height: 24,
                  ),
                  if (cubitThread.isGroupThread() && !isSystemThread)
                    SplashButton(
                      onTap: () {
                        _onConfirmLeaveGroup(context);
                      },
                      child: Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: UIColors.white,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Row(
                          children: [
                            const AppImage.asset(
                              asset: 'ic_logout',
                              width: 24,
                              height: 24,
                            ),
                            const SizedBox(
                              width: 12,
                            ),
                            Text(
                              'Rời nhóm',
                              style: UITextStyle.medium.copyWith(
                                fontSize: 16,
                                color: UIColors.red,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  SizedBox(
                    height: AppSize.instance.safeBottomBarHeight,
                  ),
                ],
              );
            },
          ),
        );
      },
    );
  }

  _onConfirmLeaveGroup(BuildContext context) {
    DialogProvider.instance.showConfirmDialog(
      context,
      message: "Bạn có muốn rời khỏi nhóm?",
      negativeTitle: 'Quay lại',
      positiveTitle: 'Rời nhóm',
      positiveCallback: () {
        _onLeaveGroup(context);
      },
    );
  }

  void _onLeaveGroup(BuildContext context) {
    final cubit = context.read<ChatSettingCubit>();
    cubit.leaveChatThread();
  }
}
