import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/features/chat/cubit/chat_contact/chat_contact_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_requested_contact/chat_requested_contact_cubit.dart';
import 'package:flutter_module/features/chat/page/contact_request/items/received_contact_item.dart';
import 'package:flutter_module/models/chat/contact/chat_request_contact_model.dart';

class ListReceivedContactsComponent extends StatelessWidget {
  const ListReceivedContactsComponent({
    super.key,
    required this.data,
  });

  final List<ChatRequestContactModel> data;

  @override
  Widget build(BuildContext context) {
    return LoadMoreWidget(
      onRefresh: () {
        final cubit = context.read<ChatRequestedContactCubit>();
        return cubit.fetchInvitationAndSendingRequest();
      },
      child: ListView.builder(
        physics: AppConstants.physics,
        itemCount: data.length,
        itemBuilder: (context, index) {
          final item = data[index];
          return ReceivedContactItem(
            item: item,
            index: index,
            onAcceptContact: () {
              _onAcceptContact(context, invitationID: item.uid ?? '');
            },
            onRejectContact: () {
              _onRejectContact(context, senderID: item.senderID ?? '');
            },
          );
        },
      ),
    );
  }

  _onAcceptContact(
    BuildContext context, {
    required String invitationID,
  }) async {
    final cubit = context.read<ChatRequestedContactCubit>();
    final isSuccess = await cubit.acceptRequestContact(invitationID: invitationID);
    if (context.mounted) {
      if (isSuccess) {
        final contactsCubit = context.read<ChatContactCubit>();
        contactsCubit.fetchContacts();
      } else {
        ToastProvider.instance.show(
          context: context,
          message: "Lời mời đã hết hiệu lực hoặc xảy ra lỗi, vui lòng thử lại",
          backgroundColor: UIColors.red,
          duration: const Duration(seconds: 2),
        );
      }
    }
  }

  _onRejectContact(
    BuildContext context, {
    required String senderID,
  }) async {
    final cubit = context.read<ChatRequestedContactCubit>();
    final isSuccess = await cubit.rejectRequestContact(senderID: senderID);
    if (!isSuccess && context.mounted) {
      ToastProvider.instance.show(
        context: context,
        message: "Lời mời đã hết hiệu lực hoặc xảy ra lỗi, vui lòng thử lại",
        backgroundColor: UIColors.red,
        duration: const Duration(seconds: 2),
      );
    }
  }
}
