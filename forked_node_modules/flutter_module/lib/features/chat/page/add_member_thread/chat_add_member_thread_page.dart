import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/empty_widget.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/chat/cubit/chat_add_contact/chat_add_contact_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_add_member/chat_add_member_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_contact/chat_contact_cubit.dart';
import 'package:flutter_module/features/chat/page/create_thread_group/items/thread_contact_item.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/widgets/mtrade_text_field.dart';
import 'package:flutter_module/models/chat/contact/chat_contact_model.dart';
import 'package:flutter_module/models/chat/thread/chat_thread_model.dart';

@RoutePage()
class ChatAddMemberThreadPage extends StatefulWidget implements AutoRouteWrapper {
  const ChatAddMemberThreadPage({
    super.key,
    required this.thread,
  });

  final ChatThreadModel thread;

  @override
  State<ChatAddMemberThreadPage> createState() => _ChatAddMemberThreadPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (context) => ChatAddMemberCubit(),
      child: this,
    );
  }
}

class _ChatAddMemberThreadPageState extends State<ChatAddMemberThreadPage> {
  String textSearch = '';
  final int limitMember = AppData.instance.appInfo.getLimitMemberGroupChat();
  final bool isLimitMember = AppData.instance.appInfo.getLimitMemberGroupChat() > 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: MFastSimpleAppBar(
        title: 'Thêm thành viên',
        context: context,
      ),
      body: BlocBuilder<ChatContactCubit, ChatContactState>(
        builder: (context, state) {
          final dataSearch = state.contacts.where(
            (element) => element.fullName?.toLowerCase().contains(textSearch.toLowerCase()) ?? false,
          );
          return BlocConsumer<ChatAddMemberCubit, ChatAddMemberState>(
            listener: (context, state) {
              if (state.status.isSuccess) {
                ToastProvider.instance.display('Thêm thành viên thành công');
                context.popRoute();
              }
              if (state.status.isFailure) {
                ToastProvider.instance.display('Thêm thành viên thất bại');
              }
            },
            builder: (context, state) {
              final bool isValidLimit = !isLimitMember ||
                  (isLimitMember && (state.usersSelected.length + (widget.thread.users?.length ?? 0)) <= limitMember);
              final enabledButton = state.usersSelected.isNotEmpty && !state.status.isLoading && isValidLimit;

              return Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: Stack(
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const SizedBox(
                          height: 16,
                        ),
                        MTradeSearchTextField(
                          // controller: controller,
                          borderRadius: BorderRadius.circular(8),
                          hintText: 'Tìm kiếm liên hệ',
                          // showClearButton: showClearButton,
                          onChanged: (p0) {
                            setState(() {
                              textSearch = p0;
                            });
                          },
                        ),
                        const SizedBox(
                          height: 20,
                        ),
                        Text(
                          textSearch.isNotEmpty == true ? 'Tìm kiếm' : "Gợi ý",
                          style: UITextStyle.regular.copyWith(
                            color: UIColors.grayBackground,
                          ),
                        ),
                        const SizedBox(
                          height: 8,
                        ),
                        Container(
                          decoration: BoxDecoration(color: UIColors.white, borderRadius: BorderRadius.circular(8)),
                          child: dataSearch.isEmpty
                              ? const Padding(
                                  padding: EdgeInsets.all(12),
                                  child: EmptyWidget(
                                    message: 'Không tìm thấy liên hệ',
                                  ),
                                )
                              : ListView(
                                  padding: const EdgeInsets.all(12),
                                  shrinkWrap: true,
                                  children: [
                                    ...dataSearch.map((item) {
                                      final isExistInGroup =
                                          widget.thread.users?.indexWhere((element) => element.uid == item.uid) != -1;
                                      final isSelected =
                                          state.usersSelected.indexWhere((element) => element.uid == item.uid) != -1;

                                      return ThreadContactItem(
                                        item: item,
                                        isSelected: isExistInGroup || isSelected,
                                        isDisabled: isExistInGroup,
                                        onTap: () {
                                          if (isExistInGroup) return;
                                          _onChangeUserSelected(context, user: item);
                                        },
                                      );
                                    }),
                                  ],
                                ),
                        ),
                      ],
                    ),
                    Positioned(
                      bottom: 24 + AppSize.instance.safeBottomBarHeight,
                      left: 0,
                      right: 0,
                      child: Column(
                        children: [
                          CollectDataView(
                            errorMsg: isValidLimit ? "" : "Chỉ có thể thêm tối đa ${limitMember} thành viên vào nhóm",
                            child: const SizedBox(),
                          ),
                          PrimaryButton(
                            enabled: enabledButton,
                            width: double.infinity,
                            onPressed: () {
                              _onAddMember(context);
                            },
                            title: 'Thêm vào nhóm',
                            height: 48,
                          ),
                        ],
                      ),
                    ),
                    if (state.status.isLoading)
                      const Positioned(
                        child: Center(
                          child: LoadingWidget.withoutText(),
                        ),
                      ),
                  ],
                ),
              );
            },
          );
        },
      ),
    );
  }

  _onChangeUserSelected(BuildContext context, {required ChatContactModel user}) {
    final cubit = context.read<ChatAddMemberCubit>();
    cubit.changeUserSelected(user);
  }

  _onAddMember(BuildContext context) {
    final cubit = context.read<ChatAddMemberCubit>();

    DialogProvider.instance.showConfirmDialog(
      context,
      message: "Lưu ý!!! Các thành viên mới sẽ thấy được lịch sử cuộc trò chuyện",
      title: "Thông báo!",
      positiveTitle: "Thêm thành viên",
      negativeTitle: "Trở lại",
      positiveCallback: () {
        cubit.addMember(widget.thread.uid ?? '');
      },
    );
  }
}
