import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/image_gallery_util.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/chat/page/preview_image/components/components/header_preview_component.dart';
import 'package:flutter_module/features/chat/page/preview_video/components/video_component.dart';
import 'package:flutter_module/features/webview/cubit/download_images/download_images_cubit.dart';
import 'package:video_player/video_player.dart';

@RoutePage()
class ChatPreviewVideoPage extends StatefulWidget implements AutoRouteWrapper {
  const ChatPreviewVideoPage({
    super.key,
    this.videos,
    this.initialIndex = 0,
    this.onForwardMessage,
    this.onDeleteMessage,
  });

  final List<String>? videos;
  final int initialIndex;
  final Function(int index)? onForwardMessage;
  final Function(int index)? onDeleteMessage;

  @override
  State<ChatPreviewVideoPage> createState() => _ChatPreviewVideoPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (_) => DownloadImagesCubit(),
      child: this,
    );
  }
}

class _ChatPreviewVideoPageState extends State<ChatPreviewVideoPage> {
  int currentIndex = 0;
  late VideoPlayerController videoController;
  late PageController pageController;

  @override
  void initState() {
    super.initState();
    currentIndex = widget.initialIndex;
    pageController = PageController(initialPage: currentIndex);
    videoController = VideoPlayerController.networkUrl(
      Uri.parse(
        widget.videos![currentIndex],
      ),
    );
    videoController.addListener(() {
      setState(() {});
    });
    videoController.initialize();
    videoController.play();
  }

  @override
  void dispose() {
    videoController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: UIColors.blurBackground,
      body: Stack(
        children: [
          PageView(
            controller: pageController,
            onPageChanged: (value) {
              setState(() {
                currentIndex = value;
              });
              videoController = VideoPlayerController.networkUrl(
                Uri.parse(
                  widget.videos![currentIndex],
                ),
              );
            },
            children: List.generate(widget.videos?.length ?? 0, (index) {
              return VideoComponent(
                url: widget.videos![index],
                isActive: currentIndex == index,
              );
            }),
          ),
          if (!videoController.value.isInitialized)
            const Center(
              child: LoadingWidget.withoutText(),
            ),
          Positioned(
            top: 0,
            left: 0,
            right: 0,
            child: HeaderPreviewComponent(
              current: currentIndex + 1,
              length: widget.videos?.length,
              onDownload: () {
                _onSaveVideo(context, [widget.videos![currentIndex]]);
              },
              onShare: () {
                _onShareVideo(context, [widget.videos![currentIndex]]);
              },
              onForward: () {
                widget.onForwardMessage?.call(currentIndex);
              },
              onDelete: () {
                widget.onDeleteMessage?.call(currentIndex);
              },
            ),
          ),
          BlocBuilder<DownloadImagesCubit, DownloadImagesState>(
            builder: (context, state) {
              return Visibility(
                visible: state.shareStatus.isLoading,
                child: const LoadingWidget.withoutText(),
              );
            },
          ),
        ],
      ),
    );
  }

  _onSaveVideo(BuildContext context, List<String> videos) {
    final cubit = context.read<DownloadImagesCubit>();
    cubit.download(
      urls: videos,
      ext: 'mp4',
      fileName: 'video_${DateTime.now().microsecondsSinceEpoch}',
      onSuccess: (paths) {
        ImageGalleryUtil.instance.saveLocalVideo(
          paths: paths,
          context: context,
          onSuccess: () {
            ToastProvider.instance.show(
              context: context,
              message: "Lưu video thành công",
              backgroundColor: UIColors.green,
              duration: const Duration(seconds: 2),
            );
          },
          onFailure: () {
            ToastProvider.instance.show(
              context: context,
              message: "Lưu video thất bại",
              backgroundColor: UIColors.red,
              duration: const Duration(seconds: 2),
            );
          },
        );
      },
    );
  }

  _onShareVideo(BuildContext context, List<String> videos) {
    final cubit = context.read<DownloadImagesCubit>();
    cubit.share(
      urls: videos,
      ext: 'mp4',
      fileName: 'video_${DateTime.now().microsecondsSinceEpoch}',
    );
  }
}
