import 'package:card_swiper/card_swiper.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/features/home/pages/home/components/banner_component.dart';
import 'package:flutter_module/features/home/pages/home/components/main_group_component.dart';
import 'package:flutter_module/features/home/pages/home/items/home_information_item.dart';
import 'package:flutter_module/features/home/pages/home/components/home_search_bar_component.dart';

import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/size.dart';

class HomeSliverHeader extends StatefulWidget {
  const HomeSliverHeader({
    super.key,
    required this.minHeight,
    required this.maxHeight,
    required this.onMenuTap,
    this.onSizeExpanded,
    required this.swiperController,
  });

  final double minHeight;
  final double maxHeight;

  /// true: Expanded
  /// false: Collapsed
  final Function(bool)? onSizeExpanded;
  final Function(String, int) onMenuTap;
  final SwiperController swiperController;

  @override
  State<HomeSliverHeader> createState() => _HomeSliverHeaderState();
}

class _HomeSliverHeaderState extends State<HomeSliverHeader> {
  var isExpandedAppBar = true;
  var notch = AppSize.instance.safeTop;

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constrains) {
        final ratio = calculateExpandRatio(constrains);
        final animation = AlwaysStoppedAnimation<double>(ratio);
        final reverseAnimation = AlwaysStoppedAnimation<double>(1 - ratio);
        return Stack(
          fit: StackFit.expand,
          children: [
            Positioned(
              top: 0,
              left: 0,
              right: 0,
              bottom: tween(0, 115, animation) + tween(0, 100, reverseAnimation),
              child: Container(
                decoration:  const BoxDecoration(
                  borderRadius:BorderRadius.only(
                    bottomLeft: Radius.circular(15),
                    bottomRight: Radius.circular(15),
                  ),
                  gradient: LinearGradient(
                    begin: Alignment(0.5, -0.5),
                    end: Alignment(-0.5, 0.5),
                    colors: UIColors.primaryGradient,
                  ),
                ),
              ),
            ),
            Positioned(
              top: notch + 10,
              left: 16,
              right: tween(16, 17, reverseAnimation),
              child: HomeSearchBarComponent(
                width: tween(0.72, 1.0, animation),
              ),
            ),
            Positioned(
              left: 16,
              right: 16,
              top: tween(notch, notch + 66, animation),
              child: IgnorePointer(
                ignoring: ratio == 0,
                child: Opacity(
                  opacity: ratio,
                  child: const HomeInformationItem(),
                ),
              ),
            ),
            // Positioned(
            //   right: 16,
            //   top: tween(notch + 10, notch + 10 + 56, animation),
            //   child: OptionButtonsItem(
            //     width: tween(6, 16, animation),
            //     opacity: tween(0, 0.2, animation),
            //   ),
            // ),
            Positioned(
              left: 0,
              right: 0,
              bottom: 0,
              child: IgnorePointer(
                ignoring: ratio == 1,
                child: Opacity(
                  opacity: tween(0, 1, reverseAnimation),
                  child: HomeMainGroupComponent(
                    onTapMenu: widget.onMenuTap,
                  ),
                ),
              ),
            ),
            // Positioned(
            //   left: 16,
            //   right: 16,
            //   top: tween(notch + 10, notch + 122, animation),
            //   child: IgnorePointer(
            //     ignoring: ratio == 0,
            //     child: Opacity(
            //       opacity: ratio,
            //       child: const AccumulatedMoneyItem(),
            //     ),
            //   ),
            // ),
            Positioned(
              left: 0,
              right: 0,
              top: tween(notch + 10, notch + 132, animation),
              child: IgnorePointer(
                ignoring: ratio == 0,
                child: Opacity(
                  opacity: ratio,
                  child:  HomeBannerComponent(controller: widget.swiperController,),
                ),
              ),
            ),
          ],
        );
      },
    );
  }

  double calculateExpandRatio(BoxConstraints constraints) {
    var offset = (constraints.maxHeight - widget.minHeight);
    var distance = (widget.maxHeight - widget.minHeight);
    var ratio = offset / distance;

    if (ratio > 1.0) ratio = 1.0;
    if (ratio < 0.0) ratio = 0.0;

    if (ratio == 1.0 && !isExpandedAppBar) {
      isExpandedAppBar = true;
      widget.onSizeExpanded?.call(isExpandedAppBar);
    }
    if (ratio == 0.0 && isExpandedAppBar) {
      isExpandedAppBar = false;
      widget.onSizeExpanded?.call(isExpandedAppBar);
    }
    return ratio;
  }

  double tween(double begin, double end, Animation<double> animation) {
    return Tween<double>(begin: begin, end: end).evaluate(animation);
  }
}
