import 'package:flutter/material.dart';
import 'package:flutter_module/common/extension/list_extension.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/widgets/measure_size_widget.dart';
import '../../../../../models/home_data/home_item_model.dart';
import '../../../../../models/home_data/sup_group_model.dart';
import '../items/home_category_item.dart';
import '../items/home_product_item.dart';

class HomeProductCategoryWidget extends StatefulWidget {
  const HomeProductCategoryWidget({
    super.key,
    this.selectedId,
    this.categories = const [],
    this.items = const [],
    this.onProductFilterChanged,
    required this.onProductItemTap,
    required this.alias,
    this.enabledAutoSizeChanged = true,
  });

  final String? selectedId;
  final List<SupGroupModel> categories;
  final List<HomeItemModel> items;
  final Function(String id)? onProductFilterChanged;
  final Function(HomeItemModel) onProductItemTap;
  final String alias;
  final bool enabledAutoSizeChanged;

  @override
  State<HomeProductCategoryWidget> createState() => _HomeProductCategoryWidgetState();
}

class _HomeProductCategoryWidgetState extends State<HomeProductCategoryWidget> {
  double height = 0.0;
  bool enabledAutoSizeChanged = true;

  @override
  void didUpdateWidget(covariant HomeProductCategoryWidget oldWidget) {
    if (oldWidget.enabledAutoSizeChanged != widget.enabledAutoSizeChanged) {
      enabledAutoSizeChanged = widget.enabledAutoSizeChanged;
    }
    super.didUpdateWidget(oldWidget);
  }

  @override
  Widget build(BuildContext context) {
    final data = widget.items.reshape(column: 5);
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Visibility(
          visible: widget.categories.isNotEmpty,
          child: SizedBox(
            height: 50,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: widget.categories.length,
              itemBuilder: (context, index) {
                final selected = widget.categories[index].id == widget.selectedId;
                return HomeCategoryItem(
                  title: widget.categories[index].name ?? "",
                  selected: selected,
                  onTap: () {
                    final id = selected ? "" : widget.categories[index].id ?? "";
                    widget.onProductFilterChanged?.call(id);
                  },
                );
              },
            ),
          ),
        ),
        Flexible(
          child: MeasureSizeWidget(
            onSizeChanged: (size) {
              if (enabledAutoSizeChanged && context.mounted) {
                setState(() {
                  height = size.height;
                });
              }
            },
            child: Container(
              color: UIColors.white,
              alignment: Alignment.topLeft,
              constraints: BoxConstraints(
                minHeight: height,
              ),
              child: ListView.builder(
                shrinkWrap: true,
                padding: EdgeInsets.zero,
                physics: const NeverScrollableScrollPhysics(),
                itemBuilder: (context, index) {
                  final items = data[index];
                  return IntrinsicHeight(
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: List.generate(
                        items.length,
                        (index) {
                          final item = items[index];
                          return HomeProductItem(
                            alias: widget.alias,
                            item: item,
                            onTap: () {
                              widget.onProductItemTap(item);
                            },
                          );
                        },
                      ),
                    ),
                  );
                },
                itemCount: data.length,
              ),
            ),
          ),
        ),
      ],
    );
  }
}
