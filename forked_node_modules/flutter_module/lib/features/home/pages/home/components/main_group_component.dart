import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/debounce_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/features/home/cubit/home/home_page_cubit.dart';
import 'package:flutter_module/features/home/cubit/home_list_position/home_list_position_cubit.dart';
import 'package:flutter_module/features/home/cubit/selected_item/selected_item_cubit.dart';
import 'package:scroll_to_index/scroll_to_index.dart';

import '../../../../../common/size.dart';
import '../../../../../common/widgets/images.dart';

class HomeMainGroupComponent extends StatefulWidget {
  const HomeMainGroupComponent({
    super.key,
    required this.onTapMenu,
  });

  final Function(String alias, int index) onTapMenu;

  @override
  State<HomeMainGroupComponent> createState() => _HomeMainGroupComponentState();
}

class _HomeMainGroupComponentState extends State<HomeMainGroupComponent> {
  late DebounceUtil debounce;
  late AutoScrollController scrollController;

  @override
  void initState() {
    super.initState();
    debounce = DebounceUtil(milliseconds: 100);
    scrollController = AutoScrollController(
      axis: Axis.vertical,
      viewportBoundaryGetter: () {
        return Rect.fromLTRB(0, 0, 0, AppSize.instance.keyboardHeight);
      },
    );
  }

  @override
  void dispose() {
    scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final groups = context.select((HomePageCubit cubit) => cubit.state.group);
    return BlocProvider(
      create: (_) => SelectedItemCubit(),
      child: BlocListener<HomeListPositionCubit, HomeListPositionState>(
        listenWhen: (pre, cur) {
          return pre.index != cur.index;
        },
        listener: (context, state) {
          final item = groups.valueAt(state.index);
          if (item == null) {
            return;
          }
          context.read<SelectedItemCubit>().selectItem(groups[state.index].alias ?? "");
          debounce.run(() {
            scrollController.scrollToIndex(
              state.index,
              preferPosition: AutoScrollPosition.middle,
            );
          });
        },
        child: BlocBuilder<SelectedItemCubit, SelectedItemState>(
          builder: (context, state) {
            if (state.id.isEmpty && groups.isNotEmpty) {
              context.read<SelectedItemCubit>().selectItem(groups.first.alias ?? "");
            }

            ///
            return Container(
              height: 90,
              padding: const EdgeInsets.only(bottom: 8),
              decoration: const BoxDecoration(
                color: UIColors.background,
              ),
              child: ListView.separated(
                controller: scrollController,
                scrollDirection: Axis.horizontal,
                padding: const EdgeInsets.symmetric(horizontal: 8),
                itemBuilder: (context, index) {
                  final item = groups[index];
                  final enable = item.alias == state.id;
                  return SplashButton(
                    onTap: () {
                      widget.onTapMenu(item.alias ?? "", index);
                    },
                    child: AutoScrollTag(
                      key: ValueKey(index),
                      index: index,
                      controller: scrollController,
                      child: Container(
                        width: 80,
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          border: _border(enable),
                          borderRadius: BorderRadius.circular(6),
                        ),
                        child: Column(
                          children: [
                            AppImage.network(
                              url: item.iconUrl ?? "",
                              height: 24,
                              width: 24,
                              color: _color(enable),
                              fit: BoxFit.contain,
                            ),
                            const SizedBox(
                              height: 4,
                            ),
                            Expanded(
                              child: Center(
                                child: Text(
                                  item.name ?? "",
                                  style: UITextStyle.regular.copyWith(
                                    fontSize: 13,
                                    height: 1.2,
                                    color: _color(enable),
                                  ),
                                  textAlign: TextAlign.center,
                                  maxLines: 2,
                                  overflow: TextOverflow.ellipsis,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                },
                separatorBuilder: (_, __) => const SizedBox(
                  width: 8,
                ),
                itemCount: groups.length,
              ),
            );
          },
        ),
      ),
    );
  }

  Color _color(bool enable) {
    return enable ? UIColors.primaryColor : UIColors.grayText;
  }

  Border? _border(bool enable) {
    return enable ? Border.all(color: _color(enable)) : null;
  }
}
