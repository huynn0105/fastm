import 'dart:async';
import 'dart:ui';

import 'package:auto_route/auto_route.dart';
import 'package:card_swiper/card_swiper.dart';
import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/enum/menu_type.dart';
import 'package:flutter_module/common/enum/tracking_event_type.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/deeplink_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/keep_alive_widget.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/app_cubit.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/features/home/pages/home/components/product_component.dart';
import 'package:flutter_module/features/home/pages/home/components/competition_program_component.dart';
import 'package:flutter_module/features/home/pages/home/components/news_component.dart';
import 'package:flutter_module/features/home/pages/home/components/tip_component.dart';
import 'package:flutter_module/features/home/pages/home/widgets/in_app_tour_target.dart';
import 'package:flutter_module/features/notification/cubit/push_notification/push_notification_cubit.dart';
import 'package:flutter_module/general_config.dart';
import 'package:flutter_module/models/home_data/home_data_model.dart';
import 'package:flutter_module/models/home_data/home_item_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:flutter_module/services/local/local_data_helper.dart';
import 'package:scroll_to_index/scroll_to_index.dart';
import 'package:tutorial_coach_mark/tutorial_coach_mark.dart';

import '../../../../common/colors.dart';
import '../../../../common/utils/debounce_util.dart';
import '../../cubit/home/home_page_cubit.dart';
import '../../cubit/home_list_position/home_list_position_cubit.dart';
import 'components/finance_summary_component.dart';
import 'widgets/home_sliver_appbar.dart';

@RoutePage()
class HomePage extends StatefulWidget implements AutoRouteWrapper {
  const HomePage({super.key});

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => HomePageCubit(),
        ),
        BlocProvider(
          create: (_) => HomeListPositionCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final DebounceUtil _debounce = DebounceUtil(milliseconds: 250);
  late final StreamSubscription _homeSub;
  var showMenuToolbar = false;
  var currentOffset = 0.0;

  final double notch = AppSize.instance.safeTop;
  final double minHeight = 170.0;
  final double maxHeight = 350.0;

  double get distance => maxHeight - minHeight;

  late final AutoScrollController scrollController;
  late final SwiperController swiperController;

  late TutorialCoachMark tutorialCoachMark;

  MenuType currentStep = MenuType.finance;
  bool _isShowUserGuide = true;

  void initAddSiteInAppTour() {
    tutorialCoachMark = TutorialCoachMark(
      targets: addSiteTargetsPage(
        bank: bank,
        finance: finance,
        insurance: insurance,
        merchandise: merchandise,
        onTap: () {
          _onNextUserGuide(isContentTap: true);
        },
      ),
      paddingFocus: 0,
      colorShadow: const Color(0xe50a0a28),
      pulseEnable: false,
      imageFilter: ImageFilter.blur(sigmaX: 8, sigmaY: 8),
      hideSkip: true,
      onClickTarget: (target) {
        _onNextUserGuide();
      },
      onClickOverlay: (target) {
        _onNextUserGuide();
      },
      unFocusAnimationDuration: const Duration(milliseconds: 500),
      focusAnimationDuration: Duration.zero,
    );
  }

  void _onNextStep() {
    final next = MenuType.values.valueAt(currentStep.index + 1);
    if (next != MenuType.shopping) {
      currentStep = next!;
    } else {
      currentStep = MenuType.tip;
    }
  }

  void _onNextUserGuide({bool isContentTap = false}) {
    if (tutorialCoachMark.isShowing) {
      _onNextStep();
      if (currentStep == MenuType.tip) {
        scrollController
            .animateTo(-distance, duration: const Duration(milliseconds: 400), curve: Curves.linear)
            .then((_) {
          swiperController.startAutoplay();
          if (isContentTap) {
            tutorialCoachMark.finish();
          }
        });
      } else {
        _debounce.run(() {
          scrollController
              .scrollToIndex(
            currentStep.index,
            preferPosition: AutoScrollPosition.begin,
            duration: const Duration(milliseconds: 100),
          )
              .then((_) {
            if (isContentTap) {
              tutorialCoachMark.next();
            }
          });
        });
      }
      LocalDataHelper.instance.setIsUserGuideHome();
    }
  }

  GlobalKey finance = GlobalKey();
  GlobalKey merchandise = GlobalKey();
  GlobalKey bank = GlobalKey();
  GlobalKey insurance = GlobalKey();

  @override
  void initState() {
    super.initState();
    swiperController = SwiperController();
    scrollController = AutoScrollController(
      axis: Axis.vertical,
      viewportBoundaryGetter: () {
        return const Rect.fromLTRB(0, 0, 0, 0);
      },
    );
    _homeSub = eventBus.on<UserGuideEventBus>().listen(_onEventBusListen);
    initAddSiteInAppTour();
    scrollController.addListener(onListenScroll);
    _onInit();
  }

  @override
  void dispose() {
    scrollController.removeListener(onListenScroll);
    scrollController.dispose();
    _debounce.cancel();
    _homeSub.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<AuthCubit, AuthState>(
          listenWhen: (pre, cur) {
            return pre.hasLoggedIn != cur.hasLoggedIn;
          },
          listener: (context, state) {
            context.read<HomePageCubit>().clearData();
            context.read<HomePageCubit>().fetchData(hasLoggedIn: state.hasLoggedIn);
            if (state.hasLoggedIn) {
              getItInstance.get<PushNotificationCubit>().refreshUnreadCount();
            }
          },
        ),
        BlocListener<HomePageCubit, HomePageState>(
          listenWhen: (pre, cur) {
            return pre.group != cur.group;
          },
          listener: (context, state) {
            final cubit = context.read<HomeListPositionCubit>();
            cubit.initPosition(state.group);
          },
        ),
      ],
      child: Scaffold(
        backgroundColor: UIColors.background,
        body: SafeArea(
          top: false,
          child: NotificationListener<ScrollEndNotification>(
            onNotification: (notification) {
              onListenAppBarSnap(notification);
              return true;
            },
            child: BlocConsumer<HomePageCubit, HomePageState>(
              listener: (context, state) {
                _checkShowUserGuide(context, state.status);
              },
              builder: (context, state) {
                final layout = state.layout;
                final news = state.news;
                final tips = state.tips;
                final contests = state.contests;

                ///
                return Stack(
                  children: [
                    CustomScrollView(
                      controller: scrollController,
                      physics: AppConstants.physics,
                      slivers: [
                        SliverAppBar(
                          pinned: true,
                          stretch: true,
                          elevation: 0,
                          collapsedHeight: minHeight,
                          expandedHeight: maxHeight,
                          backgroundColor: UIColors.background,
                          flexibleSpace: HomeSliverHeader(
                            minHeight: minHeight + notch,
                            maxHeight: maxHeight + notch,
                            swiperController: swiperController,
                            onMenuTap: (alias, index) {
                              scrollController.scrollToIndex(
                                index,
                                preferPosition: AutoScrollPosition.begin,
                              );
                            },
                          ),
                        ),
                        if (layout.isNotEmpty) ...[
                          // "tip"
                          SliverToBoxAdapter(
                            child: AutoScrollTag(
                              index: 0,
                              key: const ValueKey(0),
                              controller: scrollController,
                              child: KeepAliveWidget(
                                child: TipComponent(
                                  alias: state.group.valueAt(0)?.alias ?? "",
                                  data: tips,
                                  onSizeChanged: (alias, size) => onSizeChanged(
                                    context: context,
                                    alias: alias,
                                    size: size,
                                  ),
                                ),
                              ),
                            ),
                          ),
                          SliverList(
                            delegate: SliverChildBuilderDelegate(
                              (context, index) {
                                final item = layout[index];
                                final autoScrollIndex = index + 1;
                                final alias = MenuType.values.firstWhereOrNull((e) => e.label == item.catAlias);

                                ///
                                Widget? child;
                                Widget? childHeader;
                                if (alias == MenuType.finance) {
                                  childHeader = FinanceSummaryComponent(
                                    data: state.dpd?.dataNew?.finance?.items ?? [],
                                  );
                                }

                                switch (alias) {
                                  case MenuType.contest:
                                    child = CompetitionProgramComponent(
                                      alias: item.catAlias ?? "",
                                      data: contests,
                                      onSizeChanged: (alias, size) => onSizeChanged(
                                        context: context,
                                        alias: alias,
                                        size: size,
                                      ),
                                    );
                                    break;
                                  case MenuType.post:
                                    child = NewsComponent(
                                      alias: item.catAlias ?? "",
                                      data: news,
                                      onSizeChanged: (alias, size) => onSizeChanged(
                                        context: context,
                                        alias: alias,
                                        size: size,
                                      ),
                                    );
                                    break;
                                  default:
                                    child = ProductComponent(
                                      data: item,
                                      child: childHeader,
                                      onSizeChanged: (alias, size) => onSizeChanged(
                                        context: context,
                                        alias: alias,
                                        size: size,
                                      ),
                                      onProductItemTap: (data) => onProductItemTap(
                                        context: context,
                                        alias: alias,
                                        data: data,
                                      ),
                                      onHeaderSubtitleTap: (data) => onAllPress(
                                        context: context,
                                        data: data,
                                      ),
                                    );
                                    break;
                                }

                                Key? key;
                                if (alias == MenuType.finance) {
                                  key = finance;
                                }
                                if (alias == MenuType.bank) {
                                  key = bank;
                                }
                                if (alias == MenuType.merchandise) {
                                  key = merchandise;
                                }
                                if (alias == MenuType.insurance) {
                                  key = insurance;
                                }

                                ///
                                return AutoScrollTag(
                                  index: autoScrollIndex,
                                  key: ValueKey(autoScrollIndex),
                                  controller: scrollController,
                                  child: KeepAliveWidget(
                                    key: key,
                                    child: child,
                                  ),
                                );
                              },
                              childCount: state.layout.length,
                            ),
                          ),
                        ],
                      ],
                    ),
                    Visibility(
                      visible: state.status.isLoading,
                      child: const LoadingWidget.dark(),
                    ),
                  ],
                );
              },
            ),
          ),
        ),
      ),
    );
  }

  void onListenAppBarSnap(notification) async {
    final offset = scrollController.offset;

    if (currentOffset.toStringAsFixed(2) == offset.toStringAsFixed(2)) {
      return;
    }

    currentOffset = offset;

    /// Snap
    if (offset > 0 && offset < distance) {
      final double snapOffset = (offset / distance) > 0.5 ? distance : 0.0;
      Future.microtask(
        () => scrollController.animateTo(
          snapOffset,
          duration: const Duration(milliseconds: 250),
          curve: Curves.easeIn,
        ),
      );
    }
  }

  void onListenScroll() {
    var offset = scrollController.offset;
    var maxOffset = scrollController.position.maxScrollExtent;
    if (offset < 0) {
      offset = 0;
    }
    context.read<HomeListPositionCubit>().checkPosition(offset, maxOffset, distance);
  }

  void onSizeChanged({
    required BuildContext context,
    required String alias,
    required Size size,
  }) {
    context.read<HomeListPositionCubit>().addPosition(alias, size.height.toStringAsFixed(1));
  }

  ///
  bool isDeepLink(String? url) {
    return TextUtils.isDeeplink(url);
  }

  /// Tap
  void onProductItemTap({
    required BuildContext context,
    required MenuType? alias,
    required HomeItemModel data,
  }) {
    final tagName = data.tagName ?? "";
    final url = data.url ?? "";
    final urlTitle = data.urlTitle ?? "";

    ///
    if (tagName == "UNG_TUYEN_NGHIEP_VU") {
      getItInstance.get<AppCubit>().trackingEvent(event: TrackingEventType.viewApplyJob);
    }

    getItInstance.get<AppCubit>().trackingEvent(event: null, eventName: 'press_$alias', params: {'tag_name': tagName});

    ///
    if (TextUtils.isDeeplink(url)) {
      DeepLinkUtil.open(url, title: urlTitle);
      return;
    }

    final sectionShowNotificationButton = [
      MenuType.finance,
      MenuType.bank,
      MenuType.insurance,
    ];

    var isShowNotificationButton = sectionShowNotificationButton.contains(alias);
    var indexTabNotification = 0;
    switch (alias) {
      case MenuType.finance:
        indexTabNotification = 2;
        break;
      case MenuType.bank:
        indexTabNotification = 3;
        break;
      case MenuType.insurance:
        indexTabNotification = 4;
        break;
      default:
        break;
    }

    context.router.push(WebViewRoute(
      url: url,
      title: urlTitle,
      isShowNotificationButton: isShowNotificationButton,
      indexTabNotification: indexTabNotification,
    ));
  }

  void onAllPress({
    required BuildContext context,
    required HomeDataModel data,
  }) {
    final actionPressAll = data.actionPressAll ?? "";
    final urlAllItemPress = data.urlAllItemPress ?? "";

    ///
    if (actionPressAll == "OPEN_BOTTOM_SHEET") {
      onOpenBottomSheet(context: context, data: data);
      return;
    }
    if (urlAllItemPress.isNotEmpty) {
      context.router.push(WebViewRoute(
        url: urlAllItemPress,
        title: 'Bảo hiểm',
      ));
      return;
    }
  }

  onOpenBottomSheet({
    required BuildContext context,
    required HomeDataModel data,
  }) {
    BottomSheetProvider.instance.show(
      context,
      title: data.toolsTitle ?? "",
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          const SizedBox(
            height: 16,
          ),
          Center(
            child: Text(
              data.catDescription ?? "",
              style: UITextStyle.regular.copyWith(
                color: UIColors.grayText,
              ),
            ),
          ),
          const SizedBox(
            height: 16,
          ),
          Flexible(
            child: Wrap(
              spacing: 16,
              runSpacing: 16,
              children: List.generate(
                data.tools!.length,
                (index) {
                  final item = data.tools![index];
                  return AppSplashButton(
                    onTap: () {
                      DeepLinkUtil.open(item.url ?? "", title: item.urlTitle ?? "");
                    },
                    child: SizedBox(
                      width: AppSize.instance.width / 5,
                      child: Column(
                        children: [
                          AppImage.network(
                            url: item.icon ?? "",
                            width: 30,
                            height: 30,
                            fit: BoxFit.contain,
                          ),
                          const SizedBox(
                            height: 5,
                          ),
                          Text(
                            (item.title ?? ""),
                            style: UITextStyle.regular.copyWith(
                              fontSize: 13,
                            ),
                            maxLines: 2,
                            overflow: TextOverflow.ellipsis,
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ),
          const SizedBox(
            height: 32,
          ),
        ],
      ),
    );
  }

  void _onInit() {
    final hasLoggedIn = getItInstance.get<AuthCubit>().state.hasLoggedIn;
    if (hasLoggedIn) {
      getItInstance.get<PushNotificationCubit>().refreshUnreadCount();
    }
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<HomePageCubit>().fetchData(hasLoggedIn: hasLoggedIn);
    });
  }

  void _checkShowUserGuide(BuildContext context, BlocStatus status) {
    if (status == BlocStatus.success &&
        context.read<AuthCubit>().state.hasLoggedIn &&
        LocalDataHelper.instance.getIsUserGuideHome() &&
        _isShowUserGuide &&
        context.topRoute.name == HomeRoute.name) {
      currentStep = MenuType.finance;
      swiperController.move(0, animation: false);
      swiperController.stopAutoplay();
      scrollController.scrollToIndex(MenuType.finance.index, preferPosition: AutoScrollPosition.begin).then((_) {
        tutorialCoachMark.show(context: context);
      });
    }
  }

  void _onEventBusListen(UserGuideEventBus event) {
    if (event is StartUserGuideEventBus) {
      _isShowUserGuide = true;
      _checkShowUserGuide(context, context.read<HomePageCubit>().state.status);
      return;
    }
    if (event is DisableUserGuideEventBus) {
      _isShowUserGuide = false;
      tutorialCoachMark.finish();
      return;
    }
  }
}
