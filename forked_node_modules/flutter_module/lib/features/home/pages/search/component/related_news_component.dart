import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/debounce_util.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/news/cubit/news/news_cubit.dart';
import 'package:flutter_module/features/news/pages/news/children/news_tab/news_tab_page.dart';
import 'package:flutter_module/features/news/pages/news/components/list_news.dart';
import 'package:flutter_module/features/news/pages/news/components/list_selector.dart';

class RelatedNewsComponent extends StatefulWidget {
  const RelatedNewsComponent({
    super.key,
    required this.keyword,
  });

  final String keyword;

  @override
  State<RelatedNewsComponent> createState() => _RelatedNewsComponentState();
}

class _RelatedNewsComponentState extends State<RelatedNewsComponent> {
  var indexSelected = 1;
  var keyword = '';

  final debouncer = DebounceUtil(milliseconds: 250);

  @override
  void initState() {
    super.initState();
    _onKeywordChanged(widget.keyword);
  }

  @override
  void dispose() {
    debouncer.cancel();
    super.dispose();
  }

  @override
  void didUpdateWidget(covariant RelatedNewsComponent oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.keyword != widget.keyword) {
      keyword = widget.keyword;
      WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
        debouncer.run(() {
          _onKeywordChanged(keyword);
        });
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const SizedBox(
            height: 32,
          ),
          Text(
            'Tin tức, kiến thức liên quan',
            style: UITextStyle.medium.copyWith(
              fontSize: 14,
              color: UIColors.grayText,
            ),
          ),
          const SizedBox(
            height: 8,
          ),
          ListSelector(
            data: listMenu,
            indexSelected: indexSelected,
            onTabItem: (_, index) {
              setState(() {
                indexSelected = index;
              });
            },
          ),
          BlocBuilder<NewsCubit, NewsState>(
            builder: (context, newsState) {
              String titleListNew = indexSelected == 0 ? 'Khác' : listMenu[indexSelected].title;

              final hotNews = newsState.news.where((item) => item.isHighlight!).toList();

              final news = indexSelected == 0
                  ? newsState.news
                  : newsState.news.where((item) => item.hashtag?.contains(titleListNew) ?? false).toList();

              if (newsState.status.isLoading) {
                return const LoadingWidget();
              }
              if (newsState.news.isEmpty == true || (news.isEmpty && hotNews.isEmpty)) {
                return Center(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      const SizedBox(
                        height: 24,
                      ),
                      const AppImage.asset(
                        asset: 'ic_null',
                        width: 22,
                        height: 22,
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      Text(
                        'Không có tin tức, kiến thức liên quan',
                        style: UITextStyle.regular.copyWith(fontSize: 14, color: UIColors.grayText),
                      )
                    ],
                  ),
                );
              }
              return Container(
                margin: const EdgeInsets.only(top: 16),
                child: ListNews(
                  title: titleListNew,
                  data: news,
                ),
              );
            },
          )
        ],
      ),
    );
  }

  void _onKeywordChanged(String keyword) {
    final cubit = context.read<NewsCubit>();
    cubit
      ..updateKeywordPayload(keyword)
      ..fetchData();
  }
}
