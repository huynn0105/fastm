import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/utils/deeplink_util.dart';
import 'package:flutter_module/features/home/cubit/home_search/home_search_cubit.dart';
import 'package:flutter_module/features/home/pages/search/component/app_bar_component.dart';
import 'package:flutter_module/features/home/pages/search/component/highlight_product_componet.dart';
import 'package:flutter_module/features/home/pages/search/component/recent_searched_product_component.dart';
import 'package:flutter_module/features/home/pages/search/component/related_news_component.dart';
import 'package:flutter_module/features/home/pages/search/component/searched_product_component.dart';
import 'package:flutter_module/features/news/cubit/news/news_cubit.dart';
import 'package:flutter_module/models/home_data/home_data_model.dart';

@RoutePage()
class HomeSearchPage extends StatelessWidget implements AutoRouteWrapper {
  const HomeSearchPage({
    super.key,
    required this.homeGroups,
  });

  final List<HomeDataModel> homeGroups;

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => HomeSearchCubit(),
        ),
        BlocProvider(
          create: (context) => NewsCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<HomeSearchCubit>();
    return BlocBuilder<HomeSearchCubit, HomeSearchState>(
      builder: (context, state) {
        if (state.status.isInitial) {
          WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
            _onInit(context);
          });
        }

        final hasSearchText = cubit.searchController.text.isNotEmpty;

        final searchedProducts = state.searchedProducts;
        final highlightProducts = state.highlightProducts.take(4).toList();
        final recentSearchedProducts = state.recentSearchedProducts;

        final showSearchedProducts = hasSearchText;
        final showRelatedNews = hasSearchText;
        final showHightlightProducts = !showSearchedProducts && cubit.searchController.text.isEmpty;
        final showRecentSearchedProducts = !showSearchedProducts && cubit.searchController.text.isEmpty;

        ///
        return Scaffold(
          appBar: HomeSearchAppBarComponent(
            context: context,
            searchController: cubit.searchController,
            onSearchChanged: cubit.searchChanged,
          ),
          body: ListView(
            padding: const EdgeInsets.only(bottom: 100),
            children: [
              Visibility(
                visible: showSearchedProducts,
                child: SearchedProductComponent(
                  data: searchedProducts,
                  onTap: (item) {
                    FocusManager.instance.primaryFocus?.unfocus();
                    cubit.saveRecentSearchedProduct(item);
                    DeepLinkUtil.open(item.url ?? '', title: item.urlTitle);
                  },
                ),
              ),
              Visibility(
                visible: showHightlightProducts,
                child: HighlightProductComponent(
                  data: highlightProducts,
                  onTap: (item) {
                    FocusManager.instance.primaryFocus?.unfocus();
                    DeepLinkUtil.open(item.url ?? '', title: item.urlTitle);
                  },
                ),
              ),
              Visibility(
                visible: showRecentSearchedProducts,
                child: RecentSearchedProductComponent(
                  data: recentSearchedProducts,
                  onTap: (item) {
                    FocusManager.instance.primaryFocus?.unfocus();
                    DeepLinkUtil.open(item.url ?? '', title: item.urlTitle);
                  },
                ),
              ),
              ValueListenableBuilder(
                valueListenable: cubit.searchController,
                builder: (context, value, child) {
                  return Visibility(
                    visible: showRelatedNews,
                    child: RelatedNewsComponent(
                      keyword: value.text,
                    ),
                  );
                },
              ),
            ],
          ),
        );
      },
    );
  }

  void _onInit(BuildContext context) {
    final searchCubit = context.read<HomeSearchCubit>();
    searchCubit
      ..initProducts(homeGroups)
      ..fetchData();
  }
}
