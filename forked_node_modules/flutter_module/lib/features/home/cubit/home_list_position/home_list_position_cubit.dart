import 'dart:async';

import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/utils/log_util.dart';

import '../../../../models/home_data/main_group_model.dart';

part 'home_list_position_state.dart';

class HomeListPositionCubit extends Cubit<HomeListPositionState> {
  HomeListPositionCubit() : super(const HomeListPositionState());

  initPosition(List<MainGroupModel> groupData) {
    final data = groupData.map((e) {
      return PositionMainGroupModel(alias: e.alias ?? "");
    }).toList();

    ///
    emit(state.copyWith(
      data: data,
    ));
  }

  addPosition(String alias, String size) {
    final list = List<PositionMainGroupModel>.from(state.data);
    final sizeH = double.parse(size);
    final index = list.indexWhere((e) => e.alias == alias);
    list[index].sizeH = sizeH;

    ///
    _updateAllPositions(list);
  }

  _updateAllPositions(List<PositionMainGroupModel> list) {
    for (int i = 0; i < list.length; i++) {
      final cur = list[i];
      final pre = list.valueAt(i - 1);
      cur.startPosition = (pre?.startPosition ?? 0) + (pre?.sizeH ?? 0);
    }

    ///
    emit(state.copyWith(
      data: list,
    ));
  }

  checkPosition(double offset, double maxOffset, double distance) {
    if (offset >= maxOffset - distance) {
      emit(state.copyWith(
        index: state.data.length - 1,
      ));
      return;
    }

    final index = state.data.indexWhere((e) {
      return offset < (e.startPosition + e.sizeH) + distance - AppConstants.homeSpaceDistance;
    });

    ///
    emit(state.copyWith(
      index: index,
    ));
  }
}
