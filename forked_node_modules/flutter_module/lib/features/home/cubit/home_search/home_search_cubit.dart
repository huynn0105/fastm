import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/utils/vietnamese_util.dart';
import 'package:flutter_module/features/home/repository/home_repository.dart';
import 'package:flutter_module/models/home_data/home_data_model.dart';
import 'package:flutter_module/models/home_data/home_item_model.dart';
import 'package:flutter_module/services/local/local_data_helper.dart';

part 'home_search_state.dart';

class HomeSearchCubit extends Cubit<HomeSearchState> {
  HomeSearchCubit() : super(const HomeSearchState());

  final TextEditingController searchController = TextEditingController();

  final _repository = HomeRepository();

  fetchData() {
    fetchHighlightProject();
    fetchRecentSearchedProducts();
  }

  fetchHighlightProject() async {
    if (AppData.instance.homeHighlightProducts.isNotEmpty) {
      emit(state.copyWith(
        highlightProducts: AppData.instance.homeHighlightProducts,
      ));
    }

    final result = await _repository.getHighlightProjects();
    if (result.status) {
      AppData.instance.homeHighlightProducts = result.data ?? [];
      emit(state.copyWith(
        highlightProducts: result.data,
      ));
    }
  }

  initProducts(List<HomeDataModel> homeGroups) async {
    final products = <HomeItemModel>[];
    for (var e in homeGroups) {
      products.addAll(e.items ?? []);
    }
    emit(state.copyWith(
      status: BlocStatus.success,
      products: products,
      searchedProducts: const [],
    ));
  }

  searchChanged(String text) {
    if (text.isEmpty) {
      emit(state.copyWith(
        searchedProducts: [],
      ));
      return;
    }
    if (text.isNotEmpty) {
      final newList = [...state.products].where(
        (e) {
          final query = VietnameseUtils.toEnglish(text).toLowerCase().trim();
          final source = VietnameseUtils.toEnglish(e.title ?? '').toLowerCase().trim();
          return source.contains(query);
        },
      ).toList();
      emit(state.copyWith(
        searchedProducts: newList,
      ));
      return;
    }
  }

  fetchRecentSearchedProducts() async {
    final data = await LocalDataHelper.instance.getHomeRecentSearchedProduct();
    if (data.isNotEmpty) {
      emit(state.copyWith(
        recentSearchedProducts: data,
      ));
    }
  }

  saveRecentSearchedProduct(HomeItemModel item) {
    final data = [...state.recentSearchedProducts].take(5).toList();

    data.removeWhere((e) => e.id == item.id);
    data.insert(0, item);

    LocalDataHelper.instance.setHomeRecentSearchedProduct(data);

    emit(state.copyWith(
      recentSearchedProducts: data,
    ));
  }

  @override
  Future<void> close() {
    searchController.dispose();
    return super.close();
  }
}
