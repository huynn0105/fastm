import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/features/news/repository/news_repository.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/models/home_data/dpd_model.dart';
import 'package:flutter_module/models/home_data/home_banner_model.dart';
import 'package:flutter_module/models/home_data/home_page_layout_model.dart';
import 'package:flutter_module/models/news/contests_model.dart';
import 'package:flutter_module/models/news/news_model.dart';
import 'package:flutter_module/services/api/news/payload/get_news_payload.dart';
import 'package:flutter_module/services/local/local_data_helper.dart';

import '../../../../common/bloc_status.dart';
import '../../../../models/home_data/home_data_model.dart';
import '../../../../models/home_data/main_group_model.dart';
import '../../repository/home_repository.dart';

part 'home_page_state.dart';

class HomePageCubit extends Cubit<HomePageState> {
  HomePageCubit() : super(const HomePageState());

  final _repository = HomeRepository();
  final _newsRepository = NewsRepository();

  fetchData({bool showLoading = true, bool hasLoggedIn = false}) async {
    _getHomePageLayout(showLoading: showLoading);
    _getBanner();
    _getTips();
    _getNews();
    _getContests();
    if (hasLoggedIn) {
      _getDPD();
    }
    if (LocalDataHelper.instance.getIsUserGuideBanner()) {
      emit(state.copyWith(
        isUserGuide: true,
      ));
    }
  }

  disableGuide() {
    if (state.isUserGuide) {
      LocalDataHelper.instance.setIsUserGuideBanner();
      emit(state.copyWith(isUserGuide: false));
    }
  }

  _getBanner() async {
    final result = await _repository.getHomeBanners();
    emit(state.copyWith(
      banners: result.data,
    ));
  }

  _getHomePageLayout({bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getHomePageData();

    if (result.status == true) {
      emit(state.copyWith(
        status: BlocStatus.success,
        layout: result.data?.home?.where((e) => e.catAlias?.isNotEmpty == true).toList(),
        group: result.data?.group?.where((e) => e.alias?.isNotEmpty == true).toList(),
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  _getNews() async {
    final result = await _newsRepository.getListNews(GetListNewsPayload());
    emit(state.copyWith(
      news: result.data?.take(5).toList(),
    ));
  }

  _getTips() async {
    final result = await _repository.getHomeTips();
    emit(state.copyWith(
      tips: result.data?.take(5).toList(),
    ));
  }

  _getContests() async {
    final result = await _newsRepository.getListContests();
    emit(state.copyWith(
      contests: result.data?.processing,
    ));
  }

  _getDPD() async {
    final result = await _repository.getHomeDPD();
    emit(state.copyWith(
      dpd: result.data,
    ));
  }

  clearData() {
    emit(state.copyWith(
      layout: [],
      group: const [],
      banners: const [],
      tips: const [],
      news: const [],
      contests: const [],
      clearDPD: true,
    ));
  }
}
