import 'dart:convert';

import 'package:appsflyer_sdk/appsflyer_sdk.dart';
import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:facebook_app_events/facebook_app_events.dart';
import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:flutter_module/common/enum/tracking_event_type.dart';
import 'package:flutter_module/common/utils/deeplink_util.dart';
import 'package:flutter_module/common/utils/log_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/env_data.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/features/home/repository/home_repository.dart';
import 'package:flutter_module/features/mtrade/repository/mtrade_product_repository.dart';
import 'package:flutter_module/models/mfast/app_info/mfast_app_info_model.dart';
import 'package:flutter_module/models/mtrade/config/mtrade_config_model.dart';
import 'package:flutter_module/services/api/mfast/payload/mfast_tracking_event_non_user_payload.dart';
import 'package:flutter_module/services/api/mfast/payload/mfast_tracking_event_payload.dart';
import 'package:flutter_module/services/notification/mo_engage_notification_service.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:moengage_flutter/moengage_flutter.dart';

// import 'package:graphql_flutter/graphql_flutter.dart';

import '../../../../common/bloc_status.dart';
import '../app_data.dart';
import '../common/enum/web_type.dart';
import '../common/pdf_fonts.dart';
import '../di/get_it.dart';
import '../services/local/local_data_helper.dart';
import 'chat/hive_database/hive_database.dart';

part 'app_state.dart';

class AppCubit extends Cubit<AppState> {
  AppCubit() : super(const AppState());

  final MTradeProductRepository _repository = MTradeProductRepository();
  final HomeRepository _homeRepository = HomeRepository();
  late final MoEngageFlutter _moengagePlugin;
  late final AppsflyerSdk _appsflyerSdk;
  late final FacebookAppEvents _facebookAppEvents;

  late final MoEngageNotificationService _moeNotificationService;

  MoEngageFlutter get moengagePlugin => _moengagePlugin;
  MoEngageNotificationService get moeService => _moeNotificationService;

  init() async {
    emit(state.copyWith(status: BlocStatus.loading));
    // await initHiveForFlutter();
    await getItInstance.get<HiveDatabase>().init();
    await initializeDateFormatting('vi');
    await LocalDataHelper.instance.init();
    await PdfFonts.initPdfFont();
    await AppData.instance.getDeviceInfo();
    await _initAppFlyer();
    await _initMoE();
    await _initFacebookAppEvents();
    await DeepLinkUtil.instance.init(
      onGetInitialURI: (value) {
        AppData.instance.initialDeepLinkURI = value;
      },
    );
    await getItInstance.get<AuthCubit>().onInit();
    trackingEvent(event: TrackingEventType.appLaunch);
    emit(state.copyWith(status: BlocStatus.success));
  }

  _initMoE() async {
    _moengagePlugin = MoEngageFlutter(
      EnvData.instance.moeAppID,
      moEInitConfig: MoEInitConfig(
        pushConfig: PushConfig(
          shouldDeliverCallbackOnForegroundClick: true,
        ),
      ),
    );
    _moeNotificationService = MoEngageNotificationService(moengagePlugin: _moengagePlugin);
    _moengagePlugin.initialise();
    _moengagePlugin.showInApp();
  }

  _initAppFlyer() {
    AppsFlyerOptions appsFlyerOptions = AppsFlyerOptions(
      afDevKey: EnvData.instance.afDevKey,
      appId: EnvData.instance.appID,
      showDebug: EnvData.instance.showLog,
      timeToWaitForATTUserAuthorization: 50, // for iOS 14.5
      // appInviteOneLink: oneLinkID, // Optional field
      // disableAdvertisingIdentifier: false, // Optional field
      // disableCollectASA: false,
    ); // Optional field

    _appsflyerSdk = AppsflyerSdk(appsFlyerOptions);
    _appsflyerSdk.initSdk(
      registerConversionDataCallback: true,
      registerOnAppOpenAttributionCallback: true,
      registerOnDeepLinkingCallback: true,
    );
  }

  _initFacebookAppEvents() async {
    _facebookAppEvents = FacebookAppEvents();
  }

  Future<void> getConfigs() async {
    final result = await Future.wait([
      _repository.getConfigs(),
      _homeRepository.getAppInfo(),
    ]);
    if (result[0].status && result[0].data != null) {
      AppData.instance.setMTradeConfigs(result[0].data as MTradeConfigModel);
    }
    if (result[1].status && result[1].data != null) {
      AppData.instance.setAppInfo(result[1].data as MFastAppInfoModel);
    }
  }

  trackingEvent({required TrackingEventType? event, String? eventName, Map<String, dynamic>? params}) {
    final eName = eventName ?? event?.name ?? '';
    AppLog.d('trackingEvent', '$eName - ${jsonEncode(params)}');
    if (EnvData.instance.isProduction) {
      _appsflyerSdk.logEvent(eName, params);
    }
    final moeProperties = MoEProperties();
    if (params?.isNotEmpty == true) {
      params?.forEach((key, value) {
        moeProperties.addAttribute(key, value);
      });
    }
    _moengagePlugin.trackEvent(eName, moeProperties);
    FirebaseAnalytics.instance.logEvent(
      name: eName,
      parameters: params,
    );
    _facebookAppEvents.logEvent(
      name: eName,
      parameters: params,
    );
    _homeRepository.trackingEventNonUser(MFastTrackingEventNonUserPayload(
      action: eName,
      attributes: params,
    ));
    if (getItInstance.get<AuthCubit>().state.hasLoggedIn) {
      _homeRepository.trackingEvent(MFastTrackingEventPayload(
        eventName: eName,
        lat: params?['lat'],
        lon: params?['lon'],
        extraParams: params,
      ));
    }
  }

  updateAppflyerServerUninstallToken(String? fcmToken) {
    if (TextUtils.isNotEmpty(fcmToken)) {
      try {
        _appsflyerSdk.updateServerUninstallToken(fcmToken!);
      } catch (e) {
        AppLog.e('updateAppflyerServerUninstallToken', '$e');
      }
    }
  }

  onAttachAppRouter() {
    if (!state.isAppRouterAttached) {
      emit(state.copyWith(
        isAppRouterAttached: true,
      ));
    }
  }
}
