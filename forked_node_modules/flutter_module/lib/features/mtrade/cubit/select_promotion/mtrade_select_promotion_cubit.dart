import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/models/mtrade/promotion/data_product_variations_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_check_promotion_payload.dart';

import '../../repository/mtrade_product_repository.dart';

part 'mtrade_select_promotion_state.dart';

class MTradeSelectPromotionCubit extends Cubit<MTradeSelectPromotionState> {
  MTradeSelectPromotionCubit({
    this.provinceCode,
    this.districtCode,
    this.wardCode,
  }) : super(const MTradeSelectPromotionState());

  String? provinceCode;
  String? districtCode;
  String? wardCode;
  final MTradeProductRepository _repository = MTradeProductRepository();

  updatePromotions(List<DataProductVariationsModel> promotions) {
    emit(state.copyWith(
      promotions: promotions,
    ));
  }

  updatePromotionByRemainSkus(List<String> remainSkus) {
    clearPromotions();
    // var promotions = [...state.promotions];
    // promotions = promotions.where((promo) {
    //   final selectedSkus = promo.selection?.map((e) => e.sku ?? "").toList() ?? [];
    //   return remainSkus.any((sku) => selectedSkus.contains(sku));
    // }).toList();
    // emit(state.copyWith(
    //   promotions: promotions,
    // ));
  }

  clearPromotions() {
    emit(state.copyWith(
      promotions: const [],
    ));
  }

  checkPromotion({
    required List<String> skus,
    required String paymentMethod,
    Function()? onSuccess,
  }) async {
    List<PromotionCode> selectedPromotions = GlobalFunction.flatPromotionCode(state.promotions);

    final codes = selectedPromotions.map((e) => e.code ?? '').toList();

    if (codes.isEmpty) {
      onSuccess?.call();
      return;
    }

    emit(state.copyWith(
      checkStatus: BlocStatus.loading,
      errorPromotions: const [],
    ));

    final result = await _repository.checkPromotion(
      payload: MTradeCheckPromotionPayload(
        version: '2',
        codes: codes,
        productionVariations: state.promotions,
        provinceCode: provinceCode,
        districtCode: districtCode,
        wardCode: wardCode,
        paymentMethod: paymentMethod,
      ),
    );

    if (result.status) {
      emit(state.copyWith(
        checkStatus: BlocStatus.success,
        errorPromotions: const [],
      ));
      onSuccess?.call();
    } else {
      List<String>? errorPromotions;
      if (result.errorData is List<String>) {
        errorPromotions = result.errorData;
      }
      emit(state.copyWith(
        checkStatus: BlocStatus.failure,
        errorMessage: result.errorMessage,
        errorPromotions: errorPromotions,
      ));
    }
  }

  clearData() {
    emit(const MTradeSelectPromotionState());
  }
}
