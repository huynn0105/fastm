import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/models/mtrade/product/mtrade_product_model.dart';

import '../../../../services/api/mtrade/payload/mtrade_product_payload.dart';
import '../../repository/mtrade_product_repository.dart';

part 'mtrade_history_product_state.dart';

class MTradeHistoryProductCubit extends Cubit<MTradeHistoryProductState> {
  MTradeHistoryProductCubit() : super(const MTradeHistoryProductState());

  final MTradeProductRepository _repository = MTradeProductRepository();

  fetchData({bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getFilterProducts(
      payload: MTradeProductPayload(
        group: "productHistory",
        provinceCode: AppData.instance.deliverySupportProvinceCode,
        districtCode: AppData.instance.deliverySupportDistrictCode,
        wardCode: AppData.instance.deliverySupportWardCode,
        page: 1,
      ),
    );

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        products: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  Future refreshData() async {
    await fetchData(showLoading: false);
  }
}
