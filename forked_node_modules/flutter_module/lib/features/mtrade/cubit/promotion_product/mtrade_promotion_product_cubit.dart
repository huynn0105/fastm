import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/mtrade/repository/mtrade_product_repository.dart';
import 'package:flutter_module/models/mtrade/promotion/mtrade_promotion_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_promotion_product_payload.dart';

part 'mtrade_promotion_product_state.dart';

class MTradePromotionProductCubit extends Cubit<MTradePromotionProductState> {
  MTradePromotionProductCubit() : super(const MTradePromotionProductState());

  final MTradeProductRepository _repository = MTradeProductRepository();

  fetchData({
    bool showLoading = true,
    String? provinceCode,
    String? districtCode,
    String? wardCode,
    List<String> skus = const [],
  }) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getPromotionProduct(
      payload: MTradePromotionProductPayload(
        skus: skus,
        provinceCode: provinceCode,
        districtCode: districtCode,
        wardCode: wardCode,
      ),
    );

    if (result.status) {
      final promotions = result.data?.where((e) => !(e.isExpired() == true)).toList();
      emit(state.copyWith(
        status: BlocStatus.success,
        promotions: promotions,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }
}
