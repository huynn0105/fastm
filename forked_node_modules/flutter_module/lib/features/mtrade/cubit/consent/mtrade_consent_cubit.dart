import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/mtrade/repository/mtrade_product_repository.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_consent_payload.dart';

part 'mtrade_consent_state.dart';

class MTradeConsentCubit extends Cubit<MTradeConsentState> {
  MTradeConsentCubit() : super(const MTradeConsentState());
  final MTradeProductRepository _repository = MTradeProductRepository();

  //logOtpID is null when saveContent without OTP
  Future<BaseModel<bool>> saveConsent({
    int? logOtpID,
    String? mobilePhone,
  }) async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.saveConsent(
      payload: MTradeConsentPayload(
        channel: logOtpID == null ? null : AppData.instance.lastOTPType,
        agreementRequest: 1,
        alias: AppData.instance.mtradeAlias,
        logOtpID: logOtpID,
        mobilePhone: mobilePhone,
      ),
    );
    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
        errorMessage: result.errorMessage,
      ));
    }

    return result;
  }
}
