import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/enum/mtrade/landing_page_source.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/extension/map_extension.dart';
import 'package:scroll_to_index/scroll_to_index.dart';

import '../../../../common/bloc_status.dart';
import '../../../../common/constants.dart';
import '../../../../common/enum/mtrade/delivery_location_type.dart';
import '../../../../common/utils/validation_util.dart';
import '../../../../models/base_model.dart';
import '../../../../models/master_data/master_data_model.dart';
import '../../repository/mtrade_product_repository.dart';

part 'buyer_info_state.dart';

class BuyerInfoCubit extends Cubit<BuyerInfoState> {
  BuyerInfoCubit() : super(BuyerInfoState());

  final MTradeProductRepository _repository = MTradeProductRepository();

  final AutoScrollController scrollController = AutoScrollController();

  final buyerNameController = TextEditingController();
  final buyerPhoneController = TextEditingController();
  final buyerIDNumberController = TextEditingController();
  final buyerProvinceController = TextEditingController();
  final buyerDistrictController = TextEditingController();

  fetchData() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));
    final BaseModel<List<MasterDataModel>> result = await _repository.getDeliveryLocation(
      type: LocationType.province.name,
      code: '',
    );
    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        provinceList: result.data,
      ));
      _setLocation(
        provinceID: AppData.instance.deliverySupportProvinceCode,
        districtID: AppData.instance.deliverySupportDistrictCode,
      );
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  _scrollToErrorIndex() {
    var errorFields = {...state.errorFields};
    var errorIndexes = {...state.errorIndexes}..removeWhere((key, value) => !errorFields.keys.contains(key));
    var indexes = errorIndexes.values.toList()..sort((a, b) => a.compareTo(b));
    var index = indexes.getFirst();

    ///
    if (index != null) {
      scrollController.scrollToIndex(
        index,
        duration: const Duration(milliseconds: 800),
        preferPosition: AutoScrollPosition.begin,
      );
    }
  }

  initErrorIndexes() {
    List<String> errors = [
      AppConstants.buyerNameKey,
      AppConstants.buyerPhoneKey,
      AppConstants.buyerProvinceKey,
      AppConstants.buyerDistrictKey,
      AppConstants.buyerIDNumberKey,
    ];
    emit(state.copyWith(
      errorIndexes: errors.asMap().inverse(),
    ));
  }

  _setLocation({String? provinceID, String? districtID}) async {
    if (provinceID != null) {
      final index = state.provinceList.indexWhere((e) => e.id == provinceID);
      if (index >= 0) {
        await selectProvince(index);
      }
    }
    if (districtID != null) {
      final index = state.districtList.indexWhere((e) => e.id == districtID);
      if (index >= 0) {
        await selectDistrict(index);
      }
    }
  }

  onBuyerNameChanged(String text) {
    var errorFields = {...state.errorFields};
    errorFields.removeWhere((key, value) => key == AppConstants.buyerNameKey);
    emit(state.copyWith(
      errorFields: errorFields,
    ));
    _validate();
  }

  onBuyerPhoneChanged(String text) {
    var errorFields = {...state.errorFields};
    errorFields.removeWhere((key, value) => key == AppConstants.buyerPhoneKey);
    emit(state.copyWith(
      errorFields: errorFields,
    ));
    _validate();
  }

  onBuyerIDNumberChanged(String text) {
    var errorFields = {...state.errorFields};
    errorFields.removeWhere((key, value) => key == AppConstants.buyerIDNumberKey);
    emit(state.copyWith(
      errorFields: errorFields,
    ));
    _validate();
  }

  selectProvince(int index) async {
    buyerProvinceController.text = state.provinceList[index].name ?? '';
    buyerDistrictController.text = '';
    emit(state.copyWith(
      selectedProvinceIndex: index,
      selectedDistrictIndex: -1,
      enableDistrict: false,
    ));

    state.errorFields.removeWhere((key, value) => key == AppConstants.buyerProvinceKey);
    _validate();

    final BaseModel<List<MasterDataModel>> result = await _repository.getDeliveryLocation(
      type: LocationType.district.name,
      code: state.provinceList[index].code ?? '',
    );

    emit(state.copyWith(
      status: BlocStatus.success,
      districtList: result.data ?? [],
      enableDistrict: true,
    ));
  }

  selectDistrict(int index) async {
    buyerDistrictController.text = state.districtList[index].name ?? '';
    emit(state.copyWith(
      selectedDistrictIndex: index,
    ));

    state.errorFields.removeWhere((key, value) => key == AppConstants.buyerDistrictKey);
    _validate();
  }

  _checkFields() {
    var errorFields = {...state.errorFields};

    if (buyerNameController.text.isEmpty) {
      errorFields[AppConstants.buyerNameKey] = 'Thông tin này là bắt buộc';
    }
    if (buyerPhoneController.text.isEmpty) {
      errorFields[AppConstants.buyerPhoneKey] = 'Thông tin này là bắt buộc';
    } else if (buyerPhoneController.text.length < 10) {
      errorFields[AppConstants.buyerPhoneKey] = 'Số điện thoại phải gồm 10 chữ số';
    } else if (PhoneInputValidation.dirty(value: buyerPhoneController.text).isNotValid) {
      errorFields[AppConstants.buyerPhoneKey] = 'Số điện thoại không hợp lệ';
    }
    if (AppData.instance.landingPageSource?.isDAA == true) {
      if (buyerIDNumberController.text.isEmpty) {
        errorFields[AppConstants.buyerIDNumberKey] = 'Thông tin này là bắt buộc';
      } else if (buyerIDNumberController.text.length < 12) {
        errorFields[AppConstants.buyerIDNumberKey] = 'CCCD phải gồm 12 chữ số';
      }
    }
    if (buyerProvinceController.text.isEmpty) {
      errorFields[AppConstants.buyerProvinceKey] = 'Thông tin này là bắt buộc';
    }
    if (buyerDistrictController.text.isEmpty) {
      errorFields[AppConstants.buyerDistrictKey] = 'Thông tin này là bắt buộc';
    }

    emit(state.copyWith(
      errorFields: errorFields,
    ));
  }

  _validate() {
    emit(state);
  }

  bool validateData() {
    _checkFields();
    if (state.errorFields.isNotEmpty) {
      _scrollToErrorIndex();
      _validate();
      return false;
    }
    return true;
  }

  @override
  Future<void> close() {
    buyerNameController.dispose();
    buyerPhoneController.dispose();
    buyerIDNumberController.dispose();
    buyerProvinceController.dispose();
    buyerDistrictController.dispose();
    return super.close();
  }
}
