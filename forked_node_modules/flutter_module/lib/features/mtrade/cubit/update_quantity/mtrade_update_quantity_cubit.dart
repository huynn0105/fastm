import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import '../../../../app_data.dart';
import '../../../../common/bloc_status.dart';
import '../../repository/mtrade_product_repository.dart';
import '../../../../services/api/mtrade/payload/mtrade_cart_payload.dart';

import '../../../../models/mtrade/cart/mtrade_cart_product_model.dart';

part 'mtrade_update_quantity_state.dart';

class MTradeUpdateQuantityCubit extends Cubit<MTradeUpdateQuantityState> {
  MTradeUpdateQuantityCubit() : super(const MTradeUpdateQuantityState());

  final MTradeProductRepository _repository = MTradeProductRepository();

  MTradeCartProductModel? _product;
  bool? _forceSyncServer;

  fetchProduct(MTradeCartProductModel product, bool forceSyncServer) {
    _product = product;
    _forceSyncServer = forceSyncServer;
    _updateQuantity(product.quantity ?? 1);
  }

  _updateQuantity(int quantity) {
    emit(state.copyWith(
      quantity: quantity,
      enabledDecrease: quantity > 1,
      enabledIncrease: quantity < AppData.instance.maxQuantityPerProduct,
    ));
  }

  _syncServer(int quantity) async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));

    final result = await _repository.createCartItem(
      payload: MTradeCartPayload(
        productID: int.tryParse(_product?.productID ?? ""),
        sku: _product?.sku,
        quantity: quantity,
        isUpdate: true,
      ),
    );

    if (result.status) {
      _updateQuantity(quantity);
      emit(state.copyWith(
        status: BlocStatus.success,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
        errorMessage: result.errorMessage,
      ));
    }
  }

  _handle({
    required Function() onSync,
    required Function() onUpdate,
  }) {
    if (_forceSyncServer == true) {
      onSync();
    } else {
      onUpdate();
    }
  }

  decrease() {
    _handle(
      onSync: () => _syncServer(state.quantity - 1),
      onUpdate: () => _updateQuantity(state.quantity - 1),
    );
  }

  increase() {
    _handle(
      onSync: () => _syncServer(state.quantity + 1),
      onUpdate: () => _updateQuantity(state.quantity + 1),
    );
  }
}
