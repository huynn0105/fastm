import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/mtrade/repository/mtrade_product_repository.dart';
import 'package:flutter_module/models/mtrade/my_review/mtrade_filter_my_review_model.dart';
import 'package:flutter_module/models/mtrade/my_review/mtrade_my_review_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_my_review_payload.dart';

part 'mtrade_my_review_state.dart';

class MyReviewCubit extends Cubit<MyReviewState> {
  MyReviewCubit() : super(const MyReviewState());
  final MTradeProductRepository _repository = MTradeProductRepository();
  MTradeMyReviewPayload _payload = MTradeMyReviewPayload();

  fetchData({bool showLoading = true, bool loadmore = false}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    updatePayload(page: loadmore ? (_payload.page ?? 1) + 1 : 1);

    final result = await _repository.getListMyReview(
      payload: _payload,
    );

    if (result.status) {
      var data = result.data?.list ?? [];
      if (loadmore) {
        data = [...state.reviews, ...data];
      }

      emit(state.copyWith(
        status: BlocStatus.success,
        totalReview: result.data?.total ?? 0,
        reviews: data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  fetchFilter({bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(
        statusFilter: BlocStatus.loading,
      ));
    }

    final result = await _repository.getFilterMyReview();

    if (result.status) {
      var data = result.data ?? [];

      emit(state.copyWith(
        statusFilter: BlocStatus.success,
        filters: result.data?.filters,
        sumary: result.data?.sumaryData,
      ));
    } else {
      emit(state.copyWith(
        statusFilter: BlocStatus.failure,
      ));
    }
  }

  updatePayload({
    int? page,
    Map<String, String>? filters,
  }) {
    _payload = _payload.copyWith(
      page: page,
      filters: filters,
    );
  }

  selectFilter({String? key, String? value, int? index}) {
    Map<String, String> newFilters = <String, String>{};
    Map<String, int> newListSelected = <String, int>{};

    newFilters.addAll(_payload.filters ?? {});
    newFilters['$key'] = value ?? '';

    newListSelected.addAll(state.listSelected ?? {});
    newListSelected['$key'] = index ?? 0;

    updatePayload(
      filters: newFilters,
      page: 1,
    );
    emit(state.copyWith(
      listSelected: newListSelected,
    ));
  }
}
