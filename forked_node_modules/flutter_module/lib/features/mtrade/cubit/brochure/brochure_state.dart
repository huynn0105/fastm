part of 'brochure_cubit.dart';

class BrochureState extends Equatable {
  const BrochureState({
    this.status = BlocStatus.initial,
    this.isCategory = true,
    this.products = const [],
    this.categories,
    this.selectedCategory,
    this.selectedProductList = const [],
    this.selectedProduct,
    this.enableNext = false,
    this.enabledProvince = false,
    this.enabledDistrict = false,
    this.selectedProvinceCode,
    this.selectedDistrictCode,
    this.provinces = const [],
    this.districts = const [],
    this.showSaleInfo = true,
    this.type,
    this.selectedCategories = const [],
    this.selectedCategoriesTitle = "",
    this.showSelectedCategories = false,
    this.selectedProducts = const [],
    this.selectedProductsTitle = "",
    this.showSelectedProducts = false,
    this.enabledTypeData = false,
  });

  final BlocStatus status;
  final bool isCategory;
  final List<MTradeBrochureProductModel> products;
  final List<DataWrapper>? categories;
  final DataWrapper? selectedCategory;
  final List<MTradeBrochureProductModel> selectedProductList;
  final MTradeBrochureProductModel? selectedProduct;
  final bool enableNext;
  final bool enabledProvince;
  final bool enabledDistrict;
  final String? selectedProvinceCode;
  final String? selectedDistrictCode;
  final List<MasterDataModel> provinces;
  final List<MasterDataModel> districts;
  final bool showSaleInfo;
  final BrochureType? type;
  final List<DataWrapper> selectedCategories;
  final String selectedCategoriesTitle;
  final bool showSelectedCategories;
  final List<MTradeBrochureProductModel> selectedProducts;
  final String selectedProductsTitle;
  final bool showSelectedProducts;
  final bool enabledTypeData;

  @override
  List<Object?> get props => [
        status,
        isCategory,
        products,
        categories,
        selectedCategory,
        selectedProductList,
        selectedProduct,
        enableNext,
        enabledProvince,
        enabledDistrict,
        selectedProvinceCode,
        selectedDistrictCode,
        provinces,
        districts,
        showSaleInfo,
        type,
        selectedCategories,
        selectedCategoriesTitle,
        showSelectedCategories,
        selectedProducts,
        selectedProductsTitle,
        showSelectedProducts,
        enabledTypeData,
      ];

  BrochureState copyWith({
    BlocStatus? status,
    bool? isCategory,
    List<MTradeBrochureProductModel>? products,
    List<DataWrapper>? categories,
    DataWrapper? selectedCategory,
    List<MTradeBrochureProductModel>? selectedProductList,
    MTradeBrochureProductModel? selectedProduct,
    bool? enableNext,
    bool? enabledProvince,
    bool? enabledDistrict,
    String? selectedProvinceCode,
    String? selectedDistrictCode,
    List<MasterDataModel>? provinces,
    List<MasterDataModel>? districts,
    bool? showSaleInfo,
    bool clear = false,
    BrochureType? type,
    List<DataWrapper>? selectedCategories,
    String? selectedCategoriesTitle,
    bool? showSelectedCategories,
    List<MTradeBrochureProductModel>? selectedProducts,
    String? selectedProductsTitle,
    bool? showSelectedProducts,
    bool? enabledTypeData,
  }) {
    return BrochureState(
      status: status ?? this.status,
      isCategory: isCategory ?? this.isCategory,
      products: products ?? this.products,
      categories: categories ?? this.categories,
      selectedCategory: clear == true ? null : selectedCategory ?? this.selectedCategory,
      selectedProductList: clear == true ? [] : selectedProductList ?? this.selectedProductList,
      selectedProduct: clear == true ? null : selectedProduct ?? this.selectedProduct,
      enableNext: clear == true ? false : enableNext ?? this.enableNext,
      //
      enabledProvince: enabledProvince ?? this.enabledProvince,
      enabledDistrict: enabledDistrict ?? this.enabledDistrict,
      selectedProvinceCode: selectedProvinceCode ?? this.selectedProvinceCode,
      selectedDistrictCode: selectedDistrictCode ?? this.selectedDistrictCode,
      provinces: provinces ?? this.provinces,
      districts: districts ?? this.districts,
      showSaleInfo: showSaleInfo ?? this.showSaleInfo,
      type: type ?? this.type,
      selectedCategories: selectedCategories ?? this.selectedCategories,
      selectedCategoriesTitle: selectedCategoriesTitle ?? this.selectedCategoriesTitle,
      showSelectedCategories: showSelectedCategories ?? this.showSelectedCategories,
      selectedProducts: selectedProducts ?? this.selectedProducts,
      selectedProductsTitle: selectedProductsTitle ?? this.selectedProductsTitle,
      showSelectedProducts: showSelectedProducts ?? this.showSelectedProducts,
      enabledTypeData: enabledTypeData ?? this.enabledTypeData,
    );
  }

  BrochureState clear() {
    return copyWith(
      clear: true,
    );
  }
}
