import 'dart:convert';

import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/enum/mtrade/brochure_type.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/models/mtrade/product/category_product_model.dart';

import '../../../../common/bloc_status.dart';
import '../../../../common/enum/mtrade/delivery_location_type.dart';
import '../../../../di/get_it.dart';
import '../../../../models/master_data/master_data_model.dart';
import '../../../../models/mtrade/product/mtrade_brochure_product_model.dart';
import '../../../../services/api/mtrade/payload/mtrade_brochure_product_payload.dart';
import '../../../../services/local/local_data_helper.dart';
import '../../repository/mtrade_product_repository.dart';
import '../delivery_support/mtrade_delivery_support_cubit.dart';

part 'brochure_state.dart';

class BrochureCubit extends Cubit<BrochureState> {
  BrochureCubit() : super(const BrochureState());

  final MTradeProductRepository _repository = MTradeProductRepository();

  final TextEditingController typeController = TextEditingController();
  final TextEditingController dataTypeController = TextEditingController();

  final TextEditingController provinceController = TextEditingController();
  final TextEditingController districtController = TextEditingController();

  getBrochureProducts() async {
    emit(state.clear().copyWith(
          status: BlocStatus.loading,
          enabledTypeData: false,
        ));
    BaseModel<List<MTradeBrochureProductModel>> result = await _repository.getBrochureProduct(
      payload: MTradeBrochureProductPayload(
        provinceCode: state.selectedProvinceCode ??
            AppData.instance.deliverySupportProvinceCode ??
            LocalDataHelper.instance.getDeliverySupportProvinceCode(),
        districtCode: state.selectedDistrictCode ??
            AppData.instance.deliverySupportDistrictCode ??
            LocalDataHelper.instance.getDeliverySupportDistrictCode(),
      ),
    );
    if (result.status) {
      List<MTradeBrochureProductModel> data = (result.data ?? []);
      List<DataWrapper>? categories =
          data.mapIndexed((i, e) => DataWrapper(id: e.groupID, value: e.groupName, index: i)).toList();
      Set<String?> dataSet = {};
      List<DataWrapper> distinctCategories = [];
      for (var e in categories) {
        if (dataSet.add(e.id)) {
          distinctCategories.add(e);
        }
      }

      distinctCategories.insert(0, DataWrapper(id: null, value: 'Tất cả loại sản phẩm'));

      emit(state.copyWith(
        status: BlocStatus.success,
        products: result.data,
        categories: distinctCategories,
        selectedProductList: result.data,
        enabledTypeData: true,
        enableNext: false,
      ));
    } else {
      emit(state.copyWith(status: BlocStatus.failure));
    }
    validate();
  }

  // toggleBrochureType(bool isCategory) {
  //   bool enableNext = validate(isCategory, state.selectedCategory, state.selectedProduct);
  //   emit(state.copyWith(isCategory: isCategory, enableNext: enableNext));
  // }

  toggleContactInfo() {
    emit(state.copyWith(showSaleInfo: !state.showSaleInfo));
  }

  // selectCategory(DataWrapper value) {
  //   final List<MTradeBrochureProductModel> products =
  //       value.id == null ? state.products : state.products.where((e) => e.groupID == value.id).toList();
  //   bool enableNext = validate(state.isCategory, value, state.selectedProduct);
  //   emit(state.copyWith(
  //     status: BlocStatus.success,
  //     selectedCategory: value,
  //     selectedProductList: products,
  //     enableNext: enableNext,
  //   ));
  // }

  selectProduct(DataWrapper? value) {
    final MTradeBrochureProductModel? product = state.products.firstWhereOrNull((e) => e.id == value?.id);
    dataTypeController.text = product?.name ?? "";
    emit(state.copyWith(
      selectedProduct: product,
      showSelectedCategories: false,
      showSelectedProducts: false,
    ));
    validate();
  }

  bool validate() {
    bool enabledSpecificProduct = (state.type?.isSpecificProduct ?? false) && state.selectedProduct != null;
    bool enabledCategories = (state.type?.isCategories ?? false) && state.selectedCategories.isNotEmpty;
    bool enabledProducts = (state.type?.isProducts ?? false) && state.selectedProducts.isNotEmpty;
    bool enabledLocation = state.selectedProvinceCode != null && state.selectedProvinceCode != null;

    bool enabled =
        state.type != null && (enabledSpecificProduct || enabledCategories || enabledProducts) && enabledLocation;

    emit(state.copyWith(
      enableNext: enabled,
    ));

    return enabled;
  }

  initLocationFromLocal() {
    final deliveryState = getItInstance.get<MTradeDeliverySupportCubit>().state;
    final province = deliveryState.provinces.firstWhereOrNull(
      (e) => e.id == AppData.instance.deliverySupportProvinceCode,
    );
    final district = deliveryState.districts.firstWhereOrNull(
      (e) => e.id == AppData.instance.deliverySupportDistrictCode,
    );

    provinceController.text = province?.value ?? "";
    districtController.text = district?.value ?? "";

    emit(state.copyWith(
      provinces: deliveryState.provinces,
      districts: deliveryState.districts,
      selectedProvinceCode: deliveryState.selectedProvince?.code,
      selectedDistrictCode: deliveryState.selectedDistrict?.code,
      enabledProvince: true,
      enabledDistrict: deliveryState.selectedProvince != null,
    ));
    validate();
  }

  getProvince() async {
    final result = await _repository.getDeliveryLocation(
      type: LocationType.province.name,
      code: "",
    );

    if (result.status) {
      emit(state.copyWith(
        provinces: result.data,
        enabledProvince: true,
      ));
    }
  }

  selectProvince(String code) async {
    final data = state.provinces.firstWhereOrNull((e) => e.id == code);

    provinceController.text = data?.value ?? "";
    districtController.clear();

    emit(state.copyWith(
      selectedProvinceCode: code,
      enabledDistrict: false,
    ));

    final result = await _repository.getDeliveryLocation(
      type: LocationType.district.name,
      code: code,
    );

    if (result.status) {
      emit(state.copyWith(
        districts: result.data,
        enabledDistrict: true,
      ));
      selectDistrict("");
    }
    validate();
  }

  selectDistrict(String code) async {
    if (code.isEmpty) {
      districtController.text = LocationType.district.all;
    } else {
      final data = state.districts.firstWhereOrNull((e) => e.id == code);
      districtController.text = data?.value ?? "";
    }

    emit(state.copyWith(
      selectedDistrictCode: code,
    ));

    selectProducts([]);
    selectCategories([]);
    getBrochureProducts();
    validate();
  }

  selectType(BrochureType type) {
    if (type == state.type) {
      return;
    }
    typeController.text = type.title;
    emit(state.copyWith(
      type: type,
      showSelectedCategories: type.isCategories,
      showSelectedProducts: type.isProducts,
      enableNext: validate(),
    ));
    if (type.isCategories) {
      selectCategories(state.selectedCategories);
    } else if (type.isProducts) {
      selectProducts(convertSelectedProductsToDataWrapper());
    } else if (type.isSpecificProduct) {
      selectProduct(DataWrapper(id: state.selectedProduct?.id, value: state.selectedProduct?.name));
    }
    validate();
  }

  selectCategories(List<DataWrapper> data) {
    List<DataWrapper> selectedCategories = [...data];
    bool isAll = data.valueAt(0)?.id == null;
    if (data.isNotEmpty) {
      if (isAll) {
        dataTypeController.text = "Đã chọn tất cả loại sản phẩm";
      } else {
        dataTypeController.text = "Đã chọn ${data.length} loại sản phẩm";
      }
    } else {
      dataTypeController.text = "";
    }
    selectedCategories.sort((first, second) {
      return (first.index ?? -1).compareTo((second.index ?? -1));
    });
    emit(state.copyWith(
      selectedCategories: selectedCategories,
      showSelectedCategories: selectedCategories.isNotEmpty && !isAll,
      selectedCategoriesTitle: dataTypeController.text,
    ));
    validate();
  }

  deleteCategory(String? id) {
    var data = [...state.selectedCategories]..removeWhere((e) => e.id == id);
    selectCategories(data);
    validate();
  }

  selectProducts(List<DataWrapper> data) {
    final selectedProducts = state.products.where((e) => data.map((e) => e.id).contains(e.id)).toList();
    if (data.isNotEmpty) {
      dataTypeController.text = "Đã chọn ${data.length} loại sản phẩm";
    } else {
      dataTypeController.text = "";
    }
    emit(state.copyWith(
      selectedProducts: selectedProducts,
      showSelectedProducts: selectedProducts.isNotEmpty,
      selectedProductsTitle: dataTypeController.text,
    ));
    validate();
  }

  deleteProduct(String? id) {
    var temp = [...state.selectedProducts]..removeWhere((e) => e.id == id);
    var data = _convertProduct(temp);
    selectProducts(data);
    validate();
  }

  List<DataWrapper> convertProductsToDataWrapper() {
    return _convertProduct(state.products);
  }

  List<DataWrapper> convertSelectedProductsToDataWrapper() {
    return _convertProduct(state.selectedProducts);
  }

  List<DataWrapper> _convertProduct(List<MTradeBrochureProductModel> data) {
    return data.mapIndexed((i, e) => DataWrapper(id: e.id, value: e.name, index: i)).toList();
  }

  List<MTradeBrochureProductModel> getSelectedBrochureProducts() {
    if (state.type == null) {
      return [];
    }
    if (state.type.isCategories) {
      final categories = state.selectedCategories.map((e) => e.id).toList();
      if (categories.valueAt(0) == null) {
        return state.products;
      }
      return state.products.where((e) => categories.contains(e.groupID)).toList();
    }
    if (state.type.isProducts) {
      final products = state.selectedProducts.map((e) => e.id).toList();
      return state.products.where((e) => products.contains(e.id)).toList();
    }
    return [];
  }

  @override
  Future<void> close() {
    provinceController.dispose();
    districtController.dispose();
    return super.close();
  }
}
