import 'dart:io';
import 'dart:typed_data';

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/enum/mtrade/brochure_type.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/brochure/pdf_creator/category_brochure_creator.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/brochure/pdf_creator/multi_category_brochure_creator.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/brochure/pdf_creator/product_brochure_creator.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_send_brochure_payload.dart';
import 'package:path_provider/path_provider.dart';

import '../../../../common/bloc_status.dart';
import '../../../../common/bottom_sheet/wrapper/data_wrapper.dart';
import '../../../../models/mtrade/product/mtrade_brochure_product_model.dart';
import '../../repository/mtrade_product_repository.dart';

part 'review_brochure_state.dart';

class ReviewBrochureCubit extends Cubit<ReviewBrochureState> {
  ReviewBrochureCubit() : super(const ReviewBrochureState());

  final MTradeProductRepository _repository = MTradeProductRepository();

  // renderPdf({
  //   DataWrapper? selectedCategory,
  //   List<MTradeBrochureProductModel>? selectedProductList,
  //   MTradeBrochureProductModel? selectedProduct,
  //   String? selectedProvinceCode,
  //   String? selectedDistrictCode,
  //   bool? showSaleInfo,
  // }) async {
  //   String? brochureTitle = selectedCategory != null ? selectedCategory.value : selectedProduct?.name;
  //   emit(state.copyWith(status: BlocStatus.loading, brochureTitle: brochureTitle));
  //   await Future.delayed(const Duration(microseconds: 600));
  //   Map<String, dynamic> pdfResult = {};
  //   if (selectedCategory != null) {
  //     pdfResult = await createCategoryBrochure(
  //       selectedCategory: selectedCategory,
  //       selectedProductList: selectedProductList ?? [],
  //       showSaleInfo: showSaleInfo,
  //     );
  //   } else {
  //     pdfResult = await createProductBrochure(
  //       selectedProduct: selectedProduct,
  //       selectedProvinceCode: selectedProvinceCode,
  //       selectedDistrictCode: selectedDistrictCode,
  //       showSaleInfo: showSaleInfo,
  //     );
  //   }
  //   emit(state.copyWith(
  //     status: BlocStatus.success,
  //     document: pdfResult['document'],
  //     pageTotal: pdfResult['pageTotal'],
  //   ));
  // }

  renderPdfByMultiSelect({
    BrochureType? type,
    List<MTradeBrochureProductModel>? selectedProductList,
    MTradeBrochureProductModel? selectedProduct,
    String? selectedProvinceCode,
    String? selectedDistrictCode,
    bool? showSaleInfo,
  }) async {
    String? brochureTitle = (type == null)
        ? ""
        : type.isSpecificProduct
            ? selectedProduct?.name ?? ""
            : type.title;
    emit(state.copyWith(status: BlocStatus.loading, brochureTitle: brochureTitle));
    await Future.delayed(const Duration(microseconds: 600));
    Map<String, dynamic> pdfResult = {};
    if (type.isSpecificProduct) {
      pdfResult = await createProductBrochure(
        selectedProduct: selectedProduct,
        selectedProvinceCode: selectedProvinceCode,
        selectedDistrictCode: selectedDistrictCode,
        showSaleInfo: showSaleInfo,
      );
    } else {
      pdfResult = await createBrochureMultiProducts(
        title: (type == null) ? "" : type.pdfTitle,
        selectedProducts: selectedProductList ?? [],
        showSaleInfo: showSaleInfo,
      );
    }
    emit(state.copyWith(
      status: BlocStatus.success,
      document: pdfResult['document'],
      pageTotal: pdfResult['pageTotal'],
    ));
  }

  sendBrochure(BuildContext context) async {
    emit(state.copyWith(sendBrochureStatus: BlocStatus.loading));
    File? file = await onCreatedFile(context, state.document);
    BaseModel<bool> result = await _repository.sendBrochure(
      payload: MTradeSendBrochurePayload(
        file: file,
        email: AppData.instance.saleEmail,
      ),
    );
    if (result.status) {
      emit(state.copyWith(sendBrochureStatus: BlocStatus.success));
    } else {
      emit(state.copyWith(sendBrochureStatus: BlocStatus.failure));
    }
  }

  Future<File?> onCreatedFile(BuildContext context, Uint8List? data) async {
    try {
      Directory? dir;
      if (Platform.isAndroid) {
        dir = await getExternalStorageDirectory();
        String newPath = "";
        List<String> paths = dir?.path.split("/") ?? [];
        for (int x = 1; x < paths.length; x++) {
          String folder = paths[x];
          if (folder != "Android") {
            newPath += "/$folder";
          } else {
            break;
          }
        }
        newPath = "$newPath/Download";
        dir = Directory(newPath);
      } else {
        dir = await getApplicationDocumentsDirectory();
      }
      if (!await dir.exists()) {
        await dir.create(recursive: true);
      }
      DateTime now = DateTime.now();
      final String path = '${dir.path}/brochure-${now.millisecondsSinceEpoch}.pdf';
      final file = File(path);
      await file.create();
      await file.writeAsBytes(data!);
      return file;
    } catch (e) {
      debugPrint(e.toString());
      return null;
    }
  }
}
