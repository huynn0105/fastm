import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import '../../../../models/mtrade/collaborator/mtrade_collaborator_model.dart';
import '../../../../services/api/mtrade/payload/mtrade_collaborator_payload.dart';

import '../../../../common/bloc_status.dart';
import '../../repository/mtrade_product_repository.dart';

part 'mtrade_detail_collaborator_state.dart';

class MTradeDetailCollaboratorCubit extends Cubit<MTradeDetailCollaboratorState> {
  MTradeDetailCollaboratorCubit() : super(const MTradeDetailCollaboratorState());

  final MTradeProductRepository _repository = MTradeProductRepository();
  MTradeCollaboratorPayload _payload = MTradeCollaboratorPayload();

  fetchData({bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getDetailCollaborator(
      payload: _payload,
    );

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        collaborator: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  refreshData() async {
    await fetchData(showLoading: false);
  }

  updateCollaborator(String? collaboratorID) {
    updatePayload(
      collaboratorID: collaboratorID,
    );
  }

  updateOrderFilter(Map<String, dynamic> orderFilter) {
    updatePayload(
      orderFilter: orderFilter,
    );
  }

  updatePayload({
    String? collaboratorID,
    Map<String, dynamic>? orderFilter,
  }) {
    _payload = _payload.copyWith(
      collaboratorID: collaboratorID,
      orderFilter: orderFilter,
    );
  }
}
