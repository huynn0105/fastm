import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/enum/mtrade/social_contact_type.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/features/client/repository/client_repository.dart';
import 'package:flutter_module/features/mtrade/repository/mtrade_product_repository.dart';
import 'package:flutter_module/models/mtrade/personal_link_setup/mtrade_personal_link_setup_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_personal_link_setup_payload.dart';

part 'mtrade_personal_link_setup_state.dart';

class MTradePersonalLinkSetupCubit extends Cubit<MTradePersonalLinkSetupState> {
  MTradePersonalLinkSetupCubit() : super(const MTradePersonalLinkSetupState());
  final MTradeProductRepository _repository = MTradeProductRepository();
  final ClientRepository _clientRepository = ClientRepository();
  MTradePersonalLinkSetupPayload _payload = MTradePersonalLinkSetupPayload();

  fetchFinanceData({bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getPersonalLinkSetup();

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        data: result.data,
      ));
      selectSocial(SocialContactType.phone);
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  fetchInsuranceData(String id, {bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _clientRepository.getDetailAdLink(id);

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        data: result.data,
      ));
      selectSocial(SocialContactType.phone);
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  selectSocial(SocialContactType socialType) {
    List<String> newSocial = [...?state.data?.detail?.social];

    final isExit = newSocial.indexWhere((e) => e == socialType.name) >= 0;

    if (isExit) {
      newSocial = newSocial.where((e) => e != socialType.name).toList();
    } else {
      newSocial.add(socialType.name);
    }

    emit(state.copyWith(
      data: state.data?.copyWith(
        detail: state.data?.detail?.copyWith(social: newSocial),
      ),
    ));
  }

  changeValueSocial(
    SocialContactType socialType,
    String text,
  ) {
    switch (socialType) {
      case SocialContactType.facebook:
        emit(state.copyWith(
          data: state.data?.copyWith(
            detail: state.data?.detail?.copyWith(socialFacebook: text),
          ),
        ));
        break;
      case SocialContactType.zalo:
        emit(state.copyWith(
          data: state.data?.copyWith(
            detail: state.data?.detail?.copyWith(socialZalo: text),
          ),
        ));
        break;
      default:
        break;
    }
  }

  changeName(
    String text,
  ) {
    emit(state.copyWith(
      data: state.data?.copyWith(
        detail: state.data?.detail?.copyWith(fullName: text),
      ),
    ));
  }

  showSocialContact() {
    emit(state.copyWith(
      data: state.data?.copyWith(
        detail: state.data?.detail?.copyWith(
          showContact: (state.data?.detail?.isShowSocialContact() ?? false) ? '0' : '1',
        ),
      ),
    ));
  }

  changeActiveLink() {
    emit(state.copyWith(
      data: state.data?.copyWith(
        detail: state.data?.detail?.copyWith(
          showContact: (state.data?.detail?.isShowSocialContact() ?? false) ? '0' : '1',
        ),
      ),
    ));
    emit(state.copyWith(
      data: state.data?.copyWith(
        detail: state.data?.detail?.copyWith(
          active: (state.data?.detail?.isActiveLink() ?? false) ? '0' : '1',
        ),
      ),
    ));
  }

  bool validUpdateInput() {
    final Map<String, String> newErrors = <String, String>{};

    if (TextUtils.isEmpty(state.data?.detail?.fullName)) {
      newErrors['fullName'] = 'Vui lòng nhập tên liên hệ';
    }

    if ((state.data?.detail?.isFacebook() ?? false) && TextUtils.isEmpty(state.data?.detail?.socialFacebook)) {
      newErrors['socialFacebook'] = 'Vui lòng nhập thông tin';
    }

    if ((state.data?.detail?.isZalo() ?? false) && TextUtils.isEmpty(state.data?.detail?.socialZalo)) {
      newErrors['socialZalo'] = 'Vui lòng nhập số điện thoại Zalo';
    }

    if ((state.data?.detail?.isFacebook() ?? false) == false &&
        (state.data?.detail?.isZalo() ?? false) == false &&
        (state.data?.detail?.isPhone() ?? false) == false) {
      newErrors['social'] = 'Vui lòng chọn phương thức liên hệ';
    }

    if ((state.data?.detail?.isInsurance() ?? false)) {
      if (TextUtils.isEmpty(state.data?.detail?.customerLabel)) {
        newErrors['customerLabel'] = 'Vui lòng nhập tên tiếp thị liên kết';
      }
      final isNotEnoughCommission = state.data?.detail?.insuranceDiscount?.entries.any((element) {
            final insurance = (state.data?.listInsurance ?? []).firstWhereOrNull((e) => e.iD == element.key);
            final maxCommission = TextUtils.parseDouble(insurance?.commPercent) ?? 0;
            final commission = TextUtils.parseDouble(element.value) ?? 0;
            return commission > maxCommission;
          }) ??
          false;

      if (isNotEnoughCommission) {
        newErrors['commission'] = 'Vui lòng kiểm tra lại chiết khấu cho khách đã nhập';
      }
    }

    emit(state.copyWith(
      errors: newErrors,
    ));

    return newErrors.isEmpty;
  }

  bool validCreateInput() {
    final Map<String, String> newErrors = <String, String>{};

    if (TextUtils.isEmpty(state.data?.detail?.fullName)) {
      newErrors['fullName'] = 'Vui lòng nhập tên liên hệ';
    }

    if ((state.data?.detail?.isFacebook() ?? false) && TextUtils.isEmpty(state.data?.detail?.socialFacebook)) {
      newErrors['socialFacebook'] = 'Vui lòng nhập thông tin';
    }

    if ((state.data?.detail?.isZalo() ?? false) && TextUtils.isEmpty(state.data?.detail?.socialZalo)) {
      newErrors['socialZalo'] = 'Vui lòng nhập số điện thoại Zalo';
    }

    if ((state.data?.detail?.isFacebook() ?? false) == false &&
        (state.data?.detail?.isZalo() ?? false) == false &&
        (state.data?.detail?.isPhone() ?? false) == false) {
      newErrors['social'] = 'Vui lòng chọn phương thức liên hệ';
    }

    if ((state.data?.detail?.isInsurance() ?? false)) {
      if (TextUtils.isEmpty(state.data?.detail?.customerLabel)) {
        newErrors['customerLabel'] = 'Vui lòng nhập tên tiếp thị liên kết';
      }

      final insuranceActive = state.data?.detail?.insuranceActiveArr ?? [];
      if (insuranceActive.isEmpty) {
        newErrors['commission'] = 'Vui lòng các sản phẩm hiển thị trong liên kế';
      } else {
        final isNotEnoughCommission = state.data?.detail?.insuranceDiscount?.entries.any((element) {
              final insurance = (state.data?.listInsurance ?? []).firstWhereOrNull((e) => e.iD == element.key);
              final maxCommission = TextUtils.parseDouble(insurance?.commPercent) ?? 0;
              final commission = TextUtils.parseDouble(element.value) ?? 0;
              return commission > maxCommission;
            }) ??
            false;

        if (isNotEnoughCommission) {
          newErrors['commission'] = 'Vui lòng kiểm tra lại chiết khấu cho khách đã nhập';
        }
      }
    }

    emit(state.copyWith(
      errors: newErrors,
    ));

    return newErrors.isEmpty;
  }

  updatePayload({String? appId}) {
    _payload = MTradePersonalLinkSetupPayload.fromModel(
      MTradePersonalLinkSetupModel(
        detail: state.data?.detail,
        link: state.data?.link,
        user: state.data?.user,
      ),
    );
  }

  updateLink() async {
    final valid = validUpdateInput();
    if (valid) {
      emit(state.copyWith(
        actionStatus: BlocStatus.loading,
      ));
      updatePayload();
      final result = await _repository.updatePersonalLinkSetup(payload: _payload);
      if (result.status) {
        emit(state.copyWith(
          actionStatus: BlocStatus.success,
        ));
      } else {
        emit(state.copyWith(
          actionStatus: BlocStatus.failure,
        ));
      }
    }
  }

  updateInsuranceLink() async {
    final valid = validUpdateInput();
    if (valid) {
      emit(state.copyWith(
        actionStatus: BlocStatus.loading,
      ));

      final result = await _clientRepository.updateAdLink(state.data!.detail!);
      if (result.status) {
        emit(state.copyWith(
          actionStatus: BlocStatus.success,
          actionMessage: result.errorMessage,
        ));
      } else {
        emit(state.copyWith(
          actionStatus: BlocStatus.failure,
          actionMessage: result.errorMessage,
        ));
      }
    }
  }

  changeLinkName(
    String text,
  ) {
    emit(state.copyWith(
      data: state.data?.copyWith(
        detail: state.data?.detail?.copyWith(customerLabel: text),
      ),
    ));
  }

  changeDiscountInsurance(
    String id,
    String text,
  ) {
    Map<String, String> insuranceDiscount = {...?state.data?.detail?.insuranceDiscount};
    insuranceDiscount[id] = text;

    emit(state.copyWith(
      data: state.data?.copyWith(
        detail: state.data?.detail?.copyWith(insuranceDiscount: insuranceDiscount),
      ),
    ));
  }

  selectInsuranceItem(
    String id,
  ) {
    List<String> insuranceActiveArr = [...?state.data?.detail?.insuranceActiveArr];
    if (insuranceActiveArr.contains(id)) {
      insuranceActiveArr = insuranceActiveArr.where((element) => element != id).toList();
    } else {
      insuranceActiveArr = [...insuranceActiveArr, id];
    }

    emit(state.copyWith(
      data: state.data?.copyWith(
        detail: state.data?.detail?.copyWith(insuranceActiveArr: insuranceActiveArr),
      ),
    ));
  }

  setMaxCommissionInsurance(
    bool isMax,
  ) {
    Map<String, String> insuranceDiscount = {...?state.data?.detail?.insuranceDiscount};
    final insuranceActiveArr = state.data?.detail?.insuranceActiveArr ?? [];

    for (var element in insuranceActiveArr) {
      if (isMax) {
        final insurance = (state.data?.listInsurance ?? []).firstWhereOrNull((e) => e.iD == element);
        insuranceDiscount[element] = insurance?.commPercent ?? "0";
      } else {
        insuranceDiscount[element] = "0";
      }
    }

    emit(state.copyWith(
      data: state.data?.copyWith(
        detail: state.data?.detail?.copyWith(insuranceDiscount: insuranceDiscount),
      ),
    ));
  }

  createAdLink() async {
    final valid = validCreateInput();
    if (valid) {
      emit(state.copyWith(
        actionStatus: BlocStatus.loading,
      ));

      final result = await _clientRepository.createAdLink(state.data!.detail!);
      if (result.status) {
        emit(state.copyWith(
          actionStatus: BlocStatus.success,
          actionMessage: result.errorMessage,
        ));
      } else {
        emit(state.copyWith(
          actionStatus: BlocStatus.failure,
          actionMessage: result.errorMessage,
        ));
      }
    }
  }

  removeAdLink() async {
    final valid = validCreateInput();
    if (valid) {
      emit(state.copyWith(
        removeStatus: BlocStatus.loading,
      ));

      final result = await _clientRepository.removeAdLink(state.data?.detail?.id ?? '');
      if (result.status) {
        emit(state.copyWith(
          removeStatus: BlocStatus.success,
          actionMessage: result.errorMessage,
        ));
      } else {
        emit(state.copyWith(
          removeStatus: BlocStatus.failure,
          actionMessage: result.errorMessage,
        ));
      }
    }
  }
}
