import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/enum/mtrade/delivery_location_type.dart';
import 'package:flutter_module/models/general_object.dart';
import 'package:flutter_module/models/mtrade/pay_later/mtrade_gen_mpl_token_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_gen_mpl_token_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_mpl_location_payload.dart';

import '../../../../app_data.dart';
import '../../../../common/enum/mtrade/scheme_type.dart';
import '../../../../common/utils/validation_util.dart';
import '../../repository/mtrade_product_repository.dart';

part 'pre_screen_pay_later_order_state.dart';

class PreScreenPayLaterOrderCubit extends Cubit<PreScreenPayLaterOrderState> {
  PreScreenPayLaterOrderCubit() : super(const PreScreenPayLaterOrderState());

  final MTradeProductRepository _repository = MTradeProductRepository();

  final TextEditingController phoneController = TextEditingController();
  final TextEditingController idNumberController = TextEditingController();
  final TextEditingController provinceController = TextEditingController();
  final TextEditingController districtController = TextEditingController();
  final TextEditingController wardController = TextEditingController();
  final TextEditingController householdHeadNameController = TextEditingController();
  final TextEditingController householdHeadIdNumberController = TextEditingController();

  updateProductSchemeType(String? schemeType) {
    emit(state.copyWith(schemeType: schemeType));
  }

  fetchData({
    String? mobilePhone,
    String? idNumber,
    String? provinceCode,
    String? districtCode,
    String? wardCode,
    String? householdHeadName,
    String? householdHeadIdNumber,
  }) async {
    phoneController.text = mobilePhone ?? '';
    idNumberController.text = idNumber ?? '';
    householdHeadNameController.text = householdHeadName ?? '';
    householdHeadIdNumberController.text = householdHeadIdNumber ?? '';
    await _getProvince();
    if (provinceCode != null) {
      final index = state.listProvince.indexWhere((e) => '${e.code}' == provinceCode);
      if (index >= 0) {
        await selectProvince(state.listProvince[index].ID ?? 0);
      }
    }
    if (districtCode != null) {
      final index = state.listDistrict.indexWhere((e) => '${e.code}' == districtCode);
      if (index >= 0) {
        await selectDistrict(state.listDistrict[index].ID ?? 0);
      }
    }
    if (wardCode != null) {
      final index = state.listWard.indexWhere((e) => '${e.code}' == wardCode);
      if (index >= 0) {
        await selectWard(state.listWard[index].ID ?? 0);
      }
    }
  }

  bool _checkErrorFields({Map<String, String>? json}) {
    Map<String, String> errorFields = {...(json ?? state.errorFields)};
    final enabledSubmit = errorFields.isEmpty && state.acceptedPolicy == true;
    emit(state.copyWith(
      errorFields: errorFields,
      enabledSubmit: enabledSubmit,
    ));
    return enabledSubmit;
  }

  bool validate() {
    Map<String, String> errorFields = {...state.errorFields};

    errorFields.addAll(_validatePhone());
    errorFields.addAll(_validateIDNumber());
    errorFields.addAll(_validateProvince());
    errorFields.addAll(_validateDistrict());
    errorFields.addAll(_validateWard());
    errorFields.addAll(_validateHouseholdHeadName());
    errorFields.addAll(_validateHouseholdHeadIdNumber());
    errorFields.addAll(_validatePolicy(forceShowError: true));

    return _checkErrorFields(json: errorFields);
  }

  _validatePhone() {
    Map<String, String> errorFields = {...state.errorFields};

    if (phoneController.text.isEmpty) {
      errorFields[AppConstants.orderPhoneNumberKey] = "Thông tin này là bắt buộc";
    } else if (phoneController.text.length < 10) {
      errorFields[AppConstants.orderPhoneNumberKey] = "Số điện thoại phải gồm 10 chữ số";
    } else if (PhoneInputValidation.dirty(value: phoneController.text).isNotValid) {
      errorFields[AppConstants.orderPhoneNumberKey] = "Số điện thoại không hợp lệ";
    } else {
      errorFields.remove(AppConstants.orderPhoneNumberKey);
    }

    return errorFields;
  }

  _validateIDNumber() {
    Map<String, String> errorFields = {...state.errorFields};

    if (idNumberController.text.isEmpty) {
      errorFields[AppConstants.orderIdNumberKey] = "Thông tin này là bắt buộc";
    } else if (idNumberController.text.length < 12) {
      errorFields[AppConstants.orderIdNumberKey] = "CCCD phải gồm 12 chữ số";
    } else {
      errorFields.remove(AppConstants.orderIdNumberKey);
    }

    return errorFields;
  }

  _validateProvince() {
    Map<String, String> errorFields = {...state.errorFields};

    if (provinceController.text.isEmpty) {
      errorFields[AppConstants.orderProvinceKey] = "Thông tin này là bắt buộc";
    } else {
      errorFields.remove(AppConstants.orderProvinceKey);
    }

    return errorFields;
  }

  _validateDistrict() {
    Map<String, String> errorFields = {...state.errorFields};

    if (districtController.text.isEmpty) {
      errorFields[AppConstants.orderDistrictKey] = "Thông tin này là bắt buộc";
    } else {
      errorFields.remove(AppConstants.orderDistrictKey);
    }

    return errorFields;
  }

  _validateWard() {
    Map<String, String> errorFields = {...state.errorFields};

    if (wardController.text.isEmpty) {
      errorFields[AppConstants.orderWardKey] = "Thông tin này là bắt buộc";
    } else {
      errorFields.remove(AppConstants.orderWardKey);
    }

    return errorFields;
  }

  _validateHouseholdHeadName() {
    Map<String, String> errorFields = {...state.errorFields};
    if (state.schemeType == SchemeType.POSM.name) {
      if (householdHeadNameController.text.isEmpty) {
        errorFields[AppConstants.householdHeadNameKey] = "Thông tin này là bắt buộc";
      } else {
        errorFields.remove(AppConstants.householdHeadNameKey);
      }
    }

    return errorFields;
  }

  _validateHouseholdHeadIdNumber() {
    Map<String, String> errorFields = {...state.errorFields};
    if (state.schemeType == SchemeType.POSM.name) {
      if (householdHeadIdNumberController.text.isEmpty) {
        errorFields[AppConstants.householdHeadIdNumberKey] = "Thông tin này là bắt buộc";
      } else if (householdHeadIdNumberController.text.length < 12) {
        errorFields[AppConstants.householdHeadIdNumberKey] = "CCCD phải gồm 12 chữ số";
      } else {
        errorFields.remove(AppConstants.householdHeadIdNumberKey);
      }
    }

    return errorFields;
  }

  _validatePolicy({bool forceShowError = false}) {
    Map<String, String> errorFields = {...state.errorFields};

    if (!state.acceptedPolicy && forceShowError) {
      errorFields[AppConstants.orderPolicyKey] = "Bạn có đồng ý với điều khoản trên?";
    } else {
      errorFields.remove(AppConstants.orderPolicyKey);
    }

    return errorFields;
  }

  changePolicy() {
    emit(state.copyWith(
      acceptedPolicy: !state.acceptedPolicy,
    ));
    _checkErrorFields(json: _validatePolicy());
  }

  changePhone(String value) {
    _checkErrorFields(json: _validatePhone());
  }

  changeIDNumber(String value) {
    _checkErrorFields(json: _validateIDNumber());
  }

  changeHouseholdHeadName(String value) {
    if (state.schemeType == SchemeType.POSM.name) {
      _checkErrorFields(json: _validateHouseholdHeadName());
    }
  }

  changeHouseholdHeadIdNumber(String value) {
    if (state.schemeType == SchemeType.POSM.name) {
      _checkErrorFields(json: _validateHouseholdHeadIdNumber());
    }
  }

  submit() async {
    if (!validate()) {
      return;
    }

    emit(state.copyWith(
      statusSubmit: BlocStatus.loading,
    ));

    final result = await _repository.genMplToken(
      payload: MTradeGenMplTokenPayload(
        mobilePhone: phoneController.text,
        idNumber: idNumberController.text,
        provinceID: state.selectedProvinceID,
        districtID: state.selectedDistrictID,
        wardID: state.selectedWardID,
        nameHeadOfHousehold: householdHeadNameController.text,
        idNumberHeadOfHousehold: householdHeadIdNumberController.text,
        token: AppData.instance.generatedProductToken,
      ),
    );

    if (result.status) {
      emit(state.copyWith(
        statusSubmit: BlocStatus.success,
        mplData: result.data,
      ));
    } else {
      emit(state.copyWith(
        statusSubmit: BlocStatus.failure,
        errorMessage: result.errorMessage,
      ));
    }
  }

  _getProvince() async {
    final result = await _repository.getMplLocation(
      payload: MTradeMplLocationPayload(
        type: LocationType.province.mplType,
      ),
    );
    if (result.status) {
      emit(state.copyWith(
        listProvince: result.data,
        enabledProvince: true,
      ));
    }
  }

  selectProvince(int id) async {
    final data = state.listProvince.firstWhereOrNull((e) => e.ID == id);

    provinceController.text = data?.name ?? "";
    districtController.clear();

    emit(state.copyWith(
      selectedProvinceID: id,
      selectedDistrictID: -1,
      enabledDistrict: false,
    ));

    _checkErrorFields(json: _validateProvince());

    final result = await _repository.getMplLocation(
      payload: MTradeMplLocationPayload(
        type: LocationType.district.mplType,
        parentCode: data?.code,
      ),
    );

    if (result.status) {
      emit(state.copyWith(
        listDistrict: result.data,
        enabledDistrict: true,
      ));
    }
  }

  selectDistrict(int id) async {
    final data = state.listDistrict.firstWhereOrNull((e) => e.ID == id);

    districtController.text = data?.name ?? "";

    emit(state.copyWith(
      selectedDistrictID: id,
    ));

    _checkErrorFields(json: _validateDistrict());
    final result = await _repository.getMplLocation(
      payload: MTradeMplLocationPayload(
        type: LocationType.ward.mplType,
        parentCode: data?.code,
      ),
    );

    if (result.status) {
      emit(state.copyWith(
        listWard: result.data,
        enabledWard: true,
      ));
    }
  }

  selectWard(int id) {
    final data = state.listWard.firstWhereOrNull((e) => e.ID == id);

    wardController.text = data?.name ?? "";

    emit(state.copyWith(
      selectedWardID: id,
    ));

    _checkErrorFields(json: _validateWard());
  }

  @override
  Future<void> close() {
    phoneController.dispose();
    idNumberController.dispose();
    provinceController.dispose();
    districtController.dispose();
    wardController.dispose();
    householdHeadNameController.dispose();
    householdHeadIdNumberController.dispose();
    return super.close();
  }
}
