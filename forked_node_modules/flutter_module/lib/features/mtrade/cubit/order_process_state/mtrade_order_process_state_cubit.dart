import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/models/mtrade/order/order_model.dart';
import '../../../../common/bloc_status.dart';
import '../../repository/mtrade_product_repository.dart';
import '../../../../services/api/mtrade/payload/mtrade_order_payload.dart';

part 'mtrade_order_process_state_state.dart';

class MTradeOrderProcessStateCubit extends Cubit<MTradeOrderProcessStateState> {
  MTradeOrderProcessStateCubit() : super(const MTradeOrderProcessStateState());

  final MTradeProductRepository _repository = MTradeProductRepository();
  MTradeOrderPayload _payload = MTradeOrderPayload();

  String get processState => _payload.processState ?? "";

  fetchData({bool showLoading = true, bool loadmore = false}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    updatePayload(page: loadmore ? (_payload.page ?? 1) + 1 : 1);

    final result = await _repository.getListOrderProcessState(
      payload: _payload,
    );

    if (result.status) {
      var data = result.data?.orders ?? [];
      if (loadmore) {
        data = [...state.orders, ...data];
      }
      emit(state.copyWith(
        status: BlocStatus.success,
        orders: data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  refreshData() async {
    await fetchData(showLoading: false);
  }

  loadmoreData() async {
    final length = state.orders.length;
    await fetchData(showLoading: false, loadmore: true);
    return length != state.orders.length;
  }

  updateQuery(String value) {
    updatePayload(
      filterText: value,
    );
  }

  updateOrderFilter(Map<String, dynamic> orderFilter) {
    updatePayload(
      orderFilter: orderFilter,
    );
  }

  updatePayload({
    String? processState,
    String? filterText,
    String? collaboratorID,
    int? page,
    Map<String, dynamic>? orderFilter,
  }) {
    _payload = _payload.copyWith(
      processState: processState,
      filterText: filterText,
      collaboratorID: collaboratorID,
      page: page,
      orderFilter: orderFilter,
    );
  }
}
