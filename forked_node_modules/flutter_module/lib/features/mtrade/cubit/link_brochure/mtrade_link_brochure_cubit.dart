import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/mtrade/repository/mtrade_product_repository.dart';
import 'package:flutter_module/models/mtrade/link_brochure/mtrade_link_brochure_model.dart';

part 'mtrade_link_brochure_state.dart';

class MTradeLinkBrochureCubit extends Cubit<MTradeLinkBrochureState> {
  MTradeLinkBrochureCubit() : super(const MTradeLinkBrochureState());
  final MTradeProductRepository _repository = MTradeProductRepository();
  String id = "";

  fetchData({required String ID}) async {
    id = ID;
    emit(state.copyWith(
      status: BlocStatus.loading,
      sendStatus: BlocStatus.initial,
    ));

    final result = await _repository.getDataLinkBrochure(
      ID: id,
    );

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        brochure: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  sendBrochureToEmail() async {
    emit(state.copyWith(
      status: BlocStatus.initial,
      sendStatus: BlocStatus.loading,
    ));

    final result = await _repository.sendDataLinkBrochureToEmail(
      ID: id,
      email: state.brochure?.email ?? '',
    );

    if (result.status) {
      emit(state.copyWith(
        sendStatus: BlocStatus.success,
      ));
    } else {
      emit(state.copyWith(
        sendStatus: BlocStatus.failure,
      ));
    }
  }
}
