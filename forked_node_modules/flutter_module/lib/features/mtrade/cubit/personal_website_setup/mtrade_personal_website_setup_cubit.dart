import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/models/master_data/master_data_model.dart';
import 'package:flutter_module/models/mtrade/personal_website_setup/mtrade_contact_method_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_personal_website_setup_payload.dart';
import '../../../../app_data.dart';
import '../../../../common/bloc_status.dart';
import '../../../../common/enum/mtrade/delivery_location_type.dart';
import '../../../../common/enum/mtrade/landing_page_source.dart';
import '../../../../common/enum/mtrade/website_setup_contact_method.dart';
import '../../../../di/get_it.dart';
import '../../../../models/mtrade/personal_website_setup/mtrade_personal_website_setup_model.dart';
import '../../../../services/api/mtrade/payload/mtrade_personal_website_payload.dart';
import '../../repository/mtrade_product_repository.dart';
import '../delivery_support/mtrade_delivery_support_cubit.dart';

part 'mtrade_personal_website_setup_state.dart';

class MTradePersonalWebsiteSetupCubit extends Cubit<MTradePersonalWebsiteSetupState> {
  MTradePersonalWebsiteSetupCubit() : super(const MTradePersonalWebsiteSetupState());

  String? source;

  final MTradeProductRepository _repository = MTradeProductRepository();
  final TextEditingController provinceController = TextEditingController();
  final TextEditingController districtController = TextEditingController();
  final TextEditingController wardController = TextEditingController();
  final TextEditingController messengerController = TextEditingController();

  Future fetchData({bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getPersonalWebsiteSetup(
      payload: MTradePersonalWebsiteDataPayload(
        source: source,
      ),
    );

    if (result.status) {
      await initData(result.data, forceInitLocation: true);
      AppData.instance.mtradeAlias = result.data?.source == 'daa' ? "daa_mtrade" : 'mtrade';
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
        checkPageIDMessage: result.errorMessage,
      ));
    }
  }

  Future refreshData() async {
    await fetchData(showLoading: false);
  }

  initData(MTradePersonalWebsiteSetupModel? data, {bool forceInitLocation = true}) async {
    if (forceInitLocation) {
      await _initLocationFromLocal();
      await _initLocationFromData(
        provinceCode: data?.provinceCode ?? AppData.instance.deliverySupportProvinceCode,
        districtCode: data?.districtCode ?? AppData.instance.deliverySupportDistrictCode,
        wardCode: data?.wardCode ?? AppData.instance.deliverySupportWardCode,
      );
    }
    messengerController.text = (data?.socialFacebook ?? "").replaceAll(
      AppConstants.prefixMessengerDomain,
      "",
    );
    AppData.instance.landingPageSource = MTradeLandingPageSource.values.firstWhereOrNull((e) => e.code == data?.source);
    emit(state.copyWith(
      status: BlocStatus.success,
      data: data,
      selectedContactMethodCodes: data?.social ?? [],
      errorFields: {},
    ));
  }

  _initLocationFromLocal() async {
    final deliveryCubit = getItInstance.get<MTradeDeliverySupportCubit>();
    if (!deliveryCubit.state.provinceStatus.isSuccess) {
      await deliveryCubit.fetchDataFromLocal();
    }
  }

  _initLocationFromData({
    required String? provinceCode,
    required String? districtCode,
    required String? wardCode,
  }) async {
    await getProvince();
    if (provinceCode != null) {
      await selectProvince(provinceCode, forceValidate: false);
      await selectDistrict(districtCode ?? '', forceValidate: false);
      await selectWard(wardCode ?? '', forceValidate: false);
    }
  }

  getProvince() async {
    final result = await _repository.getDeliveryLocation(
      type: LocationType.province.name,
      code: "",
    );

    if (result.status) {
      emit(state.copyWith(
        provinces: result.data,
        enabledProvince: true,
      ));
    }
  }

  selectProvince(String code, {bool forceValidate = true}) async {
    final data = state.provinces.firstWhereOrNull((e) => e.id == code);

    provinceController.text = data?.value ?? "";
    districtController.clear();

    emit(state.copyWith(
      selectedProvinceCode: code,
      enabledDistrict: false,
    ));

    final result = await _repository.getDeliveryLocation(
      type: LocationType.district.name,
      code: code,
    );

    if (result.status) {
      emit(state.copyWith(
        districts: result.data,
        enabledDistrict: true,
      ));
    }

    if (forceValidate) {
      _checkErrorFields(json: _validateProvince());
    }

    selectDistrict("", forceValidate: forceValidate);
  }

  selectDistrict(String code, {bool forceValidate = true}) async {
    final data = state.districts.firstWhereOrNull((e) => e.id == code);
    if (code.isEmpty || data == null) {
      districtController.text = LocationType.district.all;
      emit(state.copyWith(
        selectedDistrictCode: '',
        enabledWard: false,
      ));
      if (forceValidate) {
        _checkErrorFields(json: _validateDistrict());
      }
      selectWard("", forceValidate: forceValidate);
      return;
    }

    districtController.text = data.value ?? "";

    emit(state.copyWith(
      selectedDistrictCode: code,
      enabledWard: false,
    ));

    final result = await _repository.getDeliveryLocation(
      type: LocationType.ward.name,
      code: code,
    );

    if (result.status) {
      emit(state.copyWith(
        wards: result.data,
        enabledWard: true,
      ));
    }

    if (forceValidate) {
      _checkErrorFields(json: _validateDistrict());
    }
    selectWard("", forceValidate: forceValidate);
  }

  selectWard(String code, {bool forceValidate = true}) async {
    final data = state.wards.firstWhereOrNull((e) => e.id == code);
    if (code.isEmpty || data == null) {
      wardController.text = LocationType.ward.all;
      emit(state.copyWith(
        selectedWardCode: '',
      ));
      if (forceValidate) {
        _checkErrorFields(json: _validateWard());
      }
      return;
    }

    wardController.text = data.value ?? "";

    emit(state.copyWith(
      selectedWardCode: code,
    ));

    if (forceValidate) {
      _checkErrorFields(json: _validateWard());
    }
  }

  _validateProvince() {
    final errorFields = {...state.errorFields};

    if (provinceController.text.isEmpty) {
      errorFields[AppConstants.orderProvinceKey] = "Thông tin này là bắt buộc";
    } else {
      errorFields.remove(AppConstants.orderProvinceKey);
    }

    return errorFields;
  }

  _validateDistrict() {
    final errorFields = {...state.errorFields};

    if (districtController.text.isEmpty) {
      errorFields[AppConstants.orderDistrictKey] = "Thông tin này là bắt buộc";
    } else {
      errorFields.remove(AppConstants.orderDistrictKey);
    }

    return errorFields;
  }

  _validateWard() {
    final errorFields = {...state.errorFields};

    if (wardController.text.isEmpty) {
      errorFields[AppConstants.orderWardKey] = "Thông tin này là bắt buộc";
    } else {
      errorFields.remove(AppConstants.orderWardKey);
    }

    return errorFields;
  }

  changeContactMethod(String code) {
    final methods = [...state.selectedContactMethodCodes];

    if (methods.contains(code)) {
      methods.removeWhere((e) => e == code);
    } else {
      methods.add(code);
    }

    emit(state.copyWith(
      selectedContactMethodCodes: methods,
    ));

    _checkErrorFields(json: _validateContactMethod());
    _checkErrorFields(json: _validateContactMessengerMethod());
  }

  bool _checkErrorFields({Map<String, String>? json}) {
    Map<String, String> errorFields = {...(json ?? state.errorFields)};

    bool enabledLocation = TextUtils.isNotEmpty(state.selectedProvinceCode);
    bool enabledMethods = false;
    if (state.selectedContactMethodCodes.isNotEmpty) {
      if (state.selectedContactMethodCodes.contains(WebsiteSetupContactMethod.socialFacebook.name)) {
        enabledMethods = messengerController.text.trim().isNotEmpty;
      } else {
        enabledMethods = true;
      }
    } else {
      enabledMethods = false;
    }

    final enabledSave = errorFields.isEmpty && enabledLocation && enabledMethods;

    emit(state.copyWith(
      enabledSave: enabledSave,
      errorFields: errorFields,
    ));

    return enabledSave;
  }

  _validateContactMethod() {
    final methods = [...state.selectedContactMethodCodes];
    final errorFields = {...state.errorFields};

    if (methods.isEmpty) {
      errorFields[AppConstants.websiteSetupContactMethodKey] = "Vui lòng chọn 1 trong 3 phương thức dưới đây";
    } else {
      errorFields.remove(AppConstants.websiteSetupContactMethodKey);
    }

    return errorFields;
  }

  _validateContactMessengerMethod() {
    final methods = [...state.selectedContactMethodCodes];
    final errorFields = {...state.errorFields};

    if (methods.contains(WebsiteSetupContactMethod.socialFacebook.name)) {
      if (messengerController.text.isEmpty) {
        errorFields[AppConstants.websiteSetupContactMethodMessengerKey] = "Thông tin này là bắt buộc";
      } else {
        errorFields.remove(AppConstants.websiteSetupContactMethodMessengerKey);
      }
    } else {
      errorFields.remove(AppConstants.websiteSetupContactMethodMessengerKey);
    }

    return errorFields;
  }

  changeMessengerAddress(String text) {
    _checkErrorFields(json: _validateContactMessengerMethod());
  }

  _validate() {
    Map<String, String> errorFields = {...state.errorFields};

    errorFields.addAll(_validateContactMethod());
    errorFields.addAll(_validateContactMessengerMethod());
    errorFields.addAll(_validateProvince());
    errorFields.addAll(_validateDistrict());
    errorFields.addAll(_validateWard());

    _checkErrorFields(json: errorFields);
  }

  save({
    Function()? onSuccess,
  }) async {
    _validate();
    if (!state.enabledSave) {
      return;
    }

    emit(state.copyWith(
      statusSave: BlocStatus.loading,
    ));

    final methods = state.selectedContactMethodCodes;

    final result = await _repository.savePersonalWebsiteSetup(
      payload: MTradePersonalWebsiteSetupPayload(
        socialFacebook: methods.contains(WebsiteSetupContactMethod.socialFacebook.name)
            ? AppConstants.prefixMessengerDomain + messengerController.text
            : null,
        social: state.selectedContactMethodCodes,
        provinceCode: state.selectedProvinceCode,
        districtCode: state.selectedDistrictCode,
        wardCode: state.selectedWardCode,
        source: source,
      ),
    );

    if (result.status) {
      emit(state.copyWith(
        statusSave: BlocStatus.success,
      ));
      initData(result.data, forceInitLocation: false);
      onSuccess?.call();
    } else {
      emit(state.copyWith(
        statusSave: BlocStatus.failure,
        errorMessage: result.errorMessage,
      ));
    }
  }

  getContactMethod() async {
    final result = await _repository.getLandingPageContactMethods();

    if (result.status) {
      emit(state.copyWith(
        contactMethod: result.data,
      ));
    }
  }

  updateSource({
    String? source,
  }) {
    this.source = source;
  }

  clearData() {
    emit(const MTradePersonalWebsiteSetupState());
  }

  @override
  Future<void> close() {
    provinceController.dispose();
    districtController.dispose();
    wardController.dispose();
    messengerController.dispose();
    return super.close();
  }
}
