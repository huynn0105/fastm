part of 'mtrade_cart_cubit.dart';

class MTradeCartState extends Equatable {
  const MTradeCartState({
    this.status = BlocStatus.initial,
    this.deleteStatus = BlocStatus.initial,
    this.checkProjectPayNowStatus = BlocStatus.initial,
    this.checkProjectPayLaterStatus = BlocStatus.initial,
    this.checkProductSchemePayLater = BlocStatus.initial,
    this.checkProductStockStatus = BlocStatus.initial,
    this.products = const [],
    this.selectedProductIDs = const [],
    this.selectedItems = const [],
    this.totalPrice = 0,
    this.totalPromotionPrice = 0,
    this.totalQuantity = 0,
    this.enabledPayNow = false,
    this.enabledPayLater = false,
    this.projectCode,
    this.errorMessage,
    this.errorFields = const {},
    this.promotions = const [],
  });

  final BlocStatus status;
  final BlocStatus deleteStatus;
  final BlocStatus checkProjectPayNowStatus;
  final BlocStatus checkProjectPayLaterStatus;
  final BlocStatus checkProductSchemePayLater;
  final BlocStatus checkProductStockStatus;
  final List<MTradeCartProductModel> products;
  final List<String> selectedProductIDs;
  final List<OrderItems> selectedItems;
  final double totalPrice;
  final double totalPromotionPrice;
  final int totalQuantity;
  final bool enabledPayNow;
  final bool enabledPayLater;
  final ProjectCodeModel? projectCode;
  final String? errorMessage;
  final Map<String, String> errorFields;
  final List<DataProductVariationsModel> promotions;

  @override
  List<Object?> get props => [
        status,
        deleteStatus,
        checkProjectPayNowStatus,
        checkProjectPayLaterStatus,
        checkProductSchemePayLater,
        checkProductStockStatus,
        products,
        selectedProductIDs,
        selectedItems,
        totalPrice,
        totalPromotionPrice,
        totalQuantity,
        enabledPayNow,
        enabledPayLater,
        projectCode,
        errorMessage,
        errorFields,
        promotions,
      ];

  MTradeCartState copyWith({
    BlocStatus? status,
    BlocStatus? deleteStatus,
    BlocStatus? checkProjectPayNowStatus,
    BlocStatus? checkProjectPayLaterStatus,
    BlocStatus? checkProductSchemePayLater,
    BlocStatus? checkProductStockStatus,
    List<MTradeCartProductModel>? products,
    List<String>? selectedProductIDs,
    List<OrderItems>? selectedItems,
    double? totalPrice,
    double? totalPromotionPrice,
    int? totalQuantity,
    bool? enabledPayNow,
    bool? enabledPayLater,
    ProjectCodeModel? projectCode,
    String? errorMessage,
    Map<String, String>? errorFields,
    List<DataProductVariationsModel>? promotions,
  }) {
    return MTradeCartState(
      status: status ?? this.status,
      deleteStatus: deleteStatus ?? BlocStatus.initial,
      checkProjectPayNowStatus: checkProjectPayNowStatus ?? BlocStatus.initial,
      checkProjectPayLaterStatus: checkProjectPayLaterStatus ?? BlocStatus.initial,
      checkProductSchemePayLater: checkProductSchemePayLater ?? BlocStatus.initial,
      checkProductStockStatus: checkProductStockStatus ?? BlocStatus.initial,
      products: products ?? this.products,
      selectedProductIDs: selectedProductIDs ?? this.selectedProductIDs,
      selectedItems: selectedItems ?? this.selectedItems,
      totalPrice: totalPrice ?? this.totalPrice,
      totalPromotionPrice: totalPromotionPrice ?? this.totalPromotionPrice,
      totalQuantity: totalQuantity ?? this.totalQuantity,
      enabledPayNow: enabledPayNow ?? this.enabledPayNow,
      enabledPayLater: enabledPayLater ?? this.enabledPayLater,
      projectCode: projectCode,
      errorMessage: errorMessage,
      errorFields: errorFields ?? this.errorFields,
      promotions: promotions ?? this.promotions,
    );
  }
}
