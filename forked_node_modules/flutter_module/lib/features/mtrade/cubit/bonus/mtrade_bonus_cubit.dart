import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_bonus_payload.dart';
import '../../../../common/bloc_status.dart';
import '../../../../common/extension/datetime_extension.dart';
import '../../../../models/mtrade/bonus/mtrade_bonus_model.dart';

import '../../repository/mtrade_product_repository.dart';

part 'mtrade_bonus_state.dart';

class MTradeBonusCubit extends Cubit<MTradeBonusState> {
  MTradeBonusCubit() : super(MTradeBonusState());

  final MTradeProductRepository _repository = MTradeProductRepository();

  MTradeBonusPayload _payload = MTradeBonusPayload();

  fetchData({bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getMTradeBonus(
      payload: _payload,
    );

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        bonus: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  refreshData() async {
    await fetchData(showLoading: false);
  }

  updateOrderFilter(Map<String, dynamic> orderFilter) {
    _payload = _payload.copyWith(
      orderFilter: orderFilter,
    );
  }
}
