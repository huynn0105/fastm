part of 'mtrade_filter_cubit.dart';

class MTradeFilterState extends Equatable {
  const MTradeFilterState({
    this.status = BlocStatus.initial,
    this.data = const [],
    this.selectedFilters = const {},
    this.selectedSubGroup,
    this.clearPriceInput = false,
    this.isInputtingPrice = false,
    this.path = "",
  });

  final BlocStatus status;
  final List<MTradeFilterGroupModel> data;
  final Map<String, List<FilterObject>> selectedFilters;
  final String path;

  /// String: parent keyword
  /// MTradeFilterGroupModel: value
  final Map<String, MTradeFilterGroupModel?>? selectedSubGroup;
  final bool clearPriceInput;
  final bool isInputtingPrice;

  @override
  List<Object?> get props => [
        status,
        data,
        selectedFilters,
        selectedSubGroup,
        clearPriceInput,
        path,
      ];

  MTradeFilterState copyWith({
    BlocStatus? status,
    List<MTradeFilterGroupModel>? data,
    Map<String, List<FilterObject>>? selectedFilters,
    Map<String, MTradeFilterGroupModel?>? selectedSubGroup,
    bool? forceResetSelectedSubGroup,
    bool? clearPriceInput,
    bool? isInputtingPrice,
    String? path,
  }) {
    return MTradeFilterState(
      status: status ?? this.status,
      data: data ?? this.data,
      selectedFilters: selectedFilters ?? this.selectedFilters,
      selectedSubGroup: forceResetSelectedSubGroup == true ? const {} : selectedSubGroup ?? this.selectedSubGroup,
      clearPriceInput: clearPriceInput ?? false,
      isInputtingPrice: isInputtingPrice ?? this.isInputtingPrice,
      path: path ?? this.path,
    );
  }

  MTradeFilterState merge(MTradeFilterState? other) {
    return copyWith(
      status: other?.status ?? status,
      data: other?.data ?? data,
      selectedFilters: other?.selectedFilters ?? selectedFilters,
      selectedSubGroup: other?.selectedSubGroup ?? selectedSubGroup,
      clearPriceInput: other?.clearPriceInput ?? false,
      isInputtingPrice: other?.isInputtingPrice ?? isInputtingPrice,
      path: other?.path ?? path,
    );
  }
}
