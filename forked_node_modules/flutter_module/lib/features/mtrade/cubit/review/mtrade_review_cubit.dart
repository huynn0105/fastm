import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/mtrade/repository/mtrade_product_repository.dart';
import 'package:flutter_module/models/mtrade/review/mtrade_select_user_review_model.dart';
import 'package:flutter_module/models/mtrade/review/mtrade_status_review_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_review_user_payload.dart';

part 'mtrade_review_state.dart';

class MTradeReviewCubit extends Cubit<MTradeReviewState> {
  MTradeReviewCubit() : super(const MTradeReviewState());

  final MTradeProductRepository _repository = MTradeProductRepository();
  MTradeReviewUserPayload _payload = MTradeReviewUserPayload();

  fetchListSelectUser({required String appID}) async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));
    final result = await _repository.getListSelectUserReview(appID: appID);

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        usersReview: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  fetchStatusReview() async {
    emit(state.copyWith(
      status: BlocStatus.loading,
    ));
    final result = await _repository.getStatusReview();

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        statusReview: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  updatePayload({
    String? appID,
    String? userID,
    String? subsID,
    int? rate,
    String? note,
  }) {
    _payload = _payload.copyWith(
      appID: appID,
      userID: userID,
      subsID: subsID,
      rate: rate,
      note: note,
    );
  }

  reviewUser() async {
    emit(state.copyWith(
      reviewStatus: BlocStatus.loading,
    ));
    final result = await _repository.reviewUser(payload: _payload);

    if (result.status) {
      emit(state.copyWith(
        reviewStatus: BlocStatus.success,
      ));
    } else {
      emit(state.copyWith(
        reviewStatus: BlocStatus.failure,
      ));
    }
  }
}
