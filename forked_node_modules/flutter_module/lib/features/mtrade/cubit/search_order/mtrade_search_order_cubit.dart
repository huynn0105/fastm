import 'package:equatable/equatable.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/mtrade/repository/mtrade_product_repository.dart';
import 'package:flutter_module/models/mtrade/order/mtrade_searched_order_model.dart';
import 'package:flutter_module/models/mtrade/order/order_history_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_search_order_payload.dart';

part 'mtrade_search_order_state.dart';

class MTradeSearchOrderCubit extends Cubit<MTradeSearchOrderState> {
  MTradeSearchOrderCubit() : super(const MTradeSearchOrderState());

  final MTradeProductRepository _repository = MTradeProductRepository();

  MTradeSearchOrderPayload _payload = MTradeSearchOrderPayload();

  fetchData({bool showLoading = true, bool loadmore = false}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.searchOrder(
      payload: _payload,
    );

    if (result.status) {
      var data = result.data;
      emit(state.copyWith(
        status: BlocStatus.success,
        orderHistory: data?.histories,
        data: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  updatePayload({
    String? orderCode,
  }) {
    _payload = _payload.copyWith(orderCode: orderCode);
  }

  reset() {
    emit(const MTradeSearchOrderState());
  }
}
