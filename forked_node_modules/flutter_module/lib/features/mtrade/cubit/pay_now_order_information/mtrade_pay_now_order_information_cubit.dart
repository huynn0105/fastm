import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/extension/map_extension.dart';
import 'package:flutter_module/common/utils/debounce_util.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/models/master_data/time_frame_model.dart';
import 'package:flutter_module/models/mtrade/order/mtrade_order_price_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_order_price_by_sku_payload.dart';
import 'package:scroll_to_index/scroll_to_index.dart';

import '../../../../app_data.dart';
import '../../../../common/bloc_status.dart';
import '../../../../common/constants.dart';
import '../../../../common/enum/mtrade/delivery_location_type.dart';
import '../../../../common/enum/mtrade/invoice_type.dart';
import '../../../../common/enum/mtrade/payment_type.dart';
import '../../../../common/utils/validation_util.dart';
import '../../../../di/get_it.dart';
import '../../../../models/master_data/master_data_model.dart';
import '../../../../models/mtrade/cart/mtrade_cart_product_model.dart';
import '../../../../models/mtrade/order/payment_method_model.dart';
import '../../../../models/mtrade/order/mtrade_pay_now_order_model.dart';
import '../../../../models/mtrade/promotion/data_product_variations_model.dart';
import '../../../../models/mtrade/promotion/mtrade_promotion_data_model.dart';
import '../../../../services/api/mtrade/payload/mtrade_pay_now_order_payload.dart';
import '../../repository/mtrade_product_repository.dart';
import '../delivery_support/mtrade_delivery_support_cubit.dart';

part 'mtrade_pay_now_order_information_state.dart';

class MTradePayNowOrderInformationCubit extends Cubit<MTradePayNowOrderInformationState> {
  MTradePayNowOrderInformationCubit() : super(const MTradePayNowOrderInformationState());

  final MTradeProductRepository _repository = MTradeProductRepository();

  final AutoScrollController scrollController = AutoScrollController();

  final TextEditingController orderFullnameController = TextEditingController();
  final TextEditingController orderPhoneController = TextEditingController();
  final TextEditingController orderProvinceController = TextEditingController();
  final TextEditingController orderDistrictController = TextEditingController();
  final TextEditingController orderWardController = TextEditingController();
  final TextEditingController orderStreetController = TextEditingController();
  final TextEditingController receiveTimeController = TextEditingController();

  final TextEditingController invoicePersonalFullNameController = TextEditingController();
  final TextEditingController invoicePersonalAddressController = TextEditingController();
  final TextEditingController invoiceCompanyNameController = TextEditingController();
  final TextEditingController invoiceCompanyTaxController = TextEditingController();
  final TextEditingController invoiceCompanyAddressController = TextEditingController();
  final TextEditingController invoiceEmailController = TextEditingController();

  final DebounceUtil _updateQuantityDebounce = DebounceUtil(milliseconds: 250);

  fetchData({required List<MTradeCartProductModel> products}) {
    _initDeliverySupport();
    _fetchDeliveryTimeFrame();
    _initProducts(products: products);
    _initErrorIndexes();
    fetchPriceOrder(products: products);
  }

  fetchPriceOrder({required List<MTradeCartProductModel> products}) async {
    emit(state.copyWith(status: BlocStatus.loading));
    BaseModel<MTradeOrderPriceModel> result = await _repository.getOrderPriceBySKU(
        payload: MTradeOrderPriceBySkuPayload(
      order: products.map((e) {
        return Order(sku: e.sku, quantity: e.quantity);
      }).toList(),
      channel: 'AGENT_APP',
      paymentMethod: MTradePaymentType.now.code,
      provinceCode: state.selectedProvinceCode,
      districtCode: state.selectedDistrictCode,
      wardCode: state.selectedWardCode,
    ));
    if (result.status) {
      emit(state.copyWith(status: BlocStatus.success, orderPrices: result.data?.listPrice));
    }
    _updatePrice();
  }

  _scrollToErrorIndex() {
    var errorFields = {...state.errorFields};
    var errorIndexes = {...state.errorIndexes}..removeWhere((key, value) => !errorFields.keys.contains(key));
    var indexes = errorIndexes.values.toList()..sort((a, b) => a.compareTo(b));
    var index = indexes.getFirst();

    ///
    if (index != null) {
      scrollController.scrollToIndex(
        index,
        duration: const Duration(milliseconds: 800),
        preferPosition: AutoScrollPosition.begin,
      );
    }
  }

  _initErrorIndexes() {
    List<String> errors = [
      AppConstants.orderFullNameKey,
      AppConstants.orderPhoneNumberKey,
      AppConstants.orderProvinceKey,
      AppConstants.orderDistrictKey,
      AppConstants.orderWardKey,
      AppConstants.orderStreetKey,
      AppConstants.receiveTimeKey,
      AppConstants.invoicePersonalFullNameKey,
      AppConstants.invoicePersonalAddressKey,
      AppConstants.invoiceCompanyNameKey,
      AppConstants.invoiceCompanyTaxKey,
      AppConstants.invoiceCompanyAddressKey,
      AppConstants.invoiceEmailKey,
    ];
    emit(state.copyWith(
      errorIndexes: errors.asMap().inverse(),
    ));
  }

  _initDeliverySupport() {
    final deliveryState = getItInstance.get<MTradeDeliverySupportCubit>().state;
    final province = deliveryState.provinces.firstWhereOrNull(
      (e) => e.id == AppData.instance.deliverySupportProvinceCode,
    );
    final district = deliveryState.districts.firstWhereOrNull(
      (e) => e.id == AppData.instance.deliverySupportDistrictCode,
    );
    final ward = deliveryState.wards.firstWhereOrNull(
      (e) => e.id == AppData.instance.deliverySupportWardCode,
    );

    orderProvinceController.text = province?.value ?? "";
    orderDistrictController.text = district?.value ?? "";
    orderWardController.text = ward?.value ?? "";

    emit(state.copyWith(
      provinceStatus: deliveryState.provinceStatus,
      districtStatus: deliveryState.districtStatus,
      wardStatus: deliveryState.wardStatus,
      provinces: deliveryState.provinces,
      districts: deliveryState.districts,
      wards: deliveryState.wards,
      selectedProvinceCode: deliveryState.selectedProvince?.code,
      selectedDistrictCode: deliveryState.selectedDistrict?.code,
      selectedWardCode: deliveryState.selectedWard?.code,
      enabledProvince: true,
      enabledDistrict: deliveryState.selectedProvince != null,
      enabledWard: deliveryState.selectedDistrict != null,
    ));
  }

  _fetchDeliveryTimeFrame() async {
    BaseModel<List<TimeFrameModel>> result = await _repository.getDeliveryTimeFrame();
    emit(state.copyWith(timeFrames: result.data));
  }

  _initProducts({required List<MTradeCartProductModel> products}) {
    emit(state.copyWith(
      products: products,
    ));

    _updatePrice();
  }

  bool _checkErrorFields({Map<String, String>? json}) {
    Map<String, String> errorFields = {...(json ?? state.errorFields)};
    final enabled = errorFields.isEmpty;
    emit(state.copyWith(
      errorFields: errorFields,
      enabled: enabled,
    ));
    return enabled;
  }

  updateFullname(String value) {
    _checkErrorFields(json: _validateOrderFullName());
  }

  updatePhone(String value) {
    _checkErrorFields(json: _validateOrderPhone());
  }

  updateStreet(String value) {
    _checkErrorFields(json: _validateOrderStreet());
  }

  submitOrder({bool forceShowPolicy = false}) async {
    if (!_validate()) {
      _scrollToErrorIndex();
      return;
    }

    emit(state.copyWith(
      submitOrderStatus: BlocStatus.loading,
    ));

    String url = "";
    if (kIsWeb) {
      String path = Uri.base.origin;
      Uri uri = Uri.parse(path).replace(queryParameters: {
        "pageID": AppData.instance.landingPageID,
        "provinceCode": AppData.instance.landingPageProvinceCode,
        "districtCode": AppData.instance.landingPageDistrictCode,
      });
      url = uri.toString();
    }

    InvoiceInfo? invoice;
    if (state.invoiceType.isPersonal) {
      invoice = InvoiceInfo(
        name: invoicePersonalFullNameController.text.trim().toUpperCase(),
        tax: null,
        address: invoicePersonalAddressController.text.trim(),
        email: invoiceEmailController.text.trim(),
      );
    }
    if (state.invoiceType.isCompany) {
      invoice = InvoiceInfo(
        name: invoiceCompanyNameController.text.trim().toUpperCase(),
        tax: invoiceCompanyTaxController.text.trim(),
        address: invoiceCompanyAddressController.text.trim(),
        email: invoiceEmailController.text.trim(),
      );
    }

    final result = await _repository.submitPayNowOrder(
      payload: MTradePayNowOrderPayload(
        redirectLink: kIsWeb ? url : null,
        customerInfo: CustomerInfo(
          name: orderFullnameController.text.trim().toUpperCase(),
          phone: orderPhoneController.text.trim(),
          address: orderStreetController.text.trim(),
          provinceCode: state.selectedProvinceCode,
          districtCode: state.selectedDistrictCode,
          wardCode: state.selectedWardCode,
        ),
        orderItems: state.products.map((p) {
          final promotions = state.promotions.where((e) => e.sku == p.sku).toList();
          List<OmsPromotionCodes> codes = [];
          for (var promo in promotions) {
            codes.addAll(promo.codes?.map((e) => OmsPromotionCodes(code: e.code ?? '')).toList() ?? []);
          }
          OrderPrice? price = state.orderPrices.firstWhereOrNull((element) => element.sku == p.sku);
          return OrderItems(
            sku: p.sku,
            quantity: p.quantity,
            merchantCode: p.merchantCode,
            promotions: codes,
            productPriceId: state.promotions.isNotEmpty ? null : price?.productPriceId,
            productPriceItemId: state.promotions.isNotEmpty ? null : price?.productPriceItemId,
          );
        }).toList(),
        invoiceInfo: invoice,
        timeDeliveries: state.selectReceiveTimes.map((e) => e.id ?? 0).toList(),
        channelCode: 'AGENT_APP',
        paymentMethod: state.selectedPaymentMethod?.paymentMethod,
      ),
    );

    if (result.status) {
      emit(state.copyWith(
        submitOrderStatus: BlocStatus.success,
        order: result.data,
      ));
    } else {
      emit(state.copyWith(
        submitOrderStatus: BlocStatus.failure,
        errorMessage: result.errorMessage,
        invalidSku: result.data?.invalidSku,
        invalidSkuMessage: result.errorMessage,
      ));
      _validate();
    }
  }

  getListProvince() async {
    emit(state.copyWith(
      provinceStatus: BlocStatus.loading,
    ));

    final result = await _repository.getDeliveryLocation(
      type: LocationType.province.name,
      code: "",
    );

    if (result.status) {
      emit(state.copyWith(
        provinceStatus: BlocStatus.success,
        provinces: result.data,
      ));
    } else {
      emit(state.copyWith(
        provinceStatus: BlocStatus.failure,
      ));
    }
  }

  getListDistrict(String provinceCode) async {
    emit(state.copyWith(
      districtStatus: BlocStatus.loading,
    ));

    final result = await _repository.getDeliveryLocation(
      type: LocationType.district.name,
      code: provinceCode,
    );

    if (result.status) {
      emit(state.copyWith(
        districtStatus: BlocStatus.success,
        districts: result.data,
        enabledDistrict: true,
      ));
    } else {
      emit(state.copyWith(
        districtStatus: BlocStatus.failure,
      ));
    }
  }

  getListWard(String districtCode) async {
    emit(state.copyWith(
      wardStatus: BlocStatus.loading,
    ));

    final result = await _repository.getDeliveryLocation(
      type: LocationType.ward.name,
      code: districtCode,
    );

    if (result.status) {
      emit(state.copyWith(
        wardStatus: BlocStatus.success,
        wards: result.data,
        enabledWard: true,
      ));
    } else {
      emit(state.copyWith(
        wardStatus: BlocStatus.failure,
      ));
    }
  }

  selectProvince(String code) {
    final data = state.provinces.firstWhereOrNull((e) => e.id == code);
    orderProvinceController.text = data?.value ?? "";
    orderDistrictController.text = "";
    orderWardController.text = "";

    _checkErrorFields(json: _validateOrderProvince());

    emit(state.copyWith(
      selectedProvinceCode: code,
      selectedDistrictCode: "",
      selectedWardCode: "",
      enabledDistrict: false,
      enabledWard: false,
      invalidSku: [],
    ));

    getListDistrict(code);
  }

  selectDistrict(String code) {
    final data = state.districts.firstWhereOrNull((e) => e.id == code);
    orderDistrictController.text = data?.value ?? "";
    orderWardController.text = "";

    _checkErrorFields(json: _validateOrderDistrict());

    emit(state.copyWith(
      selectedDistrictCode: code,
      selectedWardCode: "",
      enabledWard: false,
      invalidSku: [],
    ));

    getListWard(code);
  }

  selectWard(String code) {
    final data = state.wards.firstWhereOrNull((e) => e.id == code);
    orderWardController.text = data?.value ?? "";

    _checkErrorFields(json: _validateOrderWard());

    emit(state.copyWith(
      selectedWardCode: code,
      invalidSku: [],
    ));
  }

  selectReceiveTime(List<TimeFrameModel> selectReceiveTimes) {
    receiveTimeController.text = selectReceiveTimes.map((e) => e.getTitle()).join(', ');
    _checkErrorFields(json: _validateOrderReceiveTime());
    emit(state.copyWith(
      selectReceiveTimes: selectReceiveTimes,
    ));
  }

  deleteProduct(String sku) {
    List<MTradeCartProductModel> list = [...state.products];
    List<String> skus = [...state.invalidSku];

    list.removeWhere((e) => e.sku == sku);
    skus.removeWhere((e) => e == sku);

    emit(state.copyWith(
      products: list,
      invalidSku: skus,
      promotions: [],
    ));
    _updatePrice();
  }

  updateQuantity(int index, int quantity) {
    final products = [...state.products];
    products[index] = products[index].copyWith(
      quantity: quantity,
    );
    emit(state.copyWith(
      products: products,
      promotions: [],
    ));
    _updatePrice();
    _updateQuantityDebounce.run(() {
      fetchPriceOrder(products: products);
    });
  }

  _updatePrice() {
    double total = 0;
    bool allowWholesalePrice = state.promotions.isEmpty == true;
    bool existWholesalePrice = state.orderPrices.any((element) => element.existWholesalePrice());
    if (allowWholesalePrice && existWholesalePrice) {
      total = state.products.isEmpty
          ? 0.0
          : state.products
              .map((e) {
                OrderPrice? orderPrice = state.orderPrices.firstWhereOrNull((element) => element.sku == e.sku);
                if (orderPrice?.existWholesalePrice() == true) {
                  return (orderPrice?.newPrice ?? 0) * (e.quantity ?? 1);
                }
                return (e.price ?? 0) * (e.quantity ?? 1);
              })
              .toList()
              .fold(0.0, (pre, cur) => pre + cur);
    } else {
      total = state.products.isEmpty
          ? 0.0
          : state.products.map((e) => (e.price ?? 0) * (e.quantity ?? 1)).toList().fold(0.0, (pre, cur) => pre + cur);
    }

    emit(state.copyWith(
      totalPrice: total,
      clearPaymentMethod: true,
    ));
    _updateTotalPromotionPrice();
  }

  addProduct(
    MTradeCartProductModel data, {
    required Function(String message) onFailure,
  }) {
    final index = state.products.indexWhere(
      (e) => e.sku == data.sku,
    );
    if (index >= 0) {
      final quantity = (state.products[index].quantity ?? 0) + 1;
      if (1 < quantity && quantity <= AppData.instance.maxQuantityPerProduct) {
        updateQuantity(index, quantity);
        _updatePrice();
      } else {
        onFailure("Số lượng của sản phẩm vượt quá quy định cho phép");
      }
      return;
    } else {
      if (state.products.length < AppData.instance.maxProductPerOrder) {
        emit(state.copyWith(
          products: [...state.products, data],
        ));
        _updatePrice();
      } else {
        onFailure("Tổng số sản phẩm vượt quá quy định cho phép");
      }
    }
  }

  toggleIssueInvoice() {
    emit(state.copyWith(enableIssueInvoice: !state.enableIssueInvoice));
    _checkErrorFields(json: _validateInvoiceType());
  }

  invoiceTypeChanged(InvoiceType type) {
    emit(state.copyWith(
      invoiceType: type,
    ));
    _checkErrorFields(json: _validateInvoiceType());
  }

  invoicePersonalFullNameChanged(String text) {
    _checkErrorFields(json: _validateInvoicePersonalFullName());
  }

  invoicePersonalAddressChanged(String text) {
    _checkErrorFields(json: _validateInvoicePersonalAddress());
  }

  invoiceCompanyNameChanged(String text) {
    _checkErrorFields(json: _validateInvoiceCompanyName());
  }

  invoiceCompanyTaxChanged(String text) {
    _checkErrorFields(json: _validateInvoiceCompanyTax());
  }

  invoiceCompanyAddressChanged(String text) {
    _checkErrorFields(json: _validateInvoiceCompanyAddress());
  }

  invoiceEmailChanged(String text) {
    _checkErrorFields(json: _validateInvoiceEmail());
  }

  selectPaymentMethod(PaymentMethodModel paymentMethod) {
    emit(state.copyWith(
      selectedPaymentMethod: paymentMethod,
    ));
    _checkErrorFields(json: _validatePaymentMethod());
  }

  changePolicy() {
    emit(state.copyWith(
      acceptedPolicy: !state.acceptedPolicy,
    ));
    _checkErrorFields(json: _validatePolicy());
  }

  isValidateSubmit() {
    if (!_validate()) {
      _scrollToErrorIndex();
      return false;
    }

    return true;
  }

  _validate() {
    Map<String, String> errorFields = {...state.errorFields};

    errorFields.addAll(_validateOrderFullName());
    errorFields.addAll(_validateOrderPhone());
    errorFields.addAll(_validateOrderProvince());
    errorFields.addAll(_validateOrderDistrict());
    errorFields.addAll(_validateOrderWard());
    errorFields.addAll(_validateOrderStreet());
    errorFields.addAll(_validateOrderReceiveTime());
    errorFields.addAll(_validatePolicy());

    if (state.enableIssueInvoice) {
      if (state.invoiceType.isPersonal) {
        errorFields.addAll(_validateInvoicePersonalFullName());
        errorFields.addAll(_validateInvoicePersonalAddress());
      }
      if (state.invoiceType.isCompany) {
        errorFields.addAll(_validateInvoiceCompanyName());
        errorFields.addAll(_validateInvoiceCompanyTax());
        errorFields.addAll(_validateInvoiceCompanyAddress());
      }
      errorFields.addAll(_validateInvoiceEmail());
    }
    errorFields.addAll(_validatePaymentMethod());

    return _checkErrorFields(json: errorFields);
  }

  _validateOrderFullName() {
    final errorFields = {...state.errorFields};

    if (orderFullnameController.text.isEmpty) {
      errorFields[AppConstants.orderFullNameKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.orderFullNameKey);
    }

    return errorFields;
  }

  _validateOrderPhone() {
    final errorFields = {...state.errorFields};

    if (orderPhoneController.text.isEmpty) {
      errorFields[AppConstants.orderPhoneNumberKey] = 'Thông tin này là bắt buộc';
    } else if (orderPhoneController.text.length < 10) {
      errorFields[AppConstants.orderPhoneNumberKey] = 'Số điện thoại phải gồm 10 chữ số';
    } else if (PhoneInputValidation.dirty(value: orderPhoneController.text).isNotValid) {
      errorFields[AppConstants.orderPhoneNumberKey] = 'Số điện thoại không hợp lệ';
    } else {
      errorFields.remove(AppConstants.orderPhoneNumberKey);
    }

    return errorFields;
  }

  _validateOrderProvince() {
    final errorFields = {...state.errorFields};

    if (orderProvinceController.text.isEmpty) {
      errorFields[AppConstants.orderProvinceKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.orderProvinceKey);
    }

    return errorFields;
  }

  _validateOrderDistrict() {
    final errorFields = {...state.errorFields};

    if (orderDistrictController.text.isEmpty) {
      errorFields[AppConstants.orderDistrictKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.orderDistrictKey);
    }

    return errorFields;
  }

  _validateOrderWard() {
    final errorFields = {...state.errorFields};

    if (orderWardController.text.isEmpty) {
      errorFields[AppConstants.orderWardKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.orderWardKey);
    }

    return errorFields;
  }

  _validateOrderStreet() {
    final errorFields = {...state.errorFields};

    if (orderStreetController.text.isEmpty) {
      errorFields[AppConstants.orderStreetKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.orderStreetKey);
    }

    return errorFields;
  }

  _validateOrderReceiveTime() {
    final errorFields = {...state.errorFields};

    if (receiveTimeController.text.isEmpty) {
      errorFields[AppConstants.receiveTimeKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.receiveTimeKey);
    }

    return errorFields;
  }

  _validateInvoiceType() {
    final errorFields = {...state.errorFields};

    errorFields.removeWhere((key, value) {
      return [
        AppConstants.invoicePersonalFullNameKey,
        AppConstants.invoicePersonalAddressKey,
        AppConstants.invoiceCompanyNameKey,
        AppConstants.invoiceCompanyTaxKey,
        AppConstants.invoiceCompanyAddressKey,
        AppConstants.invoiceEmailKey,
      ].contains(key);
    });

    return errorFields;
  }

  _validateInvoicePersonalFullName() {
    final errorFields = {...state.errorFields};

    if (invoicePersonalFullNameController.text.trim().isEmpty) {
      errorFields[AppConstants.invoicePersonalFullNameKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.invoicePersonalFullNameKey);
    }

    return errorFields;
  }

  _validateInvoicePersonalAddress() {
    final errorFields = {...state.errorFields};

    if (invoicePersonalAddressController.text.isEmpty) {
      errorFields[AppConstants.invoicePersonalAddressKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.invoicePersonalAddressKey);
    }

    return errorFields;
  }

  _validateInvoiceCompanyName() {
    final errorFields = {...state.errorFields};

    if (invoiceCompanyNameController.text.isEmpty) {
      errorFields[AppConstants.invoiceCompanyNameKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.invoiceCompanyNameKey);
    }

    return errorFields;
  }

  _validateInvoiceCompanyTax() {
    final errorFields = {...state.errorFields};

    if (invoiceCompanyTaxController.text.trim().isEmpty) {
      errorFields[AppConstants.invoiceCompanyTaxKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.invoiceCompanyTaxKey);
    }

    return errorFields;
  }

  _validateInvoiceCompanyAddress() {
    final errorFields = {...state.errorFields};

    if (invoiceCompanyAddressController.text.trim().isEmpty) {
      errorFields[AppConstants.invoiceCompanyAddressKey] = 'Thông tin này là bắt buộc';
    } else {
      errorFields.remove(AppConstants.invoiceCompanyAddressKey);
    }

    return errorFields;
  }

  _validateInvoiceEmail() {
    final errorFields = {...state.errorFields};

    if (invoiceEmailController.text.isEmpty) {
      errorFields[AppConstants.invoiceEmailKey] = 'Thông tin này là bắt buộc';
    } else if (EmailInputValidation.dirty(value: invoiceEmailController.text).isNotValid) {
      errorFields[AppConstants.invoiceEmailKey] = 'Địa chỉ email không hợp lệ';
    } else {
      errorFields.remove(AppConstants.invoiceEmailKey);
    }

    return errorFields;
  }

  _validatePaymentMethod() {
    final errorFields = {...state.errorFields};
    if (state.selectedPaymentMethod == null) {
      errorFields[AppConstants.orderPaymentMethodKey] = 'Vui lòng chọn 1 phương thức thanh toán';
    } else {
      errorFields.remove(AppConstants.orderPaymentMethodKey);
    }

    return errorFields;
  }

  _validatePolicy() {
    final errorFields = {...state.errorFields};

    if (!state.acceptedPolicy) {
      errorFields[AppConstants.orderPolicyKey] = "Bạn có đồng ý với điều khoản trên?";
    } else {
      errorFields.remove(AppConstants.orderPolicyKey);
    }

    return errorFields;
  }

  updatePromotions(List<DataProductVariationsModel> data) {
    emit(state.copyWith(
      promotions: data,
    ));
    _updatePrice();
  }

  _updateTotalPromotionPrice() {
    double result = 0;
    for (var item in state.promotions) {
      item.codes?.forEach((element) {
        result += element.promotion?.getPromotionPriceByQuantity(1, sku: item.sku ?? "") ?? 0;
      });
    }
    emit(state.copyWith(
      totalPromotionPrice: result,
    ));
  }

  @override
  Future<void> close() {
    scrollController.dispose();
    orderFullnameController.dispose();
    orderPhoneController.dispose();
    orderProvinceController.dispose();
    orderDistrictController.dispose();
    orderWardController.dispose();
    orderStreetController.dispose();
    receiveTimeController.dispose();
    invoicePersonalFullNameController.dispose();
    invoicePersonalAddressController.dispose();
    invoiceCompanyNameController.dispose();
    invoiceCompanyTaxController.dispose();
    invoiceCompanyAddressController.dispose();
    invoiceEmailController.dispose();
    _updateQuantityDebounce.cancel();
    return super.close();
  }
}
