import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';

import '../../../../common/bloc_status.dart';
import '../../../../models/mtrade/check_project_code/check_project_code_model.dart';
import '../../repository/mtrade_product_repository.dart';

part 'mtrade_check_project_code_state.dart';

class MTradeCheckProjectCodeCubit extends Cubit<MTradeCheckProjectCodeState> {
  MTradeCheckProjectCodeCubit() : super(const MTradeCheckProjectCodeState());

  final MTradeProductRepository _repository = MTradeProductRepository();

  Future<bool> checkPayNow({
    Function()? onSuccess,
    Function(ProjectCodeModel?)? onFailure,
    bool showLoading = true,
  }) async {
    if (showLoading) {
      emit(state.copyWith(
        checkProjectCodePayNow: BlocStatus.loading,
      ));
    }

    final result = await _repository.checkProjectCode();
    final status = result.data?.checkPayNow() ?? false;

    if (result.status) {
      if (status) {
        emit(state.copyWith(
          checkProjectCodePayNow: BlocStatus.success,
          data: result.data,
        ));
        onSuccess?.call();
      } else {
        emit(state.copyWith(
          checkProjectCodePayNow: BlocStatus.failure,
          data: result.data,
        ));
        onFailure?.call(result.data?.payNow);
      }
      return status;
    } else {
      emit(state.copyWith(
        checkProjectCodePayNow: BlocStatus.failure,
        data: result.data,
      ));
      onFailure?.call(result.data?.payNow);
    }

    return result.status;
  }

  Future refreshPayNow() async {
    return await checkPayNow(showLoading: false);
  }

  Future<bool> checkPayLater({
    Function()? onSuccess,
    Function(ProjectCodeModel?)? onFailure,
    bool showLoading = true,
  }) async {
    if (showLoading) {
      emit(state.copyWith(
        checkProjectCodePayLater: BlocStatus.loading,
      ));
    }

    final result = await _repository.checkProjectCode();
    final status = result.data?.checkPayLater() ?? false;

    if (result.status) {
      if (status) {
        emit(state.copyWith(
          checkProjectCodePayLater: BlocStatus.success,
          data: result.data,
        ));
        onSuccess?.call();
      } else {
        emit(state.copyWith(
          checkProjectCodePayLater: BlocStatus.failure,
          data: result.data,
        ));
        onFailure?.call(result.data?.payLater);
      }
      return status;
    } else {
      emit(state.copyWith(
        checkProjectCodePayLater: BlocStatus.failure,
        data: result.data,
      ));
      onFailure?.call(result.data?.payLater);
    }

    return result.status;
  }

  clearData() {
    emit(const MTradeCheckProjectCodeState());
  }
}
