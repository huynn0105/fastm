import 'package:bloc/bloc.dart';
import 'package:collection/collection.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_module/common/constants.dart';
import '../../../../common/bloc_status.dart';
import '../../../../common/enum/mtrade/delivery_location_type.dart';
import '../../../../common/global_function.dart';
import '../../../../models/master_data/master_data_model.dart';
import '../../repository/mtrade_product_repository.dart';
import '../../../../services/local/local_data_helper.dart';

import '../../../../app_data.dart';

part 'mtrade_delivery_support_state.dart';

class MTradeDeliverySupportCubit extends Cubit<MTradeDeliverySupportState> {
  MTradeDeliverySupportCubit({
    required this.debugLabel,
  }) : super(const MTradeDeliverySupportState());

  final String debugLabel;
  final MTradeProductRepository _repository = MTradeProductRepository();

  MTradeDeliverySupportState? _backupState;

  fetchDataFromLocal() async {
    if (kIsWeb) {
      await _fetchDataFromLink();
      return;
    }
    final provinceCode = LocalDataHelper.instance.getDeliverySupportProvinceCode();
    final districtCode = LocalDataHelper.instance.getDeliverySupportDistrictCode();
    final wardCode = LocalDataHelper.instance.getDeliverySupportWardCode();
    AppData.instance.deliverySupportProvinceCode = provinceCode;
    AppData.instance.deliverySupportDistrictCode = districtCode;
    AppData.instance.deliverySupportWardCode = wardCode;
    await fetchData(provinceCode: provinceCode, districtCode: districtCode, wardCode: wardCode);
  }

  _fetchDataFromLink() async {
    AppData.instance.deliverySupportProvinceCode = AppData.instance.landingPageProvinceCode;
    AppData.instance.deliverySupportDistrictCode = AppData.instance.landingPageDistrictCode;
    AppData.instance.deliverySupportWardCode = AppData.instance.landingPageWardCode;
    await fetchData(
      provinceCode: AppData.instance.landingPageProvinceCode,
      districtCode: AppData.instance.landingPageDistrictCode,
      wardCode: AppData.instance.landingPageWardCode,
    );
  }

  fetchData({String? provinceCode, String? districtCode, String? wardCode}) async {
    await getListProvince();
    MasterDataModel? province = state.provinces.firstWhereOrNull((e) => e.code == provinceCode);
    await selectProvince(province);
    MasterDataModel? district = state.districts.firstWhereOrNull((e) => e.code == districtCode);
    await selectDistrict(district);
    MasterDataModel? ward = state.wards.firstWhereOrNull((e) => e.code == wardCode);
    await selectWard(ward);
  }

  getListProvince() async {
    emit(state.copyWith(
      provinceStatus: BlocStatus.loading,
    ));

    final result = await _repository.getDeliveryLocation(
      type: LocationType.province.name,
      code: "",
    );

    if (result.status) {
      emit(state.copyWith(
        provinceStatus: BlocStatus.success,
        provinces: result.data,
      ));
    } else {
      emit(state.copyWith(
        provinceStatus: BlocStatus.failure,
      ));
    }
  }

  getListDistrict(MasterDataModel? province) async {
    emit(state.copyWith(
      districtStatus: BlocStatus.loading,
    ));

    final result = await _repository.getDeliveryLocation(
      type: LocationType.district.name,
      code: province?.code ?? '',
    );

    if (result.status) {
      emit(state.copyWith(
        districtStatus: BlocStatus.success,
        districts: result.data,
      ));
    } else {
      final errorMessages = {...state.errorMessages};
      errorMessages[AppConstants.deliverySupportProvinceKey] = result.errorMessage ?? "";
      emit(state.copyWith(
        districtStatus: BlocStatus.failure,
        errorMessages: errorMessages,
      ));
    }
  }

  getListWard(MasterDataModel? data) async {
    emit(state.copyWith(
      wardStatus: BlocStatus.loading,
    ));

    final result = await _repository.getDeliveryLocation(
      type: LocationType.ward.name,
      code: data?.code ?? '',
    );

    if (result.status) {
      emit(state.copyWith(
        wardStatus: BlocStatus.success,
        wards: result.data,
      ));
    } else {
      emit(state.copyWith(
        wardStatus: BlocStatus.failure,
      ));
    }
  }

  MasterDataModel? getProvinceByCode(String? code) {
    return state.provinces.firstWhereOrNull((element) => element.code == code);
  }

  selectProvince(MasterDataModel? data) async {
    if (data == null) {
      return;
    }

    emit(state.copyWith(
      selectedProvince: data,
      districtStatus: BlocStatus.initial,
      errorMessages: {},
      districts: [],
      clearDistrict: true,
      wardStatus: BlocStatus.initial,
      wards: [],
      clearWard: true,
    ));

    await getListDistrict(data);
  }

  selectDistrict(MasterDataModel? data) async {
    if (data == null) {
      return;
    }

    emit(state.copyWith(
      selectedDistrict: data,
      wardStatus: BlocStatus.initial,
      wards: [],
      clearWard: true,
    ));

    await getListWard(data);
  }

  selectWard(MasterDataModel? data) {
    if (data == null) {
      return;
    }

    emit(state.copyWith(
      selectedWard: data,
    ));
  }

  updateLocalDeliveryLocation() {
    AppData.instance.deliverySupportProvinceCode = state.selectedProvince?.code;
    if (state.selectedProvince != null) {
      if (!kIsWeb) {
        LocalDataHelper.instance.setDeliverySupportProvinceCode(state.selectedProvince?.code ?? '');
      }
      if (kIsWeb && state.selectedProvince?.code != null) {
        AppData.instance.landingPageProvinceCode = state.selectedProvince!.code!;
        GlobalFunction.addWebParam({
          'provinceCode': state.selectedProvince!.code!,
        });
      }
    }
    //
    AppData.instance.deliverySupportDistrictCode = state.selectedDistrict?.code;
    if (state.selectedDistrict != null) {
      if (kIsWeb && state.selectedDistrict?.code != null) {
        AppData.instance.landingPageDistrictCode = state.selectedDistrict!.code!;
        GlobalFunction.addWebParam({
          'districtCode': state.selectedDistrict!.code!,
        });
      }
      if (!kIsWeb) {
        LocalDataHelper.instance.setDeliverySupportDistrictCode(state.selectedDistrict?.code ?? '');
      }
    }
    //
    AppData.instance.deliverySupportWardCode = state.selectedWard?.code;
    if (state.selectedWard != null) {
      if (kIsWeb && state.selectedWard?.code != null) {
        AppData.instance.landingPageWardCode = state.selectedWard!.code!;
        GlobalFunction.addWebParam({
          'wardCode': state.selectedWard!.code!,
        });
      }
      if (!kIsWeb) {
        LocalDataHelper.instance.setDeliverySupportWardCode(state.selectedWard?.code ?? '');
      }
    }
  }

  hasBackupZone() {
    return _backupState?.selectedProvince != null && _backupState?.selectedDistrict != null;
  }

  saveBackupState() {
    _backupState = state.copyWith();
  }

  removeBackupState() {
    _backupState = null;
  }

  applyBackupState() {
    if (_backupState != null) {
      if (_backupState!.provinceStatus.isSuccess) {
        emit(_backupState!);
      } else {
        emit(_backupState!.copyWith(
          provinceStatus: BlocStatus.initial,
        ));
      }
    }
  }

  clearData() {
    emit(const MTradeDeliverySupportState());
  }
}
