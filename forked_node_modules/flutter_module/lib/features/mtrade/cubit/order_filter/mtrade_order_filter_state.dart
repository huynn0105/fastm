part of 'mtrade_order_filter_cubit.dart';

class MTradeOrderFilterState extends Equatable {
  const MTradeOrderFilterState({
    this.status = BlocStatus.initial,
    this.filters = const [],
    this.selectedTimeFilters = const {},
    this.selectedFilters = const {},
    this.selectingFilters = const {},
    this.filterPath = '',
  });

  final BlocStatus status;
  final List<MTradeFilterGroupModel> filters;
  final Map<String, List<SelectedFilterModel>> selectedTimeFilters;
  final Map<String, List<SelectedFilterModel>> selectedFilters;
  final Map<String, List<SelectedFilterModel>> selectingFilters;
  final String filterPath;

  @override
  List<Object?> get props => [
        status,
        filters,
        selectedTimeFilters,
        selectedFilters,
        selectingFilters,
        filterPath,
      ];

  MTradeOrderFilterState copyWith({
    BlocStatus? status,
    List<MTradeFilterGroupModel>? filters,
    Map<String, List<SelectedFilterModel>>? selectedTimeFilters,
    Map<String, List<SelectedFilterModel>>? selectedFilters,
    Map<String, List<SelectedFilterModel>>? selectingFilters,
    String? filterPath,
  }) {
    return MTradeOrderFilterState(
      status: status ?? this.status,
      filters: filters ?? this.filters,
      selectedTimeFilters: selectedTimeFilters ?? this.selectedTimeFilters,
      selectedFilters: selectedFilters ?? this.selectedFilters,
      selectingFilters: selectingFilters ?? this.selectingFilters,
      filterPath: filterPath ?? this.filterPath,
    );
  }
}

class MTradeOrderFilterConverter {
  MTradeOrderFilterConverter({
    required Map<String, List<SelectedFilterModel>> filter,
  }) : _filter = filter;

  final Map<String, List<SelectedFilterModel>> _filter;

  Map<String, dynamic> getData() {
    return _filter.map(
      (key, value) => MapEntry(key, value.map((e) => e.code ?? '').toList()),
    );
  }

  Map<String, dynamic> getDataByKeyword(String keyword) {
    if (keyword.isEmpty) {
      return {};
    }
    final data = getData().entries.where((e) => e.key == keyword);
    return Map<String, dynamic>.fromEntries(data);
  }
}
