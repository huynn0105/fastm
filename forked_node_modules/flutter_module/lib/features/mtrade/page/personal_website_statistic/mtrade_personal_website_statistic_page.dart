import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/chart/donut_chart/donut_chart_controller.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/features/mtrade/cubit/personal_website_statistic/mtrade_personal_website_statistic_cubit.dart';
import 'package:flutter_module/features/mtrade/page/personal_website_setup/components/user_guide_component.dart';
import 'package:flutter_module/features/mtrade/page/personal_website_statistic/components/website_detail_statistic_component.dart';
import 'package:flutter_module/features/mtrade/page/personal_website_statistic/components/website_overall_statistic_component.dart';

@RoutePage()
class MTradePersonalWebsiteStatisticPage extends StatefulWidget {
  const MTradePersonalWebsiteStatisticPage({
    super.key,
    @QueryParam("source") this.source,
  });

  final String? source;

  @override
  State<MTradePersonalWebsiteStatisticPage> createState() =>
      _MTradePersonalWebsiteStatisticPageState();
}

class _MTradePersonalWebsiteStatisticPageState extends State<MTradePersonalWebsiteStatisticPage> {
  late final DonutChartController _donutChartController;

  @override
  void initState() {
    super.initState();
    _donutChartController = DonutChartController();
    _onInit(context);
  }

  @override
  void dispose() {
    _donutChartController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<MTradePersonalWebsiteStatisticCubit>();
    return MultiBlocListener(
      listeners: [
        BlocListener<MTradePersonalWebsiteStatisticCubit, MTradePersonalWebsiteStatisticState>(
          listenWhen: (pre, cur) {
            return pre.status != cur.status;
          },
          listener: (context, state) => _action(context, state),
        ),
      ],
      child: BlocBuilder<MTradePersonalWebsiteStatisticCubit, MTradePersonalWebsiteStatisticState>(
        builder: (context, state) {
          return LoadMoreWidget(
            onRefresh: () => cubit.refreshData(source: widget.source),
            child: ListView(
              padding: const EdgeInsets.only(left: 16, right: 16, bottom: 100),
              children: [
                Text(
                  "Thống kê hiệu quả",
                  style: UITextStyle.semiBold.copyWith(
                    fontSize: 16,
                    color: UIColors.grayText,
                  ),
                ),
                const SizedBox(
                  height: 8,
                ),
                WebsiteOverallStatisticComponent(
                  data: state.data?.statistics ?? [],
                  margin: EdgeInsets.zero,
                ),
                WebsiteDetailStatisticComponent(
                  chartController: _donutChartController,
                  data: state.data,
                ),
                const UserGuideComponent(
                  padding: EdgeInsets.zero,
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  void _onInit(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final cubit = context.read<MTradePersonalWebsiteStatisticCubit>();
      if (!cubit.state.status.isSuccess) {
        cubit.fetchData(source: widget.source);
      } else {
        Future.delayed(const Duration(milliseconds: 300), () {
          _action(context, cubit.state);
        });
      }
    });
  }

  void _action(BuildContext context, MTradePersonalWebsiteStatisticState state) {
    final cubit = context.read<MTradePersonalWebsiteStatisticCubit>();
    if (state.status.isLoading) {
      _donutChartController.load();
      return;
    }
    if (state.status.isSuccess) {
      _donutChartController.show(data: cubit.getDonutChartData());
      return;
    }
    if (state.status.isFailure) {
      _donutChartController.empty();
      return;
    }
  }
}
