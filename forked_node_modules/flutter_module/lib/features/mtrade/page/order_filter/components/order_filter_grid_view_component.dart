import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/widgets/expandable_column.dart';
import 'package:flutter_module/features/mtrade/page/order_filter/utils/callback.dart';
import 'package:flutter_module/features/mtrade/page/product_filter/items/expandable_footer.dart';
import 'package:flutter_module/features/mtrade/page/product_filter/items/selector_item.dart';
import 'package:flutter_module/models/mtrade/filter/mtrade_filter_model.dart';
import 'package:flutter_module/models/mtrade/filter/selected_filter_model.dart';
import 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';

class OrderFilterGridViewComponent extends StatelessWidget {
  const OrderFilterGridViewComponent({
    super.key,
    required this.keyword,
    required this.data,
    required this.selectedData,
    required this.onSelected,
  });

  final String keyword;
  final List<MTradeFilterModel> data;
  final List<SelectedFilterModel> selectedData;
  final OnFilterSelected onSelected;

  @override
  Widget build(BuildContext context) {
    return ExpandableColumn(
      showExpand: data.length > 4,
      padding: EdgeInsets.zero,
      borderRadius: BorderRadius.zero,
      backgroundColor: UIColors.background,
      builder: (context, expanded) {
        int length = expanded ? data.length : min(data.length, 4);
        int crossAxisCount = 2;
        return StaggeredGrid.count(
          crossAxisCount: crossAxisCount,
          mainAxisSpacing: 8,
          crossAxisSpacing: 8,
          axisDirection: AxisDirection.down,
          children: List.generate(
            length,
            (index) {
              final item = data[index];
              final code = item.code ?? '';
              final isSelected = selectedData.map((e) => e.code).toList().contains(code) == true;

              ///
              return StaggeredGridTile.fit(
                crossAxisCellCount: 1,
                child: SelectorItem(
                  title: "${item.name}",
                  isSelected: isSelected,
                  onTap: () {
                    FocusManager.instance.primaryFocus?.unfocus();
                    onSelected(keyword, index, item);
                  },
                ),
              );
            },
          ),
        );
      },
      footer: (context, expanded, controller) {
        return ExpandableFooter(
          expanded: expanded,
          onTap: controller.toggle,
        );
      },
    );
  }
}
