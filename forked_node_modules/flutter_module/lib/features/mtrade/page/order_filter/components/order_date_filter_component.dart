import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/features/mtrade/cubit/order_filter/mtrade_order_filter_cubit.dart';
import 'package:flutter_module/features/mtrade/page/order_filter/components/order_date_filter_listener_component.dart';
import 'package:flutter_module/features/mtrade/page/order_filter/widgets/date_filter_widget.dart';
import 'package:scroll_to_index/scroll_to_index.dart';

class OrderDateFilterComponent extends StatefulWidget {
  const OrderDateFilterComponent({
    super.key,
    this.onFilterChanged,
    this.onTimeFilterChanged,
    this.padding = const EdgeInsets.symmetric(horizontal: 16),
  });

  final EdgeInsets padding;
  final Function(Map<String, dynamic>)? onFilterChanged;
  final Function(Map<String, dynamic>)? onTimeFilterChanged;

  @override
  State<OrderDateFilterComponent> createState() => _OrderDateFilterComponentState();
}

class _OrderDateFilterComponentState extends State<OrderDateFilterComponent> {
  late final AutoScrollController _autoScrollController;

  @override
  void initState() {
    super.initState();
    _autoScrollController = AutoScrollController(
      axis: Axis.horizontal,
      suggestedRowHeight: 32,
      viewportBoundaryGetter: () {
        return const Rect.fromLTWH(0, 0, double.infinity, 32);
      },
    );
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _onCheckToScroll(context);
    });
  }

  @override
  void dispose() {
    _autoScrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<MTradeOrderFilterCubit>();
    final keyword = cubit.timeKeyword;
    return OrderDateFilterListenerComponent(
      onFilterChanged: widget.onFilterChanged,
      onTimeFilterChanged: (value) {
        widget.onTimeFilterChanged?.call(value);
        _onCheckToScroll(context);
      },
      child: BlocBuilder<MTradeOrderFilterCubit, MTradeOrderFilterState>(
        builder: (context, state) {
          final selectedFilters = state.selectedTimeFilters;
          final data = state.filters.firstWhereOrNull((e) => e.keyword == keyword)?.list ?? [];
          return SizedBox(
            height: 32,
            child: ListView.separated(
              controller: _autoScrollController,
              padding: widget.padding,
              physics: const ClampingScrollPhysics(),
              scrollDirection: Axis.horizontal,
              separatorBuilder: (_, __) => const SizedBox(
                width: 8,
              ),
              itemBuilder: (context, index) {
                final item = data[index];
                final isSelected = selectedFilters[keyword]?.firstWhereOrNull((e) => e.code == item.code) != null;
                return AutoScrollTag(
                  index: index,
                  key: ValueKey('${item.code}'),
                  controller: _autoScrollController,
                  child: DateFilterWidget(
                    label: item.name ?? '',
                    height: 32,
                    isSelected: isSelected,
                    onTap: () {
                      if (!isSelected) {
                        cubit.selectFilter(
                          keyword: keyword,
                          filterIndex: index,
                          filterItem: item,
                        );
                      }
                    },
                  ),
                );
              },
              itemCount: data.length,
            ),
          );
        },
      ),
    );
  }

  _onCheckToScroll(BuildContext context) {
    final cubit = context.read<MTradeOrderFilterCubit>();
    final filters = cubit.state.selectedTimeFilters[cubit.timeKeyword] ?? [];
    final index = filters.getLast()?.index ?? -1;
    if (index >= 0) {
      _onScrollToIndex(context, index);
    }
  }

  _onScrollToIndex(BuildContext context, int index) {
    if (index < 0) {
      return;
    }
    _autoScrollController.scrollToIndex(
      index,
      preferPosition: AutoScrollPosition.middle,
      duration: const Duration(milliseconds: 500),
    );
  }
}
