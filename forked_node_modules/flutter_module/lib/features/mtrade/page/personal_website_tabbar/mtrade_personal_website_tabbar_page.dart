import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/enum/mtrade/website_setup_contact_method.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/tabbar/tabbar.dart';
import 'package:flutter_module/features/mtrade/cubit/personal_website_setup/mtrade_personal_website_setup_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/personal_website_statistic/mtrade_personal_website_statistic_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/tabbar/tabbar_cubit.dart';
import 'package:flutter_module/routes/routes.gr.dart';

@RoutePage()
class MTradePersonalWebsiteTabbarPage extends StatefulWidget implements AutoRouteWrapper {
  const MTradePersonalWebsiteTabbarPage({
    super.key,
    @QueryParam("index_tab") this.indexTab,
    @QueryParam("source") this.source,
  });

  final int? indexTab;
  final String? source;

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => TabbarCubit(),
        ),
        BlocProvider(
          create: (_) => MTradePersonalWebsiteSetupCubit(),
        ),
        BlocProvider(
          create: (_) => MTradePersonalWebsiteStatisticCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  State<MTradePersonalWebsiteTabbarPage> createState() => _MTradePersonalWebsiteTabbarPageState();
}

class _MTradePersonalWebsiteTabbarPageState extends State<MTradePersonalWebsiteTabbarPage> with SingleTickerProviderStateMixin {
  late bool initTabIndex = false;
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: WebsiteTabPage.values.length, vsync: this);
    _onInitTabIndex();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        if (!context.router.canPop()) {
          RedirectUtil.backToMFast();
          return false;
        }
        return true;
      },
      child: Scaffold(
        appBar: MFastAdvanceAppBar(
          context: context,
          title: "Thiết lập Website",
          onBack: context.popRoute,
          onHome: RedirectUtil.backToMFast,
        ),
        body: AutoTabsRouter(
          lazyLoad: false,
          routes: [
            MTradePersonalWebsiteSetupRoute(source: widget.source),
            MTradePersonalWebsiteStatisticRoute(source: widget.source),
          ],
          builder: (BuildContext context, Widget child) {
            return BlocListener<TabbarCubit, TabbarState>(
              listenWhen: (pre, cur) {
                return pre.index != cur.index;
              },
              listener: (context, state) {
                AutoTabsRouter.of(context).setActiveIndex(state.index);
              },
              child: Column(
                children: [
                  RoundedIndicatorTabbar(
                    controller: _tabController,
                    margin: const EdgeInsets.symmetric(horizontal: 62),
                    titles: const [
                      "Thiết lập",
                      "Thống kê",
                    ],
                    onTap: (index) => _setIndex(context, index),
                  ),
                  const SizedBox(
                    height: 16,
                  ),
                  Expanded(
                    child: child,
                  ),
                ],
              ),
            );
          },
        ),
      ),
    );
  }

  _onInitTabIndex() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final page = WebsiteTabPage.values.firstWhereOrNull((e) => e.index == widget.indexTab);
      if (!initTabIndex && page != null) {
        _tabController.animateTo(page.index);
        _setIndex(context, page.index);
      }
    });
  }

  _setIndex(BuildContext context, int index) {
    context.read<TabbarCubit>().setIndex(index);
  }
}
