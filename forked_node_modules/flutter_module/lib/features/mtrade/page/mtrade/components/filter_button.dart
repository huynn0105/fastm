import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/widgets/widget_layout.dart';
import 'package:flutter_module/di/get_it.dart';
import '../../../../../common/widgets/buttons.dart';
import '../../../cubit/filter/mtrade_filter_cubit.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/dialogs/modals/fullscreen_modal.dart';
import '../../../../../common/widgets/images.dart';
import '../../../../../routes/routes.gr.dart';
import '../../product_filter/mtrade_product_filter_page.dart';

class MTradeFilterButton extends StatelessWidget {
  const MTradeFilterButton({
    Key? key,
    this.enableClearFilter = false,
    this.fromMTradeProduct = false,
    this.onTap,
  }) : super(key: key);

  final bool fromMTradeProduct;
  final bool enableClearFilter;
  final VoidCallback? onTap;

  @override
  Widget build(BuildContext context) {
    return BlocBuilder(
      bloc: getItInstance.get<MTradeFilterCubit>(),
      builder: (context, MTradeFilterState state) {
        final hasSelectedFilter = !fromMTradeProduct && state.selectedFilters.isNotEmpty;
        final asset = hasSelectedFilter ? "ic_mtrade_filter_selected" : "ic_mtrade_filter";

        return SplashButton(
          borderRadius: BorderRadius.circular(20),
          onTap: () {
            onShowFilter(context);
          },
          child: Container(
            width: 40,
            height: 40,
            alignment: Alignment.center,
            decoration: const BoxDecoration(
              shape: BoxShape.circle,
              color: UIColors.white,
            ),
            child: Stack(
              clipBehavior: Clip.none,
              alignment: Alignment.center,
              children: [
                AppImage.asset(
                  asset: asset,
                  width: 24,
                  height: 24,
                ),
                if (hasSelectedFilter)
                  const Positioned(
                    bottom: -8.5,
                    right: -8.5,
                    child: AppImage.asset(
                      asset: "ic_status_success",
                      width: 20,
                      height: 20,
                    ),
                  ),
              ],
            ),
          ),
        );
      },
    );
  }

  onShowFilter(BuildContext context) async {
    final router = AutoRouter.of(context);
    final cubit = MTradeFilterCubit(debugLabel: "local-1");
    final result = await Navigator.of(context).push(
      FullScreenModal(
        page: BlocProvider(
          create: (_) => cubit,
          child: const WidgetLayout(child: MTradeProductFilterPage()),
        ),
      ),
    );
    if (result == true) {
      getItInstance.get<MTradeFilterCubit>().fillData(cubit.state);
      if (fromMTradeProduct) {
        router.push(MTradeSearchedProductRoute(
          pageID: AppData.instance.landingPageID,
          provinceCode: AppData.instance.landingPageProvinceCode,
          districtCode: AppData.instance.landingPageDistrictCode,
        ));
      }
      onTap?.call();
    } else {
      getItInstance.get<MTradeFilterCubit>().fillList(cubit.state);
      if (enableClearFilter) {
        getItInstance.get<MTradeFilterCubit>().clearFilter();
      }
    }
  }
}
