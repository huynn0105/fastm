import 'package:ekyc/common/utils/text_util.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../../../../app_data.dart';
import '../../../../../../common/dialogs/dialog_provider.dart';
import '../../../../../../common/event_bus/event_bus.dart';
import '../../../../../../general_config.dart';
import '../../../../cubit/delivery_support/mtrade_delivery_support_cubit.dart';
import 'delivery_support_component.dart';

mixin DeliverySupportMixin {
  onShowDeliverySupportDialog(BuildContext context, {String? selectedProvince}) async {
    final cubit = context.read<MTradeDeliverySupportCubit>()..saveBackupState();
    bool hasBackupZone = cubit.hasBackupZone();
    String? provinceCode;
    String? districtCode;
    if (TextUtils.isNotEmpty(selectedProvince)) {
      provinceCode = selectedProvince;
      final province = cubit.getProvinceByCode(provinceCode);
      cubit.selectProvince(province);
    } else {
      provinceCode = AppData.instance.deliverySupportProvinceCode;
      districtCode = AppData.instance.deliverySupportDistrictCode;
    }
    final enabledPop = provinceCode != null && districtCode != null;
    final result = await DialogProvider.instance.show(
      context: context,
      barrierDismissible: enabledPop || hasBackupZone,
      child: BlocProvider.value(
        value: cubit,
        child: DeliverSupportComponent(hasBackupZone: hasBackupZone,),
      ),
    );

    if (result == true) {
      cubit
        ..removeBackupState()
        ..updateLocalDeliveryLocation();
      eventBus.fire(const MTradeRefreshByUpdateDeliverySupportEventBus());
    } else {
      cubit.applyBackupState();
    }
  }
}
