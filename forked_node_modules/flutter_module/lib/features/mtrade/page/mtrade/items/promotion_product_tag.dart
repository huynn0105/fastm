import 'package:flutter/material.dart';
import 'package:flutter_module/common/utils/text_util.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/styles.dart';

class GiftTag extends StatelessWidget {
  const GiftTag({super.key});

  @override
  Widget build(BuildContext context) {
    return CustomPaint(
      painter: const PromotionBezierCustomPaint(
        backgroundColor: UIColors.lightSecondaryColor,
      ),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 1),
        child: Text(
          'Quà tặng',
          style: UITextStyle.medium.copyWith(
            fontSize: 12,
            color: UIColors.secondaryColor,
          ),
        ),
      ),
    );
  }
}

class PromotionProductTag extends StatelessWidget {
  const PromotionProductTag({
    super.key,
    this.prefix,
    this.data,
    // this.isAutoApply = false,
  });

  final String? prefix;
  final String? data;
  // final bool isAutoApply;

  @override
  Widget build(BuildContext context) {
    final label = TextUtils.isNotEmpty(prefix) ? "$prefix ${data ?? ""}" : data ?? "";
    return CustomPaint(
      painter: const PromotionBezierCustomPaint(
        // backgroundColor: isAutoApply ? UIColors.lightRed : UIColors.lightGreen,
        backgroundColor: UIColors.lightGreen,
      ),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 1),
        child: Text(
          label,
          style: UITextStyle.medium.copyWith(
            fontSize: 12,
            // color: isAutoApply ? UIColors.red : UIColors.green,
            color: UIColors.green,
          ),
        ),
      ),
    );
  }
}

class PromotionCustomPaint extends CustomPainter {
  const PromotionCustomPaint({
    this.backgroundColor = UIColors.lightBlue,
    this.gap = 5.0,
  });

  final Color backgroundColor;
  final double gap;

  @override
  void paint(Canvas canvas, Size size) {
    double w = size.width;
    double h = size.height;
    double space = gap;

    Paint paint = Paint()
      ..style = PaintingStyle.fill
      ..color = backgroundColor;

    Path path = Path()
      ..lineTo(space, h / 2)
      ..lineTo(0, h)
      ..lineTo(w, h)
      ..lineTo(w - space, h / 2)
      ..lineTo(w, 0)
      ..close();

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return false;
  }
}

class PromotionBezierCustomPaint extends CustomPainter {
  const PromotionBezierCustomPaint({
    this.backgroundColor = UIColors.lightBlue,
    this.gap = 5.0,
  });

  final Color backgroundColor;
  final double gap;

  @override
  void paint(Canvas canvas, Size size) {
    double w = size.width;
    double h = size.height;
    double space = gap;

    Paint paint = Paint()
      ..style = PaintingStyle.fill
      ..color = backgroundColor;

    Path path = Path()
      ..lineTo(0, h * 0.25)
      ..quadraticBezierTo(space, h * 0.5, 0, h * 0.75)
      ..lineTo(0, h)
      ..lineTo(w, h)
      ..lineTo(w, h * 0.75)
      ..quadraticBezierTo(w - space, h * 0.5, w, h * 0.25)
      ..lineTo(w, 0)
      ..close();

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return false;
  }
}
