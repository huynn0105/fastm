import 'dart:typed_data';

import 'package:collection/collection.dart';
import 'package:flutter/services.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/mtrade/cubit/personal_website_setup/mtrade_personal_website_setup_cubit.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/brochure/pdf_creator/items/product_item.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart';
import 'package:printing/printing.dart';

import '../../../../../../../app_data.dart';
import '../../../../../../../common/bottom_sheet/wrapper/data_wrapper.dart';
import '../../../../../../../common/pdf_fonts.dart';
import '../../../../../../../common/utils/format_util.dart';
import '../../../../../../../models/mtrade/product/mtrade_brochure_product_model.dart';
import 'items/primary_product_item.dart';
import 'items/secondary_product_item.dart';

Future<Map<String, dynamic>> createCategoryBrochure({
  DataWrapper? selectedCategory,
  List<MTradeBrochureProductModel> selectedProductList = const [],
  bool? showSaleInfo,
}) async {
  int pageTotal = 0;
  List<String> categories = AppData.instance.brochureConfigs?.categories ?? [];
  ImageProvider? categoryImageFirst;
  if (AppData.instance.brochureConfigs?.pageImg?.isNotEmpty == true) {
    categoryImageFirst = await networkImage(AppData.instance.brochureConfigs?.pageImg?.first ?? '');
  }
  ImageProvider? categoryImageSecond;
  if ((AppData.instance.brochureConfigs?.pageImg?.length ?? 0) > 1) {
    categoryImageSecond = await networkImage(AppData.instance.brochureConfigs?.pageImg?[1] ?? '');
  }
  ImageProvider? categoryIcon;
  if (selectedCategory?.id != null && selectedProductList.first.groupIcon != null) {
    await networkImage(selectedProductList.first.groupIcon!);
  }
  ImageProvider brochureBg = await imageFromAssetBundle('assets/images/brochure_bg.png');
  ImageProvider icMFastTop = await imageFromAssetBundle('assets/images/ic_brochure_mfast_top.png');
  ImageProvider icTick = await imageFromAssetBundle('assets/images/ic_brochure_tick.png');
  ImageProvider icTextMFast = await imageFromAssetBundle('assets/images/ic_text_mfast.png');
  ImageProvider icMail = await imageFromAssetBundle('assets/images/ic_brochure_mail_green.png');
  ImageProvider icPhone = await imageFromAssetBundle('assets/images/ic_brochure_consultant_green.png');
  ImageProvider icLocation = await imageFromAssetBundle('assets/images/ic_brochure_location_green.png');

  ImageProvider icLeftTicker = await imageFromAssetBundle('assets/images/ic_brochure_left_sticker.png');
  ImageProvider icLeftThinTicker = await imageFromAssetBundle('assets/images/ic_brochure_left_thin_sticker.png');
  ImageProvider icRightTicker = await imageFromAssetBundle('assets/images/ic_brochure_right_sticker.png');
  ImageProvider icMFastLogo = await imageFromAssetBundle('assets/images/ic_brochure_mfast_logo.png');
  ImageProvider icRate = await imageFromAssetBundle('assets/images/ic_brochure_rate_green.png');
  ImageProvider icConsultant = await imageFromAssetBundle('assets/images/ic_brochure_consultant_green.png');
  ImageProvider icDelivery = await imageFromAssetBundle('assets/images/ic_brochure_delivery_green.png');
  ImageProvider icDirect = await imageFromAssetBundle('assets/images/ic_direct.png');

  for (var i = 0; i < selectedProductList.length; i++) {
    if (selectedProductList[i].medium?.isNotEmpty == true) {
      selectedProductList[i].productImage = await networkImage(selectedProductList[i].medium!.first);
      selectedProductList[i].brandLogoImage = await networkImage(selectedProductList[i].brandLogo ?? '');
    }
  }

  List<MTradeBrochureProductModel> topItems =
      selectedProductList.length >= 3 ? selectedProductList.sublist(0, 3) : selectedProductList;

  List<MTradeBrochureProductModel> listFirst = [];
  if (selectedProductList.length > 3) {
    listFirst = selectedProductList.length >= 9
        ? selectedProductList.sublist(3, 9)
        : selectedProductList.sublist(3, selectedProductList.length);
  }
  List<List<MTradeBrochureProductModel>> otherItems = [];
  if (selectedProductList.length > 9) {
    List<MTradeBrochureProductModel> otherSelected = selectedProductList.sublist(9);
    int chunkSize = 12;
    int len = otherSelected.length;
    for (var i = 0; i < len; i += chunkSize) {
      int size = i + chunkSize;
      otherItems.add(otherSelected.sublist(i, size > len ? len : size));
    }
  }

  final pdf = Document();
  pageTotal++;
  pdf.addPage(
    Page(
      margin: EdgeInsets.zero,
      pageFormat: PdfPageFormat.a4,
      theme: ThemeData.withFont(
          base: Font.ttf(PdfFonts.pdfFont),
          bold: Font.ttf(PdfFonts.pdfBoldFont),
          italic: Font.ttf(PdfFonts.pdfItalicFont)),
      build: (Context context) {
        return LayoutBuilder(
          builder: (context, c) {
            double pageHeight = c?.maxHeight ?? 0;
            double pageWidth = c?.maxWidth ?? 0;
            double sizeRatio = pageHeight / 842;
            return Stack(
              children: [
                Container(
                  height: pageHeight,
                  width: pageWidth,
                  child: Image(
                    brochureBg,
                    height: pageHeight,
                    width: pageWidth,
                    fit: BoxFit.contain,
                  ),
                ),
                Padding(
                  padding: EdgeInsets.only(
                    left: getConvertSize(24, sizeRatio),
                    top: getConvertSize(20, sizeRatio),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        child: RichText(
                          textAlign: TextAlign.left,
                          text: TextSpan(
                            children: [
                              TextSpan(
                                text: '“Giúp khách hàng có thể sở hữu những\n',
                                style: TextStyle(
                                  fontSize: getConvertSize(14, sizeRatio),
                                  fontWeight: FontWeight.normal,
                                  fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
                                  color: const PdfColor.fromInt(0xFFFFFFFF),
                                  lineSpacing: 15,
                                ),
                              ),
                              TextSpan(
                                text: 'SẢN PHẨM, DỊCH VỤ',
                                style: TextStyle(
                                  fontSize: getConvertSize(14, sizeRatio),
                                  fontWeight: FontWeight.bold,
                                  color: const PdfColor.fromInt(0xFFFFFFFF),
                                  lineSpacing: 15,
                                ),
                              ),
                              TextSpan(
                                text: ' cần cho cuộc sống hàng ngày\n',
                                style: TextStyle(
                                  fontSize: getConvertSize(14, sizeRatio),
                                  fontWeight: FontWeight.normal,
                                  fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
                                  color: const PdfColor.fromInt(0xFFFFFFFF),
                                  lineSpacing: 15,
                                ),
                              ),
                              TextSpan(
                                text: 'ngay cả khi ',
                                style: TextStyle(
                                  fontSize: getConvertSize(14, sizeRatio),
                                  fontWeight: FontWeight.normal,
                                  fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
                                  color: const PdfColor.fromInt(0xFFFFFFFF),
                                  lineSpacing: 15,
                                ),
                              ),
                              TextSpan(
                                text: 'CHƯA SẴN SÀNG',
                                style: TextStyle(
                                  fontSize: getConvertSize(14, sizeRatio),
                                  fontWeight: FontWeight.bold,
                                  color: const PdfColor.fromInt(0xFFFFFFFF),
                                  lineSpacing: 15,
                                ),
                              ),
                              TextSpan(
                                text: ' về tài chính.”',
                                style: TextStyle(
                                  fontSize: getConvertSize(14, sizeRatio),
                                  fontWeight: FontWeight.normal,
                                  fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
                                  color: const PdfColor.fromInt(0xFFFFFFFF),
                                  lineSpacing: 15,
                                ),
                              )
                            ],
                          ),
                        ),
                      ),
                      SizedBox(height: 24),
                      Row(crossAxisAlignment: CrossAxisAlignment.start, children: [
                        BarcodeWidget(
                          width: 164,
                          height: 164,
                          color: const PdfColor.fromInt(0xFF221db0),
                          data: getItInstance.get<MTradePersonalWebsiteSetupCubit>().state.data?.sortLink ?? '',
                          barcode: Barcode.qrCode(),
                          padding: EdgeInsets.all(getConvertSize(16, sizeRatio)),
                          // backgroundColor: const PdfColor.fromInt(0xFFFFFFFF),
                          decoration: BoxDecoration(
                            color: const PdfColor.fromInt(0xFFFFFFFF),
                            borderRadius: BorderRadius.circular(getConvertSize(20, sizeRatio)),
                          ),
                        ),
                        SizedBox(width: getConvertSize(8, sizeRatio)),
                        Padding(
                          padding: EdgeInsets.only(top: getConvertSize(46, sizeRatio)),
                          child: Image(
                            icDirect,
                            width: getConvertSize(32, sizeRatio),
                            height: getConvertSize(20, sizeRatio),
                            fit: BoxFit.contain,
                          ),
                        ),
                        SizedBox(width: getConvertSize(8, sizeRatio)),
                        Padding(
                            padding: EdgeInsets.only(top: getConvertSize(28, sizeRatio)),
                            child: Text(
                              'Quét mã QRCode\nđể truy cập\ntrang thông tin\nsản phẩm',
                              style: TextStyle(
                                fontSize: getConvertSize(14, sizeRatio),
                                fontWeight: FontWeight.normal,
                                color: const PdfColor.fromInt(0xFFe0ecff),
                                lineSpacing: 6,
                              ),
                            )),
                      ]),
                      SizedBox(height: getConvertSize(40, sizeRatio)),
                      Text(
                        'Hỗ trợ trả chậm',
                        style: TextStyle(
                          fontSize: getConvertSize(34.1, sizeRatio),
                          fontWeight: FontWeight.bold,
                          fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
                          color: const PdfColor.fromInt(0xFFFFFFFF),
                        ),
                      ),
                      SizedBox(height: getConvertSize(16.9, sizeRatio)),
                      Text(
                        'KHÔNG lãi suất',
                        style: TextStyle(
                          fontSize: getConvertSize(34.1, sizeRatio),
                          fontWeight: FontWeight.bold,
                          color: const PdfColor.fromInt(0xFFf8d74f),
                        ),
                      ),
                      SizedBox(height: getConvertSize(31.9, sizeRatio)),
                      ListView.separated(
                        itemBuilder: (context, index) {
                          return _categoryItem(icTick, categories[index], sizeRatio);
                        },
                        separatorBuilder: (context, index) {
                          return SizedBox(height: getConvertSize(28, sizeRatio));
                        },
                        itemCount: categories.length,
                      ),
                      Spacer(),
                      SizedBox(
                        width: 200,
                        child: Text(
                          'Công ty Cổ phần Giải pháp\nThanh toán số - Digipay',
                          style: TextStyle(
                            fontSize: getConvertSize(15, sizeRatio),
                            fontWeight: FontWeight.bold,
                            fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
                            color: const PdfColor.fromInt(0xFFffffff),
                            lineSpacing: getConvertSize(4, sizeRatio),
                            wordSpacing: getConvertSize(1.1, sizeRatio),
                          ),
                        ),
                      ),
                      SizedBox(height: getConvertSize(12, sizeRatio)),
                      Row(
                        children: [
                          _footerItem(icMail, AppData.instance.brochureConfigs?.email ?? '', sizeRatio),
                          SizedBox(width: getConvertSize(38, sizeRatio)),
                          _footerItem(icPhone, AppData.instance.brochureConfigs?.phone ?? '', sizeRatio),
                        ],
                      ),
                      SizedBox(height: getConvertSize(12, sizeRatio)),
                      _footerItem(icLocation, '146-148 Cộng Hòa, P. 12, Q. Tân Bình, TP. HCM', sizeRatio),
                      SizedBox(height: getConvertSize(13, sizeRatio)),
                    ],
                  ),
                ),
                if (showSaleInfo == true)
                  Positioned(
                    bottom: getConvertSize(13, sizeRatio),
                    left: getConvertSize(349, sizeRatio),
                    child: Column(
                      children: [
                        _saleInfoWithColumn(
                          AppData.instance.saleName ?? '',
                          FormatUtil.phoneFormat(AppData.instance.salePhoneNumber ?? ''),
                          sizeRatio,
                        ),
                      ],
                    ),
                  ),
                Positioned(
                  top: 0,
                  right: 0,
                  child: Image(
                    icMFastTop,
                    height: getConvertSize(97.5, sizeRatio),
                    width: getConvertSize(279, sizeRatio),
                    fit: BoxFit.contain,
                  ),
                ),
                Positioned(
                  top: getConvertSize(175.9, sizeRatio),
                  right: getConvertSize(18.1, sizeRatio),
                  child: Column(
                    children: [
                      if (categoryImageFirst != null)
                        Image(
                          categoryImageFirst,
                          height: getConvertSize(284, sizeRatio),
                          width: getConvertSize(284, sizeRatio),
                          fit: BoxFit.contain,
                        ),
                      if (categoryImageSecond != null) SizedBox(height: getConvertSize(24, sizeRatio)),
                      if (categoryImageSecond != null)
                        Image(
                          categoryImageSecond,
                          height: getConvertSize(284, sizeRatio),
                          width: getConvertSize(284, sizeRatio),
                          fit: BoxFit.contain,
                        )
                    ],
                  ),
                ),
              ],
            );
          },
        );
      },
    ),
  );
  pageTotal++;
  pdf.addPage(
    Page(
      margin: EdgeInsets.zero,
      pageFormat: PdfPageFormat.a4,
      theme: ThemeData.withFont(
          base: Font.ttf(PdfFonts.pdfFont),
          bold: Font.ttf(PdfFonts.pdfBoldFont),
          italic: Font.ttf(PdfFonts.pdfItalicFont)),
      build: (Context context) {
        return LayoutBuilder(
          builder: (context, c) {
            double pageHeight = c?.maxHeight ?? 0;
            double pageWidth = c?.maxWidth ?? 0;
            double sizeRatio = pageHeight / 842;
            return Container(
              color: const PdfColor.fromInt(0xFF221db0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    padding: EdgeInsets.only(
                      top: getConvertSize(11, sizeRatio),
                      bottom: getConvertSize(11, sizeRatio),
                      left: getConvertSize(16, sizeRatio),
                      right: getConvertSize(16, sizeRatio),
                    ),
                    color: const PdfColor.fromInt(0xFF005fff),
                    child: Row(
                      children: [
                        if (categoryIcon != null)
                          Image(
                            categoryIcon,
                            width: getConvertSize(32, sizeRatio),
                            height: getConvertSize(32, sizeRatio),
                            fit: BoxFit.contain,
                          ),
                        SizedBox(width: getConvertSize(12, sizeRatio)),
                        Text(
                          selectedCategory?.value ?? '',
                          style: TextStyle(
                            fontSize: getConvertSize(22, sizeRatio),
                            fontWeight: FontWeight.bold,
                            fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
                            color: const PdfColor.fromInt(0xFFffffff),
                          ),
                        ),
                        Spacer(),
                        Image(
                          icMFastLogo,
                          width: getConvertSize(101.5, sizeRatio),
                          height: getConvertSize(28, sizeRatio),
                          fit: BoxFit.contain,
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: getConvertSize(16, sizeRatio)),
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(width: getConvertSize(16, sizeRatio)),
                      if (topItems.isNotEmpty) renderPrimaryProductItem(topItems.first, icLeftTicker, sizeRatio),
                      SizedBox(width: getConvertSize(12, sizeRatio)),
                      Column(
                        children: [
                          if (topItems.length > 1) renderSecondaryProductItem(topItems[1], icLeftThinTicker, sizeRatio),
                          SizedBox(height: getConvertSize(16, sizeRatio)),
                          if (topItems.length > 2) renderSecondaryProductItem(topItems[2], icLeftThinTicker, sizeRatio),
                        ],
                      ),
                    ],
                  ),
                  SizedBox(height: getConvertSize(12, sizeRatio)),
                  Container(
                    padding: EdgeInsets.only(
                      top: getConvertSize(8, sizeRatio),
                      bottom: getConvertSize(8, sizeRatio),
                      left: getConvertSize(20, sizeRatio),
                      right: getConvertSize(20, sizeRatio),
                    ),
                    color: const PdfColor.fromInt(0xFF00a377),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        _utilityItem(icRate, 'Trả chậm', 'KHÔNG LÃI SUẤT', sizeRatio),
                        _utilityItem(icConsultant, 'Tư vấn', 'TẬN TÂM, TẬN NƠI', sizeRatio),
                        _utilityItem(icDelivery, 'Miễn phí', 'GIAO HÀNG, LẮP ĐẶT', sizeRatio),
                      ],
                    ),
                  ),
                  SizedBox(height: getConvertSize(12, sizeRatio)),
                  Container(
                    height: getConvertSize(320, sizeRatio),
                    padding: EdgeInsets.only(
                      left: getConvertSize(16, sizeRatio),
                      right: getConvertSize(12, sizeRatio),
                    ),
                    alignment: Alignment.topCenter,
                    child: GridView(
                      crossAxisCount: 3,
                      mainAxisSpacing: getConvertSize(16, sizeRatio),
                      crossAxisSpacing: getConvertSize(8, sizeRatio),
                      childAspectRatio: 181 / 152,
                      children: listFirst.mapIndexed<Widget>(
                        (index, item) {
                          return renderProductItem(item, icRightTicker, sizeRatio);
                        },
                      ).toList(),
                    ),
                  ),
                  SizedBox(height: getConvertSize(16, sizeRatio)),
                  Container(
                    padding: EdgeInsets.only(
                      top: getConvertSize(8, sizeRatio),
                      bottom: getConvertSize(8, sizeRatio),
                      left: getConvertSize(18, sizeRatio),
                      right: getConvertSize(18, sizeRatio),
                    ),
                    height: 40,
                    color: const PdfColor.fromInt(0xFF005fff),
                    child: _saleInfo(
                      AppData.instance.saleName ?? '',
                      FormatUtil.phoneFormat(AppData.instance.salePhoneNumber ?? ''),
                      '1',
                      sizeRatio,
                      showSaleInfo,
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    ),
  );
  int pageIndex = 1;
  for (var element in otherItems) {
    List<MTradeBrochureProductModel> firstPattern = element.length >= 6 ? element.sublist(0, 6) : element;
    List<MTradeBrochureProductModel> secondPattern = element.length >= 6 ? element.sublist(6) : [];
    pageTotal++;
    pdf.addPage(
      Page(
        margin: EdgeInsets.zero,
        pageFormat: PdfPageFormat.a4,
        theme: ThemeData.withFont(
            base: Font.ttf(PdfFonts.pdfFont),
            bold: Font.ttf(PdfFonts.pdfBoldFont),
            italic: Font.ttf(PdfFonts.pdfItalicFont)),
        build: (Context context) {
          pageIndex++;
          return LayoutBuilder(
            builder: (context, c) {
              double pageHeight = c?.maxHeight ?? 0;
              double pageWidth = c?.maxWidth ?? 0;
              double sizeRatio = pageHeight / 842;
              return Container(
                color: const PdfColor.fromInt(0xFF221db0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      padding: EdgeInsets.only(
                        top: getConvertSize(11, sizeRatio),
                        bottom: getConvertSize(11, sizeRatio),
                        left: getConvertSize(16, sizeRatio),
                        right: getConvertSize(16, sizeRatio),
                      ),
                      color: const PdfColor.fromInt(0xFF005fff),
                      child: Row(
                        children: [
                          if (categoryIcon != null)
                            Image(
                              categoryIcon,
                              width: getConvertSize(32, sizeRatio),
                              height: getConvertSize(32, sizeRatio),
                              fit: BoxFit.contain,
                            ),
                          SizedBox(width: getConvertSize(12, sizeRatio)),
                          Text(
                            selectedCategory?.value ?? '',
                            style: TextStyle(
                              fontSize: getConvertSize(22, sizeRatio),
                              fontWeight: FontWeight.bold,
                              fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
                              color: const PdfColor.fromInt(0xFFffffff),
                            ),
                          ),
                          Spacer(),
                          Image(
                            icMFastLogo,
                            width: getConvertSize(101.5, sizeRatio),
                            height: getConvertSize(28, sizeRatio),
                            fit: BoxFit.contain,
                          ),
                        ],
                      ),
                    ),
                    SizedBox(height: getConvertSize(16, sizeRatio)),
                    Container(
                      height: getConvertSize(320, sizeRatio),
                      padding: EdgeInsets.only(
                        left: getConvertSize(16, sizeRatio),
                        right: getConvertSize(12, sizeRatio),
                      ),
                      alignment: Alignment.topCenter,
                      child: GridView(
                        crossAxisCount: 3,
                        mainAxisSpacing: getConvertSize(16, sizeRatio),
                        crossAxisSpacing: getConvertSize(8, sizeRatio),
                        childAspectRatio: 181 / 152,
                        children: firstPattern.mapIndexed<Widget>(
                          (index, item) {
                            return renderProductItem(item, icRightTicker, sizeRatio);
                          },
                        ).toList(),
                      ),
                    ),
                    SizedBox(height: getConvertSize(12, sizeRatio)),
                    Container(
                      padding: EdgeInsets.only(
                        top: getConvertSize(8, sizeRatio),
                        bottom: getConvertSize(8, sizeRatio),
                        left: getConvertSize(20, sizeRatio),
                        right: getConvertSize(20, sizeRatio),
                      ),
                      color: const PdfColor.fromInt(0xFF00a377),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          _utilityItem(icRate, 'Trả chậm', 'KHÔNG LÃI SUẤT', sizeRatio),
                          _utilityItem(icConsultant, 'Tư vấn', 'TẬN TÂM, TẬN NƠI', sizeRatio),
                          _utilityItem(icDelivery, 'Miễn phí', 'GIAO HÀNG, LẮP ĐẶT', sizeRatio),
                        ],
                      ),
                    ),
                    SizedBox(height: getConvertSize(12, sizeRatio)),
                    Container(
                      height: getConvertSize(320, sizeRatio),
                      padding: EdgeInsets.only(
                        left: getConvertSize(16, sizeRatio),
                        right: getConvertSize(12, sizeRatio),
                      ),
                      alignment: Alignment.topCenter,
                      child: GridView(
                        crossAxisCount: 3,
                        mainAxisSpacing: getConvertSize(16, sizeRatio),
                        crossAxisSpacing: getConvertSize(8, sizeRatio),
                        childAspectRatio: 181 / 152,
                        children: secondPattern.mapIndexed<Widget>(
                          (index, item) {
                            return renderProductItem(item, icRightTicker, sizeRatio);
                          },
                        ).toList(),
                      ),
                    ),
                    Spacer(),
                    SizedBox(height: getConvertSize(16, sizeRatio)),
                    Container(
                      padding: EdgeInsets.only(
                        top: getConvertSize(8, sizeRatio),
                        bottom: getConvertSize(8, sizeRatio),
                        left: getConvertSize(18, sizeRatio),
                        right: getConvertSize(18, sizeRatio),
                      ),
                      height: 40,
                      color: const PdfColor.fromInt(0xFF005fff),
                      child: _saleInfo(
                        AppData.instance.saleName ?? '',
                        FormatUtil.phoneFormat(AppData.instance.salePhoneNumber ?? ''),
                        '$pageIndex',
                        sizeRatio,
                        showSaleInfo,
                      ),
                    ),
                  ],
                ),
              );
            },
          );
        },
      ),
    );
  }
  Uint8List document = await pdf.save();
  Map<String, dynamic> map = {};
  map['document'] = document;
  map['pageTotal'] = pageTotal;
  return map;
}

_categoryItem(ImageProvider image, String content, double sizeRatio) {
  return Row(
    children: [
      Image(
        image,
        width: getConvertSize(25, sizeRatio),
        height: getConvertSize(25, sizeRatio),
        fit: BoxFit.contain,
      ),
      SizedBox(width: getConvertSize(11.9, sizeRatio)),
      Text(
        content,
        style: TextStyle(
          fontSize: getConvertSize(22, sizeRatio),
          fontWeight: FontWeight.normal,
          fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
          color: const PdfColor.fromInt(0xFFadcbff),
        ),
      ),
    ],
  );
}

_saleInfo(String name, String phone, String pageIndex, double sizeRatio, bool? showSaleInfo) {
  return Row(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      if (showSaleInfo == true)
        Text(
          'Tư vấn viên:',
          style: TextStyle(
            fontSize: getConvertSize(12, sizeRatio),
            fontWeight: FontWeight.normal,
            fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
            color: const PdfColor.fromInt(0xFFe0e6ff),
          ),
        ),
      if (showSaleInfo == true) SizedBox(width: getConvertSize(8, sizeRatio)),
      if (showSaleInfo == true)
        Text(
          name,
          style: TextStyle(
            fontSize: getConvertSize(12, sizeRatio),
            fontWeight: FontWeight.bold,
            fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
            color: const PdfColor.fromInt(0xFFFFFFFF),
          ),
        ),
      if (showSaleInfo == true) SizedBox(width: getConvertSize(16, sizeRatio)),
      if (showSaleInfo == true)
        Container(
          height: getConvertSize(16, sizeRatio),
          width: getConvertSize(1, sizeRatio),
          color: const PdfColor.fromInt(0xFFe0e6ff),
        ),
      if (showSaleInfo == true) SizedBox(width: getConvertSize(16, sizeRatio)),
      if (showSaleInfo == true)
        Text(
          'SDT:',
          style: TextStyle(
            fontSize: getConvertSize(12, sizeRatio),
            fontWeight: FontWeight.normal,
            fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
            color: const PdfColor.fromInt(0xFFe0e6ff),
          ),
        ),
      if (showSaleInfo == true) SizedBox(width: getConvertSize(8, sizeRatio)),
      if (showSaleInfo == true)
        Text(
          phone,
          style: TextStyle(
            fontSize: getConvertSize(12, sizeRatio),
            fontWeight: FontWeight.bold,
            fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
            color: const PdfColor.fromInt(0xFFFFFFFF),
          ),
        ),
      Spacer(),
      Text(
        pageIndex,
        style: TextStyle(
          fontSize: getConvertSize(14, sizeRatio),
          fontWeight: FontWeight.normal,
          fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
          color: const PdfColor.fromInt(0xFFe0e6ff),
        ),
      ),
    ],
  );
}

_saleInfoWithColumn(String name, String phone, double sizeRatio) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Row(
        children: [
          Text(
            'Tư vấn viên:',
            style: TextStyle(
              fontSize: getConvertSize(11.6, sizeRatio),
              fontWeight: FontWeight.normal,
              fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
              color: const PdfColor.fromInt(0xFFe0e6ff),
            ),
          ),
          SizedBox(width: 8),
          Text(
            name,
            style: TextStyle(
              fontSize: getConvertSize(11.6, sizeRatio),
              fontWeight: FontWeight.bold,
              fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
              color: const PdfColor.fromInt(0xFFFFFFFF),
            ),
          ),
        ],
      ),
      SizedBox(height: getConvertSize(6, sizeRatio)),
      Row(
        children: [
          Container(
            margin: const EdgeInsets.only(left: 19),
            child: Text(
              'Số điện thoại:',
              style: TextStyle(
                fontSize: getConvertSize(11.6, sizeRatio),
                fontWeight: FontWeight.normal,
                fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
                color: const PdfColor.fromInt(0xFFe0e6ff),
              ),
            ),
          ),
          SizedBox(width: 8),
          Text(
            phone,
            style: TextStyle(
              fontSize: getConvertSize(11.6, sizeRatio),
              fontWeight: FontWeight.bold,
              fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
              color: const PdfColor.fromInt(0xFFFFFFFF),
            ),
          ),
        ],
      ),
    ],
  );
}

_utilityItem(ImageProvider image, String title, String content, double sizeRatio) {
  return Row(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Image(
        image,
        width: getConvertSize(20, sizeRatio),
        height: getConvertSize(20, sizeRatio),
        fit: BoxFit.contain,
      ),
      SizedBox(width: getConvertSize(8, sizeRatio)),
      Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: TextStyle(
              fontSize: getConvertSize(15, sizeRatio),
              fontWeight: FontWeight.normal,
              fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
              color: const PdfColor.fromInt(0xFFd6fff4),
            ),
          ),
          SizedBox(height: getConvertSize(6, sizeRatio)),
          Text(
            content,
            style: TextStyle(
              fontSize: getConvertSize(14, sizeRatio),
              fontWeight: FontWeight.bold,
              color: const PdfColor.fromInt(0xFFFFFFFF),
            ),
          ),
        ],
      ),
    ],
  );
}

_footerItem(ImageProvider icon, String value, double sizeRatio) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.start,
    children: [
      Image(
        icon,
        width: getConvertSize(15, sizeRatio),
        height: getConvertSize(15, sizeRatio),
        fit: BoxFit.contain,
      ),
      SizedBox(width: getConvertSize(7, sizeRatio)),
      Text(
        value,
        style: TextStyle(
          fontSize: getConvertSize(13.3, sizeRatio),
          fontWeight: FontWeight.normal,
          fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
          color: const PdfColor.fromInt(0xFFd6fff4),
        ),
      ),
    ],
  );
}

getConvertSize(double size, double sizeRatio) {
  return size * sizeRatio;
}
