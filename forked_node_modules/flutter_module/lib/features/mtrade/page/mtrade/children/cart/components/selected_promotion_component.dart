import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/enum/mtrade/payment_type.dart';
import 'package:flutter_module/common/enum/mtrade/promotion_implementation_method.dart';
import 'package:flutter_module/common/utils/format_util.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/items/promotion_product_tag.dart';
import 'package:flutter_module/models/mtrade/promotion/data_product_variations_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_pay_now_order_payload.dart';

import '../../../../../../../common/colors.dart';
import '../../../../../../../common/dialogs/dialog_provider.dart';
import '../../../../../../../common/global_function.dart';
import '../../../../../../../common/styles.dart';
import '../../../../../../../common/widgets/buttons.dart';
import '../../../../../../../common/widgets/images.dart';
import '../../../../../../../routes/routes.gr.dart';
import '../../../../../cubit/select_promotion/mtrade_select_promotion_cubit.dart';

class SelectedPromotionComponent extends StatelessWidget {
  const SelectedPromotionComponent({
    super.key,
    required this.orderItems,
    required this.paymentMethod,
    required this.publicWholesalePrice,
    this.onPromotionChanged,
    this.padding = EdgeInsets.zero,
  });

  final List<OrderItems> orderItems;
  final MTradePaymentType paymentMethod;
  final bool publicWholesalePrice;
  final EdgeInsets padding;
  final Function(List<DataProductVariationsModel>)? onPromotionChanged;

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<MTradeSelectPromotionCubit, MTradeSelectPromotionState>(
      listenWhen: (pre, cur) {
        return pre.promotions != cur.promotions;
      },
      listener: (context, state) {
        onPromotionChanged?.call(state.promotions);
      },
      builder: (context, state) {
        // final selections =
        //     state.promotions.map((e) => e.selection ?? []).toList().expand((e) => e).toList();
        // final data = selections
        //     .distinctByCondition((e) => "${e.promotionValue}${e.currency}")
        //     .where((e) => skus.contains(e.sku))
        //     .toList();
        List<PromotionCode> selectedPromotions = GlobalFunction.flatPromotionCode(state.promotions);
        return SplashButton(
          onTap: () {
            _checkWholesalePrice(context, selectedPromotions.isNotEmpty);
          },
          child: Container(
            padding: padding,
            decoration: const BoxDecoration(
              color: UIColors.white,
            ),
            child: Row(
              children: [
                Text(
                  "Ưu đãi từ MTrade:",
                  style: UITextStyle.regular.copyWith(
                    fontSize: 14,
                    color: UIColors.grayText,
                  ),
                ),
                const SizedBox(
                  width: 8,
                ),
                Expanded(
                  child: Align(
                    alignment: Alignment.centerRight,
                    child: selectedPromotions.isEmpty
                        ? const SizedBox()
                        : Wrap(
                            runSpacing: 9,
                            spacing: 11,
                            alignment: WrapAlignment.end,
                            runAlignment: WrapAlignment.start,
                            crossAxisAlignment: WrapCrossAlignment.start,
                            children: List.generate(
                              selectedPromotions.length,
                              (index) {
                                final item = selectedPromotions[index];
                                final implementation = item.promotion?.masterPromotionImplementationMethod?.code;
                                final isAutoApply = implementation == PromotionImplementationMethod.AUTO_PROMOTION.name;
                                String label = isAutoApply
                                    // ? '-${AppConstants.vndCurrencySymbol}${FormatUtil.numberFormat(item.discount)}'
                                    ? '-${FormatUtil.numberFormat(item.discount)}'
                                    : item.code ?? '';
                                return PromotionProductTag(
                                  data: label,
                                  // isAutoApply: isAutoApply,
                                );
                              },
                            ),
                          ),
                  ),
                ),
                const SizedBox(
                  width: 8,
                ),
                SplashButton(
                  onTap: () {
                    _onPromotion(context);
                  },
                  child: Row(
                    children: [
                      if (selectedPromotions.isEmpty) ...[
                        Text(
                          "Chọn hoặc nhập mã",
                          style: UITextStyle.regular.copyWith(
                            fontSize: 12,
                            color: UIColors.grayText,
                          ),
                        ),
                        const SizedBox(
                          width: 4,
                        ),
                      ],
                      const AppImage.asset(
                        asset: "ic_arrow_right",
                        width: 20,
                        height: 20,
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  _checkWholesalePrice(BuildContext context, bool existPromotion) {
    if (publicWholesalePrice && !existPromotion) {
      DialogProvider.instance.showMTradeDialog(
        context: context,
        asset: "ic_mtrade_mascot_happy_waiting",
        title: "Không áp dụng đồng thời mã giảm giá và mua hàng giá sỉ",
        titleColor: UIColors.orange,
        message: "Nếu chọn áp dụng mã khuyến mãi này, hệ thống sẽ đặt lại giá bán của sản phẩm và không còn áp dụng giá sỉ.",
        positiveTitle: "Sử dụng ưu đãi",
        negativeTitle: "Kiểm tra lại",
        positiveCallback: () {
          _onPromotion(context);
        },
        negativeCallback: () {},
      );
    } else {
      _onPromotion(context);
    }
  }

  _onPromotion(BuildContext context) async {
    final cubit = context.read<MTradeSelectPromotionCubit>();
    List<DataProductVariationsModel> initPromotions = cubit.state.promotions;
    if (initPromotions.isEmpty) {
      initPromotions =
          orderItems.map((e) => DataProductVariationsModel(sku: e.sku, quantity: e.quantity, codes: [])).toList();
    }
    final result = await context.pushRoute(
      MTradePromotionRoute(
        orderItems: orderItems,
        initPromotions: initPromotions,
        invalidTicketCodes: cubit.state.errorPromotions,
        provinceCode: cubit.provinceCode,
        districtCode: cubit.districtCode,
        wardCode: cubit.wardCode,
        paymentMethod: paymentMethod,
      ),
    );
    if (result is List<DataProductVariationsModel>) {
      cubit.updatePromotions(result);
    }
  }
}
