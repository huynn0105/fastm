import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/features/mtrade/cubit/select_promotion/mtrade_select_promotion_cubit.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import '../../../../../../../common/colors.dart';
import '../../../../../../../common/constants.dart';
import '../../../../../../../common/enum/mtrade/payment_type.dart';
import '../../../../../../../common/styles.dart';
import '../../../../../../../common/utils/format_util.dart';
import '../../../../../../../models/mtrade/promotion/data_product_variations_model.dart';
import '../../../../../cubit/cart/mtrade_cart_cubit.dart';
import '../../../../product_detail/widgets/shopping_button.dart';
import 'selected_promotion_component.dart';

class PaymentComponent extends StatelessWidget {
  const PaymentComponent({
    Key? key,
    this.onPromotionChanged,
  }) : super(key: key);

  final Function(List<DataProductVariationsModel>)? onPromotionChanged;

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<MTradeCartCubit, MTradeCartState>(
      builder: (context, state) {
        final bool isShow = state.selectedProductIDs.isNotEmpty;
        final int quantities = state.totalQuantity;
        return AnimatedSize(
          duration: AppConstants.duration,
          alignment: Alignment.topCenter,
          child: Visibility(
            visible: isShow,
            child: SafeArea(
              child: Container(
                decoration: const BoxDecoration(
                  color: UIColors.lightBlue,
                  border: Border(
                    top: BorderSide(
                      color: UIColors.white,
                    ),
                  ),
                ),
                child: Column(
                  children: [
                    // SelectedPromotionComponent(
                    //   orderItems: state.selectedItems,
                    //   padding: const EdgeInsets.all(12),
                    //   onPromotionChanged: onPromotionChanged,
                    // ),
                    IntrinsicHeight(
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          const SizedBox(
                            width: 12,
                          ),
                          Expanded(
                            child: Padding(
                              padding: const EdgeInsets.symmetric(vertical: 8),
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Row(
                                    children: [
                                      SizedBox(
                                        width: 70,
                                        child: Text(
                                          "Số lượng:",
                                          style: UITextStyle.regular.copyWith(
                                            fontSize: 14,
                                            height: 1.25,
                                            color: UIColors.grayText,
                                          ),
                                        ),
                                      ),
                                      Text(
                                        "$quantities",
                                        style: UITextStyle.medium.copyWith(
                                          fontSize: 14,
                                          height: 1.25,
                                        ),
                                      ),
                                    ],
                                  ),
                                  const SizedBox(
                                    height: 4,
                                  ),
                                  Row(
                                    children: [
                                      Expanded(
                                        child: Wrap(
                                          alignment: WrapAlignment.start,
                                          children: [
                                            SizedBox(
                                              width: 70,
                                              child: Text(
                                                "Tổng tiền:",
                                                style: UITextStyle.regular.copyWith(
                                                  fontSize: 14,
                                                  height: 1.25,
                                                  color: UIColors.grayText,
                                                ),
                                              ),
                                            ),
                                            Text(
                                              FormatUtil.currencyDoubleFormat(
                                                state.totalPrice - state.totalPromotionPrice,
                                              ),
                                              style: UITextStyle.medium.copyWith(
                                                fontSize: 14,
                                                height: 1.25,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                          ),
                          const SizedBox(
                            width: 12,
                          ),
                          ShoppingButton.payNow(
                            enabled: state.enabledPayNow,
                            onTap: () {
                              //hide select and check promotion on cart page
                              _onPayNow(context);
                              // _onCheckPromotion(
                              //   context,
                              //   onSuccess: () {
                              //     _onPayNow(context);
                              //   },
                              // );
                            },
                          ),
                          if (AppData.instance.configs?.product?.enabledMPLPayLater ?? false)
                            ShoppingButton.payLater(
                              enabled: state.enabledPayLater,
                              onTap: () async {
                                //hide select and check promotion on cart page
                                _onPayLater(context);
                                // _onCheckPromotion(
                                //   context,
                                //   onSuccess: () {
                                //     _onPayLater(context);
                                //   },
                                // );
                              },
                            ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  _onCheckPromotion(
    BuildContext context, {
    required MTradePaymentType paymentMethod,
    Function()? onSuccess,
  }) {
    final cubit = context.read<MTradeSelectPromotionCubit>();
    cubit.checkPromotion(
      skus: context.read<MTradeCartCubit>().state.selectedItems.map((e) => e.sku ?? '').toList(),
      onSuccess: onSuccess,
      paymentMethod: paymentMethod.code,
    );
  }

  _onPayNow(BuildContext context) {
    final cubit = context.read<MTradeCartCubit>();
    final promotions = context.read<MTradeSelectPromotionCubit>().state.promotions;
    cubit.payNow(
      onSuccess: (data) {
        context.pushRoute(
          MTradePayNowOrderInformationRoute(
            products: data,
            promotions: promotions,
          ),
        );
      },
    );
  }

  _onPayLater(BuildContext context) {
    final cubit = context.read<MTradeCartCubit>();
    final promotions = context.read<MTradeSelectPromotionCubit>().state.promotions;
    cubit.payLater(
      onSuccess: (data) {
        context.pushRoute(
          MTradePayLaterOrderInformationRoute(
            products: data,
            promotions: promotions,
          ),
        );
      },
    );
  }

// _openWebView(BuildContext context) {
//   context.read<MTradeCartCubit>().payLater(
//     onSuccess: (data) {
//       context.pushRoute(
//         MTradePayLaterOrderInformationRoute(
//           products: data,
//         ),
//       );
//     },
//   );
//   // _requestPermission().then((status) {
//   //   if (status == true) {
//   //     context.read<MTradeCartCubit>().payLater(
//   //       onSuccess: (url) {
//   //         context.pushRoute(
//   //           WebViewRoute(
//   //             title: "Bán hàng trả chậm",
//   //             url: url,
//   //           ),
//   //         );
//   //       },
//   //     );
//   //   } else {
//   //     DialogProvider.instance.showConfirmDialog(
//   //       context,
//   //       title: 'Quyền truy cập bị từ chối',
//   //       message: 'Vui lòng cho phép đầy đủ quyền camera và vị trí để lên hồ sơ cho bạn',
//   //       positiveTitle: 'Đồng ý',
//   //       negativeTitle: 'Hủy',
//   //       positiveCallback: () async {
//   //         await openAppSettings();
//   //       },
//   //     );
//   //   }
//   // });
// }

// Future<bool> _requestPermission() async {
//   final status = await Permission.camera.request();
//   if (status != PermissionStatus.granted) {
//     return false;
//   }
//
//   bool serviceEnabled;
//   LocationPermission permission;
//   List<LocationPermission> deniedPermissionGroup = [
//     LocationPermission.denied,
//     LocationPermission.deniedForever,
//   ];
//   // Test if location services are enabled.
//   serviceEnabled = await Geolocator.isLocationServiceEnabled();
//   if (!serviceEnabled) {
//     return false;
//   }
//   permission = await Geolocator.checkPermission();
//
//   if (deniedPermissionGroup.any((e) => e == permission)) {
//     permission = await Geolocator.requestPermission();
//     if (deniedPermissionGroup.any((e) => e == permission)) {
//       return false;
//     }
//   }
//
//   return true;
// }
}
