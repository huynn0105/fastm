import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/size.dart';
import 'package:scroll_to_index/scroll_to_index.dart';

import '../../../../../../../app_data.dart';
import '../../../../../../../common/colors.dart';
import '../../../../../../../common/constants.dart';
import '../../../../../../../common/styles.dart';
import '../../../../../../../common/widgets/buttons.dart';
import '../../../../../../../common/widgets/images.dart';
import '../../../../../cubit/product_group/mtrade_product_group_cubit.dart';

class ListGroupComponent extends StatefulWidget {
  const ListGroupComponent({Key? key}) : super(key: key);

  @override
  State<ListGroupComponent> createState() => _ListGroupComponentState();
}

class _ListGroupComponentState extends State<ListGroupComponent> {
  bool _hasAutoScroll = false;
  late final AutoScrollController _controller;

  @override
  void initState() {
    super.initState();
    _controller = AutoScrollController(
      axis: Axis.vertical,
      viewportBoundaryGetter: () {
        return Rect.fromLTRB(0, 0, 0, AppSize.instance.keyboardHeight);
      },
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<MTradeProductGroupCubit, MTradeProductGroupState>(
      listenWhen: (pre, cur) {
        return pre.productStatus != cur.productStatus && !_hasAutoScroll;
      },
      listener: (context, state) {
        if (state.productStatus.isSuccess && AppData.instance.selectedProductGroup?.isNotEmpty == true) {
          _hasAutoScroll = true;
          final index = state.groups.indexWhere((e) => e.code == state.selectedProductGroup);
          if (index >= 0) {
            _controller.scrollToIndex(
              index,
              duration: AppConstants.duration,
              preferPosition: AutoScrollPosition.middle,
            );
          }
        }
      },
      child: BlocBuilder<MTradeProductGroupCubit, MTradeProductGroupState>(
        builder: (context, state) {
          if (state.groupStatus.isInitial) {
            context.read<MTradeProductGroupCubit>()
              ..selectProvince()
              ..fetchData();
          }

          final data = state.groups;
          final selectedProductGroup = state.selectedProductGroup;

          return data.isEmpty
              ? const SizedBox()
              : Container(
                  color: UIColors.background,
                  alignment: Alignment.centerLeft,
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  child: SingleChildScrollView(
                    controller: _controller,
                    physics: AppConstants.physics,
                    scrollDirection: Axis.horizontal,
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: List.generate(
                        max(0, data.length * 2 - 1),
                        (index) {
                          if (index.isOdd) {
                            return const SizedBox();
                          }
                          index = index ~/ 2;
                          final item = data[index];
                          final isSelected = item.code == selectedProductGroup;
                          return AutoScrollTag(
                            key: ValueKey(index),
                            controller: _controller,
                            index: index,
                            child: AppSplashButton(
                              onTap: () {
                                context.read<MTradeProductGroupCubit>()
                                  ..selectGroup(item.code ?? "")
                                  ..fetchProducts();
                              },
                              child: SizedBox(
                                width: 65,
                                child: Column(
                                  children: [
                                    Container(
                                      height: 48,
                                      width: 48,
                                      alignment: Alignment.center,
                                      decoration: BoxDecoration(
                                        shape: BoxShape.circle,
                                        color: UIColors.white,
                                        border: Border.all(
                                          color: isSelected ? UIColors.primaryColor : Colors.transparent,
                                        ),
                                      ),
                                      child: AppImage.network(
                                        url: (item.icon ?? "").trim(),
                                        width: 48,
                                        height: 48,
                                        fit: BoxFit.contain,
                                        borderRadius: BorderRadius.circular(24),
                                      ),
                                    ),
                                    const SizedBox(
                                      height: 5,
                                    ),
                                    Text(
                                      item.name ?? "",
                                      style: UITextStyle.regular.copyWith(
                                        fontSize: 12,
                                        fontWeight: isSelected ? FontWeight.w600 : FontWeight.w400,
                                        color: isSelected ? UIColors.primaryColor : UIColors.grayText,
                                      ),
                                      textAlign: TextAlign.center,
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                  ),
                );
        },
      ),
    );
  }
}
