import 'dart:io';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_mailer/flutter_mailer.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/enum/mtrade/brochure_type.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/mtrade/cubit/brochure/review_brochure_cubit.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/brochure/widgets/information_widget.dart';
import 'package:syncfusion_flutter_pdfviewer/pdfviewer.dart';

import '../../../../../../app_data.dart';
import '../../../../../../common/bottom_sheet/wrapper/data_wrapper.dart';
import '../../../../../../common/colors.dart';
import '../../../../../../common/dialogs/dialog_provider.dart';
import '../../../../../../models/mtrade/product/mtrade_brochure_product_model.dart';

@RoutePage()
class ReviewBrochurePage extends StatefulWidget implements AutoRouteWrapper {
  const ReviewBrochurePage({
    super.key,
    this.type,
    this.selectedCategory,
    this.selectedProduct,
    this.selectedProductList,
    this.selectedProvinceCode,
    this.selectedDistrictCode,
    this.showSaleInfo,
  });

  final BrochureType? type;
  final DataWrapper? selectedCategory;
  final List<MTradeBrochureProductModel>? selectedProductList;
  final MTradeBrochureProductModel? selectedProduct;
  final String? selectedProvinceCode;
  final String? selectedDistrictCode;
  final bool? showSaleInfo;

  @override
  State<StatefulWidget> createState() {
    return _ReviewBrochurePageState();
  }

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (_) => ReviewBrochureCubit(),
      child: this,
    );
  }
}

class _ReviewBrochurePageState extends State<ReviewBrochurePage> {
  late final double sizeRatio;

  @override
  Widget build(BuildContext context) {
    final pdfWidth = MediaQuery.of(context).size.width - 32;
    final cubit = context.read<ReviewBrochureCubit>();
    return Scaffold(
      appBar: MFastAdvanceAppBar(
        context: context,
        title: "Bộ giới thiệu sản phẩm",
      ),
      body: BlocConsumer<ReviewBrochureCubit, ReviewBrochureState>(
        listener: (context, state) {
          if (state.sendBrochureStatus == BlocStatus.success) {
            DialogProvider.instance.showMTradeDialog(
              context: context,
              asset: "ic_mtrade_mascot_success",
              title: "Gửi bộ giới thiệu thành công",
              message: "Vui lòng kiểm tra hộp thư email hoặc hộp thư rác để nhận bộ giới thiệu sản phẩm của riêng bạn",
              titleColor: UIColors.accentGreen,
              messageAlign: TextAlign.start,
              positiveTitle: "Đã hiểu và quay lại",
            );
          } else if (state.sendBrochureStatus == BlocStatus.failure) {
            DialogProvider.instance.showMTradeDialog(
              context: context,
              asset: "ic_mtrade_mascot_error",
              title: "Gửi bộ giới thiệu thất bại",
              message: "Đã có lỗi xảy ra, vui lòng kiểm tra lại mạng Internet và thử lại sau",
              titleColor: UIColors.red,
              messageAlign: TextAlign.start,
              positiveTitle: "Thử lại ngay",
              negativeTitle: "Quay lại",
            );
          }
        },
        builder: (context, state) {
          if (state.status.isInitial) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              cubit.renderPdfByMultiSelect(
                type: widget.type,
                selectedProductList: widget.selectedProductList,
                selectedProduct: widget.selectedProduct,
                selectedProvinceCode: widget.selectedProvinceCode,
                selectedDistrictCode: widget.selectedDistrictCode,
                showSaleInfo: widget.showSaleInfo,
              );
            });
          }
          return Stack(
            children: [
              Column(
                children: [
                  Flexible(
                    child: Column(
                      children: [
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                          decoration: const BoxDecoration(
                            color: UIColors.white,
                          ),
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                state.brochureTitle ?? '',
                                style: UITextStyle.semiBold.copyWith(
                                  fontSize: 14,
                                  color: UIColors.grayText,
                                ),
                              ),
                              const SizedBox(
                                height: 4,
                              ),
                              Row(
                                children: [
                                  Expanded(
                                    child: Align(
                                      alignment: Alignment.centerLeft,
                                      child: InformationWidget(
                                        title: "Kích cỡ:",
                                        value: "Khổ giấy ${widget.type.isSpecificProduct ? "A5" : "A4"}",
                                      ),
                                    ),
                                  ),
                                  Expanded(
                                    child: Align(
                                      alignment: Alignment.centerLeft,
                                      child: InformationWidget(
                                        title: "Số lượng:",
                                        value: "${state.pageTotal ?? ''} trang",
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                        if (state.document != null)
                          Expanded(
                            child: Padding(
                              padding: const EdgeInsets.all(16),
                              child: ClipRRect(
                                borderRadius: BorderRadius.circular(8),
                                child: SizedBox(
                                  width: pdfWidth,
                                  height: pdfWidth * 296 / 210,
                                  child: SfPdfViewer.memory(
                                    Uint8List.fromList(state.document!),
                                  ),
                                ),
                              ),
                            ),
                          ),
                      ],
                    ),
                  ),
                  Container(
                    padding: const EdgeInsets.all(16),
                    alignment: Alignment.topCenter,
                    decoration: const BoxDecoration(
                      color: UIColors.white,
                      borderRadius: BorderRadius.only(
                        topLeft: Radius.circular(16),
                        topRight: Radius.circular(16),
                      ),
                    ),
                    child: SafeArea(
                      child: Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Gửi hình ảnh trên về email:",
                                  style: UITextStyle.semiBold.copyWith(
                                    fontSize: 14,
                                    color: UIColors.grayText,
                                  ),
                                ),
                                SplashButton(
                                  onTap: () {
                                    // TODO: open page Personal Information in MFast
                                  },
                                  child: Padding(
                                    padding: const EdgeInsets.symmetric(vertical: 2),
                                    child: Row(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        // const AppImage.asset(
                                        //   asset: "ic_edit",
                                        //   width: 24,
                                        //   height: 24,
                                        // ),
                                        // const SizedBox(
                                        //   width: 5,
                                        // ),
                                        Expanded(
                                          child: Text(
                                            AppData.instance.saleEmail ?? '',
                                            style: UITextStyle.semiBold.copyWith(
                                              fontSize: 14,
                                            ),
                                            maxLines: 2,
                                            overflow: TextOverflow.ellipsis,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          PrimaryButton(
                            onPressed: () async {
                              cubit.sendBrochure(context);
                              // onCreated(context, state.document).then(
                              //   (file) {
                              //     if (file != null) {
                              //       onSend(
                              //         file: file,
                              //         callback: (message) {
                              //           ScaffoldMessenger.of(context)
                              //             ..removeCurrentSnackBar()
                              //             ..showSnackBar(
                              //               SnackBar(
                              //                 duration: const Duration(seconds: 1),
                              //                 content: Text(
                              //                   message,
                              //                   style: UITextStyle.regular.copyWith(
                              //                     color: UIColors.white,
                              //                   ),
                              //                 ),
                              //               ),
                              //             );
                              //         },
                              //       );
                              //     }
                              //   },
                              // );
                            },
                            height: 48,
                            width: 100,
                            padding: EdgeInsets.zero,
                            radius: 8,
                            title: "Gửi ngay",
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
              if (state.status.isInitial || state.status.isLoading || state.sendBrochureStatus.isLoading)
                const LoadingWidget.dark(),
            ],
          );
        },
      ),
    );
  }

  Future onSend({
    required File file,
    required Function(String) callback,
  }) async {
    if (Platform.isAndroid) {
      final bool isGmailInstalled = await FlutterMailer.isAppInstalled(MailOptions.GMAIL);
      if (!isGmailInstalled) {
        callback("Cannot launch Gmail app");
        return;
      }
    } else if (Platform.isIOS) {
      final bool canSend = await FlutterMailer.canSendMail();
      if (!canSend) {
        callback("Cannot launch Email app");
        return;
      }
    }

    try {
      final MailOptions mailOptions = MailOptions(
        subject: 'Bộ nhận diện hàng hóa, dịch vụ được bán trên MTrade',
        body: '''Chào bạn,

Bạn hoặc ai đó đã sử dụng email này để nhận Bộ nhận diện hàng hóa, dịch vụ được bán trên "MTrade". Đã đính kèm file

Sử dụng bộ hình ảnh giúp bạn:

- Tiếp cận với nhiều khách hàng hơn.

- Đa dạng cách sử dụng: dán lên tường, tủ, mặt kính hoặc đặt lên bàn, phát tờ rơi.

- Kích cỡ chuẩn A3,A4,A5 dễ dàng in ấn với chi phí rẻ.''',
        recipients: [AppData.instance.saleEmail ?? ""],
        isHTML: false,
        bccRecipients: [''],
        ccRecipients: [''],
        attachments: [file.path],
        appSchema: Platform.isAndroid ? MailOptions.GMAIL : null,
      );

      final MailerResponse response = await FlutterMailer.send(mailOptions);

      String message = "success";

      switch (response) {
        case MailerResponse.saved:
          // ios only
          message = 'Email was saved to draft';
          break;
        case MailerResponse.sent:
          // ios only
          message = 'Email was sent';
          break;
        case MailerResponse.cancelled:
          // ios only
          message = 'Email was cancelled';
          break;
        case MailerResponse.android:
          message = 'intent was successful';
          break;
        default:
          message = 'unknown';
          break;
      }
      callback(message);
    } on Exception catch (e) {
      callback(e.toString());
    }
  }
}
