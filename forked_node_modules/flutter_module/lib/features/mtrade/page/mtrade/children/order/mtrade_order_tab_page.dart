import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:extended_nested_scroll_view/extended_nested_scroll_view.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/mtrade/cubit/order_filter/mtrade_order_filter_cubit.dart';
import 'package:flutter_module/features/mtrade/page/order_filter/components/order_date_filter_component.dart';

import '../../../../../../common/bloc_status.dart';
import '../../../../../../common/widgets/loading.dart';
import '../../../../../../common/widgets/loadmore_widget.dart';
import '../../../../cubit/check_project_code/mtrade_check_project_code_cubit.dart';
import '../../../../cubit/date_selection/mtrade_date_selection_cubit.dart';
import '../../../../../../common/constants.dart';
import '../../../../cubit/bonus/mtrade_bonus_cubit.dart';
import '../../../../cubit/indirect_bonus/mtrade_indirect_bonus_cubit.dart';
import '../../../check_data/check_data_page.dart';
import 'components/bonus_component.dart';
import 'components/date_selection_component.dart';
import 'components/tabbar_component.dart';

@RoutePage()
class MTradeOrderTabPage extends StatelessWidget implements AutoRouteWrapper {
  const MTradeOrderTabPage({Key? key}) : super(key: key);

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => MTradeBonusCubit(),
        ),
        BlocProvider(
          create: (_) => MTradeIndirectBonusCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  Widget build(BuildContext context) {
    return CheckDataPage(
      child: BlocBuilder<MTradeOrderFilterCubit, MTradeOrderFilterState>(
        buildWhen: (pre, cur) {
          return pre.status != cur.status;
        },
        builder: (context, filterState) {
          if (filterState.status.isInitial) {
            context.read<MTradeOrderFilterCubit>().fetchData();
          }

          if (filterState.status.showLoading) {
            return const LoadingWidget.dark();
          }

          return BlocBuilder<MTradeBonusCubit, MTradeBonusState>(
            builder: (context, state) {
              if (state.status.isInitial) {
                onInit(context);
              }

              return Scaffold(
                resizeToAvoidBottomInset: false,
                body: SafeArea(
                  child: ExtendedNestedScrollView(
                    onlyOneScrollInBody: true,
                    physics: AppConstants.physics,
                    headerSliverBuilder: (_, __) {
                      return [
                        SliverToBoxAdapter(
                          child: OrderDateFilterComponent(
                            onTimeFilterChanged: (filter) {
                              onFilterChanged(context, filter);
                            },
                          ),
                        ),
                        const SliverToBoxAdapter(
                          child: SizedBox(
                            height: 16,
                          ),
                        ),
                        const SliverToBoxAdapter(
                          child: BonusComponent(),
                        ),
                        const SliverToBoxAdapter(
                          child: SizedBox(
                            height: 16,
                          ),
                        ),
                      ];
                    },
                    body: const TabbarComponent(),
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }

  onInit(BuildContext context) {
    final filter = context.read<MTradeOrderFilterCubit>().getTimeFilterData();
    context.read<MTradeBonusCubit>()
      ..updateOrderFilter(filter)
      ..fetchData();
  }

  onFilterChanged(BuildContext context, Map<String, dynamic> filter) {
    context.read<MTradeBonusCubit>()
      ..updateOrderFilter(filter)
      ..fetchData();
  }
}
