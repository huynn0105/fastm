import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/widgets/divider.dart';
import '../../../../../../../common/constants.dart';
import '../../../../../../../common/bloc_status.dart';
import '../../../../../../../common/widgets/loading.dart';
import '../../../../../../../common/widgets/loadmore_widget.dart';
import '../../../../../../../models/mtrade/cart/mtrade_cart_product_model.dart';
import '../items/empty_item.dart';
import '../items/cart_item.dart';
import '../../../../../cubit/cart/mtrade_cart_cubit.dart';

class ListCartComponent extends StatelessWidget {
  const ListCartComponent({
    Key? key,
    required this.onRefresh,
    required this.onDeleted,
    required this.onSelected,
    required this.onUnselected,
    required this.onChangeQuantity,
  }) : super(key: key);

  final Future Function() onRefresh;
  final Function(MTradeCartProductModel?) onDeleted;
  final Function(MTradeCartProductModel?) onSelected;
  final Function(MTradeCartProductModel?) onUnselected;
  final Function(MTradeCartProductModel?) onChangeQuantity;

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<MTradeCartCubit>();
    return BlocBuilder<MTradeCartCubit, MTradeCartState>(
      builder: (context, state) {
        if (state.status.isInitial) {
          cubit.fetchData();
        }

        if (state.status.showLoading) {
          return const SafeArea(
            child: LoadingWidget.dark(),
          );
        }

        final data = state.products;
        return LoadMoreWidget(
          onRefresh: onRefresh,
          onLoadMore: () => cubit.loadmoreData(),
          child: data.isEmpty
              ? const EmptyItem()
              : ListView.separated(
                  physics: AppConstants.physics,
                  padding: const EdgeInsets.only(bottom: 100),
                  itemBuilder: (context, index) {
                    return CartItem(
                      index: index,
                      data: data[index],
                      selectedProductIDs: state.selectedProductIDs,
                      onDeleted: onDeleted,
                      onSelected: onSelected,
                      onUnselected: onUnselected,
                      onChangeQuantity: onChangeQuantity,
                    );
                  },
                  separatorBuilder: (_, __) => const DottedDivider(
                    height: 10,
                    indent: 16,
                    endIndent: 16,
                  ),
                  itemCount: data.length,
                ),
        );
      },
    );
  }
}
