import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/constants.dart';

import '../../../../../../../common/bloc_status.dart';
import '../../../../../../../common/widgets/empty_widget.dart';
import '../../../../../../../common/widgets/nested_scrollview.dart';
import '../../../../../../../models/mtrade/product/mtrade_product_model.dart';
import '../../../../../cubit/delivery_support/mtrade_delivery_support_cubit.dart';
import '../../../../../cubit/product_group/mtrade_product_group_cubit.dart';
import '../../../items/product_card.dart';
import '../widgets/shimmer_product_loading.dart';

class ListProductComponent extends StatelessWidget {
  const ListProductComponent({
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<MTradeProductGroupCubit>();
    return LayoutBuilder(
      builder: (BuildContext context, BoxConstraints constraints) {
        final double layoutMaxWidth =
            constraints.maxWidth > AppConstants.responsiveSize ? AppConstants.responsiveSize : constraints.maxWidth;
        final EdgeInsets padding = kIsWeb
            ? EdgeInsets.symmetric(
                horizontal: constraints.maxWidth >= AppConstants.responsiveSize
                    ? (constraints.maxWidth - AppConstants.responsiveSize + 24) / 2
                    : 12,
              )
            : EdgeInsets.zero;
        return BlocBuilder<MTradeProductGroupCubit, MTradeProductGroupState>(
          builder: (context, state) {
            if (state.productStatus.showLoading && !kIsWeb) {
              return const ShimmerProductLoading();
            }

            final data = state.products;

            if (data.isEmpty && !state.productStatus.showLoading) {
              return const SizedBox(
                height: 285,
                child: EmptyWidget(),
              );
            }

            final double layoutWidth = (layoutMaxWidth - 32) / 2;
            const double layoutHeight = 280;
            return AppNestedScrollView<MTradeProductModel>(
              source: cubit.productsSource,
              padding: padding.copyWith(bottom: 24),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 8,
                mainAxisSpacing: 12,
                childAspectRatio: layoutWidth / layoutHeight,
              ),
              itemBuilder: (BuildContext context, item, int index) {
                return ProductCard.normal(
                  width: layoutWidth,
                  data: (item as MTradeProductModel),
                );
              },
            );
            // return Padding(
            //   padding: const EdgeInsets.symmetric(horizontal: 12),
            //   child: GridView.builder(
            //     gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            //       crossAxisCount: 2,
            //       childAspectRatio: layoutWidth / layoutHeight,
            //       mainAxisSpacing: 12,
            //       crossAxisSpacing: 8,
            //     ),
            //     padding: childMargin.copyWith(bottom: 24),
            //     itemBuilder: (context, index) {
            //       final item = data[index];
            //       return ProductCard.normal(
            //         width: layoutWidth,
            //         height: layoutHeight,
            //         data: item,
            //       );
            //     },
            //     itemCount: data.length,
            //   ),
            // );
          },
        );
      },
    );
  }
}
