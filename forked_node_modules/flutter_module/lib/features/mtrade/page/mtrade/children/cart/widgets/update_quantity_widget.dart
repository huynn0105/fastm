import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import '../../../../../../../common/styles.dart';
import '../../../../../../../common/widgets/buttons.dart';

import '../../../../../../../common/colors.dart';
import '../../../../../../../models/mtrade/cart/mtrade_cart_product_model.dart';
import '../../../../../cubit/update_quantity/mtrade_update_quantity_cubit.dart';

class UpdateQuantityWidget extends StatelessWidget {
  const UpdateQuantityWidget({
    Key? key,
    required this.product,
    required this.onQuantityChanged,
    this.forceSyncServer = false,
    this.warningFunction,
  }) : super(key: key);

  final bool forceSyncServer;
  final MTradeCartProductModel product;
  final Function(int quantity) onQuantityChanged;
  final Function(Function())? warningFunction;

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => MTradeUpdateQuantityCubit()..fetchProduct(product, forceSyncServer),
      child: Builder(
        builder: (context) => builder(context),
      ),
    );
  }

  Widget builder(BuildContext context) {
    final cubit = context.read<MTradeUpdateQuantityCubit>();
    return MultiBlocListener(
      listeners: [
        BlocListener<MTradeUpdateQuantityCubit, MTradeUpdateQuantityState>(
          listenWhen: (pre, cur) {
            return pre.quantity != cur.quantity;
          },
          listener: (context, state) {
            onQuantityChanged(state.quantity);
          },
        ),
        BlocListener<MTradeUpdateQuantityCubit, MTradeUpdateQuantityState>(
          listener: (context, state) {
            if (state.status.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                title: "Thất bại",
                message: state.errorMessage ?? "",
              );
            }
          },
        ),
      ],
      child: Container(
        height: 35,
        decoration: BoxDecoration(
          border: Border.all(
            color: UIColors.lightGray,
          ),
          borderRadius: BorderRadius.circular(4),
        ),
        child: BlocBuilder<MTradeUpdateQuantityCubit, MTradeUpdateQuantityState>(
          builder: (context, state) {
            return Row(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                SplashButton(
                  onTap: () {
                    if (state.enabledDecrease && !state.status.isLoading) {
                      if (warningFunction != null) {
                        warningFunction?.call(() {
                          cubit.decrease();
                        });
                      }
                    }
                  },
                  borderRadius: BorderRadius.circular(4),
                  child: AspectRatio(
                    aspectRatio: 1,
                    child: Icon(
                      Icons.remove_rounded,
                      size: 20,
                      color: state.enabledDecrease ? UIColors.darkGray : UIColors.lightGray,
                    ),
                  ),
                ),
                const VerticalDivider(
                  width: 0,
                  indent: 4,
                  endIndent: 4,
                ),
                SizedBox(
                  width: 50,
                  child: Center(
                    child: state.status.isLoading
                        ? Platform.isAndroid
                            ? const SizedBox(
                                width: 16,
                                height: 16,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(UIColors.darkGray),
                                ),
                              )
                            : const CupertinoActivityIndicator()
                        : Text(
                            "${state.quantity}",
                            style: UITextStyle.medium.copyWith(
                              fontSize: 14,
                            ),
                          ),
                  ),
                ),
                const VerticalDivider(
                  width: 0,
                  indent: 4,
                  endIndent: 4,
                ),
                SplashButton(
                  onTap: () {
                    if (state.enabledIncrease && !state.status.isLoading) {
                      if (warningFunction != null) {
                        warningFunction?.call(() {
                          cubit.increase();
                        });
                      }
                    }
                  },
                  borderRadius: BorderRadius.circular(4),
                  child: AspectRatio(
                    aspectRatio: 1,
                    child: Icon(
                      Icons.add_rounded,
                      size: 20,
                      color: state.enabledIncrease ? UIColors.darkGray : UIColors.lightGray,
                    ),
                  ),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}
