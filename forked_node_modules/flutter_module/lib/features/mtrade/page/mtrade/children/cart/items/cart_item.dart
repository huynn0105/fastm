import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/models/mtrade/product_detail/comm_model.dart';
import '../../../../../../../common/dialogs/dialog_provider.dart';
import '../../../items/payment_tag.dart';
import '../widgets/update_quantity_widget.dart';
import '../../../../../../../models/mtrade/product_detail/mtrade_product_detail_model.dart';
import '../../../../../../../common/colors.dart';
import '../../../../../../../common/styles.dart';
import '../../../../../../../common/utils/format_util.dart';
import '../../../../../../../common/widgets/buttons.dart';
import '../../../../../../../common/widgets/checkbox.dart';
import '../../../../../../../common/widgets/images.dart';
import '../../../../../cubit/cart/mtrade_cart_cubit.dart';
import '../../../../../../../routes/routes.gr.dart';

import '../../../../../../../common/extension/list_extension.dart';
import '../../../../../../../models/mtrade/cart/mtrade_cart_product_model.dart';
import '../widgets/delete_button.dart';

class CartItem extends StatelessWidget {
  const CartItem({
    Key? key,
    required this.index,
    required this.data,
    required this.selectedProductIDs,
    required this.onDeleted,
    required this.onSelected,
    required this.onUnselected,
    required this.onChangeQuantity,
  }) : super(key: key);

  final int index;
  final MTradeCartProductModel data;
  final List<String> selectedProductIDs;
  final Function(MTradeCartProductModel?) onDeleted;
  final Function(MTradeCartProductModel?) onSelected;
  final Function(MTradeCartProductModel?) onUnselected;
  final Function(MTradeCartProductModel?) onChangeQuantity;

  @override
  Widget build(BuildContext context) {
    final String id = data.id ?? "";
    final String sku = data.sku ?? "";
    final String name = data.name ?? "";
    final String image = data.productImg ?? "";
    final String price = FormatUtil.currencyFormat(data.price ?? 0);
    final List<ValueModel> comparePrice = data.comparePrice ?? [];
    final String code = data.productCode ?? "";
    final bool isDisabled = data.productInvalid == true || data.productOutOfStock == true;
    final bool isSelected = selectedProductIDs.contains(id);
    final bool isDisabledSelected = !isSelected && selectedProductIDs.length >= AppData.instance.maxProductPerOrder;
    final bool payNowStatus = data.payNow == 1;
    final bool payLaterStatus = data.payLater == 1;

    ///
    return SizedBox(
      width: double.infinity,
      child: Row(
        children: [
          Expanded(
            child: GestureDetector(
              behavior: HitTestBehavior.translucent,
              onTap: () {
                context.pushRoute(MTradeProductDetailRoute(
                  productCode: code,
                  product: MTradeProductDetailModel.fromCart(data),
                  pageID: AppData.instance.landingPageID,
                  provinceCode: AppData.instance.landingPageProvinceCode,
                  districtCode: AppData.instance.landingPageDistrictCode,
                ));
              },
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      SplashButton(
                        onTap: () {
                          if (!(isDisabled || isDisabledSelected)) {
                            GlobalFunction.checkPromotion(context, () {
                              onSelect(context, id, sku);
                            });
                          }
                        },
                        isDisabled: (isDisabled || isDisabledSelected),
                        child: Container(
                          padding: const EdgeInsets.all(16),
                          color: UIColors.background,
                          child: IgnorePointer(
                            ignoring: true,
                            child: AppCheckbox.rectangle(
                              value: isSelected,
                              isEnable: !(isDisabled || isDisabledSelected),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(
                        width: 100,
                        height: 100,
                        child: Stack(
                          children: [
                            Positioned.fill(
                              child: AppImage.network(
                                url: image,
                                width: 84,
                                height: 84,
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            Visibility(
                              visible: isDisabled,
                              child: Container(
                                decoration: BoxDecoration(
                                  color: UIColors.white.withOpacity(0.5),
                                  borderRadius: BorderRadius.circular(8),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(
                    width: 16,
                  ),
                  Expanded(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.start,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          name,
                          style: UITextStyle.regular.copyWith(
                            fontSize: 14,
                            decoration: isDisabled ? TextDecoration.lineThrough : TextDecoration.none,
                          ),
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              price,
                              style: UITextStyle.medium.copyWith(
                                fontSize: 16,
                              ),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                            if (comparePrice.valueAt(0)?.value != null)
                              Text(
                                comparePrice.valueAt(0)?.getValue() ?? "",
                                style: UITextStyle.medium.copyWith(
                                  fontSize: 14,
                                  color: UIColors.grayText,
                                  decoration: TextDecoration.lineThrough,
                                ),
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                          ],
                        ),
                        if (payNowStatus || payLaterStatus) ...[
                          const SizedBox(
                            height: 4,
                          ),
                          Row(
                            children: [
                              if (payNowStatus) const PaymentTag.now(),
                              if (payNowStatus && payLaterStatus) const SizedBox(width: 4),
                              if (payLaterStatus) const PaymentTag.later(),
                            ],
                          ),
                        ],
                        const SizedBox(
                          height: 4,
                        ),
                        Row(
                          children: [
                            isDisabled
                                ? Row(
                                    children: [
                                      const AppImage.asset(
                                        asset: "ic_warning_outline",
                                        width: 24,
                                        height: 24,
                                      ),
                                      const SizedBox(
                                        width: 5,
                                      ),
                                      Text(
                                        data.productInvalid == true ? "Tạm ngưng bán" : "Tạm hết hàng",
                                        style: UITextStyle.regular.copyWith(
                                          fontSize: 13,
                                          color: UIColors.red,
                                        ),
                                        maxLines: 1,
                                        overflow: TextOverflow.ellipsis,
                                      ),
                                    ],
                                  )
                                : UpdateQuantityWidget(
                                    key: ValueKey("${data.sku}-${data.quantity}"),
                                    product: data,
                                    forceSyncServer: true,
                                    warningFunction: (onAction) {
                                      GlobalFunction.checkPromotion(context, () {
                                        onAction.call();
                                      });
                                    },
                                    onQuantityChanged: (value) {
                                      onQuantityChanged(context, index, value);
                                    },
                                  ),
                            const Spacer(),
                            DeleteButton(
                              onTap: () {
                                GlobalFunction.checkPromotion(context, () {
                                  onDelete(context, index, id, name);
                                });
                              },
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(
            width: 16,
          ),
        ],
      ),
    );
  }

  onSelect(BuildContext context, String id, String sku) {
    context.read<MTradeCartCubit>().selectProduct(
      id,
      onUnselected: () {
        onUnselected(data);
      },
      onSelected: () {
        onSelected(data);
      }
    );
  }

  onDelete(BuildContext context, int index, String id, String name) {
    DialogProvider.instance.showMTradeDialog(
      context: context,
      asset: "ic_mtrade_mascot_waiting",
      showDottedDivider: false,
      message: "Xác nhận xóa “$name” khỏi danh sách sản phẩm",
      positiveTitle: "Xem lại",
      negativeTitle: "Xóa sản phẩm",
      positiveCallback: () {},
      negativeCallback: () async {
        await context.read<MTradeCartCubit>().deleteProduct(index, id);
        onDeleted(data);
      },
    );
  }

  onQuantityChanged(BuildContext context, int index, int quantity) {
    context.read<MTradeCartCubit>().updateQuantity(index, quantity);
    onChangeQuantity(data);
  }
}
