import 'dart:typed_data';

import 'package:flutter/services.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/utils/format_util.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart';
import 'package:printing/printing.dart';

import '../../../../../../../common/pdf_fonts.dart';
import '../../../../../../../di/get_it.dart';
import '../../../../../../../models/mtrade/product/mtrade_brochure_product_model.dart';
import '../../../../../cubit/personal_website_setup/mtrade_personal_website_setup_cubit.dart';
import 'category_brochure_creator.dart';

Future<Map<String, dynamic>> createProductBrochure({
  MTradeBrochureProductModel? selectedProduct,
  String? selectedProvinceCode,
  String? selectedDistrictCode,
  bool? showSaleInfo,
}) async {
  bool multiAttr = (selectedProduct?.variations?.length ?? 0) >= 2;
  int pageTotal = 0;
  final productImage = await networkImage(selectedProduct!.medium!.first);
  final pdf = Document();
  pageTotal++;
  pdf.addPage(
    Page(
      margin: EdgeInsets.zero,
      pageFormat: PdfPageFormat.a4,
      theme: ThemeData.withFont(
        base: Font.ttf(PdfFonts.pdfFont),
        bold: Font.ttf(PdfFonts.pdfBoldFont),
      ),
      build: (Context context) {
        return LayoutBuilder(
          builder: (context, c) {
            double pageHeight = c?.maxHeight ?? 0;
            double pageWidth = c?.maxWidth ?? 0;
            double sizeRatio = pageHeight / 595;
            return Container(
              height: pageHeight,
              width: pageWidth,
              color: const PdfColor.fromInt(0xFF221db0),
              child: Column(
                children: [
                  Container(
                    color: const PdfColor.fromInt(0xFFFFFFFF),
                    child: AspectRatio(
                      aspectRatio: 1,
                      child: Center(
                        child: Image(
                          productImage,
                          width: getConvertSize(420, sizeRatio),
                          height: getConvertSize(420, sizeRatio),
                          fit: BoxFit.cover,
                        ),
                      ),
                    ),
                  ),
                  Container(
                    height: getConvertSize(66, sizeRatio),
                    width: c?.maxWidth ?? 0,
                    child: Center(
                      child: Text(
                        selectedProduct.name ?? '',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          fontSize: getConvertSize(22, sizeRatio),
                          fontWeight: FontWeight.bold,
                          fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
                          color: const PdfColor.fromInt(0xFFFFFFFF),
                        ),
                      ),
                    ),
                  ),
                  Row(
                    children: [
                      Expanded(
                        child: Container(
                          height: getConvertSize(64, sizeRatio),
                          decoration: const BoxDecoration(
                            color: PdfColor.fromInt(0xFF005fff),
                          ),
                          child: Center(
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                if (selectedProduct.variations?.isNotEmpty == true)
                                  Text(
                                    selectedProduct.variations?.first.display() ?? '',
                                    maxLines: 1,
                                    textAlign: TextAlign.center,
                                    style: TextStyle(
                                      fontSize: getConvertSize(multiAttr ? 15 : 22, sizeRatio),
                                      fontWeight: FontWeight.bold,
                                      fontBold: Font.ttf(multiAttr ? PdfFonts.pdfSemiBoldFont : PdfFonts.pdfBoldFont),
                                      color: const PdfColor.fromInt(0xFFFFFFFF),
                                    ),
                                  ),
                                if (multiAttr)
                                  Padding(
                                    padding: const EdgeInsets.only(top: 4),
                                    child: Text(
                                      selectedProduct.variations?[1].display() ?? '',
                                      textAlign: TextAlign.center,
                                      style: TextStyle(
                                        fontSize: getConvertSize(multiAttr ? 15 : 22, sizeRatio),
                                        fontWeight: FontWeight.bold,
                                        fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
                                        color: const PdfColor.fromInt(0xFFFFFFFF),
                                      ),
                                    ),
                                  ),
                              ],
                            ),
                          ),
                        ),
                      ),
                      Expanded(
                        child: Container(
                          height: getConvertSize(64, sizeRatio),
                          decoration: const BoxDecoration(
                            color: PdfColor.fromInt(0xFF00a377),
                          ),
                          child: Center(
                            child: Text(
                              FormatUtil.currencyFormat(double.tryParse('${selectedProduct.price}')?.toInt()),
                              textAlign: TextAlign.center,
                              style: TextStyle(
                                fontSize: getConvertSize(22, sizeRatio),
                                fontWeight: FontWeight.bold,
                                color: const PdfColor.fromInt(0xFFFFFFFF),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  if (showSaleInfo == true)
                    Expanded(
                      child: Padding(
                        padding: EdgeInsets.only(left: getConvertSize(16, sizeRatio)),
                        child: _saleInfo(
                          AppData.instance.saleName ?? '',
                          FormatUtil.phoneFormat(AppData.instance.salePhoneNumber ?? ''),
                          sizeRatio,
                          const PdfColor.fromInt(0xFF898dda),
                        ),
                      ),
                    ),
                ],
              ),
            );
          },
        );
      },
    ),
  );

  ImageProvider icMFast = await imageFromAssetBundle('assets/images/ic_brochure_mfast.png');
  ImageProvider icRate = await imageFromAssetBundle('assets/images/ic_brochure_rate.png');
  ImageProvider icConsultant = await imageFromAssetBundle('assets/images/ic_brochure_consultant.png');
  ImageProvider icDelivery = await imageFromAssetBundle('assets/images/ic_brochure_delivery.png');
  ImageProvider icContent = await imageFromAssetBundle('assets/images/ic_brochure_content.png');
  ImageProvider icMascot = await imageFromAssetBundle('assets/images/ic_brochure_mascot.png');
  ImageProvider icMail = await imageFromAssetBundle('assets/images/ic_brochure_mail.png');
  ImageProvider icPhone = await imageFromAssetBundle('assets/images/ic_brochure_phone.png');
  ImageProvider icLocation = await imageFromAssetBundle('assets/images/ic_brochure_location.png');
  pageTotal++;

  Map<String, String> queryParameters = {
    "productCode": selectedProduct.productCode ?? '',
    "pageID": getItInstance.get<MTradePersonalWebsiteSetupCubit>().state.data?.pageID ?? '',
    "provinceCode": selectedProvinceCode ?? '',
    "districtCode": selectedDistrictCode ?? '',
  };
  var productLink = Uri.parse('${AppData.instance.webUrl}/product_detail').replace(queryParameters: queryParameters);
  pdf.addPage(
    Page(
      margin: EdgeInsets.zero,
      pageFormat: PdfPageFormat.a4,
      theme: ThemeData.withFont(
        base: Font.ttf(PdfFonts.pdfFont),
        bold: Font.ttf(PdfFonts.pdfBoldFont),
      ),
      build: (Context context) {
        return LayoutBuilder(
          builder: (context, c) {
            double pageHeight = c?.maxHeight ?? 0;
            double sizeRatio = pageHeight / 595;
            return Container(
              height: c?.maxHeight ?? 0,
              width: c?.maxWidth ?? 0,
              color: const PdfColor.fromInt(0xFF221db0),
              child: Stack(
                children: [
                  Positioned(
                    top: getConvertSize(102, sizeRatio),
                    left: 0,
                    right: 0,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: [
                        Container(
                          padding: EdgeInsets.only(
                            left: getConvertSize(16, sizeRatio),
                            right: getConvertSize(16, sizeRatio),
                          ),
                          child: Image(
                            icContent,
                            width: getConvertSize(372, sizeRatio),
                            height: getConvertSize(124, sizeRatio),
                            fit: BoxFit.contain,
                          ),
                        ),
                        Image(
                          icMascot,
                          height: getConvertSize(220, sizeRatio),
                        ),
                      ],
                    ),
                  ),
                  Column(
                    children: [
                      SizedBox(height: getConvertSize(16, sizeRatio)),
                      Row(children: [
                        SizedBox(width: getConvertSize(16, sizeRatio)),
                        Image(
                          icMFast,
                          width: getConvertSize(146, sizeRatio),
                          height: getConvertSize(49, sizeRatio),
                          fit: BoxFit.contain,
                        ),
                        Expanded(
                          child: Text(
                            'Quét mã QRCode\nđể truy cập trang\nthông tin sản phẩm',
                            textAlign: TextAlign.right,
                            style: TextStyle(
                              fontSize: getConvertSize(12, sizeRatio),
                              fontWeight: FontWeight.normal,
                              color: const PdfColor.fromInt(0xFF8e93dc),
                              lineSpacing: 5,
                            ),
                          ),
                        ),
                        SizedBox(width: getConvertSize(12, sizeRatio)),
                        BarcodeWidget(
                          width: getConvertSize(72, sizeRatio),
                          height: getConvertSize(72, sizeRatio),
                          color: const PdfColor.fromInt(0xFF221db0),
                          data: productLink.toString(),
                          barcode: Barcode.qrCode(),
                          padding: EdgeInsets.all(getConvertSize(6, sizeRatio)),
                          // backgroundColor: const PdfColor.fromInt(0xFFFFFFFF),
                          decoration: BoxDecoration(
                            color: const PdfColor.fromInt(0xFFFFFFFF),
                            borderRadius: BorderRadius.circular(getConvertSize(8, sizeRatio)),
                          ),
                        ),
                        SizedBox(width: getConvertSize(16, sizeRatio)),
                      ]),
                      SizedBox(height: getConvertSize(24, sizeRatio)),
                      Container(
                        child: RichText(
                          textAlign: TextAlign.center,
                          text: TextSpan(
                            children: [
                              TextSpan(
                                text: '“Giúp khách hàng có thể sở hữu những\n',
                                style: TextStyle(
                                  fontSize: getConvertSize(14, sizeRatio),
                                  fontWeight: FontWeight.normal,
                                  fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
                                  color: const PdfColor.fromInt(0xFFFFFFFF),
                                  lineSpacing: 15,
                                ),
                              ),
                              TextSpan(
                                text: 'SẢN PHẨM, DỊCH VỤ',
                                style: TextStyle(
                                  fontSize: getConvertSize(14, sizeRatio),
                                  fontWeight: FontWeight.bold,
                                  color: const PdfColor.fromInt(0xFFFFFFFF),
                                  lineSpacing: 15,
                                ),
                              ),
                              TextSpan(
                                text: ' cần cho cuộc sống hàng ngày\n',
                                style: TextStyle(
                                  fontSize: getConvertSize(14, sizeRatio),
                                  fontWeight: FontWeight.normal,
                                  fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
                                  color: const PdfColor.fromInt(0xFFFFFFFF),
                                  lineSpacing: 15,
                                ),
                              ),
                              TextSpan(
                                text: 'ngay cả khi ',
                                style: TextStyle(
                                  fontSize: getConvertSize(14, sizeRatio),
                                  fontWeight: FontWeight.normal,
                                  fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
                                  color: const PdfColor.fromInt(0xFFFFFFFF),
                                  lineSpacing: 15,
                                ),
                              ),
                              TextSpan(
                                text: 'CHƯA SẴN SÀNG',
                                style: TextStyle(
                                  fontSize: getConvertSize(14, sizeRatio),
                                  fontWeight: FontWeight.bold,
                                  color: const PdfColor.fromInt(0xFFFFFFFF),
                                  lineSpacing: 15,
                                ),
                              ),
                              TextSpan(
                                text: ' về tài chính.”',
                                style: TextStyle(
                                  fontSize: getConvertSize(14, sizeRatio),
                                  fontWeight: FontWeight.normal,
                                  fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
                                  color: const PdfColor.fromInt(0xFFFFFFFF),
                                  lineSpacing: 15,
                                ),
                              )
                            ],
                          ),
                        ),
                      ),
                      SizedBox(height: getConvertSize(40, sizeRatio)),
                      Align(
                        alignment: Alignment.topLeft,
                        child: _mainItem(icRate, 'TRẢ CHẬM', 'KHÔNG LÃI SUẤT', sizeRatio),
                      ),
                      SizedBox(height: getConvertSize(12, sizeRatio)),
                      Align(
                        alignment: Alignment.topLeft,
                        child: _mainItem(icConsultant, 'TƯ VẤN', 'TẬN TÂM, TẬN NƠI', sizeRatio),
                      ),
                      SizedBox(height: getConvertSize(12, sizeRatio)),
                      Align(
                        alignment: Alignment.topLeft,
                        child: _mainItem(icDelivery, 'MIỄN PHÍ', 'GIAO HÀNG, LẮP ĐẶT', sizeRatio),
                      ),
                      SizedBox(height: getConvertSize(24, sizeRatio)),
                      if (showSaleInfo == true)
                        Container(
                          padding: EdgeInsets.only(
                            left: getConvertSize(16, sizeRatio),
                            top: getConvertSize(11, sizeRatio),
                            bottom: getConvertSize(11, sizeRatio),
                          ),
                          color: const PdfColor.fromInt(0xFF005fff),
                          child: _saleInfo(
                            showSaleInfo == true ? AppData.instance.saleName ?? '' : '',
                            showSaleInfo == true ? FormatUtil.phoneFormat(AppData.instance.salePhoneNumber ?? '') : '',
                            sizeRatio,
                            const PdfColor.fromInt(0xFF81affe),
                          ),
                        ),
                      if (showSaleInfo == false) SizedBox(height: getConvertSize(35, sizeRatio)),
                      SizedBox(height: getConvertSize(12, sizeRatio)),
                      Container(
                        alignment: Alignment.topLeft,
                        width: double.infinity,
                        padding: EdgeInsets.only(left: getConvertSize(16, sizeRatio)),
                        child: Text(
                          'Công ty Cổ phần Giải pháp Thanh toán số - DigiPay',
                          style: TextStyle(
                            fontSize: getConvertSize(16, sizeRatio),
                            fontWeight: FontWeight.normal,
                            color: const PdfColor.fromInt(0xFFd4dffa),
                          ),
                        ),
                      ),
                      SizedBox(height: getConvertSize(8, sizeRatio)),
                      Row(
                        children: [
                          SizedBox(width: getConvertSize(16, sizeRatio)),
                          Expanded(
                            child: _footerItem(icMail, AppData.instance.brochureConfigs?.email ?? '', sizeRatio),
                          ),
                          Expanded(
                            child: _footerItem(icPhone, AppData.instance.brochureConfigs?.phone ?? '', sizeRatio),
                          ),
                        ],
                      ),
                      SizedBox(height: getConvertSize(8, sizeRatio)),
                      Padding(
                        padding: EdgeInsets.only(left: getConvertSize(16, sizeRatio)),
                        child: _footerItem(icLocation, '146-148 Cộng Hòa, P. 12, Q. Tân Bình, TP. HCM', sizeRatio),
                      ),
                    ],
                  )
                ],
              ),
            );
          },
        );
      },
    ),
  );
  Uint8List document = await pdf.save();
  Map<String, dynamic> map = {};
  map['document'] = document;
  map['pageTotal'] = pageTotal;
  return map;
}

_mainItem(ImageProvider image, String title, String content, double sizeRatio) {
  return Container(
    height: getConvertSize(64, sizeRatio),
    width: getConvertSize(188, sizeRatio),
    margin: EdgeInsets.only(left: getConvertSize(16, sizeRatio)),
    decoration: BoxDecoration(color: const PdfColor.fromInt(0xFF00a377), borderRadius: BorderRadius.circular(8)),
    child: Column(
      mainAxisAlignment: MainAxisAlignment.center,
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image(
              image,
              width: getConvertSize(20, sizeRatio),
              height: getConvertSize(20, sizeRatio),
              fit: BoxFit.contain,
            ),
            SizedBox(width: getConvertSize(6, sizeRatio)),
            Text(
              title,
              style: TextStyle(
                fontSize: getConvertSize(16, sizeRatio),
                fontWeight: FontWeight.bold,
                fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
                color: const PdfColor.fromInt(0xFFFFFFFF),
              ),
            ),
          ],
        ),
        SizedBox(height: getConvertSize(4, sizeRatio)),
        Text(
          content,
          style: TextStyle(
            fontSize: getConvertSize(16, sizeRatio),
            fontWeight: FontWeight.bold,
            color: const PdfColor.fromInt(0xFFFFFFFF),
          ),
        ),
      ],
    ),
  );
}

_saleInfo(String name, String phone, double sizeRatio, PdfColor titleColor) {
  return Row(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      Text(
        'Tư vấn viên:',
        style: TextStyle(
          fontSize: getConvertSize(13, sizeRatio),
          fontWeight: FontWeight.normal,
          fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
          color: titleColor,
        ),
      ),
      SizedBox(width: getConvertSize(4, sizeRatio)),
      Text(
        name,
        style: TextStyle(
          fontSize: getConvertSize(13, sizeRatio),
          fontWeight: FontWeight.bold,
          fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
          color: const PdfColor.fromInt(0xFFFFFFFF),
        ),
      ),
      SizedBox(width: getConvertSize(12, sizeRatio)),
      Container(
        height: getConvertSize(16, sizeRatio),
        width: getConvertSize(1, sizeRatio),
        color: titleColor,
      ),
      SizedBox(width: getConvertSize(12, sizeRatio)),
      Text(
        'SDT:',
        style: TextStyle(
          fontSize: getConvertSize(13, sizeRatio),
          fontWeight: FontWeight.normal,
          fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
          color: titleColor,
        ),
      ),
      SizedBox(width: getConvertSize(4, sizeRatio)),
      Text(
        phone,
        style: TextStyle(
          fontSize: getConvertSize(13, sizeRatio),
          fontWeight: FontWeight.bold,
          fontBold: Font.ttf(PdfFonts.pdfSemiBoldFont),
          color: const PdfColor.fromInt(0xFFFFFFFF),
        ),
      ),
    ],
  );
}

_footerItem(ImageProvider icon, String value, double sizeRatio) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.start,
    children: [
      Image(
        icon,
        width: getConvertSize(18, sizeRatio),
        height: getConvertSize(18, sizeRatio),
        fit: BoxFit.contain,
      ),
      SizedBox(width: getConvertSize(8, sizeRatio)),
      Text(
        value,
        style: TextStyle(
          fontSize: getConvertSize(14, sizeRatio),
          fontWeight: FontWeight.normal,
          fontNormal: Font.ttf(PdfFonts.pdfMediumFont),
          color: const PdfColor.fromInt(0xFFd4dffa),
        ),
      ),
    ],
  );
}
