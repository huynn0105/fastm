import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/enum/mtrade/brochure_type.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/separated_widget.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/brochure/items/category_item.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/brochure/items/product_item.dart';

import '../../../../../../../app_data.dart';
import '../../../../../../../common/bottom_sheet/bottom_sheet_provider.dart';
import '../../../../../../../common/colors.dart';
import '../../../../../../../common/constants.dart';
import '../../../../../../../common/enum/mtrade/delivery_location_type.dart';
import '../../../../../../../common/event_bus/event_bus.dart';
import '../../../../../../../common/styles.dart';
import '../../../../../../../common/utils/format_util.dart';
import '../../../../../../../common/widgets/buttons.dart';
import '../../../../../../../common/widgets/checkbox.dart';
import '../../../../../../../common/widgets/collect_data_view.dart';
import '../../../../../../../common/widgets/radio.dart';
import '../../../../../../../general_config.dart';
import '../../../../../../../routes/routes.gr.dart';
import '../../../../../cubit/brochure/brochure_cubit.dart';
import '../../../../personal_website_setup/components/setup_location_component.dart';
import '../../../../personal_website_setup/components/user_guide_component.dart';
import '../widgets/brochure_dropdown_text_field.dart';
import '../widgets/information_widget.dart';
import '../widgets/requirement_widget.dart';
import 'product_selection_component.dart';

class CreateBrochureComponent extends StatefulWidget {
  const CreateBrochureComponent({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() {
    return _CreateBrochureComponentState();
  }
}

class _CreateBrochureComponentState extends State<CreateBrochureComponent> {
  late final TextEditingController _brochureNameController;
  late final StreamSubscription _subscription;

  @override
  void initState() {
    _brochureNameController = TextEditingController();
    _subscription = eventBus.on<MTradeRefreshByUpdateDeliverySupportEventBus>().listen((_) {
      context.read<BrochureCubit>().getBrochureProducts();
    });
    super.initState();
  }

  @override
  void dispose() {
    _brochureNameController.dispose();
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<BrochureCubit>();
    return BlocConsumer<BrochureCubit, BrochureState>(
      listener: (context, state) {
        _brochureNameController.text =
            state.isCategory ? state.selectedCategory?.value ?? '' : state.selectedProduct?.name ?? '';
      },
      builder: (context, state) {
        if (state.status.isInitial) {
          cubit
            ..getBrochureProducts()
            ..initLocationFromLocal();
        }
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(
                height: 16,
              ),
              Text(
                "Thiết lập bộ tờ rơi",
                style: UITextStyle.semiBold.copyWith(
                  fontSize: 14,
                  color: UIColors.grayText,
                ),
              ),
              const SizedBox(
                height: 16,
              ),
              Container(
                padding: const EdgeInsets.fromLTRB(16, 16, 16, 20),
                decoration: BoxDecoration(
                  color: UIColors.white,
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Column(
                  children: [
                    RequirementWidget(
                      title: "Loại hình cần giới thiệu",
                      child: CollectDataView(
                        child: BrochureDropdownTextField(
                          controller: cubit.typeController,
                          hintText: "- Chọn -",
                          enabled: true,
                          onTap: () {
                            final data = BrochureType.values.map((e) {
                              return DataWrapper(
                                id: "${e.index}",
                                value: e.title,
                              );
                            }).toList();
                            onShowBottomSheetType(
                              context,
                              selectedId: "${state.type?.index}",
                              data: data,
                            );
                          },
                        ),
                      ),
                    ),
                    AnimatedSize(
                      duration: AppConstants.duration,
                      alignment: Alignment.topCenter,
                      child: Visibility(
                        visible: state.type != null,
                        child: Padding(
                          padding: const EdgeInsets.only(top: 20),
                          child: RequirementWidget(
                            title: state.type?.subtitle ?? "",
                            child: CollectDataView(
                              child: BrochureDropdownTextField(
                                controller: cubit.dataTypeController,
                                enabled: state.enabledTypeData,
                                hintText: "- Chọn -",
                                onTap: () {
                                  onShowBottomSheetTypeData(context);
                                },
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                    AnimatedSize(
                      duration: AppConstants.duration,
                      alignment: Alignment.topCenter,
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Visibility(
                            visible: state.showSelectedCategories && state.selectedCategories.isNotEmpty,
                            child: Container(
                              height: 40,
                              margin: const EdgeInsets.only(top: 8),
                              child: ListView.separated(
                                padding: EdgeInsets.zero,
                                scrollDirection: Axis.horizontal,
                                physics: const AlwaysScrollableScrollPhysics(
                                  parent: BouncingScrollPhysics(),
                                ),
                                itemBuilder: (context, index) {
                                  return CategoryItem(
                                    data: state.selectedCategories[index],
                                    onDeleted: (id) {
                                      cubit.deleteCategory(id);
                                    },
                                  );
                                },
                                separatorBuilder: (_, __) => const SizedBox(
                                  width: 8,
                                ),
                                itemCount: state.selectedCategories.length,
                              ),
                            ),
                          ),
                          Visibility(
                            visible: state.showSelectedProducts && state.selectedProducts.isNotEmpty,
                            child: Container(
                              width: double.infinity,
                              clipBehavior: Clip.hardEdge,
                              alignment: Alignment.centerLeft,
                              margin: const EdgeInsets.only(top: 8),
                              padding: const EdgeInsets.only(top: 12, bottom: 12),
                              decoration: BoxDecoration(
                                color: UIColors.extraLightBlue,
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: SingleChildScrollView(
                                clipBehavior: Clip.none,
                                scrollDirection: Axis.horizontal,
                                padding: const EdgeInsets.symmetric(horizontal: 12),
                                physics: const AlwaysScrollableScrollPhysics(
                                  parent: BouncingScrollPhysics(),
                                ),
                                child: IntrinsicHeight(
                                  child: SeparatedRow(
                                    mainAxisSize: MainAxisSize.max,
                                    crossAxisAlignment: CrossAxisAlignment.stretch,
                                    children: List.generate(
                                      state.selectedProducts.length,
                                      (index) {
                                        return ProductItem(
                                          data: state.selectedProducts[index],
                                          onDeleted: (id) {
                                            cubit.deleteProduct(id);
                                          },
                                        );
                                      },
                                    ),
                                    separatorBuilder: (_, __) => const SizedBox(
                                      width: 8,
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    // const SizedBox(
                    //   height: 20,
                    // ),
                    // RequirementWidget(
                    //   title: "Loại hình cần giới thiệu",
                    //   child: Row(
                    //     children: [
                    //       Expanded(
                    //         child: SplashButton(
                    //           onTap: () {
                    //             cubit.toggleBrochureType(true);
                    //           },
                    //           child: AppRadio(
                    //             title: "Nhóm sản phẩm",
                    //             value: state.isCategory,
                    //           ),
                    //         ),
                    //       ),
                    //       Expanded(
                    //         child: SplashButton(
                    //           onTap: () {
                    //             cubit.toggleBrochureType(false);
                    //           },
                    //           child: AppRadio(
                    //             title: "1 sản phẩm",
                    //             value: !state.isCategory,
                    //           ),
                    //         ),
                    //       ),
                    //     ],
                    //   ),
                    // ),
                    // const SizedBox(
                    //   height: 20,
                    // ),
                    // RequirementWidget(
                    //   title: state.isCategory ? "Chi tiết nhóm sản phẩm" : "Tên sản phẩm",
                    //   child: BrochureDropdownTextField(
                    //     controller: _brochureNameController,
                    //     hintText: "- Chọn -",
                    //     onTap: () {
                    //       final String selectedId =
                    //           state.isCategory ? state.selectedCategory?.id ?? '' : state.selectedProduct?.id ?? '';
                    //       final List<DataWrapper> data;
                    //       if (state.isCategory) {
                    //         data = state.categories ?? [];
                    //       } else {
                    //         data = state.products.map((e) => DataWrapper(id: e.id, value: e.name)).toList();
                    //       }
                    //       onShowBottomSheetLocation(
                    //         context,
                    //         selectedId: selectedId,
                    //         isCategory: state.isCategory,
                    //         data: data,
                    //       );
                    //     },
                    //   ),
                    // ),
                    const SizedBox(
                      height: 20,
                    ),
                    SetupLocationComponent(
                      enabledProvince: state.enabledProvince,
                      enabledDistrict: state.enabledDistrict,
                      selectedProvinceCode: state.selectedProvinceCode ?? "",
                      selectedDistrictCode: state.selectedDistrictCode ?? "",
                      provinces: state.provinces,
                      districts: state.districts,
                      provinceController: cubit.provinceController,
                      districtController: cubit.districtController,
                      onSelected: (LocationType type, DataWrapper result) {
                        if (type.isProvince) {
                          cubit.selectProvince(result.id ?? "");
                        } else if (type.isDistrict) {
                          cubit.selectDistrict(result.id ?? "");
                        }
                      },
                      errorFields: const {},
                    ),
                    const SizedBox(
                      height: 20,
                    ),
                    RequirementWidget(
                      title: "Thông tin liên hệ",
                      child: Container(
                        width: double.infinity,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 12,
                        ),
                        decoration: BoxDecoration(
                          color: UIColors.background,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            InformationWidget(
                              title: "Họ tên:",
                              value: AppData.instance.saleName ?? '',
                              valueColor: state.showSaleInfo ? UIColors.defaultText : UIColors.grayText,
                            ),
                            const SizedBox(
                              height: 4,
                            ),
                            InformationWidget(
                              title: "Số điện thoại:",
                              value: FormatUtil.phoneFormat(AppData.instance.salePhoneNumber ?? ''),
                              valueColor: state.showSaleInfo ? UIColors.defaultText : UIColors.grayText,
                            ),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(
                      height: 8,
                    ),
                    SplashButton(
                      onTap: () {
                        cubit.toggleContactInfo();
                      },
                      child: Padding(
                        padding: const EdgeInsets.only(right: 12, bottom: 12),
                        child: IgnorePointer(
                          ignoring: true,
                          child: AppCheckbox.rectangle(
                            value: state.showSaleInfo,
                            title: "Hiện thông tin liên hệ trên tờ rơi",
                            size: 24,
                            onChanged: (_) {},
                            uncheckedTitleColor: UIColors.grayText,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(
                      height: 20,
                    ),
                    PrimaryButton(
                      onPressed: () {
                        if (state.type.isSpecificProduct) {
                          context.pushRoute(ReviewBrochureRoute(
                            type: state.type,
                            selectedProduct: state.selectedProduct,
                            selectedProvinceCode: state.selectedProvinceCode,
                            selectedDistrictCode: state.selectedDistrictCode,
                            showSaleInfo: state.showSaleInfo,
                          ));
                        } else {
                          final products = cubit.getSelectedBrochureProducts();
                          context.pushRoute(ReviewBrochureRoute(
                            type: state.type,
                            selectedProductList: products,
                            showSaleInfo: state.showSaleInfo,
                          ));
                        }
                        // if (state.isCategory) {
                        //   context.pushRoute(ReviewBrochureRoute(
                        //     selectedCategory: state.selectedCategory,
                        //     selectedProductList: state.selectedProductList,
                        //     showSaleInfo: state.showSaleInfo,
                        //   ));
                        // } else {
                        //   context.pushRoute(ReviewBrochureRoute(
                        //     selectedProduct: state.selectedProduct,
                        //     selectedProvinceCode: state.selectedProvinceCode,
                        //     selectedDistrictCode: state.selectedDistrictCode,
                        //     showSaleInfo: state.showSaleInfo,
                        //   ));
                        // }
                      },
                      height: 48,
                      width: 167,
                      padding: EdgeInsets.zero,
                      radius: 8,
                      enabled: state.enableNext,
                      title: "Tạo bộ giới thiệu",
                    ),
                  ],
                ),
              ),
              const SizedBox(
                height: 20,
              ),
              const UserGuideComponent(
                padding: EdgeInsets.zero,
              ),
            ],
          ),
        );
      },
    );
  }

  // onShowBottomSheetLocation(
  //   BuildContext context, {
  //   required bool isCategory,
  //   required String selectedId,
  //   required List<DataWrapper> data,
  // }) async {
  //   final cubit = context.read<BrochureCubit>();
  //   final result = await BottomSheetProvider.instance.onShowSearchList(
  //     context,
  //     selectedId: selectedId,
  //     title: isCategory ? 'Nhóm sản phẩm' : 'Sản phẩm',
  //     data: data,
  //   );
  //   if (result != null) {
  //     if (isCategory) {
  //       cubit.selectCategory(result);
  //     } else {
  //       cubit.selectProduct(result);
  //     }
  //   }
  // }

  onShowBottomSheetType(
    BuildContext context, {
    required String selectedId,
    required List<DataWrapper> data,
  }) async {
    final cubit = context.read<BrochureCubit>();
    final result = await BottomSheetProvider.instance.onShowSearchList(
      context,
      selectedId: selectedId,
      title: "Loại hình cần giới thiệu",
      data: data,
    );
    if (result != null) {
      int? index = TextUtils.parseInt(result.id);
      if (index != null) {
        cubit.selectType(BrochureType.values[index]);
      }
    }
  }

  onShowBottomSheetTypeData(BuildContext context) async {
    final cubit = context.read<BrochureCubit>();
    final state = cubit.state;

    List<String?> ids = const [];
    List<DataWrapper> data = const [];

    if (state.type.isCategories) {
      ids = state.selectedCategories.map((e) => e.id).toList();
      data = state.categories ?? [];
      final result = await BottomSheetProvider.instance.onShowMultiSelectSearchList(
        context,
        title: "Chọn loại sản phẩm",
        ids: ids,
        data: data,
      );
      if (result != null) {
        cubit.selectCategories(result);
      }
      return;
    }
    if (state.type.isProducts) {
      ids = state.selectedProducts.map((e) => e.id).toList();
      data = state.products.map((e) {
        return DataWrapper(
          id: e.id,
          value: e.name,
          parent: DataWrapper(
            id: e.groupID,
            value: e.groupName,
          ),
        );
      }).toList();
      final result = await BottomSheetProvider.instance.showMultiSelectGroupSearchView(
        context,
        title: "Chọn sản phẩm",
        ids: ids,
        data: data,
      );
      if (result != null) {
        cubit.selectProducts(result);
      }
      return;
    }
    if (state.type.isSpecificProduct) {
      var id = state.selectedProduct?.id ?? "";
      data = cubit.convertProductsToDataWrapper();
      final result = await BottomSheetProvider.instance.onShowSearchList(
        context,
        title: "Chọn sản phẩm",
        selectedId: id,
        data: data,
      );
      if (result != null) {
        cubit.selectProduct(result);
      }
      return;
    }
  }
}
