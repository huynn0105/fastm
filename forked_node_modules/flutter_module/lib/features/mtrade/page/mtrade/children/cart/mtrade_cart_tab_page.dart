import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/general_config.dart';

import '../../../../cubit/select_promotion/mtrade_select_promotion_cubit.dart';
import '../../../../../../di/get_it.dart';
import '../../../../cubit/check_project_code/mtrade_check_project_code_cubit.dart';
import '../../../check_data/check_data_page.dart';
import "../../../../../../common/bloc_status.dart";
import '../../../../../../common/colors.dart';
import '../../../../../../common/dialogs/dialog_provider.dart';
import '../../../../../../common/styles.dart';
import '../../../../../../common/widgets/loading.dart';
import '../../../../cubit/cart/mtrade_cart_cubit.dart';
import 'components/list_cart_component.dart';
import 'components/payment_component.dart';
import 'components/error_component.dart';

@RoutePage()
class MTradeCartTabPage extends StatefulWidget implements AutoRouteWrapper {
  const MTradeCartTabPage({Key? key}) : super(key: key);

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => MTradeCartCubit(),
        ),
        BlocProvider(
          create: (_) => MTradeSelectPromotionCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  State<MTradeCartTabPage> createState() => _MTradeCartTabPageState();
}

class _MTradeCartTabPageState extends State<MTradeCartTabPage> {
  late final StreamSubscription _subscription;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _subscription = eventBus.on<MTradeRefreshCartEventBus>().listen(_onEventBusListen);
      getItInstance.get<MTradeCheckProjectCodeCubit>().checkPayNow();
    });
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return CheckDataPage(
      child: BlocConsumer<MTradeSelectPromotionCubit, MTradeSelectPromotionState>(
        listener: (context, selectPromotionState) {
          if (selectPromotionState.checkStatus.isFailure) {
            if (selectPromotionState.errorPromotions?.isNotEmpty == true) {
              context.read<MTradeSelectPromotionCubit>().clearPromotions();
            }
            DialogProvider.instance.showMTradeErrorDialog(
              context: context,
              title: "Thất bại",
              message: selectPromotionState.errorMessage ?? "",
              messageAlign: TextAlign.left,
            );
          }
        },
        builder: (context, selectPromotionState) {
          return MultiBlocListener(
            listeners: [
              BlocListener<MTradeCartCubit, MTradeCartState>(
                listenWhen: (pre, cur) {
                  return pre.selectedProductIDs.isNotEmpty && cur.selectedProductIDs.isEmpty;
                },
                listener: (context, state) {
                  context.read<MTradeSelectPromotionCubit>().clearPromotions();
                },
              ),
              BlocListener<MTradeCartCubit, MTradeCartState>(
                listenWhen: (pre, cur) {
                  return pre.selectedProductIDs != cur.selectedProductIDs;
                },
                listener: (context, state) {
                  context.read<MTradeCartCubit>().updateSkus();
                },
              ),
            ],
            child: BlocConsumer<MTradeCartCubit, MTradeCartState>(
              listener: (context, state) {
                if (state.checkProjectPayNowStatus.isFailure || state.checkProjectPayLaterStatus.isFailure) {
                  DialogProvider.instance.showMTradeProjectCodeDialog(
                    context: context,
                    message: state.projectCode?.message ?? "",
                    url: state.projectCode?.url ?? "",
                  );
                }
                if (state.checkProductSchemePayLater.isFailure) {
                  DialogProvider.instance.showMTradeErrorDialog(
                    context: context,
                    title: "Bán hàng trả chậm thất bại",
                    message: state.errorMessage ?? "",
                  );
                }
                if (state.checkProductStockStatus.isFailure) {
                  DialogProvider.instance.showMTradeErrorDialog(
                    context: context,
                    title: "Thất bại",
                    message: state.errorMessage ?? "",
                  );
                }
              },
              builder: (context, state) {
                final showLoading = state.deleteStatus.isLoading ||
                    state.checkProjectPayNowStatus.isLoading ||
                    state.checkProjectPayLaterStatus.isLoading ||
                    state.checkProductSchemePayLater.isLoading ||
                    state.checkProductStockStatus.isLoading ||
                    selectPromotionState.checkStatus.isLoading;

                return Scaffold(
                  body: Stack(
                    children: [
                      Positioned.fill(
                        child: Column(
                          children: [
                            ErrorComponent(
                              errorFields: state.errorFields,
                            ),
                            Container(
                              padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
                              alignment: Alignment.centerLeft,
                              child: Text(
                                "Giỏ hàng của bạn",
                                style: UITextStyle.semiBold.copyWith(
                                  fontSize: 14,
                                  color: UIColors.grayText,
                                ),
                              ),
                            ),
                            Expanded(
                              child: ListCartComponent(
                                onRefresh: () async {
                                  return Future.wait([
                                    context.read<MTradeCheckProjectCodeCubit>().refreshPayNow(),
                                    context.read<MTradeCartCubit>().refreshData(),
                                  ]);
                                },
                                onDeleted: (value) {
                                  onUpdatePromotion(context);
                                },
                                onSelected: (value) {
                                  onUpdatePromotion(context);
                                },
                                onUnselected: (value) {
                                  onUpdatePromotion(context);
                                },
                                onChangeQuantity: (value) {
                                  onUpdatePromotion(context);
                                },
                              ),
                            ),
                          ],
                        ),
                      ),
                      Positioned(
                        bottom: 0,
                        left: 0,
                        right: 0,
                        child: PaymentComponent(
                          onPromotionChanged: (data) {
                            context.read<MTradeCartCubit>().updatePromotions(data);
                          },
                        ),
                      ),
                      if (showLoading) ...[
                        const SafeArea(
                          child: LoadingWidget.dark(),
                        ),
                      ],
                    ],
                  ),
                );
              },
            ),
          );
        },
      ),
    );
  }

  onUpdatePromotion(BuildContext context) {
    final cubit = context.read<MTradeCartCubit>();
    final skus = cubit.getSelectedProducts().map((e) => e.sku ?? "").toList();
    context.read<MTradeSelectPromotionCubit>().updatePromotionByRemainSkus(skus);
  }

  void _onEventBusListen(MTradeRefreshCartEventBus event) {
    context.read<MTradeCartCubit>().clearSelectedProduct();
    context.read<MTradeCartCubit>().refreshData();
  }
}
