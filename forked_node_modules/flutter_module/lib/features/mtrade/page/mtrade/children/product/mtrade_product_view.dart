import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/event_key.dart';
import 'package:flutter_module/common/enum/log_event_key.dart';
import 'package:flutter_module/common/utils/event_util.dart';
import 'package:flutter_module/common/utils/log_event_util.dart';
import 'package:flutter_module/common/widgets/nested_scrollview.dart';
import 'package:flutter_module/common/widgets/widget_layout.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/mtrade/cubit/campaign/mtrade_campaign_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/check_project_code/mtrade_check_project_code_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/filtered_promotion_product/mtrade_filtered_promotion_product_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/personal_website_statistic/mtrade_personal_website_statistic_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/product_group/pinned_search_cubit.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/product/components/filtered_promotion_product_component.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/product/widgets/shimmer_product_loading.dart';
import 'package:flutter_module/features/mtrade/page/personal_website_statistic/components/website_overall_statistic_component.dart';
import 'package:flutter_module/models/mtrade/campaign/campaign_model.dart';
import 'package:flutter_module/models/mtrade/product_group/mtrade_special_group_model.dart';
import 'package:flutter_module/routes/routes.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';
import 'package:scroll_to_index/scroll_to_index.dart';

import '../../../../../../../common/constants.dart';
import '../../../../../../../common/event_bus/event_bus.dart';
import '../../../../../../../common/size.dart';
import '../../../../../../../general_config.dart';
import '../../../../../../common/enum/mtrade/mtrade_home_scroll_index.dart';
import '../../../../../../common/utils/redirect_util.dart';
import '../../../../../../main.dart';
import '../../../../../../models/mtrade/product/mtrade_product_model.dart';
import '../../../../cubit/banner/mtrade_banner_cubit.dart';
import '../../../../cubit/history_product/mtrade_history_product_cubit.dart';
import '../../../../cubit/hot_product/mtrade_hot_product_cubit.dart';
import '../../../../cubit/personal_website_setup/mtrade_personal_website_setup_cubit.dart';
import '../../../../cubit/product_group/mtrade_product_group_cubit.dart';
import '../../../../cubit/product_group/pinned_category_cubit.dart';
import '../../../personal_website_setup/components/website_component.dart';
import '../../components/delivery_support/delivery_support_mixin.dart';
import '../../items/product_card.dart';
import 'components/banner_component.dart';
import 'components/express_empty_component.dart';
import 'components/history_product_component.dart';
import 'components/hot_product_component.dart';
import 'components/list_group_component.dart';
import 'components/list_special_collapse_group_component.dart';
import 'components/list_special_group_component.dart';
import 'components/search_bar_component.dart';
import 'items/group_title_item.dart';

class MTradeProductView extends StatefulWidget {
  const MTradeProductView({
    Key? key,
    this.onBoardingWidget,
  }) : super(key: key);

  final Widget? onBoardingWidget;

  @override
  State<MTradeProductView> createState() => _MTradeProductViewState();
}

class _MTradeProductViewState extends State<MTradeProductView> with DeliverySupportMixin {
  static const double SPECIAL_COLLAPSE_HEIGHT = 32;
  static const double SPECIAL_COLLAPSE_SEARCH_HEIGHT = 45;
  static const double SPECIAL_EXPAND_SEARCH_HEIGHT = 88;
  bool _hasAutoScroll = true;
  bool _deliveryPopupDisplayed = false;
  final GlobalKey _key = GlobalKey();

  late final StreamSubscription _subscription;
  late final AutoScrollController _controller;
  final RefreshController refreshController = RefreshController();

  @override
  void initState() {
    _onArgumentsInit();
    super.initState();
    _hasAutoScroll =
        AppData.instance.selectedSpecialGroup != null || TextUtils.isNotEmpty(AppData.instance.selectedProductGroup);
    if (kIsWeb) {
      getItInstance.get<MTradePersonalWebsiteSetupCubit>().getContactMethod();
    }
    _controller = AutoScrollController(
      axis: Axis.vertical,
      viewportBoundaryGetter: () {
        return Rect.fromLTRB(0, -SPECIAL_COLLAPSE_SEARCH_HEIGHT, 0, AppSize.instance.keyboardHeight);
      },
    );
    _controller.addListener(_onScroll);
    _subscription = eventBus.on().listen((event) {
      onListen(context, event);
    });
    LogEventUtil.send(LogEventKey.mTradeViewHome, data: {"nav": "home"});
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) async {
      CampaignModel? campaign = await context.read<MTradeCampaignCubit>().getCampaignEvent();
      if (campaign != null && context.mounted) {
        if (!(AppData.instance.showMTradeCampaign == true)) {
          return;
        }
        DialogProvider.instance.showMTradeDialog(
          context: context,
          barrierDismissible: false,
          asset: campaign.icon ?? '',
          isNetworkAsset: true,
          htmlTitle: campaign.title,
          htmlMessage: campaign.content,
          positiveTitle: campaign.action ?? 'Đã hiểu và quay lại',
          positiveCallback: () {
            EventUtil.sendEventToRNv2(EventKey.showMTradeCampaign.value, data: {'value': false});
            if (campaign.action == null) {
              RedirectUtil.backToMFast();
            }
          },
        );
      }
    });
  }

  void _onScroll() {
    if (kIsWeb) {
      final RenderBox? renderBox = _key.currentContext?.findRenderObject() as RenderBox?;
      final position = renderBox?.localToGlobal(Offset.zero);
      double dy = position?.dy ?? 0;
      if (dy <= 0) {
        if (!_deliveryPopupDisplayed) {
          _deliveryPopupDisplayed = true;
          WidgetsBinding.instance.addPostFrameCallback((_) {
            Future.delayed(const Duration(milliseconds: 500), () {
              onShowDeliverySupportDialog(context);
            });
          });
        }
      }
    }
  }

  @override
  void dispose() {
    _onArgumentsClear();
    _controller.dispose();
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<MTradeProductGroupCubit>();
    return MultiBlocListener(
      listeners: [
        BlocListener<MTradeProductGroupCubit, MTradeProductGroupState>(
          listenWhen: (pre, cur) {
            return pre.groupStatus != cur.groupStatus && _hasAutoScroll;
          },
          listener: (context, state) {
            if (state.groupStatus.isSuccess && _hasAutoScroll) {
              _hasAutoScroll = false;
              WidgetsBinding.instance.addPostFrameCallback((_) async {
                await _controller.scrollToIndex(
                  MTradeHomeScrollIndex.categoryGroup.index,
                  duration: const Duration(milliseconds: 100),
                  preferPosition: AutoScrollPosition.begin,
                );
                // //! Some time get wrong offset => set top viewportBoundaryGetter
                // await Future.delayed(const Duration(milliseconds: 1));
                // print("offset scroll: ${_controller.position.extentTotal}");
                // _controller.animateTo(
                //   _controller.offset + SPECIAL_COLLAPSE_SEARCH_HEIGHT,
                //   duration: const Duration(milliseconds: 100),
                //   curve: Curves.easeOut,
                // );
              });
            }
          },
        ),
        BlocListener<MTradeProductGroupCubit, MTradeProductGroupState>(
          listenWhen: (pre, cur) {
            return pre.selectedProductGroup != cur.selectedProductGroup;
          },
          listener: (context, state) {
            refreshController.refreshCompleted(resetFooterState: true);
          },
        ),
      ],
      child: Padding(
        padding: EdgeInsets.only(
          bottom: kIsWeb ? 0 : AppSize.instance.bottomBarHeight, /*web don't include bottomBar*/
        ),
        child: BlocBuilder<MTradeProductGroupCubit, MTradeProductGroupState>(
          builder: (context, state) {
            Widget? body;
            if (state.productStatus.showLoading && !kIsWeb) {
              body = const ShimmerProductLoading();
            }
            final data = state.products;

            if (data.isEmpty && !state.productStatus.showLoading) {
              body = ExpressEmptyComponent(
                parentState: state,
              );
            }
            return LayoutBuilder(
              builder: (BuildContext context, BoxConstraints constraints) {
                final double layoutMaxWidth = constraints.maxWidth > AppConstants.responsiveSize
                    ? AppConstants.responsiveSize
                    : constraints.maxWidth;
                final EdgeInsets padding = kIsWeb
                    ? EdgeInsets.symmetric(
                        horizontal: constraints.maxWidth >= AppConstants.responsiveSize
                            ? (constraints.maxWidth - AppConstants.responsiveSize + 24) / 2
                            : 12,
                      )
                    : const EdgeInsets.symmetric(horizontal: 12);
                final double layoutWidth = (layoutMaxWidth - 32) / 2;
                const double layoutHeight = 280;
                return AppNestedScrollView(
                  controller: _controller,
                  slivers: [
                    if (widget.onBoardingWidget != null)
                      SliverToBoxAdapter(
                        child: widget.onBoardingWidget!,
                      ),
                    if (kIsWeb)
                      SliverToBoxAdapter(
                        child: AutoScrollTag(
                          key: _key,
                          controller: _controller,
                          index: MTradeHomeScrollIndex.searchBar.index,
                          child: const SizedBox(
                            height: 16,
                          ),
                        ),
                      ),
                    SliverAppBar(
                      pinned: true,
                      floating: false,
                      titleSpacing: 0,
                      automaticallyImplyLeading: false,
                      backgroundColor: Colors.transparent,
                      elevation: 0,
                      toolbarHeight: SPECIAL_COLLAPSE_SEARCH_HEIGHT,
                      collapsedHeight: SPECIAL_COLLAPSE_SEARCH_HEIGHT,
                      expandedHeight: SPECIAL_EXPAND_SEARCH_HEIGHT,
                      title: BlocBuilder<PinnedSearchCubit, PinnedSearchState>(
                        builder: (context, state) {
                          return AnimatedOpacity(
                            duration: const Duration(milliseconds: 300),
                            opacity: state.isCollapse ? 1 : 0,
                            child: Container(
                              color: UIColors.background,
                              width: double.infinity,
                              height: SPECIAL_COLLAPSE_SEARCH_HEIGHT,
                              child: SearchBarComponent(
                                collapse: state.isCollapse,
                                autoShowDialog: false,
                              ),
                            ),
                          );
                        },
                      ),
                      flexibleSpace: LayoutBuilder(
                        builder: (context, constraints) {
                          final position = constraints.biggest.height -
                              SPECIAL_COLLAPSE_SEARCH_HEIGHT -
                              MediaQuery.of(context).padding.top;
                          WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
                            context.read<PinnedSearchCubit>().changeCollapseValue(position.round() == 0);
                          });

                          return const SearchBarComponent(autoShowDialog: true);
                        },
                      ),
                    ),
                    const SliverToBoxAdapter(child: WidgetLayout(child: BannerComponent())),
                    if (!kIsWeb && (!_hasAutoScroll || state.groupStatus.isSuccess || state.groupStatus.isFailure))
                      SliverToBoxAdapter(
                        child: BlocBuilder<MTradeCheckProjectCodeCubit, MTradeCheckProjectCodeState>(
                          buildWhen: (pre, cur) {
                            return !cur.checkProjectCodePayNow.isLoading;
                          },
                          builder: (context, projectCodeState) {
                            if (!projectCodeState.checkProjectCodePayNow.isSuccess) {
                              return const SizedBox();
                            }
                            return Column(
                              children: [
                                BlocBuilder<MTradePersonalWebsiteSetupCubit, MTradePersonalWebsiteSetupState>(
                                  builder: (context, state) {
                                    if (state.status.isInitial) {
                                      context.read<MTradePersonalWebsiteSetupCubit>().fetchData();
                                    }
                                    if (state.data == null) {
                                      return const SizedBox();
                                    }
                                    return WebsiteComponent(
                                      title: "Website bán hàng của bạn",
                                      data: state.data,
                                      forceCheckCode: true,
                                    );
                                  },
                                ),
                                const SizedBox(
                                  height: 8,
                                ),
                                BlocBuilder<MTradePersonalWebsiteStatisticCubit, MTradePersonalWebsiteStatisticState>(
                                  builder: (context, state) {
                                    if (state.status.isInitial) {
                                      context.read<MTradePersonalWebsiteStatisticCubit>().fetchData();
                                    }
                                    if (state.data == null) {
                                      return const SizedBox();
                                    }
                                    return WebsiteOverallStatisticComponent(
                                      enabledOnTap: true,
                                      data: state.data?.statistics ?? [],
                                    );
                                  },
                                ),
                              ],
                            );
                          },
                        ),
                      ),
                    if (!_hasAutoScroll || state.groupStatus.isSuccess || state.groupStatus.isFailure)
                      const SliverToBoxAdapter(child: WidgetLayout(child: HistoryProductComponent())),
                    if (!_hasAutoScroll || state.groupStatus.isSuccess || state.groupStatus.isFailure)
                      const SliverToBoxAdapter(child: WidgetLayout(child: HotProductComponent())),
                    if (!_hasAutoScroll || state.groupStatus.isSuccess || state.groupStatus.isFailure)
                      const SliverToBoxAdapter(child: WidgetLayout(child: FilteredPromotionProductComponent())),
                    const SliverToBoxAdapter(
                      child: WidgetLayout(child: GroupTitleItem()),
                    ),
                    SliverAppBar(
                      titleSpacing: 0,
                      toolbarHeight: SPECIAL_COLLAPSE_HEIGHT,
                      automaticallyImplyLeading: false,
                      title: BlocBuilder<PinnedCategoryCubit, PinnedCategoryState>(
                        builder: (context, state) {
                          return AnimatedOpacity(
                            duration: const Duration(milliseconds: 300),
                            opacity: state.collapse ? 1 : 0,
                            child: const WidgetLayout(
                              child: ListSpecialCollapseGroupComponent(),
                            ),
                          );
                        },
                      ),
                      floating: false,
                      pinned: true,
                      backgroundColor: Colors.transparent,
                      elevation: 0,
                      collapsedHeight: SPECIAL_COLLAPSE_HEIGHT + SPECIAL_COLLAPSE_SEARCH_HEIGHT,
                      expandedHeight: 100,
                      flexibleSpace: LayoutBuilder(
                        builder: (BuildContext context, BoxConstraints constraints) {
                          final position = constraints.biggest.height -
                              (SPECIAL_COLLAPSE_HEIGHT + SPECIAL_COLLAPSE_SEARCH_HEIGHT) -
                              MediaQuery.of(context).padding.top;
                          WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
                            context.read<PinnedCategoryCubit>().changeCollapseValue(position.round() == 0);
                          });
                          return const FlexibleSpaceBar(
                            background: WidgetLayout(
                              child: ListSpecialGroupComponent(),
                            ),
                          );
                        },
                      ),
                    ),
                    // SliverPinnedHeader(
                    //   child: AutoScrollTag(
                    //     key: ValueKey(MTradeHomeScrollIndex.specialGroup.index),
                    //     controller: _controller,
                    //     index: MTradeHomeScrollIndex.specialGroup.index,
                    //     child: const WidgetLayout(child: ListSpecialGroupComponent()),
                    //   ),
                    // ),
                    SliverToBoxAdapter(
                      child: AutoScrollTag(
                        key: ValueKey(MTradeHomeScrollIndex.categoryGroup.index),
                        controller: _controller,
                        index: MTradeHomeScrollIndex.categoryGroup.index,
                        child: const WidgetLayout(child: ListGroupComponent()),
                      ),
                    ),
                    const SliverToBoxAdapter(
                      child: SizedBox(
                        height: 16,
                      ),
                    ),
                  ],
                  onRefresh: onRefresh,
                  source: cubit.productsSource,
                  padding: padding.copyWith(bottom: 24),
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    crossAxisSpacing: 8,
                    mainAxisSpacing: 12,
                    childAspectRatio: layoutWidth / layoutHeight,
                  ),
                  itemBuilder: body == null
                      ? (BuildContext context, item, int index) {
                          return ProductCard.normal(
                            width: layoutWidth,
                            data: (item as MTradeProductModel),
                          );
                        }
                      : null,
                  body: body,
                );
              },
            );
          },
        ),
      ),
    );
  }

  onListen(BuildContext context, event) {
    if (event is MTradeRefreshByUpdateDeliverySupportEventBus) {
      context.read<MTradeHotProductCubit>().fetchData();
      context.read<MTradeHistoryProductCubit>().fetchData();
      context.read<MTradeProductGroupCubit>()
        ..selectProvince()
        ..selectGroup('')
        ..fetchData(byDeliveryChange: true);
      context.read<MTradeFilteredPromotionProductCubit>().fetchData();
      return;
    }
    if (event is MTradeMTradeTabPageIndexEventBus) {
      AutoTabsRouter.of(context).setActiveIndex(event.index);
      return;
    }
    if (event is MTradeRefreshHistoryProductEventBus) {
      context.read<MTradeHistoryProductCubit>().refreshData();
      return;
    }
    if (event is DiscoverWebsiteEventBus) {
      _controller.scrollToIndex(MTradeHomeScrollIndex.searchBar.index, preferPosition: AutoScrollPosition.begin);
      return;
    }
  }

  Future onRefresh() {
    return Future.wait([
      context.read<MTradeBannerCubit>().refreshData(),
      context.read<MTradeHistoryProductCubit>().refreshData(),
      context.read<MTradeHotProductCubit>().refreshData(),
      context.read<MTradeProductGroupCubit>().refreshData(),
      context.read<MTradePersonalWebsiteSetupCubit>().refreshData(),
      context.read<MTradeFilteredPromotionProductCubit>().refreshData(),
    ]);
  }

  Future onLoadMore() {
    return context.read<MTradeProductGroupCubit>().loadmoreProduct();
  }

  void _onArgumentsInit() {
    final arguments = getItInstance.get<AppRouter>().current.queryParams.rawMap;
    if (arguments.isNotEmpty) {
      final filters = TextUtils.decode(arguments['filter']);
      final specialGroupFilter = filters['specialGroup'] as Map?;
      final productGroupFilter = filters['productGroup'] as String?;
      if (specialGroupFilter?.isNotEmpty == true) {
        AppData.instance.selectedSpecialGroup = MTradeSpecialGroupModel(
          keyword: specialGroupFilter?.keys.firstOrNull,
          code: specialGroupFilter?.values.firstOrNull,
        );
      }
      if (productGroupFilter?.isNotEmpty == true) {
        AppData.instance.selectedProductGroup = productGroupFilter;
      }
    }
  }

  void _onArgumentsClear() {
    AppData.instance.selectedSpecialGroup = null;
    AppData.instance.selectedProductGroup = null;
  }
}
