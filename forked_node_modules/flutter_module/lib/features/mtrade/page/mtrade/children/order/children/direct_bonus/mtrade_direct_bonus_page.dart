import 'package:auto_route/auto_route.dart';
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/order/children/direct_bonus/components/order_knowledge_component.dart';
import '../../../../../../../../common/constants.dart';
import '../../../../../../../../common/event_bus/event_bus.dart';
import '../../../../../../../../common/widgets/loadmore_widget.dart';
import '../../../../../../../../general_config.dart';
import '../../../../../../cubit/bonus/mtrade_bonus_cubit.dart';
import 'components/process_component.dart';
import 'components/support_component.dart';


@RoutePage()
class MTradeDirectBonusPage extends StatefulWidget {
  const MTradeDirectBonusPage({Key? key}) : super(key: key);

  @override
  State<MTradeDirectBonusPage> createState() => _MTradeDirectBonusPageState();
}

class _MTradeDirectBonusPageState extends State<MTradeDirectBonusPage> {
  late final StreamSubscription _subscription;

  @override
  void initState() {
    super.initState();
    _subscription = eventBus.on<MTradeRefreshAfterPayNowEventBus>().listen(_onListen);
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<MTradeBonusCubit, MTradeBonusState>(
      builder: (context, state) {
        final processes = state.bonus?.process ?? [];
        final supports = state.bonus?.support ?? [];
        return LoadMoreWidget(
          onRefresh: () => context.read<MTradeBonusCubit>().refreshData(),
          child: ListView(
            physics: AppConstants.physics,
            padding: const EdgeInsets.only(left: 16, right: 16, bottom: 100),
            children: [
              OrderProcessStateComponent(
                data: processes,
              ),
              const SizedBox(
                height: 16,
              ),
              SupportComponent(
                data: supports,
              ),
              const SizedBox(
                height: 16,
              ),
              const OrderKnowLedgeComponent(),
            ],
          ),
        );
      },
    );
  }

  void _onListen(MTradeRefreshAfterPayNowEventBus event) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<MTradeBonusCubit>().refreshData();
    });
  }
}
