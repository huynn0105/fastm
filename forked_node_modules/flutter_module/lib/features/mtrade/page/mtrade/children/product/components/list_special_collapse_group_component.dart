import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/size.dart';
import 'package:scroll_to_index/scroll_to_index.dart';

import '../../../../../../../app_data.dart';
import '../../../../../../../common/colors.dart';
import '../../../../../../../common/constants.dart';
import '../../../../../../../common/styles.dart';
import '../../../../../../../common/widgets/buttons.dart';
import '../../../../../../../common/widgets/images.dart';
import '../../../../../cubit/product_group/mtrade_product_group_cubit.dart';

class ListSpecialCollapseGroupComponent extends StatefulWidget {
  const ListSpecialCollapseGroupComponent({Key? key}) : super(key: key);

  @override
  State<ListSpecialCollapseGroupComponent> createState() => _ListSpecialCollapseGroupComponentState();
}

class _ListSpecialCollapseGroupComponentState extends State<ListSpecialCollapseGroupComponent> {
  bool _hasAutoScroll = false;
  late final AutoScrollController _controller;

  @override
  void initState() {
    super.initState();
    _controller = AutoScrollController(
      axis: Axis.vertical,
      viewportBoundaryGetter: () {
        return Rect.fromLTRB(0, 0, 0, AppSize.instance.keyboardHeight);
      },
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<MTradeProductGroupCubit, MTradeProductGroupState>(
      listenWhen: (pre, cur) {
        return pre.productStatus != cur.productStatus && !_hasAutoScroll;
      },
      listener: (context, state) {
        if (state.productStatus.isSuccess && AppData.instance.selectedSpecialGroup != null) {
          _hasAutoScroll = true;
          final index = state.specialGroups.indexWhere(
              (e) => e.code == state.selectedSpecialGroup?.code && AppData.instance.selectedSpecialGroup != null);
          if (index >= 0) {
            _controller.scrollToIndex(
              index,
              duration: AppConstants.duration,
              preferPosition: AutoScrollPosition.middle,
            );
          }
        }
      },
      child: BlocBuilder<MTradeProductGroupCubit, MTradeProductGroupState>(
        builder: (context, state) {
          final data = state.specialGroups;
          final selectedSpecialGroup = state.selectedSpecialGroup;
          return data.isEmpty
              ? const SizedBox()
              : Container(
            color: UIColors.background,
            alignment: Alignment.centerLeft,
            padding: const EdgeInsets.symmetric(vertical: 8),
            child: SingleChildScrollView(
              controller: _controller,
              physics: AppConstants.physics,
              scrollDirection: Axis.horizontal,
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: List.generate(
                  max(0, data.length * 2 - 1),
                      (index) {
                    if (index.isOdd) {
                      return const SizedBox(width: 20,);
                    }
                    index = index ~/ 2;
                    final item = data[index];
                    final isSelected = item.code == selectedSpecialGroup?.code;
                    return AutoScrollTag(
                      key: ValueKey(index),
                      controller: _controller,
                      index: index,
                      child: AppSplashButton(
                        onTap: () {
                          context.read<MTradeProductGroupCubit>()
                            ..selectSpecialGroup(item)
                            ..fetchProducts();
                        },
                        child: SizedBox(
                          height: 32,
                          child: Row(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: [
                              AppImage.network(
                                url: (item.image ?? "").trim(),
                                width: 32,
                                height: 32,
                                fit: BoxFit.contain,
                                borderRadius: BorderRadius.circular(24),
                              ),
                              const SizedBox(
                                width: 6,
                              ),
                              Container(
                                margin: const EdgeInsets.only(bottom: 5),
                                decoration: BoxDecoration(
                                  border: Border(
                                    bottom: BorderSide(
                                      width: 1.2,
                                      color: isSelected ? UIColors.primaryColor : Colors.transparent,
                                    ),
                                  ),
                                ),
                                child: Text(
                                  item.title ?? "",
                                  style: UITextStyle.regular.copyWith(
                                    fontSize: 13,
                                    fontWeight: isSelected ? FontWeight.w600 : FontWeight.w400,
                                    color: isSelected ? UIColors.primaryColor : UIColors.grayText,
                                    height: 1,
                                  ),
                                  textAlign: TextAlign.center,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}
