import 'package:flutter/material.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/enum/mtrade/delivery_location_type.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/brochure/widgets/requirement_widget.dart';
import 'package:flutter_module/models/master_data/master_data_model.dart';

import '../../mtrade/children/brochure/widgets/brochure_dropdown_text_field.dart';

class SetupLocationComponent extends StatelessWidget {
  const SetupLocationComponent({
    Key? key,
    required this.enabledProvince,
    required this.enabledDistrict,
    this.enabledWard,
    required this.selectedProvinceCode,
    required this.selectedDistrictCode,
    this.selectedWardCode,
    required this.provinces,
    required this.districts,
    this.wards,
    required this.provinceController,
    required this.districtController,
    this.wardController,
    required this.onSelected,
    required this.errorFields,
  }) : super(key: key);

  final bool enabledProvince;
  final bool enabledDistrict;
  final bool? enabledWard;
  final String selectedProvinceCode;
  final String selectedDistrictCode;
  final String? selectedWardCode;
  final List<MasterDataModel> provinces;
  final List<MasterDataModel> districts;
  final List<MasterDataModel>? wards;
  final TextEditingController provinceController;
  final TextEditingController districtController;
  final TextEditingController? wardController;
  final Function(LocationType type, DataWrapper data) onSelected;
  final Map<String, String> errorFields;

  @override
  Widget build(BuildContext context) {
    return RequirementWidget(
      title: "Khu vực hỗ trợ giao hàng",
      child: Column(
        children: [
          CollectDataView(
            errorMsg: errorFields[AppConstants.orderProvinceKey],
            child: BrochureDropdownTextField(
              controller: provinceController,
              hintText: "Chọn Tỉnh/Thành phố",
              enabled: enabledProvince,
              onTap: () {
                onShowLocationSheet(context, LocationType.province);
              },
            ),
          ),
          const SizedBox(
            height: 8,
          ),
          CollectDataView(
            errorMsg: errorFields[AppConstants.orderDistrictKey],
            child: BrochureDropdownTextField(
              controller: districtController,
              enabled: enabledDistrict,
              hintText: "Chọn Quận/Huyện",
              onTap: () {
                onShowLocationSheet(context, LocationType.district);
              },
            ),
          ),
          if (enabledWard != null)
            const SizedBox(
              height: 8,
            ),
          if (enabledWard != null)
            CollectDataView(
              errorMsg: errorFields[AppConstants.orderWardKey],
              child: BrochureDropdownTextField(
                controller: wardController,
                enabled: enabledWard!,
                hintText: "Chọn Phường/Xã",
                onTap: () {
                  onShowLocationSheet(context, LocationType.ward);
                },
              ),
            ),
        ],
      ),
    );
  }

  onShowLocationSheet(BuildContext context, LocationType type) async {
    List<MasterDataModel> data = [];
    String selector = "";

    if (type.isProvince) {
      data = provinces;
      selector = selectedProvinceCode;
    } else if (type.isDistrict) {
      data = districts;
      selector = selectedDistrictCode;
    } else if (type.isWard) {
      data = wards ?? [];
      selector = selectedWardCode ?? '';
    }

    final wrapper = data.map((e) => DataWrapper(id: e.id, value: e.value)).toList();

    if (type.isDistrict) {
      wrapper.insert(0, DataWrapper(id: "", value: type.all));
    }
    if (type.isWard) {
      wrapper.insert(0, DataWrapper(id: "", value: type.all));
    }

    final result = await BottomSheetProvider.instance.onShowSearchList(
      context,
      title: type.title,
      selectedId: selector,
      data: wrapper,
    );

    if (result != null) {
      onSelected(type, result);
    }
  }
}
