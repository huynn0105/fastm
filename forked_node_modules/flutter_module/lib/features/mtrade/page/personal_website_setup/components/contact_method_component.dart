import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';

import '../../../../../common/global_function.dart';
import '../../../../../common/size.dart';
import '../../../../../common/utils/text_util.dart';
import '../items/contact_method_item.dart';
import '../../../../../common/constants.dart';
import '../../../../../models/mtrade/personal_website_setup/mtrade_contact_method_model.dart';
import '../widgets/contact_method_flow_delegate.dart';

class ContactMethodComponent extends StatefulWidget {
  const ContactMethodComponent({
    Key? key,
    this.data,
  }) : super(key: key);

  final MTradeContactMethodModel? data;

  @override
  State<ContactMethodComponent> createState() => _ContactMethodComponentState();
}

class _ContactMethodComponentState extends State<ContactMethodComponent> with SingleTickerProviderStateMixin {
  late final AnimationController _animation;

  @override
  void initState() {
    super.initState();
    _animation = AnimationController(
      duration: AppConstants.duration,
      lowerBound: 0.15,
      upperBound: 1.0,
      vsync: this,
    );
  }

  @override
  void dispose() {
    _animation.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (widget.data == null) {
      return const SizedBox();
    }

    final defaultContact = widget.data?.defaultContact;
    final contacts = [...?widget.data?.listContact];
    final showExpanded = contacts.length <= 2;

    if (!showExpanded && defaultContact != null) {
      contacts.insert(0, defaultContact);
    }

    final children = List.generate(
      contacts.length,
      (index) {
        final item = contacts[index];
        return ContactMethodItem(
          data: item,
          onTap: () {
            if (showExpanded) {
              if (TextUtils.isNotEmpty(item.action)) {
                GlobalFunction.launchScheme(
                  item.action ?? "",
                  mode: LaunchMode.externalApplication,
                );
              }
              return;
            }
            if (_animation.status == AnimationStatus.completed) {
              _animation.reverse();
              if (TextUtils.isNotEmpty(item.action)) {
                GlobalFunction.launchScheme(
                  item.action ?? "",
                  mode: LaunchMode.externalApplication,
                );
              }
            } else {
              _animation.forward();
            }
          },
        );
      },
    );

    final width = kIsWeb ? AppConstants.responsiveSize : AppSize.instance.width;
    return showExpanded
        ? Container(
            alignment: Alignment.bottomRight,
            margin: EdgeInsets.only(
              left: width - 56,
              bottom: AppSize.instance.bottomBarHeight,
            ),
            child: ListView.separated(
              reverse: true,
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              itemBuilder: (context, index) {
                return children[index];
              },
              itemCount: children.length,
              separatorBuilder: (_, __) => const SizedBox(
                height: 12,
              ),
            ),
          )
        : Flow(
            delegate: ContactMethodFlowDelegate(
              animation: _animation,
            ),
            children: children,
          );
  }
}
