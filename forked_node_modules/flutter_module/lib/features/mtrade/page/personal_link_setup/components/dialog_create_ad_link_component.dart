import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/client/pages/client_detail/widgets/dialog/confirm_dialog.dart';
import 'package:flutter_module/features/mtrade/cubit/personal_link_setup/mtrade_personal_link_setup_cubit.dart';

class DialogCreateAdLinkComponent extends StatelessWidget {
  const DialogCreateAdLinkComponent({
    super.key,
    this.onConfirm,
    this.confirmTittleButton,
    this.onDone,
  });

  final VoidCallback? onConfirm;
  final String? confirmTittleButton;
  final VoidCallback? onDone;

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<MTradePersonalLinkSetupCubit, MTradePersonalLinkSetupState>(
      builder: (context, state) {
        final listCommissionDifference = [];
        final listInsurance = state.data?.listInsurance ?? [];
        final listInsuranceConfig = state.data?.detail?.insuranceConfigArr ?? {};
        final listInsuranceChange = state.data?.detail?.insuranceDiscount ?? {};

        final listActive = state.data?.detail?.insuranceActiveArr ?? [];
        for (var id in listActive) {
          final prevCommission = listInsuranceConfig[id];
          final commission = listInsuranceChange[id];
          if (prevCommission != commission) {
            final insurance = listInsurance.firstWhereOrNull((element) => element.iD == id);
            listCommissionDifference.add(DataWrapper(
              id: commission,
              value: insurance?.name,
            ));
          }
        }
        if (state.actionStatus.isLoading) {
          return Container(
            decoration: BoxDecoration(
              color: UIColors.white,
              borderRadius: BorderRadius.circular(16),
            ),
            padding: const EdgeInsets.all(16),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const LoadingWidget.withoutText(),
                const SizedBox(
                  height: 16,
                ),
                Text(
                  "Đang cập nhật thay đổi, vui lòng không thoát ứng dụng lúc này",
                  style: UITextStyle.regular.copyWith(
                    color: UIColors.grayText,
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(
                  height: 16,
                ),
              ],
            ),
          );
        }

        if (state.actionStatus.isSuccess) {
          return ClientConfirmDialog(
            positiveTitle: "Hoàn tất",
            onPositive: () {
              onDone?.call();
            },
            hideNegative: true,
            child: Column(
              children: [
                const SizedBox(
                  height: 20,
                ),
                const AppImage.asset(
                  asset: "ic_success_outline",
                  width: 56,
                  height: 56,
                ),
                const SizedBox(
                  height: 12,
                ),
                Text(
                  "Cập nhật thành công",
                  style: UITextStyle.semiBold.copyWith(
                    fontSize: 16,
                    color: UIColors.green,
                  ),
                ),
                const SizedBox(
                  height: 12,
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Text(
                    state.actionMessage ?? '',
                    style: UITextStyle.regular.copyWith(
                      fontSize: 14,
                      color: UIColors.grayText,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
                const SizedBox(
                  height: 16,
                ),
              ],
            ),
          );
        }

        if (state.actionStatus.isFailure) {
          return ClientConfirmDialog(
            positiveTitle: "Thử lại",
            negativeTitle: 'Để sau',
            negativeColor: UIColors.grayText,
            positiveColor: UIColors.primaryColor,
            onNegative: () {
              Navigator.of(context).pop();
            },
            onPositive: () {
              onConfirm?.call();
            },
            child: Column(
              children: [
                const SizedBox(
                  height: 20,
                ),
                const AppImage.asset(
                  asset: "ic_popup_error_icon",
                  width: 56,
                  height: 56,
                ),
                const SizedBox(
                  height: 12,
                ),
                Text(
                  "Cập nhật thất bại",
                  style: UITextStyle.semiBold.copyWith(
                    fontSize: 16,
                    color: UIColors.red,
                  ),
                ),
                const SizedBox(
                  height: 12,
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Text(
                    state.actionMessage ?? '',
                    style: UITextStyle.regular.copyWith(
                      fontSize: 14,
                      color: UIColors.grayText,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
                const SizedBox(
                  height: 16,
                ),
              ],
            ),
          );
        }

        if (listCommissionDifference.isEmpty) {
          WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
            onConfirm?.call();
          });
        }

        return ClientConfirmDialog(
          positiveTitle: confirmTittleButton ?? 'Cập nhật link ngay',
          negativeTitle: 'Để sau',
          negativeColor: UIColors.grayText,
          positiveColor: UIColors.primaryColor,
          onNegative: () {
            Navigator.of(context).pop();
          },
          onPositive: () {
            onConfirm?.call();
          },
          child: Column(
            children: [
              const SizedBox(
                height: 20,
              ),
              const AppImage.asset(
                asset: "ic_notification",
                width: 56,
                height: 56,
                color: UIColors.darkBlue,
              ),
              const SizedBox(
                height: 12,
              ),
              Text(
                "Xác nhận thay đổi thiết lập",
                style: UITextStyle.semiBold.copyWith(
                  fontSize: 16,
                  color: UIColors.darkBlue,
                ),
              ),
              const SizedBox(
                height: 12,
              ),
              Text(
                'Danh sách các sản phẩm có thay đổi chiết khấu',
                style: UITextStyle.regular.copyWith(
                  fontSize: 14,
                  color: UIColors.grayText,
                ),
              ),
              const SizedBox(
                height: 8,
              ),
              Container(
                constraints: BoxConstraints(
                  maxHeight: AppSize.instance.height * 0.5,
                ),
                decoration: BoxDecoration(
                  color: UIColors.lightGray,
                  borderRadius: BorderRadius.circular(8),
                ),
                margin: const EdgeInsets.symmetric(
                  horizontal: 16,
                ),
                padding: const EdgeInsets.all(12),
                child: ListView.separated(
                    shrinkWrap: true,
                    itemBuilder: (context, index) {
                      final DataWrapper item = listCommissionDifference[index];
                      return Row(
                        children: [
                          Expanded(
                            child: Text(
                              item.value ?? '',
                              style: UITextStyle.regular,
                            ),
                          ),
                          Text(
                            "${item.id}%",
                            style: UITextStyle.regular,
                          ),
                        ],
                      );
                    },
                    separatorBuilder: (context, index) {
                      return const Divider(
                        height: 16,
                      );
                    },
                    itemCount: listCommissionDifference.length),
              ),
              const SizedBox(
                height: 16,
              ),
            ],
          ),
        );
      },
    );
  }
}
