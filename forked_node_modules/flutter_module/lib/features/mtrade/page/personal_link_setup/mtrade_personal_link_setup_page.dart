import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/mtrade/cubit/link_brochure/mtrade_link_brochure_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/personal_link_setup/mtrade_personal_link_setup_cubit.dart';
import 'package:flutter_module/features/mtrade/page/personal_link_setup/components/checkbox_expand_component.dart';
import 'package:flutter_module/features/mtrade/page/personal_link_setup/components/dialog_create_ad_link_component.dart';
import 'package:flutter_module/features/mtrade/page/personal_link_setup/components/dialog_remove_ad_link_component.dart';
import 'package:flutter_module/features/mtrade/page/personal_link_setup/components/info_link_component.dart';
import 'package:flutter_module/features/mtrade/page/personal_link_setup/components/info_personal_component.dart';
import 'package:flutter_module/features/mtrade/page/personal_link_setup/components/insurance_list_component.dart';
import 'package:flutter_module/features/mtrade/page/personal_link_setup/components/link_notice_component.dart';
import 'package:flutter_module/features/mtrade/page/personal_link_setup/components/title_tooltip_component.dart';
import 'package:flutter_module/models/client/ad_link/ad_link_model.dart';
import 'package:url_launcher/url_launcher_string.dart';

@RoutePage()
class MTradePersonalLinkSetupPage extends StatelessWidget implements AutoRouteWrapper {
  const MTradePersonalLinkSetupPage({
    super.key,
    required this.item,
  });

  final AdLinkModel item;

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (context) => MTradePersonalLinkSetupCubit(),
        ),
        BlocProvider(
          create: (context) => MTradeLinkBrochureCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  Widget build(BuildContext context) {
    final bool isCreateAdLink = item.id == null;

    return WillPopScope(
      onWillPop: () async {
        if (!context.router.canPop()) {
          RedirectUtil.backToMFast();
          return false;
        }
        return true;
      },
      child: Scaffold(
        appBar: MFastAdvanceAppBar(
          context: context,
          title: isCreateAdLink ? "Tạo liên kết tiếp thị" : 'Thiết lập đường link',
          onBack: context.popRoute,
          onHome: RedirectUtil.backToMFast,
        ),
        body: BlocBuilder<MTradePersonalLinkSetupCubit, MTradePersonalLinkSetupState>(
          builder: (context, state) {
            if (state.status.isInitial) {
              WidgetsBinding.instance.addPostFrameCallback(
                (timeStamp) {
                  _onFetchData(context);
                },
              );
            }
            return Stack(
              children: [
                ListView(
                  children: [
                    if (!isCreateAdLink) ...[
                      InfoLinkComponent(
                        detailLink: state.data?.detail,
                        link: state.data?.link,
                        onChangeActiveLink: (p0) {
                          _onChangeActiveLink(context);
                        },
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                    ],
                    const SizedBox(
                      height: 12,
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          if (item.isFinance()) ...[
                            const LinkNoticeComponent(),
                            const SizedBox(
                              height: 20,
                            ),
                          ],
                          const TitleTooltipComponent(
                            title: 'THÔNG TIN LIÊN HỆ',
                            note: 'Giúp khách hàng liên hệ với bạn nếu có bất kỳ thắc mắc về sản phẩm',
                          ),
                          const SizedBox(
                            height: 8,
                          ),
                          if (item.isFinance())
                            CheckboxExpandComponent(
                              value: !(state.data?.detail?.isShowSocialContact() ?? false),
                              inverted: true,
                              onChanged: (bool value) {
                                _onShowContact(context);
                              },
                              titleWidget: Text(
                                'Không hiển thị thông tin liên hệ',
                                style: UITextStyle.medium.copyWith(
                                  fontSize: 16,
                                  color: UIColors.grayBackground,
                                ),
                              ),
                              child: Column(
                                children: [
                                  const SizedBox(
                                    height: 12,
                                  ),
                                  InfoPersonalComponent(
                                    detailLink: state.data?.detail,
                                    userLink: state.data?.user,
                                    errors: state.errors,
                                  ),
                                ],
                              ),
                            ),
                          if (item.isInsurance())
                            InfoPersonalComponent(
                              detailLink: state.data?.detail,
                              userLink: state.data?.user,
                              errors: state.errors,
                            ),
                          const SizedBox(
                            height: 20,
                          ),
                          if (item.isInsurance()) ...[
                            const TitleTooltipComponent(
                              title: 'THIẾT LẬP LIÊN KẾT',
                            ),
                            const SizedBox(
                              height: 8,
                            ),
                            InsuranceListComponent(
                              detailLink: state.data?.detail,
                              listInsurance: state.data?.listInsurance,
                              errors: state.errors,
                              isCreateAdLink: isCreateAdLink,
                              discountCustomizable: state.data?.discountCustomizable == true,
                            ),
                            const SizedBox(
                              height: 20,
                            ),
                          ],
                          if (isCreateAdLink) ...[
                            Row(
                              children: [
                                Expanded(
                                  child: AppOutlinedButton(
                                    textColor: UIColors.primaryColor,
                                    borderColor: UIColors.primaryColor,
                                    borderWidth: 1,
                                    borderRadius: BorderRadius.circular(24),
                                    backgroundColor: UIColors.background,
                                    title: 'Quay lại',
                                    onPressed: context.popRoute,
                                  ),
                                ),
                                const SizedBox(
                                  width: 12,
                                ),
                                Expanded(
                                  child: PrimaryButton(
                                    title: 'Tạo liên kết',
                                    onPressed: () {
                                      _onCreateAdLink(context);
                                    },
                                  ),
                                ),
                              ],
                            ),
                          ] else ...[
                            PrimaryButton(
                              title: 'Cập nhật liên kết',
                              onPressed: () {
                                _onUpdateLink(context);
                              },
                              width: double.infinity,
                            ),
                            const SizedBox(
                              height: 16,
                            ),
                            Row(
                              children: [
                                Expanded(
                                  child: AppOutlinedButton(
                                    textColor: UIColors.primaryColor,
                                    borderColor: UIColors.primaryColor,
                                    borderWidth: 1,
                                    borderRadius: BorderRadius.circular(24),
                                    backgroundColor: UIColors.background,
                                    title: 'Quay lại',
                                    onPressed: context.popRoute,
                                  ),
                                ),
                                const SizedBox(
                                  width: 12,
                                ),
                                Expanded(
                                  child: AppOutlinedButton(
                                    textColor: UIColors.primaryColor,
                                    borderColor: UIColors.primaryColor,
                                    borderWidth: 1,
                                    borderRadius: BorderRadius.circular(24),
                                    backgroundColor: UIColors.background,
                                    title: 'Xem thử liên kết',
                                    onPressed: () {
                                      _onPreviewLink(state.data?.link ?? '');
                                    },
                                  ),
                                ),
                              ],
                            ),
                          ],
                          if (item.insurrance != null && item.isInsurance()) ...[
                            const SizedBox(
                              height: 16,
                            ),
                            Center(
                              child: SplashButton(
                                onTap: () {
                                  _onRemoveAdLink(context);
                                },
                                child: Text(
                                  "Xoá link quảng cáo",
                                  style: UITextStyle.regular.copyWith(
                                    color: UIColors.red,
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ],
                      ),
                    ),
                  ],
                ),
                if (state.status.isLoading) ...{
                  const LoadingWidget.dark(),
                }
              ],
            );
          },
        ),
      ),
    );
  }

  _onFetchData(BuildContext context) {
    final cubit = context.read<MTradePersonalLinkSetupCubit>();
    if (item.isFinance()) {
      cubit.fetchFinanceData();
    } else {
      cubit.fetchInsuranceData(item.id ?? "");
    }
  }

  _onChangeActiveLink(BuildContext context) {
    final cubit = context.read<MTradePersonalLinkSetupCubit>();
    cubit.changeActiveLink();
  }

  _onShowContact(BuildContext context) {
    final cubit = context.read<MTradePersonalLinkSetupCubit>();
    cubit.showSocialContact();
  }

  _onUpdateLink(BuildContext context) {
    final cubit = context.read<MTradePersonalLinkSetupCubit>();
    if (item.isFinance()) {
      cubit.updateLink();
    } else {
      final isValid = cubit.validUpdateInput();
      if (isValid) {
        DialogProvider.instance
            .show(
          context: context,
          child: Builder(builder: (context) {
            return BlocProvider.value(
              value: cubit,
              child: DialogCreateAdLinkComponent(
                confirmTittleButton: "Cập nhật liên kết ngay",
                onConfirm: () {
                  cubit.updateInsuranceLink();
                },
                onDone: () {
                  Navigator.of(context).pop(true);
                },
              ),
            );
          }),
        )
            .then((value) {
          if (value == true) {
            context.popRoute(true);
          }
        });
      }
    }
  }

  _onPreviewLink(String url) {
    GlobalFunction.launchScheme(
      TextUtils.checkIfUrlContainPrefixHttps(url),
      mode: LaunchMode.externalApplication,
    );
  }

  _onCreateAdLink(BuildContext context) {
    final cubit = context.read<MTradePersonalLinkSetupCubit>();
    final isValid = cubit.validCreateInput();

    if (isValid) {
      DialogProvider.instance
          .show(
        context: context,
        child: Builder(builder: (context) {
          return BlocProvider.value(
            value: cubit,
            child: DialogCreateAdLinkComponent(
              confirmTittleButton: "Tạo liên kết ngay",
              onConfirm: () {
                cubit.createAdLink();
              },
              onDone: () {
                Navigator.of(context).pop(true);
              },
            ),
          );
        }),
      )
          .then((value) {
        if (value == true) {
          context.popRoute(true);
        }
      });
    }
  }

  _onRemoveAdLink(BuildContext context) {
    final cubit = context.read<MTradePersonalLinkSetupCubit>();
    DialogProvider.instance
        .show(
      context: context,
      child: Builder(builder: (context) {
        return BlocProvider.value(
          value: cubit,
          child: DialogRemoveAdLinkComponent(
            onConfirm: () {
              cubit.removeAdLink();
            },
            onDone: () {
              Navigator.of(context).pop(true);
            },
          ),
        );
      }),
    )
        .then((value) {
      if (value == true) {
        context.popRoute(true);
      }
    });
  }
}
