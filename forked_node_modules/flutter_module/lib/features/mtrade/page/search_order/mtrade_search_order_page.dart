import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/datetime_util.dart';
import 'package:flutter_module/common/widgets/app_layout.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/mtrade/cubit/search_order/mtrade_search_order_cubit.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/widgets/mtrade_block_widget.dart';
import 'package:flutter_module/features/mtrade/page/search_order/components/search_bar_component.dart';
import 'package:flutter_module/features/shipper/page/detail_bill_lading/items/history_item.dart';

import '../../../../common/widgets/app_scaffold.dart';
import '../../../../routes/routes.gr.dart';
import '../../../../widgets/footer.dart';
import 'components/order_detail_component.dart';

@RoutePage()
class MTradeSearchOrderPage extends StatefulWidget implements AutoRouteWrapper {
  const MTradeSearchOrderPage({
    Key? key,
    @QueryParam("pageID") this.pageID,
    @QueryParam("provinceCode") this.provinceCode,
    @QueryParam("districtCode") this.districtCode,
  }) : super(key: key);

  final String? pageID;
  final String? provinceCode;
  final String? districtCode;

  @override
  State<MTradeSearchOrderPage> createState() => _MTradeSearchOrderPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      lazy: false,
      create: (_) => MTradeSearchOrderCubit(),
      child: this,
    );
  }
}

class _MTradeSearchOrderPageState extends State<MTradeSearchOrderPage> {
  late final TextEditingController searchController;

  @override
  void initState() {
    super.initState();
    searchController = TextEditingController(
      text: "",
    );
  }

  @override
  Widget build(BuildContext context) {
    return AppScaffold(
      appBar: MFastSimpleAppBar(
        context: context,
        title: 'Theo dõi tình trạng đơn hàng',
        onHome: widget.pageID != null
            ? () {
                context.router.replaceAll([
                  MTradeProductRoute(
                    pageID: widget.pageID,
                    provinceCode: widget.provinceCode,
                    districtCode: widget.districtCode,
                  )
                ]);
              }
            : null,
      ),
      body: AppLayout(
        footer: const WebFooter(),
        child: Column(
          children: [
            SearchBarComponent(
              controller: searchController,
              onSubmit: (text) {
                _onSubmitted(context, text);
              },
            ),
            const SizedBox(
              height: 8,
            ),
            BlocBuilder<MTradeSearchOrderCubit, MTradeSearchOrderState>(
              builder: (context, state) {
                if (state.status.isInitial || searchController.text.isEmpty == true) {
                  return Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      const SizedBox(
                        height: 40,
                      ),
                      const AppImage.asset(
                        asset: "ic_mtrade_mascot_empty_cart",
                        width: 132,
                        height: 132,
                        fit: BoxFit.contain,
                      ),
                      const SizedBox(
                        height: 16,
                      ),
                      Text(
                        "Nhập mã đơn để kiểm tra\ntrạng thái mới nhất của đơn hàng",
                        style: UITextStyle.regular.copyWith(color: UIColors.grayText),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  );
                }

                if (state.status.isLoading) {
                  return Column(
                    children: const [
                      SizedBox(
                        height: 40,
                      ),
                      LoadingWidget.withoutText(),
                    ],
                  );
                }

                if (state.orderHistory?.isNotEmpty == false) {
                  return Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      const SizedBox(
                        height: 40,
                      ),
                      const AppImage.asset(
                        asset: "ic_mtrade_mascot_no_data",
                        width: 132,
                        height: 132,
                        fit: BoxFit.contain,
                      ),
                      const SizedBox(
                        height: 16,
                      ),
                      RichText(
                        textAlign: TextAlign.center,
                        text: TextSpan(
                          children: [
                            TextSpan(
                              text: "Không tìm thấy đơn hàng ",
                              style: UITextStyle.regular.copyWith(color: UIColors.grayText),
                            ),
                            TextSpan(
                              text: searchController.text,
                              style: UITextStyle.semiBold.copyWith(color: UIColors.grayText),
                            ),
                            TextSpan(
                              text: "\nVui lòng kiểm tra và thử lại!",
                              style: UITextStyle.regular.copyWith(color: UIColors.grayText),
                            ),
                          ],
                        ),
                      ),
                    ],
                  );
                }

                return Column(
                  children: [
                    const SizedBox(
                      height: 10,
                    ),
                    OrderDetailComponent(
                      orderID: searchController.text,
                      order: state.data?.orderDetail,
                    ),
                    const SizedBox(
                      height: 24,
                    ),
                    MTradeBlockWidget(
                      childPadding: const EdgeInsets.symmetric(horizontal: 16),
                      titlePadding: const EdgeInsets.symmetric(horizontal: 16),
                      spacing: 8,
                      title: 'Lịch sử đơn hàng ${searchController.text}',
                      child: Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 16,
                        ),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(8),
                          color: UIColors.white,
                        ),
                        child: ListView.builder(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          itemCount: state.orderHistory?.length,
                          itemBuilder: (context, index) {
                            final item = state.orderHistory?.reversed.toList()[index];

                            return Stack(
                              children: [
                                if (index == 0)
                                  Positioned.fill(
                                      child: Container(
                                    color: UIColors.extraLightBlue,
                                    margin: const EdgeInsets.only(top: 8),
                                  )),
                                HistoryItem(
                                  date: DateTimeUtil.convertTodayDate(
                                    item?.updatedDate,
                                    fromFormat: DateTimeFormat.yyyy_MM_dd_HH_mm_ss,
                                    toFormat: DateTimeFormat.dd_MM_yyyy_n_HH_mm,
                                    isFromUtc: false,
                                  ),
                                  title: item?.stateName ?? '',
                                  label: '${item?.processText ?? ''}${item?.processText?.isNotEmpty == true && item?.processNote?.isNotEmpty == true ? ' - ' : ''}${item?.processNote ?? ''}',
                                  icon: item?.icon ?? '',
                                  lineColor: UIColors.lightBlue,
                                  dotSize: 6,
                                  dotColor: index == 0 ? UIColors.darkBlue : UIColors.darkGray,
                                  titleColor: index == 0 ? UIColors.darkBlue : UIColors.darkGray,
                                  labelColor: UIColors.darkGray,
                                  iconColor: index == 0 ? null : UIColors.darkGray,
                                  dateColor: UIColors.darkGray,
                                  contentsPadding: EdgeInsets.only(left: 8, top: index == 0 ? 20 : 12, bottom: 12),
                                  oppositeContentsPadding: EdgeInsets.only(right: 8, top: index == 0 ? 20 : 12, bottom: 12),
                                  labelStyle: index == 0
                                      ? UITextStyle.semiBold.copyWith(
                                          fontSize: 13,
                                          color: index == 0
                                              ? UIColors.darkBlue
                                              : UIColors.darkGray,
                                        )
                                      : null,
                                ),
                              ],
                            );
                          },
                        ),
                      ),
                    ),
                  ],
                );
              },
            )
          ],
        ),
      ),
    );
  }

  void _onSubmitted(BuildContext context, String orderCode) {
    context.read<MTradeSearchOrderCubit>()
      ..updatePayload(orderCode: orderCode)
      ..fetchData();
  }
}
