import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/mtrade/cubit/order_filter/mtrade_order_filter_cubit.dart';
import 'package:flutter_module/features/mtrade/page/order_filter/components/order_filter_path_component.dart';

import '../../../../../common/utils/redirect_util.dart';
import '../../../../../common/widgets/appbar.dart';
import '../../../cubit/order_process_state/mtrade_order_process_state_cubit.dart';
import 'components/list_order_component.dart';
import 'components/search_component.dart';

@RoutePage()
class MTradeOrderProcessStatePage extends StatefulWidget implements AutoRouteWrapper {
  const MTradeOrderProcessStatePage({
    Key? key,
    required this.processState,
    this.collaboratorID,
  }) : super(key: key);

  final String processState;
  final String? collaboratorID;

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => MTradeOrderProcessStateCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  State<MTradeOrderProcessStatePage> createState() => _MTradeOrderProcessStatePageState();
}

class _MTradeOrderProcessStatePageState extends State<MTradeOrderProcessStatePage> {
  late final TextEditingController searchController;

  @override
  void initState() {
    super.initState();
    searchController = TextEditingController();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<MTradeOrderFilterCubit>().clearSelection();
    });
  }

  @override
  void dispose() {
    searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: MFastAdvanceAppBar(
        context: context,
        title: getTitle(widget.processState),
        onHome: () {
          RedirectUtil.backToMFast();
        },
      ),
      body: BlocBuilder<MTradeOrderProcessStateCubit, MTradeOrderProcessStateState>(
        builder: (context, state) {
          if (state.status.isInitial) {
            onInit(context);
          }
          return Column(
            children: [
              SearchComponent(
                searchController: searchController,
                onFilterChanged: (value) {
                  onFilterChanged(context, value);
                },
                onSearchChanged: (value) {
                  onSearchChanged(context, value);
                },
              ),
              ValueListenableBuilder(
                valueListenable: searchController,
                builder: (context, value, child) {
                  final query = value.text;
                  final path = context.select((MTradeOrderFilterCubit cubit) => cubit.state.filterPath);
                  return OrderFilterPathComponent(
                    query: query,
                    path: path,
                  );
                },
              ),
              // if (processState != 'advise')
              //   const SizedBox(
              //     height: 8,
              //   ),
              // ListSelector()
              // if (processState != 'advise')
              //   BlocConsumer<MTradeOrderPaymentMethodCubit, MTradeOrderPaymentMethodState>(
              //     listenWhen: (previous, current) {
              //       return previous.paymentMethod != current.paymentMethod;
              //     },
              //     listener: (context, state) {
              //       context.read<MTradeOrderPaymentMethodCubit>().debounce.run(() {
              //         _onPaymentMethodChanged(context, state.paymentMethod);
              //       });
              //     },
              //     builder: (context, state) {
              //       final listMenu = state.listPaymentMethod
              //           .map((e) => DataWrapper(id: e.alias ?? '', value: '${e.label} (${e.value ?? 0})'))
              //           .toList();
              //       return ListSelector(
              //         data: listMenu,
              //         indexSelected: listMenu.indexWhere((e) => e.id == state.paymentMethod),
              //         onTabItem: (item, index) {
              //           context.read<MTradeOrderPaymentMethodCubit>().setPaymentMethod(item.id);
              //         },
              //       );
              //     },
              //   ),
              const SizedBox(
                height: 16,
              ),
              Expanded(
                child: ListOrderComponent(
                  status: state.status,
                  data: state.orders,
                ),
              ),
            ],
          );
        },
      ),
    );
  }

  String getTitle(String state) {
    String value = "Đơn hàng";
    switch (state) {
      case "waiting":
        return "$value đang duyệt";
      case "delivery":
        return "$value đang giao";
      case "success":
        return "$value thành công";
      case "failed":
        return "$value thất bại";
      case "pending":
        return "$value chưa hoàn thành";
      default:
        return value;
    }
  }

  onInit(BuildContext context) {
    final filter = context.read<MTradeOrderFilterCubit>().getTimeFilterData();
    context.read<MTradeOrderProcessStateCubit>()
      ..updatePayload(processState: widget.processState, collaboratorID: widget.collaboratorID)
      ..updateOrderFilter(filter)
      ..fetchData();
  }

  onFilterChanged(BuildContext context, Map<String, dynamic> filter) {
    context.read<MTradeOrderProcessStateCubit>()
      ..updateOrderFilter(filter)
      ..fetchData();
  }

  onSearchChanged(BuildContext context, String value) {
    context.read<MTradeOrderProcessStateCubit>()
      ..updateQuery(value)
      ..fetchData();
  }
}
