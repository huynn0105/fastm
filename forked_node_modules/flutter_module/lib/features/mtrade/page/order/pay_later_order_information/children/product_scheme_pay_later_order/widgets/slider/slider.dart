import 'dart:math' as math;
import 'package:flutter/material.dart';
import 'package:flutter_module/common/utils/format_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_xlider/flutter_xlider.dart';

import '../../../../../../../../../common/colors.dart';
import '../../../../../../../../../common/constants.dart';
import '../../../../../../../../../common/styles.dart';
import 'slider_tick_marker.dart';

typedef OnDrag = Function(int index, dynamic lower, dynamic upper);

class MTradeLoanTenorSlider extends StatelessWidget {
  const MTradeLoanTenorSlider({
    super.key,
    this.disabled = false,
    required this.value,
    required this.min,
    required this.max,
    required this.step,
    this.onDragging,
    this.onDragStarted,
    this.onDragCompleted,
  });

  final bool disabled;
  final double value;
  final double min;
  final double max;
  final double step;
  final OnDrag? onDragging;
  final OnDrag? onDragStarted;
  final OnDrag? onDragCompleted;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        SizedBox(
          height: 40,
          child: FlutterSlider(
            values: disabled ? [0] : [value],
            min: disabled ? 0 : getMin,
            max: disabled ? 1 : getMax,
            disabled: disabled || isSameMinMax,
            touchSize: 5,
            selectByTap: false,
            visibleTouchArea: false,
            onDragging: onDragging,
            onDragStarted: onDragStarted,
            onDragCompleted: onDragCompleted,
            step: FlutterSliderStep(
              step: step,
            ),
            tooltip: FlutterSliderTooltip(
              disabled: true,
              alwaysShowTooltip: false,
              format: (label) {
                return FormatUtil.doubleFormat(TextUtils.parseDouble(label) ?? 0);
              },
            ),
            trackBar: FlutterSliderTrackBar(
              activeTrackBar: BoxDecoration(
                gradient: const LinearGradient(
                  colors: UIColors.revertPrimaryGradient,
                ),
                borderRadius: BorderRadius.circular(trackHeight / 2),
              ),
              inactiveTrackBar: BoxDecoration(
                color: UIColors.white,
                borderRadius: BorderRadius.circular(trackHeight / 2),
              ),
              activeDisabledTrackBarColor: UIColors.gray,
              inactiveDisabledTrackBarColor: UIColors.white,
              activeTrackBarHeight: trackHeight,
              inactiveTrackBarHeight: trackHeight,
            ),
            handler: FlutterSliderHandler(
              decoration: const BoxDecoration(),
              child: Container(
                padding: const EdgeInsets.all(2),
                decoration: const BoxDecoration(
                  shape: BoxShape.circle,
                  color: UIColors.white,
                ),
                child: Container(
                  width: 24,
                  height: 24,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    color: disabled ? UIColors.lightGray : null,
                    gradient: disabled
                        ? null
                        : const LinearGradient(
                            colors: UIColors.revertPrimaryGradient,
                          ),
                  ),
                ),
              ),
            ),
            handlerAnimation: const FlutterSliderHandlerAnimation(
              curve: Curves.elasticOut,
              reverseCurve: Curves.bounceIn,
              duration: AppConstants.duration,
              scale: 1.2,
            ),
            hatchMark: disabled
                ? null
                : FlutterSliderHatchMark(
                    labels: List.generate(
                      data.length,
                      (index) {
                        final showSliderMark = (index > 0) && (index < data.length - 1);
                        final currentIndex = data.indexOf(value);
                        final percent = index * 100 / (distance == 0 ? 1 : distance);
                        final showCurrentLabel = showSliderMark && (value.toInt() == data[index].toInt());
                        return FlutterSliderHatchMarkLabel(
                          percent: percent,
                          label: Stack(
                            clipBehavior: Clip.none,
                            children: [
                              Visibility(
                                visible: showSliderMark,
                                child: SliderMark(
                                  isActive: index < currentIndex,
                                ),
                              ),
                              Positioned(
                                top: 23,
                                left: -2,
                                child: AnimatedSwitcher(
                                  duration: AppConstants.duration,
                                  child: !showCurrentLabel
                                      ? const SizedBox()
                                      : Text(
                                          FormatUtil.doubleFormat(data[index]),
                                          style: UITextStyle.regular.copyWith(
                                            fontSize: 13,
                                            color: UIColors.grayText,
                                            height: 1.25,
                                          ),
                                        ),
                                ),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                    displayLines: false,
                    linesDistanceFromTrackBar: 0,
                    labelsDistanceFromTrackBar: 0,
                    smallLine: const FlutterSliderSizedBox(height: 1, width: 1),
                    bigLine: const FlutterSliderSizedBox(height: 1, width: 1),
                  ),
          ),
        ),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Row(
            children: [
              Text(
                FormatUtil.doubleFormat(min),
                style: UITextStyle.regular.copyWith(
                  fontSize: 13,
                  color: UIColors.grayText,
                  height: 1.25,
                ),
              ),
              const Spacer(),
              Text(
                FormatUtil.doubleFormat(max),
                style: UITextStyle.regular.copyWith(
                  fontSize: 13,
                  color: UIColors.grayText,
                  height: 1.25,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  bool get isSameMinMax => min == max;

  double get getMax => isSameMinMax ? max + 0.0000001 : max;

  double get getMin => min;

  double get getStep => step == 0 ? 1 : step;

  double get trackHeight => 10;

  int get distance => (max - min).toInt() ~/ getStep;

  int get count => distance == 0 ? 0 : distance + 1;

  List<double> get data {
    return List.generate(
      count,
      (index) {
        return min + (step * index);
      },
    );
  }
}
