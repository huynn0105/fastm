import 'package:auto_route/auto_route.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/simple_pin_code.dart';
import 'package:flutter_module/features/mtrade/cubit/consent/mtrade_consent_cubit.dart';

import '../../../../../../../app_data.dart';
import '../../../../../../../common/bloc_status.dart';
import '../../../../../../../common/bottom_sheet/bottom_sheet_provider.dart';
import '../../../../../../../common/bottom_sheet/wrapper/data_wrapper.dart';
import '../../../../../../../common/colors.dart';
import '../../../../../../../common/constants.dart';
import '../../../../../../../common/enum/mtrade/scheme_type.dart';
import '../../../../../../../common/styles.dart';
import '../../../../../../../common/widgets/app_layout.dart';
import '../../../../../../../common/widgets/buttons.dart';
import '../../../../../../../common/widgets/checkbox.dart';
import '../../../../../../../common/widgets/collect_data_view.dart';
import '../../../../../../../common/widgets/loading.dart';
import '../../../../../../../common/widgets/textfields.dart';
import '../../../../../../../routes/routes.gr.dart';
import '../../../../../../../widgets/footer.dart';
import '../../../../../cubit/pre_screen_pay_later_order/pre_screen_pay_later_order_cubit.dart';

@RoutePage()
class PreScreenPayLaterOrderPage extends StatefulWidget {
  const PreScreenPayLaterOrderPage({
    Key? key,
    required this.onNextPage,
  }) : super(key: key);

  final Function onNextPage;

  @override
  State<PreScreenPayLaterOrderPage> createState() => _PreScreenPayLaterOrderPageState();
}

class _PreScreenPayLaterOrderPageState extends State<PreScreenPayLaterOrderPage> {
  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<PreScreenPayLaterOrderCubit>();
    return BlocConsumer<PreScreenPayLaterOrderCubit, PreScreenPayLaterOrderState>(
      listener: (context, state) {
        if (state.statusSubmit.isSuccess || state.statusSubmit.isFailure) {
          Future.delayed(AppConstants.duration, () {
            widget.onNextPage();
          });
        }
      },
      builder: (context, state) {
        final isLoadingConsent = context.select((MTradeConsentCubit cubit) => cubit.state.status.isLoading);

        return Stack(
          children: [
            Positioned.fill(
              child: AppLayout(
                footer: const WebFooter(),
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const SizedBox(
                        height: 16,
                      ),
                      Text(
                        "Thông tin người trả chậm",
                        style: UITextStyle.semiBold.copyWith(
                          fontSize: 14,
                          color: UIColors.grayText,
                        ),
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: UIColors.white,
                          border: Border.all(
                            color: UIColors.lightGray,
                          ),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Column(
                          children: [
                            CollectDataView(
                              errorMsg: state.errorFields[AppConstants.orderPhoneNumberKey],
                              child: UITextField(
                                controller: cubit.phoneController,
                                labelText: "Nhập số điện thoại",
                                hintText: "Nhập số điện thoại",
                                inputFormatters: [
                                  FilteringTextInputFormatter.digitsOnly,
                                  LengthLimitingTextInputFormatter(10),
                                ],
                                keyboardType: TextInputType.number,
                                onChanged: cubit.changePhone,
                              ),
                            ),
                            const SizedBox(
                              height: 16,
                            ),
                            CollectDataView(
                              errorMsg: state.errorFields[AppConstants.orderIdNumberKey],
                              child: UITextField(
                                controller: cubit.idNumberController,
                                labelText: "Nhập CCCD (CCCD gắn chip)",
                                hintText: "Nhập CCCD (CCCD gắn chip)",
                                inputFormatters: [
                                  FilteringTextInputFormatter.digitsOnly,
                                  LengthLimitingTextInputFormatter(12),
                                ],
                                keyboardType: TextInputType.number,
                                onChanged: cubit.changeIDNumber,
                              ),
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(
                        height: 16,
                      ),
                      Text(
                        "Địa chỉ nơi ở hiện tại",
                        style: UITextStyle.semiBold.copyWith(
                          fontSize: 14,
                          color: UIColors.grayText,
                        ),
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: UIColors.white,
                          border: Border.all(
                            color: UIColors.lightGray,
                          ),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Column(
                          children: [
                            SplashButton(
                              isDisabled: !state.enabledProvince,
                              onTap: () async {
                                FocusManager.instance.primaryFocus?.unfocus();
                                final result = await BottomSheetProvider.instance.onShowSearchList(
                                  context,
                                  title: "Tỉnh/Thành phố",
                                  selectedId: "${state.selectedProvinceID ?? ""}",
                                  data: state.listProvince.map((e) {
                                    return DataWrapper(id: "${e.ID ?? ""}", value: e.name);
                                  }).toList(),
                                );
                                if (result != null) {
                                  cubit.selectProvince(TextUtils.parseInt(result.id) ?? 0);
                                }
                              },
                              child: CollectDataView(
                                errorMsg: state.errorFields[AppConstants.orderProvinceKey],
                                child: UITextField.dropdown(
                                  controller: cubit.provinceController,
                                  labelText: "Tỉnh/Thành phố",
                                  hintText: "Tỉnh/Thành phố",
                                  enable: state.enabledProvince,
                                ),
                              ),
                            ),
                            const SizedBox(
                              height: 16,
                            ),
                            SplashButton(
                              isDisabled: !state.enabledDistrict,
                              onTap: () async {
                                FocusManager.instance.primaryFocus?.unfocus();
                                final result = await BottomSheetProvider.instance.onShowSearchList(
                                  context,
                                  title: "Quận/Huyện",
                                  selectedId: "${state.selectedDistrictID ?? ""}",
                                  data: state.listDistrict.map((e) {
                                    return DataWrapper(id: "${e.ID ?? ""}", value: e.name);
                                  }).toList(),
                                );
                                if (result != null) {
                                  cubit.selectDistrict(TextUtils.parseInt(result.id) ?? 0);
                                }
                              },
                              child: CollectDataView(
                                errorMsg: state.errorFields[AppConstants.orderDistrictKey],
                                child: UITextField.dropdown(
                                  controller: cubit.districtController,
                                  labelText: "Quận/Huyện",
                                  hintText: "Quận/Huyện",
                                  enable: state.enabledDistrict,
                                  readOnly: true,
                                ),
                              ),
                            ),
                            const SizedBox(
                              height: 16,
                            ),
                            SplashButton(
                              isDisabled: !state.enabledWard,
                              onTap: () async {
                                FocusManager.instance.primaryFocus?.unfocus();
                                final result = await BottomSheetProvider.instance.onShowSearchList(
                                  context,
                                  title: "Phường/Xã",
                                  selectedId: "${state.selectedWardID ?? ""}",
                                  data: state.listWard.map((e) {
                                    return DataWrapper(id: "${e.ID ?? ""}", value: e.name);
                                  }).toList(),
                                );
                                if (result != null) {
                                  cubit.selectWard(TextUtils.parseInt(result.id) ?? 0);
                                }
                              },
                              child: CollectDataView(
                                errorMsg: state.errorFields[AppConstants.orderWardKey],
                                child: UITextField.dropdown(
                                  controller: cubit.wardController,
                                  labelText: "Phường/Xã",
                                  hintText: "Phường/Xã",
                                  enable: state.enabledWard,
                                  readOnly: true,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      if (state.schemeType == SchemeType.POSM.name) ...[
                        const SizedBox(
                          height: 16,
                        ),
                        Text(
                          "Thông tin chủ hộ gia đình (theo hộ khẩu)",
                          style: UITextStyle.semiBold.copyWith(
                            fontSize: 14,
                            color: UIColors.grayText,
                          ),
                        ),
                        const SizedBox(
                          height: 8,
                        ),
                        Container(
                          padding: const EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            color: UIColors.white,
                            border: Border.all(
                              color: UIColors.lightGray,
                            ),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Column(
                            children: [
                              CollectDataView(
                                errorMsg: state.errorFields[AppConstants.householdHeadNameKey],
                                child: UITextField(
                                  controller: cubit.householdHeadNameController,
                                  labelText: "Họ và tên chủ hộ",
                                  hintText: "Họ và tên chủ hộ",
                                  keyboardType: TextInputType.text,
                                  onChanged: cubit.changeHouseholdHeadName,
                                ),
                              ),
                              const SizedBox(
                                height: 16,
                              ),
                              CollectDataView(
                                errorMsg: state.errorFields[AppConstants.householdHeadIdNumberKey],
                                child: UITextField(
                                  controller: cubit.householdHeadIdNumberController,
                                  labelText: "Nhập CCCD chủ hộ (CCCD gắn chip)",
                                  hintText: "Nhập CCCD chủ hộ (CCCD gắn chip)",
                                  inputFormatters: [
                                    FilteringTextInputFormatter.digitsOnly,
                                    LengthLimitingTextInputFormatter(12),
                                  ],
                                  keyboardType: TextInputType.number,
                                  onChanged: cubit.changeHouseholdHeadIdNumber,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                      const SizedBox(
                        height: 24,
                      ),
                      CollectDataView(
                        errorMsg: state.errorFields[AppConstants.orderPolicyKey],
                        child: Row(
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            AppSplashButton(
                              onTap: () {
                                cubit.changePolicy();
                              },
                              child: IgnorePointer(
                                ignoring: true,
                                child: AppCheckbox.rectangle(
                                  value: state.acceptedPolicy,
                                  size: 28,
                                  onChanged: (_) {
                                    // cubit.changePolicy();
                                  },
                                ),
                              ),
                            ),
                            const SizedBox(
                              width: 12,
                            ),
                            Expanded(
                              child: RichText(
                                text: TextSpan(
                                  children: [
                                    TextSpan(
                                      text: "Tôi đã đọc và đồng ý với cam kết về ",
                                      style: UITextStyle.regular.copyWith(
                                        fontSize: 13,
                                        height: 1,
                                      ),
                                    ),
                                    TextSpan(
                                      text: "điều khoản chia sẻ thông tin",
                                      style: UITextStyle.regular.copyWith(
                                        fontSize: 13,
                                        color: UIColors.primaryColor,
                                      ),
                                      recognizer: TapGestureRecognizer()
                                        ..onTap = () {
                                          _onShowSheetTermsAndConditions(context);
                                        },
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(
                        height: 12,
                      ),
                      PrimaryButton(
                        enabled: state.enabledSubmit,
                        onPressed: () {
                          _showSheetVerifyPhone(context);
                        },
                        width: double.infinity,
                        radius: 8,
                        title: "Tiếp tục",
                      ),
                      const SizedBox(
                        height: 100,
                      ),
                    ],
                  ),
                ),
              ),
            ),
            if (state.statusSubmit.isLoading || isLoadingConsent) const LoadingWidget.dark(),
          ],
        );
      },
    );
  }

  _onShowSheetTermsAndConditions(BuildContext context) {
    context.pushRoute(
      WebViewBottomSheetRoute(
        url: AppData.instance.configs?.product?.mplTermsAndConditions ?? "",
        title: "Thông tin điều khoản",
        showTitle: false,
      ),
    );
  }

  _showSheetVerifyPhone(BuildContext context) {
    final informationCubit = context.read<PreScreenPayLaterOrderCubit>();
    if (!informationCubit.validate()) {
      return;
    }
    final consentCubit = context.read<MTradeConsentCubit>();

    final mobilePhone = informationCubit.phoneController.text;

    showModalBottomSheet(
      backgroundColor: Colors.transparent,
      barrierColor: UIColors.defaultText.withOpacity(0.85),
      context: context,
      isScrollControlled: true,
      builder: (builder) {
        return SimplePinCode(
          mobilePhone: mobilePhone,
        );
      },
    ).then((value) {
      if (value is Map) {
        if (value["status"] == true) {
          consentCubit
              .saveConsent(logOtpID: TextUtils.parseInt(value["logOtpID"]), mobilePhone: mobilePhone)
              .then((value) {
            if (value.status) {
              informationCubit.submit();
            } else {
              DialogProvider.instance.showMTradeErrorDialog(context: context, message: value.errorMessage);
            }
          });
        } else {
          DialogProvider.instance.showMTradeErrorDialog(context: context, message: value["message"]);
        }
      }
    });
  }
}
