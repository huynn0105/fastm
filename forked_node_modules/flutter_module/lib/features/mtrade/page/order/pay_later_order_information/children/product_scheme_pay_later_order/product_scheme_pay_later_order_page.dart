import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/log_event_key.dart';
import 'package:flutter_module/common/enum/mtrade/pay_later_type.dart';
import 'package:flutter_module/common/enum/mtrade/payment_type.dart';
import 'package:flutter_module/common/enum/mtrade/tracking_event.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/utils/log_event_util.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/widgets/app_layout.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/mtrade/cubit/consent/mtrade_consent_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/pre_screen_pay_later_order/pre_screen_pay_later_order_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/product_scheme_pay_later_order/buyer_info_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/product_scheme_pay_later_order/buyer_request_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/select_promotion/mtrade_select_promotion_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/tracking_event/mtrade_tracking_event_cubit.dart';
import 'package:flutter_module/features/mtrade/page/order/pay_later_order_information/children/product_scheme_pay_later_order/components/buyer_address_component.dart';
import 'package:flutter_module/features/mtrade/page/order/pay_later_order_information/children/product_scheme_pay_later_order/components/buyer_component.dart';
import 'package:flutter_module/features/mtrade/page/order/pay_later_order_information/children/product_scheme_pay_later_order/components/pay_later_policy_component.dart';
import 'package:flutter_module/widgets/footer.dart';

import '../../../../../../../app_data.dart';
import '../../../../../../../common/bloc_status.dart';
import '../../../../../../../common/colors.dart';
import '../../../../../../../common/global_function.dart';
import '../../../../../cubit/product_scheme_pay_later_order/product_scheme_pay_later_order_cubit.dart';
import 'components/mtrade_insurance_component.dart';
import 'components/mtrade_products_component.dart';
import 'components/pin_code_component.dart';
import 'components/product_scheme_component.dart';
import 'components/register_component.dart';

@RoutePage()
class ProductSchemePayLaterOrderPage extends StatelessWidget {
  const ProductSchemePayLaterOrderPage({
    Key? key,
    this.onNextPage,
    this.orderID,
    this.transactionID,
    this.isLeaveRequest = false,
    this.source,
    this.orders,
    this.selectedLoanSchemeID,
    this.selectedDownPaymentPercent,
    this.selectedLoanTenor,
    this.selectedJoinInsurance,
  }) : super(key: key);

  final Function? onNextPage;
  final String? orderID;
  final String? transactionID;
  final bool isLeaveRequest;
  final String? source;
  final String? orders;
  final String? selectedLoanSchemeID;
  final String? selectedDownPaymentPercent;
  final String? selectedLoanTenor;
  final String? selectedJoinInsurance;

  @override
  Widget build(BuildContext context) {
    bool forceShowPolicy = isLeaveRequest;
    return MultiBlocListener(
      listeners: [
        BlocListener<MTradeSelectPromotionCubit, MTradeSelectPromotionState>(
          listener: (context, promoState) {
            if (promoState.checkStatus.isFailure) {
              if (promoState.errorPromotions?.isNotEmpty == true) {
                context.read<MTradeSelectPromotionCubit>().clearPromotions();
              }
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                title: "Thất bại",
                message: promoState.errorMessage ?? "",
                messageAlign: TextAlign.left,
              );
            }
          },
        ),
      ],
      child: BlocConsumer<ProductSchemePayLaterOrderCubit, ProductSchemePayLaterOrderState>(
        listener: (context, state) async {
          if (state.statusSubmit.isSuccess) {
            context.read<PreScreenPayLaterOrderCubit>().updateProductSchemeType(state.scheme?.objectType);
            if (isLeaveRequest) {
              Future.delayed(AppConstants.duration, () {
                onNextPage?.call();
              });
            } else {
              Future.delayed(AppConstants.duration, () {
                onNextPage?.call();
              });
            }
          } else if (state.statusSubmit.isFailure) {
            DialogProvider.instance.showMTradeErrorDialog(
              context: context,
              title: "Thất bại",
              message: state.errorMessage ?? "",
            );
          } else if (state.status.isFailure) {
            DialogProvider.instance.showMTradeErrorDialog(
              context: context,
              title: "Thất bại",
              message: state.errorMessage ?? "",
            );
          }
        },
        builder: (context, state) {
          if (state.status.isInitial) {
            onInit(context);
          }

          return Stack(
            children: [
              Positioned.fill(
                child: AppLayout(
                  scrollController: context.read<BuyerInfoCubit>().scrollController,
                  footer: const WebFooter(),
                  child: Column(
                    children: [
                      if (state.data?.type == PayLaterType.mtrade.value)
                        MTradeProductsComponent(
                          isLeaveRequest: isLeaveRequest,
                          data: state.products,
                          totalPrice: state.totalPrice ?? 0,
                          totalPromotionPrice: state.totalPromotionPrice,
                          orderPrices: state.orderPrices,
                          onPromotionChanged: (data) {
                            context.read<ProductSchemePayLaterOrderCubit>().updatePromotions(data);
                          },
                        ),
                      if (state.data?.type == PayLaterType.mpl.value) const MTradeInsuranceComponent(),
                      if (isLeaveRequest) const BuyerComponent(),
                      if (isLeaveRequest) const BuyerAddressComponent(),
                      ProductSchemeComponent(
                        state: state,
                        isLeaveRequest: isLeaveRequest,
                      ),
                      if (forceShowPolicy)
                        const SizedBox(
                          height: 16,
                        ),
                      if (forceShowPolicy) const PayLaterPolicyComponent(),
                      RegisterComponent(
                        enabled: state.enabledSubmit && (state.acceptedPolicy || !forceShowPolicy),
                        isLeaveRequest: isLeaveRequest,
                        onSubmitted: () {
                          LogEventUtil.send(LogEventKey.mTradePayLaterRegisterButton,
                              data: {"completedregis": "completed_regis_button"});
                          GlobalFunction.action(
                            context: context,
                            forceCheckPayNow: false,
                            forceCheckPayLater: !isLeaveRequest,
                            onTap: () {
                              onSubmit(context);
                            },
                          );
                        },
                      ),
                      const SizedBox(
                        height: 100,
                      ),
                    ],
                  ),
                ),
              ),

              /// TODO: DAA MTrade Consent - Hide OTP
              // BlocBuilder<BuyerRequestCubit, BuyerRequestState>(
              //   builder: (context, requestState) {
              //     return BlocBuilder<MTradeSelectPromotionCubit, MTradeSelectPromotionState>(
              //       builder: (context, promoState) {
              //         bool isLoading = state.status.showLoading ||
              //             state.statusSubmit.isLoading ||
              //             promoState.checkStatus.isLoading ||
              //             requestState.completeStepStatus.isLoading;
              //         return Visibility(
              //           visible: isLoading,
              //           child: const LoadingWidget.dark(),
              //         );
              //       },
              //     );
              //   },
              // ),
              BlocBuilder<MTradeSelectPromotionCubit, MTradeSelectPromotionState>(
                builder: (context, checkPromotionState) {
                  bool showLoading = state.wholePriceStatus.isLoading ||
                      state.status.isLoading ||
                      state.status.isInitial ||
                      state.statusSubmit.isLoading ||
                      checkPromotionState.checkStatus.isLoading;
                  return Visibility(
                    visible: showLoading,
                    child: const Padding(
                      padding: EdgeInsets.only(bottom: AppConstants.appbarHeight,),
                      child: LoadingWidget.dark(),
                    ),
                  );
                },
              )
            ],
          );
        },
      ),
    );
  }

  onInit(BuildContext context) {
    if (_isInsurance()) {
      context.read<ProductSchemePayLaterOrderCubit>().fetchData(
            selectedLoanSchemeID: selectedLoanSchemeID,
            selectedDownPaymentPercent: selectedDownPaymentPercent,
            selectedLoanTenor: selectedLoanTenor,
            selectedJoinInsurance: selectedJoinInsurance,
          );
    } else {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (AppData.instance.preScreenData != null) {
          context.read<ProductSchemePayLaterOrderCubit>().initData();
        } else {
          context.read<ProductSchemePayLaterOrderCubit>().fetchData(
                selectedLoanSchemeID: selectedLoanSchemeID,
                selectedDownPaymentPercent: selectedDownPaymentPercent,
                selectedLoanTenor: selectedLoanTenor,
                selectedJoinInsurance: selectedJoinInsurance,
              );
        }
      });
    }
  }

  bool _isInsurance() {
    return orderID != null && transactionID != null;
  }

  onSubmit(BuildContext context) {
    if (isLeaveRequest) {
      requestBuyerPayLater(context);
      return;
    }
    final schemeCubit = context.read<ProductSchemePayLaterOrderCubit>();
    final promoCubit = context.read<MTradeSelectPromotionCubit>();
    promoCubit.checkPromotion(
      skus: schemeCubit.state.products.map((e) => e.sku ?? "").toList(),
      paymentMethod: MTradePaymentType.later.code,
      onSuccess: () {
        requestRegister(context);
      },
    );
  }

  requestRegister(BuildContext context) async {
    final cubit = context.read<ProductSchemePayLaterOrderCubit>();
    //
    final selectedJoinInsurance = cubit.state.selectedJoinInsurance;
    final insurancePercent = cubit.state.newInsurancePercent ?? 0;
    if (selectedJoinInsurance == true && insurancePercent <= 0) {
      DialogProvider.instance.showMTradeErrorDialog(
        context: context,
        title: "Bán hàng trả chậm thất bại",
        message: "Số tiền bảo hiểm không hợp lệ",
      );
      return;
    }
    //
    final newLoanAmount = cubit.state.newLoanAmount ?? 0;
    final newLoanAmountMin = cubit.state.scheme?.loanAmountMin ?? 0;
    if (newLoanAmount < newLoanAmountMin) {
      DialogProvider.instance.showMTradeErrorDialog(
        context: context,
        title: "Bán hàng trả chậm thất bại",
        message: "Số tiền trả chậm thấp hơn giá trị chương trình trả chậm",
      );
      return;
    }
    //
    cubit.submit(source);
  }

  requestBuyerPayLater(BuildContext context) async {
    final schemeCubit = context.read<ProductSchemePayLaterOrderCubit>();
    final buyerCubit = context.read<BuyerInfoCubit>();
    final consentCubit = context.read<MTradeConsentCubit>();

    if (!buyerCubit.validateData()) {
      return;
    }

    final product = schemeCubit.state.data?.orders?.valueAt(0);
    final totalPrice = schemeCubit.state.totalPrice;

    /// TODO: DAA MTrade Consent - Hide OTP
    // if (AppData.instance.landingPageSource.isDAA == true) {
    //   final buyerRequestCubit = context.read<BuyerRequestCubit>();
    //   buyerRequestCubit.requestPayLaterDAAMTrade(
    //     phoneNumber: buyerCubit.buyerPhoneController.text,
    //     sku: product?.sku,
    //     productName: product?.name,
    //     productPrice: totalPrice?.toInt(),
    //     fullName: buyerCubit.buyerNameController.text,
    //     phone: buyerCubit.buyerPhoneController.text,
    //     provinceID: buyerCubit.state.provinceList[buyerCubit.state.selectedProvinceIndex!].id,
    //     districtID: buyerCubit.state.districtList[buyerCubit.state.selectedDistrictIndex!].id,
    //     schemeID: schemeCubit.state.selectedLoanSchemeID,
    //     prepayPercent: schemeCubit.state.selectedDownPaymentPercent,
    //     loanTerms: schemeCubit.state.selectedLoanTenor?.tenor,
    //     insurance: schemeCubit.state.newInsurancePercent?.toInt(),
    //     idNumber: buyerCubit.buyerIDNumberController.text,
    //     loanTermsConversionFee: schemeCubit.state.selectedLoanTenor!.conversionFee,
    //     loanPurpose: schemeCubit.state.scheme?.loanPurpose,
    //     interestRate: schemeCubit.state.scheme?.interestRate,
    //     requireInsurance: schemeCubit.state.scheme?.requireInsurance,
    //     schemeName: schemeCubit.state.scheme?.schemeName,
    //   );
    //   return;
    // }

    int? logOtpID;
    showModalBottomSheet(
      backgroundColor: Colors.transparent,
      barrierColor: UIColors.defaultText.withOpacity(0.85),
      context: context,
      isScrollControlled: true,
      builder: (builder) {
        return BlocProvider(
          create: (_) => BuyerRequestCubit(),
          child: BlocListener<BuyerRequestCubit, BuyerRequestState>(
            listener: (context, state) {
              logOtpID = state.logOtpID;
            },
            listenWhen: (previous, current) => previous.logOtpID != current.logOtpID,
            child: PinCodeComponent(
              phoneNumber: buyerCubit.buyerPhoneController.text,
              sku: product?.sku,
              productName: product?.name,
              productPrice: totalPrice?.toInt(),
              fullName: buyerCubit.buyerNameController.text,
              phone: buyerCubit.buyerPhoneController.text,
              provinceID: buyerCubit.state.provinceList[buyerCubit.state.selectedProvinceIndex!].id,
              districtID: buyerCubit.state.districtList[buyerCubit.state.selectedDistrictIndex!].id,
              schemeID: schemeCubit.state.selectedLoanSchemeID,
              prepayPercent: schemeCubit.state.selectedDownPaymentPercent,
              loanTerms: schemeCubit.state.selectedLoanTenor?.tenor,
              insurance: schemeCubit.state.newInsurancePercent?.toInt(),
              idNumber: buyerCubit.buyerIDNumberController.text,
              loanTermsConversionFee: schemeCubit.state.selectedLoanTenor!.conversionFee,
              loanPurpose: schemeCubit.state.scheme?.loanPurpose,
              interestRate: schemeCubit.state.scheme?.interestRate,
              requireInsurance: schemeCubit.state.scheme?.requireInsurance,
              schemeName: schemeCubit.state.scheme?.schemeName,
            ),
          ),
        );
      },
    ).then((result) {
      if (result == true) {
        consentCubit
            .saveConsent(
          logOtpID: logOtpID,
          mobilePhone: buyerCubit.buyerPhoneController.text,
        )
            .then((value) {
          if (value.status) {
            onNextPage?.call();
            if (isLeaveRequest) {
              getItInstance.get<MTradeTrackingEventCubit>().trackLandingPage([
                LandingPageTrackingAction.follow,
              ]);
            }
          } else {
            DialogProvider.instance.showMTradeErrorDialog(context: context, message: value.errorMessage);
          }
        });
        return;
      }
      if (result is String) {
        consentCubit
            .saveConsent(
          logOtpID: logOtpID,
          mobilePhone: buyerCubit.buyerPhoneController.text,
        )
            .then((value) {
          if (value.status) {
            if (isLeaveRequest) {
              getItInstance.get<MTradeTrackingEventCubit>().trackLandingPage([
                LandingPageTrackingAction.follow,
              ]);
            }
            if (result.isNotEmpty) {
              RedirectUtil.openUrl(result);
            } else {
              onNextPage?.call();
            }
          } else {
            DialogProvider.instance.showMTradeErrorDialog(context: context, message: value.errorMessage);
          }
        });
        return;
      }
    });
  }
}
