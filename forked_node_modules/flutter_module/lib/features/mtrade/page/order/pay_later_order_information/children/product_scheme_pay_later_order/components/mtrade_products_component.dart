import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/enum/mtrade/payment_type.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/models/mtrade/order/mtrade_order_price_model.dart';
import '../../../../../../../../common/widgets/divider.dart';
import '../../../../../../../../models/mtrade/promotion/data_product_variations_model.dart';
import '../../../../../../../../services/api/mtrade/payload/mtrade_pay_now_order_payload.dart';
import '../../../../order_process_state/items/status_items/order_delivery_process_state_item.dart';
import '../../../../../../../../common/colors.dart';
import '../../../../../../../../common/styles.dart';
import '../../../../../../../../common/utils/format_util.dart';
import '../../../../../../../../common/widgets/separated_widget.dart';
import '../../../../../../../../models/mtrade/cart/mtrade_cart_product_model.dart';
import '../../../../../../cubit/select_promotion/mtrade_select_promotion_cubit.dart';
import '../../../../../mtrade/children/cart/components/selected_promotion_component.dart';
import '../items/order_product_item.dart';

class MTradeProductsComponent extends StatelessWidget {
  const MTradeProductsComponent({
    Key? key,
    required this.isLeaveRequest,
    required this.data,
    required this.orderPrices,
    required this.totalPrice,
    required this.totalPromotionPrice,
    this.onPromotionChanged,
    this.onDeleted,
  }) : super(key: key);

  final bool isLeaveRequest;
  final List<MTradeCartProductModel> data;
  final List<OrderPrice> orderPrices;
  final double totalPrice;
  final double totalPromotionPrice;
  final Function(List<DataProductVariationsModel>)? onPromotionChanged;
  final Function(MTradeCartProductModel?)? onDeleted;

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<MTradeSelectPromotionCubit, MTradeSelectPromotionState>(
      builder: (context, selectPromotionState) {
        final promotions = selectPromotionState.promotions;
        return Padding(
          padding: const EdgeInsets.fromLTRB(16, 10, 16, 0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                "Sản phẩm đăng ký trả chậm",
                style: UITextStyle.regular.copyWith(
                  fontSize: 14,
                  color: UIColors.grayText,
                ),
              ),
              const SizedBox(
                height: 10,
              ),
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: UIColors.white,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Column(
                  children: [
                    SeparatedColumn(
                      separatorBuilder: (_, __) => const DottedDivider(
                        height: 10,
                        indent: 96,
                      ),
                      children: List.generate(
                        data.length,
                        (index) {
                          final item = data[index];
                          final promo = promotions.firstWhereOrNull((element) => element.sku == item.sku);
                          final promoQuantity = promo?.codes?.length ?? 0;
                          final price = promo?.codes
                                  ?.getFirst()
                                  ?.promotion
                                  ?.getPromotionPriceByQuantity(promoQuantity, sku: item.sku ?? "") ??
                              0;
                          final orderPrice = orderPrices.firstWhereOrNull((element) => item.sku == element.sku);
                          return OrderProductItem(
                            data: data[index],
                            index: index,
                            invalid: false,
                            hasPromotion: promotions.isNotEmpty,
                            promotionPrice: price,
                            orderPrice: orderPrice,
                            onDeleted: onDeleted,
                          );
                        },
                      ),
                    ),
                    if (!isLeaveRequest) ...[
                      const DottedDivider(
                        height: 10,
                      ),
                      SelectedPromotionComponent(
                        orderItems: data.map((e) => OrderItems(sku: e.sku, quantity: e.quantity)).toList(),
                        publicWholesalePrice: orderPrices.any((element) => element.public == true),
                        onPromotionChanged: onPromotionChanged,
                        paymentMethod: MTradePaymentType.later,
                      ),
                    ],
                    const DottedDivider(
                      height: 10,
                    ),
                    Column(
                      children: [
                        if (promotions.isNotEmpty)
                          InfoItem(
                            titleFlex: 7,
                            contentFlex: 4,
                            title: "Giá trị đơn hàng:",
                            content: FormatUtil.currencyDoubleFormat(totalPrice),
                            titleColor: UIColors.grayText,
                            contentColor: UIColors.defaultText,
                            titleAlignment: Alignment.centerRight,
                            contentAlignment: Alignment.centerRight,
                            titleFontSize: 14,
                            contentFontSize: 16,
                            titleStyle: UITextStyle.regular,
                            contentStyle: UITextStyle.medium,
                            crossAxisAlignment: CrossAxisAlignment.center,
                          ),
                        if (promotions.isNotEmpty)
                          InfoItem(
                            titleFlex: 7,
                            contentFlex: 4,
                            title: "Giảm giá:",
                            content: FormatUtil.currencyDoubleFormat(totalPromotionPrice),
                            titleColor: UIColors.grayText,
                            contentColor: UIColors.defaultText,
                            titleAlignment: Alignment.centerRight,
                            contentAlignment: Alignment.centerRight,
                            titleFontSize: 14,
                            contentFontSize: 16,
                            titleStyle: UITextStyle.regular,
                            contentStyle: UITextStyle.medium,
                            crossAxisAlignment: CrossAxisAlignment.center,
                          ),
                        InfoItem(
                          titleFlex: 7,
                          contentFlex: 4,
                          title: promotions.isNotEmpty ? "Tổng giá trị:" : "Tổng tiền:",
                          content: FormatUtil.currencyDoubleFormat(
                            totalPromotionPrice >= totalPrice ? 0 : totalPrice - totalPromotionPrice,
                          ),
                          titleColor: UIColors.grayText,
                          contentColor: UIColors.red,
                          titleAlignment: Alignment.centerRight,
                          contentAlignment: Alignment.centerRight,
                          titleFontSize: 14,
                          contentFontSize: 18,
                          titleStyle: UITextStyle.regular,
                          contentStyle: UITextStyle.medium,
                          crossAxisAlignment: CrossAxisAlignment.center,
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}
