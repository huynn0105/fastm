import 'dart:convert';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/enum/mtrade/landing_page_source.dart';
import 'package:flutter_module/common/enum/mtrade/pay_later_tab.dart';
import 'package:flutter_module/features/mtrade/cubit/consent/mtrade_consent_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/tracking_agent/mtrade_tracking_agent_cubit.dart';
import 'package:flutter_module/routes/routes.gr.dart';

import '../../../../../common/utils/redirect_util.dart';
import '../../../../../common/widgets/app_scaffold.dart';
import '../../../../../common/widgets/appbar.dart';
import '../../../../../models/mtrade/cart/mtrade_cart_product_model.dart';
import '../../../../../models/mtrade/promotion/data_product_variations_model.dart';
import '../../../../../services/base/object_mapper.dart';
import '../../../../../services/local/local_data_helper.dart';
import '../../../cubit/pay_later_order_information/mtrade_pay_later_order_information_cubit.dart';
import '../../../cubit/pre_screen_pay_later_order/pre_screen_pay_later_order_cubit.dart';
import '../../../cubit/product_scheme_pay_later_order/buyer_info_cubit.dart';
import '../../../cubit/product_scheme_pay_later_order/product_scheme_pay_later_order_cubit.dart';
import '../../../cubit/select_promotion/mtrade_select_promotion_cubit.dart';

@RoutePage()
class MTradePayLaterOrderInformationPage extends StatefulWidget implements AutoRouteWrapper {
  const MTradePayLaterOrderInformationPage({
    Key? key,
    this.products,
    this.promotions,
    @QueryParam("orderID") this.orderID,
    @QueryParam("transactionID") this.transactionID,
    @QueryParam("pageID") this.pageID,
    @QueryParam("provinceCode") this.provinceCode,
    @QueryParam("districtCode") this.districtCode,
    @QueryParam("wardCode") this.wardCode,
    @QueryParam("provinceDeliveryCode") this.provinceDeliveryCode,
    @QueryParam("districtDeliveryCode") this.districtDeliveryCode,
    @QueryParam("wardDeliveryCode") this.wardDeliveryCode,
    @QueryParam("source") this.source,
    @QueryParam("orders") this.orders,
    @QueryParam("selectedLoanSchemeID") this.selectedLoanSchemeID,
    @QueryParam("selectedDownPaymentPercent") this.selectedDownPaymentPercent,
    @QueryParam("selectedLoanTenor") this.selectedLoanTenor,
    @QueryParam("selectedJoinInsurance") this.selectedJoinInsurance,
    @QueryParam("mobilePhone") this.mobilePhone,
    @QueryParam("idNumber") this.idNumber,
    @QueryParam("nameHeadOfHousehold") this.nameHeadOfHousehold,
    @QueryParam("idNumberHeadOfHousehold") this.idNumberHeadOfHousehold,
  }) : super(key: key);

  final List<MTradeCartProductModel>? products;
  final List<DataProductVariationsModel>? promotions;
  final String? orderID;
  final String? transactionID;
  final String? pageID;
  final String? provinceCode;
  final String? districtCode;
  final String? wardCode;
  final String? provinceDeliveryCode;
  final String? districtDeliveryCode;
  final String? wardDeliveryCode;
  final String? source;
  final String? orders;
  final String? selectedLoanSchemeID;
  final String? selectedDownPaymentPercent;
  final String? selectedLoanTenor;
  final String? selectedJoinInsurance;
  final String? mobilePhone;
  final String? idNumber;
  final String? nameHeadOfHousehold;
  final String? idNumberHeadOfHousehold;

  @override
  Widget wrappedRoute(BuildContext context) {
    List<MTradeCartProductModel> data = products ?? LocalDataHelper.instance.getProductsOrder();
    if (orders?.isNotEmpty == true) {
      final json = jsonDecode(orders!);
      List<Map<String, dynamic>> result = ObjectMapper.instance.mapArray(json);
      data = result.map((e) => MTradeCartProductModel.fromDeeplink(e)).toList();
    }
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => MTradePayLaterOrderInformationCubit(),
        ),
        BlocProvider(
          create: (_) => ProductSchemePayLaterOrderCubit()
            ..initProducts(
              products: data,
              orderID: orderID,
              transactionID: transactionID,
            )
            ..initDeliveryLocation(
              provinceCode: provinceCode ?? provinceDeliveryCode ?? AppData.instance.deliverySupportProvinceCode,
              districtCode: districtCode ?? districtDeliveryCode ?? AppData.instance.deliverySupportDistrictCode,
              wardCode: wardCode ?? wardDeliveryCode ?? AppData.instance.deliverySupportWardCode,
            )
            ..addPromotions(promotions ?? []),
        ),
        BlocProvider(
          create: (_) => PreScreenPayLaterOrderCubit()
            ..fetchData(
              mobilePhone: mobilePhone,
              idNumber: idNumber,
              provinceCode: provinceDeliveryCode ?? AppData.instance.deliverySupportProvinceCode,
              districtCode: districtDeliveryCode ?? AppData.instance.deliverySupportDistrictCode,
              wardCode: wardDeliveryCode ?? AppData.instance.deliverySupportWardCode,
              householdHeadName: nameHeadOfHousehold,
              householdHeadIdNumber: idNumberHeadOfHousehold,
            ),
        ),
        BlocProvider(
          create: (_) => BuyerInfoCubit()..initErrorIndexes(),
        ),
        BlocProvider(
          create: (_) => MTradeTrackingAgentCubit(),
        ),
        BlocProvider(
          create: (_) => MTradeSelectPromotionCubit(
            provinceCode: provinceCode ?? provinceDeliveryCode ?? AppData.instance.deliverySupportProvinceCode,
            districtCode: districtCode ?? districtDeliveryCode ?? AppData.instance.deliverySupportDistrictCode,
            wardCode: wardCode ?? wardDeliveryCode ?? AppData.instance.deliverySupportWardCode,
          )..updatePromotions(promotions ?? []),
        ),
        BlocProvider(
          create: (_) => MTradeConsentCubit(),
        ),
        /// TODO: DAA MTrade Consent - Hide OTP
        // BlocProvider(
        //   create: (context) => BuyerRequestCubit(),
        // ),
      ],
      child: this,
    );
  }

  @override
  State<MTradePayLaterOrderInformationPage> createState() => _MTradePayLaterOrderInformationPageState();
}

class _MTradePayLaterOrderInformationPageState extends State<MTradePayLaterOrderInformationPage> {
  bool _isLeaveRequest = false;

  @override
  void initState() {
    super.initState();
    final source = AppData.instance.landingPageSource;
    if (kIsWeb) {
      if (source.isTSA) {
        _isLeaveRequest = false;
      } else {
        _isLeaveRequest = true;
      }
    }
  }

  @override
  void dispose() {
    AppData.instance.preScreenData = null;
    AppData.instance.generatedProductToken = null;
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        final index = context.read<MTradePayLaterOrderInformationCubit>().state.curIndex;
        if (index == PayLaterTabPage.preScreen.index) {
          _setPageIndex(context, PayLaterTabPage.scheme.index);
          return false;
        }
        if (context.router.stack.length == 1) {
          RedirectUtil.backToMFast();
          return false;
        }
        if (index == PayLaterTabPage.result.index) {
          return true;
        }
        return true;
      },
      child: AppScaffold(
        appBar: MFastAdvanceAppBar(
          context: context,
          title: _isLeaveRequest ? "Đăng ký mua hàng trả chậm" : "Bán hàng trả chậm",
          onBack: () {
            context.popRoute();
          },
          onHome: () {
            RedirectUtil.backToMFast();
          },
        ),
        body: AutoTabsRouter(
          lazyLoad: false,
          routes: [
            ProductSchemePayLaterOrderRoute(
              onNextPage: () {
                _setPageIndex(
                  context,
                  _isLeaveRequest ? PayLaterTabPage.buyerResult.index : PayLaterTabPage.preScreen.index,
                );
              },
              orderID: widget.orderID,
              transactionID: widget.transactionID,
              isLeaveRequest: _isLeaveRequest,
              source: widget.source,
              orders: widget.orders,
              selectedLoanSchemeID: widget.selectedLoanSchemeID,
              selectedDownPaymentPercent: widget.selectedDownPaymentPercent,
              selectedLoanTenor: widget.selectedLoanTenor,
              selectedJoinInsurance: widget.selectedJoinInsurance,
            ),
            PreScreenPayLaterOrderRoute(
              onNextPage: () {
                _setPageIndex(context, PayLaterTabPage.result.index);
              },
            ),
            ResultPayLaterOrderRoute(
              onNextPage: () {},
            ),
            ResultRequestPayLaterOrderRoute(
              onNextPage: () {},
              message: _requestMessage(),
            ),
          ],
          builder: (BuildContext context, Widget child) {
            return BlocListener<MTradePayLaterOrderInformationCubit, MTradePayLaterOrderInformationState>(
              listenWhen: (pre, cur) {
                return pre.curIndex != cur.curIndex;
              },
              listener: (context, state) {
                AutoTabsRouter.of(context).setActiveIndex(state.curIndex);
              },
              child: child,
            );
          },
        ),
      ),
    );
  }

  _setPageIndex(BuildContext context, int index) {
    context.read<MTradePayLaterOrderInformationCubit>().setIndex(index);
  }

  String? _requestMessage() {
    if (AppData.instance.landingPageSource?.isDAA == true) {
      return "Yêu cầu mua hàng trả chậm đã được ghi nhận. Chuyên viên của MTrade sẽ liên hệ lại qua số điện thoại đăng ký để tư vấn và cập nhật trạng thái mới nhất.";
    }
    return null;
  }
}
