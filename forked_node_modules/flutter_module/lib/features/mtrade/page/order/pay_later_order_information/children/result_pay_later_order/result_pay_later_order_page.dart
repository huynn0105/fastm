// ignore_for_file: use_build_context_synchronously

import 'package:auto_route/auto_route.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/mtrade/scheme_type.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/contact_util.dart';
import 'package:flutter_module/common/utils/location_util.dart';
import 'package:flutter_module/features/mtrade/cubit/tracking_agent/mtrade_tracking_agent_cubit.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_tracking_agent_payload.dart';

import '../../../../../../../common/dialogs/dialog_view/mtrade/mtrade_dialog_view.dart';
import '../../../../../../../common/global_function.dart';
import '../../../../../../../common/widgets/app_layout.dart';
import '../../../../../../../common/widgets/buttons.dart';
import '../../../../../../../widgets/footer.dart';
import '../../../../../cubit/pre_screen_pay_later_order/pre_screen_pay_later_order_cubit.dart';

@RoutePage()
class ResultPayLaterOrderPage extends StatelessWidget {
  const ResultPayLaterOrderPage({
    Key? key,
    required this.onNextPage,
  }) : super(key: key);

  final Function onNextPage;

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<PreScreenPayLaterOrderCubit, PreScreenPayLaterOrderState>(
      builder: (context, state) {
        return AppLayout(
          footer: const WebFooter(),
          child: Padding(
            padding: const EdgeInsets.fromLTRB(16, 50, 15, 0),
            child: Column(
              children: [
                if (state.statusSubmit.isFailure) ...[
                  MTradeDialogView(
                    asset: "ic_mtrade_mascot_error",
                    title: "Đăng ký trả chậm thất bại",
                    titleColor: UIColors.red,
                    message: state.errorMessage ?? "",
                    showDottedDivider: true,
                  ),
                  const SizedBox(
                    height: 10,
                  ),
                  PrimaryButton(
                    onPressed: () {
                      context.popRoute();
                    },
                    height: 50,
                    title: "Đã hiểu và quay lại",
                  ),
                ],
                if (state.statusSubmit.isSuccess) ...[
                  BlocBuilder<PreScreenPayLaterOrderCubit, PreScreenPayLaterOrderState>(
                    builder: (context, state) {
                      return MTradeDialogView(
                        asset: "ic_mtrade_mascot_success",
                        title: "Thỏa điều kiện lên hồ sơ",
                        titleColor: UIColors.green,
                        message:
                            "Bấm “Đăng ký ngay” để tiếp tục khởi tạo hồ sơ trả chậm cho khách hàng.${state.schemeType == SchemeType.POSM.name ? '' : ' Hoặc bấm “Gửi khách hàng” để họ tự thao tác'}",
                        showDottedDivider: true,
                      );
                    },
                  ),
                  const SizedBox(
                    height: 10,
                  ),
                  BlocBuilder<PreScreenPayLaterOrderCubit, PreScreenPayLaterOrderState>(
                    builder: (context, state) {
                      return Row(
                        children: [
                          if (state.schemeType != SchemeType.POSM.name)
                            Expanded(
                              child: AppOutlinedButton(
                                onPressed: () {
                                  _onShare(context, state.mplData?.linkShare ?? "");
                                },
                                height: 50,
                                title: "Gửi khách hàng",
                                borderWidth: 1,
                                textColor: UIColors.primaryColor,
                                borderColor: UIColors.primaryColor,
                                backgroundColor: Colors.transparent,
                                borderRadius: BorderRadius.circular(25),
                              ),
                            ),
                          if (state.schemeType != SchemeType.POSM.name)
                            const SizedBox(
                              width: 16,
                            ),
                          Expanded(
                            child: PrimaryButton(
                              onPressed: () {
                                _onDirect(context, state.mplData?.linkDirect ?? "");
                              },
                              height: 50,
                              title: "Đăng ký ngay",
                            ),
                          ),
                        ],
                      );
                    },
                  ),
                ],
              ],
            ),
          ),
        );
      },
    );
  }

  Future<bool> _onTracking(BuildContext context) async {
    if (kIsWeb) {
      return true;
    }

    final cubit = context.read<MTradeTrackingAgentCubit>();
    final location = await LocationUtil.instance.getCurrentLocationRequire(context: context);
    final contact = await ContactUtil.instance.getContacts(context: context);
    if (location == null) return false;

    cubit.trackingAgent(
      payload: MTradeTrackingAgentPayload(
        lon: location.longitude.toString(),
        lat: location.latitude.toString(),
        agentContact: contact,
      ),
    );

    return true;
  }

  _onShare(BuildContext context, String url) async {
    final value = await _onTracking(context);
    if (value == false) return;

    if (kIsWeb) {
      GlobalFunction.copyText(url).then((value) {
        ToastProvider.instance.showCopy(context: context);
      });
      return;
    }

    GlobalFunction.shareText(
      url,
      subject: "Hồ sơ trả chậm",
    );
  }

  _onDirect(BuildContext context, String url) async {
    final value = await _onTracking(context);
    if (value == false) return;

    GlobalFunction.popAndPushWebView(
      context: context,
      url: url,
    );
  }
}
