import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/features/mtrade/cubit/product_scheme_pay_later_order/buyer_request_cubit.dart';
import 'package:flutter_module/features/mtrade/page/order/pay_later_order_information/children/product_scheme_pay_later_order/components/option_resend_otp_component.dart';
import 'package:pin_code_fields/pin_code_fields.dart';

import '../../../../../../../../common/colors.dart';
import '../../../../../../../../common/constants.dart';
import '../../../../../../../../common/dialogs/dialog_provider.dart';
import '../../../../../../../../common/styles.dart';
import '../../../../../../../../common/utils/format_util.dart';
import '../../../../../../../../common/widgets/buttons.dart';
import '../../../../../../../../common/widgets/collect_data_view.dart';
import '../../../../../../../../common/widgets/images.dart';
import '../../../../../../../../common/widgets/loading.dart';

class PinCodeComponent extends StatefulWidget {
  final String phoneNumber;
  final String? sku;
  final String? productName;
  final String fullName;
  final String phone;
  final int? productPrice;
  final String? provinceID;
  final String? districtID;
  final int? schemeID;
  final double? prepayPercent;
  final int? loanTerms;
  final int? insurance;
  final String? idNumber;
  final double? loanTermsConversionFee;
  final String? loanPurpose;
  final double? interestRate;
  final int? requireInsurance;
  final String? schemeName;

  const PinCodeComponent({
    Key? key,
    this.phoneNumber = '',
    this.sku = '',
    this.productName = '',
    this.fullName = '',
    this.phone = '',
    this.productPrice,
    this.provinceID,
    this.districtID,
    this.schemeID,
    this.prepayPercent,
    this.loanTerms,
    this.insurance,
    this.idNumber,
    this.loanTermsConversionFee,
    this.loanPurpose,
    this.interestRate,
    this.requireInsurance,
    this.schemeName,
  }) : super(key: key);

  @override
  State<StatefulWidget> createState() {
    return _PinCodeState();
  }
}

class _PinCodeState extends State<PinCodeComponent> {
  late FocusNode _otpFocusNode;

  @override
  void initState() {
    super.initState();
    _otpFocusNode = FocusNode();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (defaultTargetPlatform == TargetPlatform.android) {
        _otpFocusNode.requestFocus();
      }
    });
  }

  @override
  void dispose() {
    _otpFocusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<BuyerRequestCubit>();
    return MultiBlocListener(
      listeners: [
        BlocListener<BuyerRequestCubit, BuyerRequestState>(
          listener: (context, state) {
            if (state.otpStatus.isFailure) {
              DialogProvider.instance.showErrorMsgDialog(
                context: context,
                title: 'Gửi yêu cầu thất bại',
                message: state.errMsg,
                btnTitle: 'Đã hiểu và quay lại',
              );
            }
          },
        ),
        BlocListener<BuyerRequestCubit, BuyerRequestState>(
          listenWhen: (pre, cur) {
            return pre.completeStepStatus != cur.completeStepStatus;
          },
          listener: (context, state) {
            if (state.completeStepStatus.isSuccess) {
              if (TextUtils.isNotEmpty(state.redirectLink) && kIsWeb) {
                Navigator.pop(context, state.redirectLink ?? '');
              } else {
                Navigator.pop(context, true);
              }
            } else if (state.completeStepStatus.isFailure) {
              DialogProvider.instance.showErrorMsgDialog(
                context: context,
                title: 'Đăng ký thất bại',
                message: state.errMsg,
                btnTitle: 'Đã hiểu và quay lại',
              );
            }
          },
        ),
      ],
      child: BlocBuilder<BuyerRequestCubit, BuyerRequestState>(
        builder: (context, state) {
          if (state.status.isInitial) {
            cubit.init(phoneNumber: widget.phoneNumber);
          }
          final hasError = state.errorFields[AppConstants.otpKey] != null;
          return Stack(
            alignment: Alignment.bottomCenter,
            children: [
              LayoutBuilder(
                builder: (context, constraints) {
                  return SizedBox(
                    height: 628,
                    width: double.infinity,
                    child: Column(
                      children: [
                        Container(
                          height: 6,
                          width: 92,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(3),
                            color: UIColors.white,
                          ),
                        ),
                        const SizedBox(
                          height: 10,
                        ),
                        Container(
                          height: 612,
                          width:
                              constraints.maxWidth >= AppConstants.responsiveSize ? AppConstants.responsiveSize : null,
                          decoration: const BoxDecoration(
                            color: UIColors.extraLightGray,
                            borderRadius: BorderRadius.only(
                              topLeft: Radius.circular(24),
                              topRight: Radius.circular(24),
                            ),
                          ),
                          child: Column(
                            children: [
                              Container(
                                decoration: const BoxDecoration(
                                  color: UIColors.white,
                                  borderRadius: BorderRadius.only(
                                    topLeft: Radius.circular(24),
                                    topRight: Radius.circular(24),
                                  ),
                                  boxShadow: [
                                    BoxShadow(
                                      offset: Offset(0, 1),
                                      color: UIColors.extraLightGray,
                                      blurRadius: 1,
                                    )
                                  ],
                                ),
                                height: 48,
                                child: Stack(
                                  children: [
                                    Positioned(
                                      top: 12,
                                      left: 0,
                                      right: 0,
                                      bottom: 14,
                                      child: Text(
                                        'Xác thực nhu cầu',
                                        textAlign: TextAlign.center,
                                        style: UITextStyle.medium.copyWith(
                                          fontSize: 16,
                                          color: UIColors.grayText,
                                        ),
                                      ),
                                    ),
                                    Positioned(
                                      top: 12,
                                      right: 12,
                                      child: SplashButton(
                                        onTap: () => Navigator.pop(context),
                                        child: const AppImage.asset(
                                          asset: 'ic_close',
                                          height: 24,
                                          width: 24,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              const Divider(
                                height: 1,
                                color: UIColors.lightGray,
                              ),
                              const SizedBox(
                                height: 24,
                              ),
                              Text.rich(
                                TextSpan(
                                  style: UITextStyle.medium.copyWith(
                                    fontSize: 16,
                                    color: UIColors.grayText,
                                  ),
                                  children: <InlineSpan>[
                                    const TextSpan(
                                      text: 'Nhập mã xác thực ',
                                    ),
                                    const TextSpan(
                                      text: '4 chữ số',
                                    ),
                                    const TextSpan(
                                      text: ' đã được gửi tới\nsố ĐT ',
                                    ),
                                    TextSpan(
                                      text: FormatUtil.phoneFormat(widget.phoneNumber),
                                      style: UITextStyle.semiBold.copyWith(
                                        fontSize: 16,
                                      ),
                                    ),
                                  ],
                                ),
                                textAlign: TextAlign.center,
                              ),
                              const SizedBox(
                                height: 8,
                              ),
                              CollectDataView(
                                errorAlignment: MainAxisAlignment.center,
                                errorMsg: state.errorFields[AppConstants.otpKey],
                                child: Padding(
                                  padding: const EdgeInsets.only(bottom: 8),
                                  child: PinCodeTextField(
                                    appContext: context,
                                    length: 4,
                                    errorTextSpace: 0,
                                    errorTextMargin: EdgeInsets.zero,
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    animationType: AnimationType.fade,
                                    focusNode: _otpFocusNode,
                                    autoDisposeControllers: false,
                                    enablePinAutofill: kIsWeb == false,
                                    pinTheme: PinTheme(
                                      shape: PinCodeFieldShape.box,
                                      borderRadius: BorderRadius.circular(4),
                                      fieldHeight: 40,
                                      fieldWidth: 40,
                                      borderWidth: 1,
                                      fieldOuterPadding: const EdgeInsets.only(left: 6, right: 6),
                                      activeColor: hasError ? UIColors.red : UIColors.border,
                                      selectedColor: hasError ? UIColors.red : UIColors.primaryColor,
                                      inactiveColor: hasError ? UIColors.red : UIColors.border,
                                      disabledColor: UIColors.border,
                                      activeFillColor: hasError ? UIColors.lightRed : UIColors.white,
                                      selectedFillColor: hasError ? UIColors.lightRed : UIColors.lightBlue,
                                      inactiveFillColor: hasError ? UIColors.lightRed : UIColors.white,
                                      errorBorderColor: UIColors.white,
                                    ),
                                    cursorColor: UIColors.defaultText,
                                    animationDuration: const Duration(milliseconds: 300),
                                    enableActiveFill: true,
                                    // errorAnimationController: errorController,
                                    controller: cubit.otpController,
                                    keyboardType: TextInputType.number,
                                    onCompleted: (v) {
                                      cubit.verifyOtp(
                                        phoneNumber: widget.phoneNumber,
                                        sku: widget.sku,
                                        productName: widget.productName,
                                        productPrice: widget.productPrice,
                                        fullName: widget.fullName,
                                        phone: widget.phone,
                                        provinceID: widget.provinceID,
                                        districtID: widget.districtID,
                                        schemeID: widget.schemeID,
                                        prepayPercent: widget.prepayPercent,
                                        loanTerms: widget.loanTerms,
                                        insurance: widget.insurance,
                                        idNumber: widget.idNumber,
                                        loanTermsConversionFee: widget.loanTermsConversionFee,
                                        loanPurpose: widget.loanPurpose,
                                        interestRate: widget.interestRate,
                                        requireInsurance: widget.requireInsurance,
                                        schemeName: widget.schemeName,
                                      );
                                    },
                                    onChanged: cubit.otpChange,
                                  ),
                                ),
                              ),
                              const SizedBox(
                                height: 8,
                              ),
                              Text.rich(
                                TextSpan(
                                  style: UITextStyle.medium.copyWith(
                                    fontSize: 16,
                                    color: UIColors.grayText,
                                  ),
                                  children: <InlineSpan>[
                                    const TextSpan(
                                      text: 'Nếu không nhận được mã xác thực,\n',
                                    ),
                                    if (state.countDown > 1)
                                      TextSpan(
                                        text: 'vui lòng bấm gửi lại ',
                                        children: [
                                          TextSpan(
                                            text: 'sau ${state.countDown}s',
                                            style: UITextStyle.semiBold.copyWith(
                                              fontSize: 16,
                                            ),
                                          ),
                                        ],
                                      ),
                                    if (state.countDown == 1)
                                      const TextSpan(
                                        text: 'vui lòng bấm gửi lại qua',
                                      ),
                                  ],
                                ),
                                textAlign: TextAlign.center,
                              ),
                              const SizedBox(
                                height: 8,
                              ),
                              if (state.countDown == 1)
                                OptionResendOTPComponent(
                                  onTapOption: (option) {
                                    cubit.requestOtp(
                                      phoneNumber: widget.phoneNumber,
                                      retry: true,
                                      channel: option,
                                    );
                                  },
                                )
                            ],
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
              Visibility(
                visible: state.status.isLoading || state.completeStepStatus.isLoading || state.otpStatus.isLoading,
                child: const LoadingWidget(),
              ),
            ],
          );
        },
      ),
    );
  }
}
