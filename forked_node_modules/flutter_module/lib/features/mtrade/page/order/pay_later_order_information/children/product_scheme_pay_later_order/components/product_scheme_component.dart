import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/extension/list_extension.dart';

import '../../../../../../../../app_data.dart';
import '../../../../../../../../routes/routes.gr.dart';
import '../../../../../../../../common/enum/mtrade/join_insurance_type.dart';
import '../../../../../../../../common/bottom_sheet/bottom_sheet_provider.dart';
import '../../../../../../../../common/bottom_sheet/wrapper/data_wrapper.dart';
import '../../../../../../../../common/dialogs/dialog_provider.dart';
import '../../../../../../../../common/widgets/buttons.dart';
import '../../../../../../../../common/utils/text_util.dart';
import '../../../../../../../../common/widgets/divider.dart';
import '../../../../../../../../common/widgets/images.dart';
import '../../../../../../../../common/utils/format_util.dart';
import '../../../../../../../../common/widgets/textfields.dart';
import '../../../../../../../../widgets/data_view_item.dart';
import '../../../../../../cubit/product_scheme_pay_later_order/product_scheme_pay_later_order_cubit.dart';
import '../../../../../../../../common/widgets/checkbox.dart';
import '../../../../../../../../common/colors.dart';
import '../../../../../../../../common/styles.dart';
import '../../../widgets/requirement_widget.dart';
import '../widgets/slider/slider.dart';
import 'estimated_payment_schedule_component.dart';

class ProductSchemeComponent extends StatelessWidget {
  const ProductSchemeComponent({
    Key? key,
    required this.state,
    this.isLeaveRequest = false,
  }) : super(key: key);

  final ProductSchemePayLaterOrderState state;
  final bool isLeaveRequest;

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<ProductSchemePayLaterOrderCubit>();
    int tenor = state.selectedLoanTenor?.tenor ?? 0;
    int tenorMin = state.listLoanTenor.getFirst()?.tenor ?? 0;
    int tenorMax = state.listLoanTenor.getLast()?.tenor ?? 0;
    int tenorStep = state.scheme?.tenorStep ?? 0;

    ///
    return Padding(
      padding: const EdgeInsets.fromLTRB(16, 24, 16, 0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            isLeaveRequest ? "Hồ sơ trả chậm tham khảo" : "Hồ sơ trả chậm",
            style: UITextStyle.regular.copyWith(
              fontSize: 14,
              color: UIColors.grayText,
            ),
          ),
          const SizedBox(
            height: 10,
          ),
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: UIColors.white,
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SplashButton(
                  isDisabled: !state.enabledLoanScheme,
                  onTap: () async {
                    final result = await BottomSheetProvider.instance.onShowSearchList(
                      context,
                      title: "Chương trình trả chậm",
                      selectedId: state.selectedLoanSchemeID?.toString() ?? "",
                      data: state.listLoanScheme.map((e) => DataWrapper(id: e.id?.toString(), value: e.name)).toList(),
                    );
                    if (result != null) {
                      cubit.selectLoanScheme(TextUtils.parseInt(result.id));
                    }
                  },
                  child: UITextField.dropdown(
                    controller: cubit.loanSchemeController,
                    labelText: "Chương trình trả chậm",
                    hintText: "Chọn gói sản phẩm trả chậm",
                    requiredField: true,
                    enable: state.enabledLoanScheme,
                    readOnly: true,
                  ),
                ),
                const SizedBox(
                  height: 16,
                ),
                SplashButton(
                  isDisabled: !state.enabledDownPaymentAmount,
                  onTap: () async {
                    final data = state.listDownPayment.map((e) {
                      final item = DataWrapper(
                        id: FormatUtil.currencyDoubleFormat(e.percent, showUnit: false),
                        value: e.name,
                      );
                      return item;
                    }).toList();
                    final result = await BottomSheetProvider.instance.onShowSearchList(
                      context,
                      title: "Số tiền trả trước",
                      selectedId: FormatUtil.doubleFormat(state.selectedDownPaymentPercent),
                      data: data,
                    );
                    if (result != null) {
                      cubit.selectDownPaymentPercent(TextUtils.parseDouble(result.id));
                    }
                  },
                  child: UITextField.dropdown(
                    controller: cubit.downPaymentAmountController,
                    labelText: "Số tiền trả trước",
                    hintText: "Chọn số tiền trả trước",
                    requiredField: true,
                    enable: state.enabledDownPaymentAmount,
                    readOnly: true,
                  ),
                ),
                const SizedBox(
                  height: 20,
                ),
                Row(
                  children: [
                    Text(
                      "Thời hạn trả chậm",
                      style: UITextStyle.regular.copyWith(
                        fontSize: 13,
                        color: UIColors.grayText,
                      ),
                    ),
                    Text(
                      " *",
                      style: UITextStyle.regular.copyWith(
                        fontSize: 13,
                        color: UIColors.red,
                      ),
                    ),
                    const Spacer(),
                    Text(
                      state.selectedLoanTenor?.name ?? "",
                      style: UITextStyle.medium.copyWith(
                        fontSize: 16,
                        color: UIColors.defaultText,
                      ),
                    ),
                  ],
                ),
                if ((tenorMin == 0 && tenorMax == 0) || (tenorMin != tenorMax)) ...[
                  const SizedBox(
                    height: 10,
                  ),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
                    decoration: BoxDecoration(
                      color: UIColors.background,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: MTradeLoanTenorSlider(
                      disabled: state.scheme == null,
                      value: tenor.toDouble(),
                      min: tenorMin.toDouble(),
                      max: tenorMax.toDouble(),
                      step: tenorStep.toDouble(),
                      onDragging: (index, lower, upper) {
                        cubit.selectLoanTenor(TextUtils.parseInt(lower) ?? 0);
                      },
                    ),
                  ),
                  const SizedBox(
                    height: 10,
                  ),
                ],
                Row(
                  children: [
                    Text(
                      "Phí chuyển đổi:",
                      style: UITextStyle.regular.copyWith(
                        fontSize: 13,
                        color: UIColors.grayText,
                      ),
                    ),
                    const SizedBox(
                      width: 10,
                    ),
                    Text(
                      "${FormatUtil.doubleFormat(state.selectedLoanTenor?.conversionFee ?? 0)}% (${FormatUtil.currencyDoubleFormat(state.newTenorConversionFeeAmount)})",
                      style: UITextStyle.medium.copyWith(
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
                Text(
                  "Phí chuyển đổi áp dụng khi nâng thời hạn trả chậm lên dài hơn 3 tháng",
                  style: UITextStyle.regular.copyWith(
                    fontSize: 13,
                    color: UIColors.secondaryColor,
                    fontStyle: FontStyle.italic,
                  ),
                ),
                // SplashButton(
                //   isDisabled: !state.enabledLoanTenor,
                //   onTap: () async {
                //     final result = await BottomSheetProvider.instance.onShowSearchList(
                //       context,
                //       title: "Thời hạn trả chậm",
                //       selectedId: state.selectedLoanTenor?.toString() ?? "",
                //       data: state.listLoanTenor.map((e) => DataWrapper(id: "${e.tenor}", value: e.name)).toList(),
                //     );
                //     if (result != null) {
                //       cubit.selectLoanTenor(TextUtils.parseInt(result.id));
                //     }
                //   },
                //   child: UITextField.dropdown(
                //     controller: cubit.loanTenorController,
                //     labelText: "Thời hạn trả chậm",
                //     hintText: "Chọn thời hạn trả chậm",
                //     requiredField: true,
                //     enable: state.enabledLoanTenor,
                //     readOnly: true,
                //   ),
                // ),
                Visibility(
                  visible: !state.joinInsuranceType.isHide,
                  child: Column(
                    children: [
                      const SizedBox(
                        height: 20,
                      ),
                      RequirementWidget(
                        title: "Bảo hiểm người tham gia trả chậm",
                        child: Row(
                          children: [
                            Expanded(
                              child: SplashButton(
                                onTap: () {
                                  cubit.selectJoinInsurance(join: true);
                                },
                                child: AppCheckbox.circle(
                                  title: "Tham gia",
                                  value: state.selectedJoinInsurance == true,
                                  onChanged: (_) {},
                                ),
                              ),
                            ),
                            Expanded(
                              child: SplashButton(
                                onTap: () {
                                  if (!state.joinInsuranceType.isRequired) {
                                    cubit.selectJoinInsurance(join: false);
                                    return;
                                  }
                                  DialogProvider.instance.showErrorMsgDialog(
                                    context: context,
                                    title: 'Rất tiếc, hiện tại để mua hàng trả chậm. Bạn cần phải tham gia chương trình bảo hiểm để bảo vệ quyền lợi của người trả chậm khi chẳng may gặp sự cố về tai nạn.',
                                    btnTitle: 'Đã hiểu',
                                  );
                                },
                                child: AppCheckbox.circle(
                                  title: "Không tham gia",
                                  value: state.selectedJoinInsurance == false,
                                  onChanged: (_) {},
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(
                        height: 12,
                      ),
                      SplashButton(
                        onTap: () {
                          _onShowSheetInsurance(context);
                        },
                        child: Container(
                          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 12),
                          decoration: BoxDecoration(
                            color: UIColors.lightBlue,
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Row(
                            children: [
                              Expanded(
                                child: Text(
                                  "Thông tin chi tiết gói bảo hiểm",
                                  style: UITextStyle.regular.copyWith(
                                    color: UIColors.primaryColor,
                                  ),
                                ),
                              ),
                              const SizedBox(
                                width: 2,
                              ),
                              const AppImage.asset(
                                asset: "ic_arrow_right",
                                width: 24,
                                height: 24,
                                color: UIColors.primaryColor,
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(
                  height: 20,
                ),
                Text(
                  "Tóm tắt hồ sơ",
                  style: UITextStyle.semiBold.copyWith(
                    fontSize: 14,
                    color: UIColors.grayText,
                  ),
                ),
                const SizedBox(
                  height: 8,
                ),
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: UIColors.darkBlue,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Column(
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: DataViewItem.normal(
                              title: "Số tiền trả trước",
                              value: FormatUtil.currencyDoubleFormat(state.newDownPaymentAmount),
                            ),
                          ),
                          const SizedBox(
                            width: 8,
                          ),
                          Expanded(
                            child: DataViewItem.normal(
                              title: "Số tiền trả chậm",
                              value: FormatUtil.currencyDoubleFormat(state.newLoanAmount),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      Row(
                        children: [
                          Expanded(
                            child: DataViewItem.normal(
                              title: "Thời hạn trả chậm",
                              value: "${state.selectedLoanTenor?.tenor ?? 0} tháng",
                            ),
                          ),
                          const SizedBox(
                            width: 8,
                          ),
                          Expanded(
                            child: DataViewItem.normal(
                              title: "Phí chuyển đổi",
                              value: FormatUtil.currencyDoubleFormat(state.newTenorConversionFeeAmount),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      Row(
                        children: [
                          Expanded(
                            child: DataViewItem.normal(
                              title: "Lãi suất",
                              value: "${FormatUtil.doubleFormat(state.scheme?.interestRate)}% / năm",
                            ),
                          ),
                          if (!state.joinInsuranceType.isHide) ...[
                            const SizedBox(
                              width: 8,
                            ),
                            Expanded(
                              child: DataViewItem.normal(
                                title: "Phí bảo hiểm",
                                value: FormatUtil.currencyDoubleFormat(state.newInsuranceAmount),
                              ),
                            ),
                          ],
                        ],
                      ),
                      const DottedDivider(
                        height: 12,
                      ),
                      Row(
                        children: [
                          Expanded(
                            child: DataViewItem.highlight(
                              title: "Tổng số tiền\ntrả chậm",
                              value: FormatUtil.currencyDoubleFormat(state.newTotalLoanAmount),
                            ),
                          ),
                          const SizedBox(
                            width: 8,
                          ),
                          Expanded(
                            child: DataViewItem.highlight(
                              title: "Số tiền thanh toán\nhàng tháng (ước tính)",
                              value: FormatUtil.currencyDoubleFormat(state.newEmi),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                const SizedBox(
                  height: 12,
                ),
                SplashButton(
                  onTap: () {
                    _onShowSheetEstimatedSchedule(context);
                  },
                  child: Container(
                    padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 12),
                    decoration: BoxDecoration(
                      color: UIColors.lightBlue,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Row(
                      children: [
                        Expanded(
                          child: Text(
                            "Lịch trình thanh toán dự kiến",
                            style: UITextStyle.regular.copyWith(
                              color: UIColors.primaryColor,
                            ),
                          ),
                        ),
                        const SizedBox(
                          width: 2,
                        ),
                        const AppImage.asset(
                          asset: "ic_arrow_right",
                          width: 24,
                          height: 24,
                          color: UIColors.primaryColor,
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  _onShowSheetInsurance(BuildContext context) {
    context.pushRoute(
      WebViewBottomSheetRoute(
        url: AppData.instance.configs?.product?.mplInsuranceRules ?? "",
        title: "Thông tin chi tiết gói bảo hiểm",
        showTitle: false,
      ),
    );
  }

  _onShowSheetEstimatedSchedule(BuildContext context) {
    final state = context.read<ProductSchemePayLaterOrderCubit>().state;
    BottomSheetProvider.instance.show(
      context,
      title: "Lịch thanh toán dự kiến",
      child: EstimatedPaymentScheduleComponent(
        enabled: state.enabledSubmit,
        emi: state.newEmi ?? 0,
        downPaymentPercent: state.selectedDownPaymentPercent ?? 0,
        downPaymentAmount: state.newDownPaymentAmount ?? 0,
        loanTenor: state.selectedLoanTenor?.tenor ?? 0,
      ),
    );
  }
}
