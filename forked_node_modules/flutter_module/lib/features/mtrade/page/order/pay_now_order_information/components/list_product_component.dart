import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/format_util.dart';
import 'package:flutter_module/common/widgets/divider.dart';
import 'package:flutter_module/features/mtrade/cubit/select_promotion/mtrade_select_promotion_cubit.dart';
import 'package:flutter_module/features/mtrade/page/order/order_process_state/items/status_items/order_delivery_process_state_item.dart';
import 'package:flutter_module/features/mtrade/page/order/pay_now_order_information/items/order_product_item.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_pay_now_order_payload.dart';
import '../../../../../../common/dialogs/dialog_provider.dart';
import '../../../../../../common/enum/mtrade/payment_type.dart';
import '../../../../../../models/mtrade/cart/mtrade_cart_product_model.dart';
import '../../../../../../models/mtrade/promotion/data_product_variations_model.dart';
import '../../../../cubit/pay_now_order_information/mtrade_pay_now_order_information_cubit.dart';

import '../../../../../../common/colors.dart';
import '../../../mtrade/children/cart/components/selected_promotion_component.dart';
import '../../../mtrade/widgets/mtrade_block_widget.dart';

class ListProductComponent extends StatelessWidget {
  const ListProductComponent({
    Key? key,
    required this.onDeleted,
    required this.onUpdated,
    this.onPromotionChanged,
  }) : super(key: key);

  final Function(MTradeCartProductModel?) onDeleted;
  final Function() onUpdated;
  final Function(List<DataProductVariationsModel>)? onPromotionChanged;

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<MTradeSelectPromotionCubit, MTradeSelectPromotionState>(
      builder: (context, selectPromotionState) {
        final promotions = selectPromotionState.promotions;
        return BlocBuilder<MTradePayNowOrderInformationCubit, MTradePayNowOrderInformationState>(
          builder: (context, state) {
            if (state.products.isEmpty) {
              return const SizedBox();
            }
            return MTradeBlockWidget(
              title: "Danh sách sản phẩm",
              titlePadding: const EdgeInsets.symmetric(horizontal: 16),
              childPadding: const EdgeInsets.symmetric(horizontal: 16),
              child: Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: UIColors.white,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Column(
                  children: [
                    ListView.separated(
                      shrinkWrap: true,
                      padding: EdgeInsets.zero,
                      physics: const NeverScrollableScrollPhysics(),
                      itemBuilder: (context, index) {
                        final item = state.products[index];
                        final promo = promotions.firstWhereOrNull((element) => element.sku == item.sku);
                        final promoQuantity = promo?.codes?.length ?? 0;
                        final price = promo?.codes
                                ?.getFirst()
                                ?.promotion
                                ?.getPromotionPriceByQuantity(promoQuantity, sku: item.sku ?? "") ??
                            0;
                        final orderPrice = state.orderPrices.firstWhereOrNull((element) => item.sku == element.sku);
                        return OrderProductItem(
                          data: item,
                          index: index,
                          invalid: state.invalidSku.contains(item.sku ?? ""),
                          message: state.invalidSkuMessage,
                          hasPromotion: promotions.isNotEmpty,
                          promotionPrice: price,
                          orderPrice: orderPrice,
                          onDeleted: onDeleted,
                          onUpdated: onUpdated,
                        );
                      },
                      separatorBuilder: (_, __) => const DottedDivider(
                        indent: 96,
                        height: 8,
                      ),
                      itemCount: state.products.length,
                    ),
                    const DottedDivider(
                      height: 10,
                    ),
                    SelectedPromotionComponent(
                      orderItems: state.products.map((e) => OrderItems(sku: e.sku, quantity: e.quantity)).toList(),
                      publicWholesalePrice: state.orderPrices.any((element) => element.public == true),
                      onPromotionChanged: onPromotionChanged,
                      paymentMethod: MTradePaymentType.now,
                    ),
                    const DottedDivider(
                      height: 10,
                    ),
                    Column(
                      children: [
                        if (promotions.isNotEmpty)
                          InfoItem(
                            titleFlex: 7,
                            contentFlex: 4,
                            title: "Giá trị đơn hàng:",
                            content: FormatUtil.currencyDoubleFormat(state.totalPrice),
                            titleColor: UIColors.grayText,
                            contentColor: UIColors.defaultText,
                            titleAlignment: Alignment.centerRight,
                            contentAlignment: Alignment.centerRight,
                            titleFontSize: 14,
                            contentFontSize: 16,
                            titleStyle: UITextStyle.regular,
                            contentStyle: UITextStyle.medium,
                            crossAxisAlignment: CrossAxisAlignment.center,
                          ),
                        if (promotions.isNotEmpty)
                          InfoItem(
                            titleFlex: 7,
                            contentFlex: 4,
                            title: "Giảm giá:",
                            content: FormatUtil.currencyDoubleFormat(state.totalPromotionPrice),
                            titleColor: UIColors.grayText,
                            contentColor: UIColors.defaultText,
                            titleAlignment: Alignment.centerRight,
                            contentAlignment: Alignment.centerRight,
                            titleFontSize: 14,
                            contentFontSize: 16,
                            titleStyle: UITextStyle.regular,
                            contentStyle: UITextStyle.medium,
                            crossAxisAlignment: CrossAxisAlignment.center,
                          ),
                        InfoItem(
                          titleFlex: 7,
                          contentFlex: 4,
                          title: promotions.isNotEmpty ? "Tổng giá trị:" : "Tổng tiền:",
                          content: FormatUtil.currencyDoubleFormat(
                            state.totalPromotionPrice >= state.totalPrice
                                ? 0
                                : state.totalPrice - state.totalPromotionPrice,
                          ),
                          titleColor: UIColors.grayText,
                          contentColor: UIColors.red,
                          titleAlignment: Alignment.centerRight,
                          contentAlignment: Alignment.centerRight,
                          titleFontSize: 14,
                          contentFontSize: 16,
                          titleStyle: UITextStyle.regular,
                          contentStyle: UITextStyle.semiBold,
                          crossAxisAlignment: CrossAxisAlignment.center,
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            );
          },
        );
      },
    );
  }
}
