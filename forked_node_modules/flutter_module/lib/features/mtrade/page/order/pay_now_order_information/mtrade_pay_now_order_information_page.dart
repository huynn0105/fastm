import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/event_bus/event_bus.dart';
import 'package:flutter_module/common/widgets/app_layout.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/mtrade/cubit/consent/mtrade_consent_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/select_promotion/mtrade_select_promotion_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/suggested_product/mtrade_suggested_product_cubit.dart';
import 'package:flutter_module/features/mtrade/page/order/pay_now_order_information/components/pay_now_policy_component.dart';
import 'package:flutter_module/general_config.dart';
import 'package:flutter_module/models/mtrade/cart/mtrade_cart_product_model.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:flutter_module/services/local/local_data_helper.dart';

import '../../../../../app_data.dart';
import '../../../../../common/bloc_status.dart';
import '../../../../../common/dialogs/dialog_provider.dart';
import '../../../../../common/enum/mtrade/product_detail_type.dart';
import '../../../../../common/utils/redirect_util.dart';
import '../../../../../common/widgets/app_scaffold.dart';
import '../../../../../common/widgets/appbar.dart';
import '../../../../../models/mtrade/promotion/data_product_variations_model.dart';
import '../../../cubit/cart/mtrade_cart_cubit.dart';
import '../../../cubit/pay_now_order_information/mtrade_pay_now_order_information_cubit.dart';
import '../../product_detail/components/suggested_product_component.dart';
import 'components/address_component.dart';
import 'components/confirm_component.dart';
import 'components/list_product_component.dart';
import 'components/order_invoice_component.dart';
import 'components/select_payment_method_component.dart';

@RoutePage()
class MTradePayNowOrderInformationPage extends StatelessWidget implements AutoRouteWrapper {
  const MTradePayNowOrderInformationPage({
    Key? key,
    this.products,
    this.promotions,
  }) : super(key: key);

  final List<MTradeCartProductModel>? products;
  final List<DataProductVariationsModel>? promotions;

  @override
  Widget wrappedRoute(BuildContext context) {
    final data = products ?? LocalDataHelper.instance.getProductsOrder();
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => MTradePayNowOrderInformationCubit()
            ..fetchData(products: data)
            ..updatePromotions(promotions ?? []),
        ),
        BlocProvider(
          create: (_) => MTradeSuggestedProductCubit(),
        ),
        BlocProvider(
          create: (_) => MTradeSelectPromotionCubit(
            provinceCode: AppData.instance.deliverySupportProvinceCode,
            districtCode: AppData.instance.deliverySupportDistrictCode,
            wardCode: AppData.instance.deliverySupportWardCode,
          )..updatePromotions(promotions ?? []),
        ),
        BlocProvider(
          create: (_) => MTradeConsentCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<MTradePayNowOrderInformationCubit>();
    return BlocListener<MTradePayNowOrderInformationCubit, MTradePayNowOrderInformationState>(
      listener: (context, state) async {
        if (state.submitOrderStatus.isSuccess) {
          context.router.replace(OrderOverviewRoute(order: state.order));
          eventBus.fire(const MTradeRefreshCartEventBus());
          eventBus.fire(const MTradeRefreshAfterPayNowEventBus());
        } else if (state.submitOrderStatus.isFailure) {
          DialogProvider.instance.showMTradeErrorDialog(
            context: context,
            title: "Mua hàng thất bại",
            message: state.errorMessage ?? "",
          );
        }
      },
      child: AppScaffold(
        appBar: MFastAdvanceAppBar(
          context: context,
          title: "Bán hàng trả ngay",
          onHome: () {
            RedirectUtil.backToMFast();
          },
        ),
        body: Stack(
          children: [
            AppLayout(
              scrollController: cubit.scrollController,
              padding: const EdgeInsets.only(top: 16, bottom: 100),
              child: Column(
                children: [
                  const DeliveryAddressComponent(),
                  const SizedBox(
                    height: 24,
                  ),
                  const OrderInvoiceComponent(),
                  const SizedBox(
                    height: 24,
                  ),
                  BlocBuilder<MTradePayNowOrderInformationCubit, MTradePayNowOrderInformationState>(
                    builder: (context, state) {
                      final productCodes = state.products.map((e) => e.productCode ?? "").toList();
                      return SuggestedProductComponent(
                        productCodes: productCodes,
                        type: MTradeProductDetailType.suggestedProductFromPayNowOrder,
                        onSuccess: (data) {
                          final cubit = context.read<MTradePayNowOrderInformationCubit>();
                          cubit.addProduct(
                            data,
                            onFailure: (message) {
                              DialogProvider.instance.showMTradeErrorDialog(
                                context: context,
                                title: "Thất bại",
                                message: message,
                              );
                            },
                          );
                        },
                      );
                    },
                  ),
                  const SizedBox(
                    height: 20,
                  ),
                  ListProductComponent(
                    onDeleted: (value) {
                      onUpdatePromotion(context);
                    },
                    onUpdated: () {
                      onUpdatePromotion(context);
                    },
                    onPromotionChanged: (data) {
                      final cubit = context.read<MTradePayNowOrderInformationCubit>();
                      cubit.updatePromotions(data);
                    },
                  ),
                  const SizedBox(
                    height: 24,
                  ),
                  const SelectPaymentMethodComponent(),
                  const SizedBox(
                    height: 16,
                  ),
                  const PayNowPolicyComponent(),
                  const SizedBox(
                    height: 24,
                  ),
                  const ConfirmComponent(),
                ],
              ),
            ),
            BlocBuilder<MTradePayNowOrderInformationCubit, MTradePayNowOrderInformationState>(
              builder: (context, state) {
                final isLoadingConsent = context.select((MTradeConsentCubit cubit) => cubit.state.status.isLoading);
                return Visibility(
                  visible: state.status.isInitial ||
                      state.status.isLoading ||
                      state.submitOrderStatus.isLoading ||
                      isLoadingConsent,
                  child: const LoadingWidget.dark(),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  onUpdatePromotion(BuildContext context) {
    final cubit = context.read<MTradePayNowOrderInformationCubit>();
    final skus = cubit.state.products.map((e) => e.sku ?? "").toList();
    context.read<MTradeSelectPromotionCubit>().updatePromotionByRemainSkus(skus);
  }
}
