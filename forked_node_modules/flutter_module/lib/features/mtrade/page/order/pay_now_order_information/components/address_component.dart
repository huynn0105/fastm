import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/features/mtrade/cubit/select_promotion/mtrade_select_promotion_cubit.dart';
import 'package:flutter_module/models/master_data/time_frame_model.dart';
import 'package:scroll_to_index/scroll_to_index.dart';
import '../../../../../../common/bottom_sheet/bottom_sheet_provider.dart';
import '../../../../../../common/constants.dart';
import '../../../../../../common/enum/mtrade/delivery_location_type.dart';
import '../../../../../../models/master_data/master_data_model.dart';
import '../../../../cubit/pay_now_order_information/mtrade_pay_now_order_information_cubit.dart';
import '../../../mtrade/widgets/mtrade_block_widget.dart';

import '../../../../../../common/colors.dart';
import '../../../../../../common/widgets/collect_data_view.dart';
import '../../../../../../common/widgets/textfields.dart';

class DeliveryAddressComponent extends StatelessWidget {
  const DeliveryAddressComponent({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<MTradePayNowOrderInformationCubit>();
    return BlocBuilder<MTradePayNowOrderInformationCubit, MTradePayNowOrderInformationState>(
      builder: (context, state) {
        return MTradeBlockWidget(
          title: "Địa chỉ giao hàng",
          titlePadding: const EdgeInsets.symmetric(horizontal: 16),
          childPadding: const EdgeInsets.symmetric(horizontal: 16),
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: UIColors.white,
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              children: [
                AutoScrollTag(
                  controller: cubit.scrollController,
                  key: ValueKey(state.errorIndexes[AppConstants.orderFullNameKey] ?? 0),
                  index: state.errorIndexes[AppConstants.orderFullNameKey] ?? 0,
                  child: CollectDataView(
                    errorMsg: state.errorFields[AppConstants.orderFullNameKey],
                    child: UITextField(
                      controller: cubit.orderFullnameController,
                      labelText: "Họ tên người nhận",
                      hasError: state.errorFields[AppConstants.orderFullNameKey] != null,
                      onChanged: cubit.updateFullname,
                    ),
                  ),
                ),
                const SizedBox(
                  height: 16,
                ),
                AutoScrollTag(
                  controller: cubit.scrollController,
                  key: ValueKey(state.errorIndexes[AppConstants.orderPhoneNumberKey] ?? 0),
                  index: state.errorIndexes[AppConstants.orderPhoneNumberKey] ?? 0,
                  child: CollectDataView(
                    errorMsg: state.errorFields[AppConstants.orderPhoneNumberKey],
                    child: UITextField(
                      controller: cubit.orderPhoneController,
                      labelText: "Số điện thoại người nhận",
                      keyboardType: TextInputType.phone,
                      inputFormatters: [
                        FilteringTextInputFormatter.digitsOnly,
                        LengthLimitingTextInputFormatter(10),
                      ],
                      hasError: state.errorFields[AppConstants.orderPhoneNumberKey] != null,
                      onChanged: cubit.updatePhone,
                    ),
                  ),
                ),
                const SizedBox(
                  height: 16,
                ),
                AutoScrollTag(
                  controller: cubit.scrollController,
                  key: ValueKey(state.errorIndexes[AppConstants.orderProvinceKey] ?? 0),
                  index: state.errorIndexes[AppConstants.orderProvinceKey] ?? 0,
                  child: CollectDataView(
                    errorMsg: state.errorFields[AppConstants.orderProvinceKey],
                    child: AppSplashButton(
                      isDisable: !state.enabledProvince,
                      onTap: () {
                        onShowBottomSheetLocation(
                          context,
                          type: LocationType.province,
                          data: state.provinces,
                          value: state.selectedProvinceCode,
                        );
                      },
                      child: UITextField.dropdown(
                        controller: cubit.orderProvinceController,
                        labelText: "Tỉnh/Thành phố",
                        readOnly: true,
                        enable: state.enabledProvince,
                        hasError: state.errorFields[AppConstants.orderProvinceKey] != null,
                      ),
                    ),
                  ),
                ),
                const SizedBox(
                  height: 16,
                ),
                AutoScrollTag(
                  controller: cubit.scrollController,
                  key: ValueKey(state.errorIndexes[AppConstants.orderDistrictKey] ?? 0),
                  index: state.errorIndexes[AppConstants.orderDistrictKey] ?? 0,
                  child: CollectDataView(
                    errorMsg: state.errorFields[AppConstants.orderDistrictKey],
                    child: AppSplashButton(
                      isDisable: !state.enabledDistrict,
                      onTap: () {
                        onShowBottomSheetLocation(
                          context,
                          type: LocationType.district,
                          data: state.districts,
                          value: state.selectedDistrictCode,
                        );
                      },
                      child: UITextField.dropdown(
                        controller: cubit.orderDistrictController,
                        labelText: "Quận/Huyện",
                        readOnly: true,
                        enable: state.enabledDistrict,
                        hasError: state.errorFields[AppConstants.orderDistrictKey] != null,
                      ),
                    ),
                  ),
                ),
                const SizedBox(
                  height: 16,
                ),
                AutoScrollTag(
                  controller: cubit.scrollController,
                  key: ValueKey(state.errorIndexes[AppConstants.orderWardKey] ?? 0),
                  index: state.errorIndexes[AppConstants.orderWardKey] ?? 0,
                  child: CollectDataView(
                    errorMsg: state.errorFields[AppConstants.orderWardKey],
                    child: AppSplashButton(
                      isDisable: !state.enabledWard,
                      onTap: () {
                        onShowBottomSheetLocation(
                          context,
                          type: LocationType.ward,
                          data: state.wards,
                          value: state.selectedWardCode,
                        );
                      },
                      child: UITextField.dropdown(
                        controller: cubit.orderWardController,
                        labelText: "Phường/Xã",
                        readOnly: true,
                        enable: state.enabledWard,
                        hasError: state.errorFields[AppConstants.orderWardKey] != null,
                      ),
                    ),
                  ),
                ),
                const SizedBox(
                  height: 16,
                ),
                AutoScrollTag(
                  controller: cubit.scrollController,
                  key: ValueKey(state.errorIndexes[AppConstants.orderStreetKey] ?? 0),
                  index: state.errorIndexes[AppConstants.orderStreetKey] ?? 0,
                  child: CollectDataView(
                    errorMsg: state.errorFields[AppConstants.orderStreetKey],
                    child: UITextField(
                      controller: cubit.orderStreetController,
                      labelText: "Tên đường, số nhà",
                      hasError: state.errorFields[AppConstants.orderStreetKey] != null,
                      onChanged: cubit.updateStreet,
                    ),
                  ),
                ),
                const SizedBox(
                  height: 16,
                ),
                AutoScrollTag(
                  controller: cubit.scrollController,
                  key: ValueKey(state.errorIndexes[AppConstants.receiveTimeKey] ?? 0),
                  index: state.errorIndexes[AppConstants.receiveTimeKey] ?? 0,
                  child: CollectDataView(
                    errorMsg: state.errorFields[AppConstants.receiveTimeKey],
                    child: AppSplashButton(
                      onTap: () {
                        showReceiveTimeBottomSheet(
                          context,
                          selectedData: state.selectReceiveTimes,
                          data: state.timeFrames,
                        );
                      },
                      child: UITextField.dropdown(
                        controller: cubit.receiveTimeController,
                        labelText: "Thời gian nhận hàng mong muốn",
                        readOnly: true,
                        hasError: state.errorFields[AppConstants.receiveTimeKey] != null,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  onShowBottomSheetLocation(
    BuildContext context, {
    required LocationType type,
    required String value,
    required List<MasterDataModel> data,
  }) async {
    FocusManager.instance.primaryFocus?.unfocus();

    final cubit = context.read<MTradePayNowOrderInformationCubit>();
    final selectPromotionCubit = context.read<MTradeSelectPromotionCubit>();

    final result = await BottomSheetProvider.instance.onShowMTradeDeliveryLocation(
      context,
      type: type,
      value: value,
      data: data,
    );
    if (result is MasterDataModel) {
      if (type.isProvince) {
        selectPromotionCubit.provinceCode = result.id ?? '';
        cubit.selectProvince(result.id ?? '');
      } else if (type.isDistrict) {
        selectPromotionCubit.districtCode = result.id ?? '';
        cubit.selectDistrict(result.id ?? '');
      } else {
        selectPromotionCubit.wardCode = result.id ?? '';
        cubit.selectWard(result.id ?? '');
      }
      selectPromotionCubit.clearPromotions();
      cubit.fetchPriceOrder(products: cubit.state.products);
    }
  }

  Future showReceiveTimeBottomSheet(
    BuildContext context, {
    required List<TimeFrameModel> data,
    required List<TimeFrameModel> selectedData,
  }) async {
    final result = await BottomSheetProvider.instance.showReceiveTimeBottomSheet(
      context,
      selectData: selectedData,
      data: data,
    );
    if (context.mounted && result != null && result is List<TimeFrameModel>) {
      context.read<MTradePayNowOrderInformationCubit>().selectReceiveTime(result);
    }
  }
}
