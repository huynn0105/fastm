import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/format_util.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/mtrade/cubit/pay_now_order_information/mtrade_pay_now_order_information_cubit.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/cart/widgets/update_quantity_widget.dart';

import '../../../../../../common/global_function.dart';
import '../../../../../../models/mtrade/cart/mtrade_cart_product_model.dart';
import '../../../../../../models/mtrade/order/mtrade_order_price_model.dart';
import '../../../mtrade/children/cart/widgets/delete_button.dart';

class OrderProductItem extends StatelessWidget {
  const OrderProductItem({
    Key? key,
    required this.data,
    required this.index,
    required this.invalid,
    this.promotionPrice = 0,
    this.hasPromotion = false,
    this.orderPrice,
    this.message,
    required this.onDeleted,
    required this.onUpdated,
  }) : super(key: key);

  final MTradeCartProductModel data;
  final int index;
  final bool invalid;
  final String? message;
  final double promotionPrice;
  final bool hasPromotion;
  final OrderPrice? orderPrice;
  final Function(MTradeCartProductModel?) onDeleted;
  final Function() onUpdated;

  @override
  Widget build(BuildContext context) {
    final comparePrice = data.comparePrice ?? [];
    int displayPrice = 0;
    bool useWholesalePrice = orderPrice?.existWholesalePrice() == true && !hasPromotion;
    bool publicWholesalePrice = orderPrice?.public == true && !hasPromotion;
    if (useWholesalePrice) {
      displayPrice = orderPrice?.newPrice ?? 0;
    } else {
      displayPrice = data.price ?? 0;
    }
    double comparePriceValue = comparePrice.valueAt(0)?.value ?? 0;
    bool showComparePrice = displayPrice < comparePriceValue;
    return Container(
      constraints: const BoxConstraints(minHeight: 84),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 84,
            height: 84,
            child: Stack(
              children: [
                Positioned.fill(
                  child: AppImage.network(
                    url: data.productImg ?? "",
                    width: 84,
                    height: 84,
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                Visibility(
                  visible: invalid,
                  child: Container(
                    decoration: BoxDecoration(
                      color: UIColors.white.withOpacity(0.5),
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(
            width: 12,
          ),
          Expanded(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                CollectDataView(
                  errorMsg: invalid ? message : "",
                  spacing: 0,
                  child: Text(
                    data.name ?? "",
                    style: UITextStyle.medium.copyWith(
                      fontSize: 16,
                      decoration: invalid ? TextDecoration.lineThrough : TextDecoration.none,
                    ),
                  ),
                ),
                const SizedBox(
                  height: 4,
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      FormatUtil.currencyFormat(displayPrice),
                      style: UITextStyle.medium.copyWith(
                        fontSize: 16,
                        color: UIColors.red,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    if (showComparePrice)
                      Text(
                        comparePrice.valueAt(0)?.getValue() ?? "",
                        style: UITextStyle.medium.copyWith(
                          fontSize: 14,
                          color: UIColors.grayText,
                          decoration: TextDecoration.lineThrough,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                  ],
                ),
                if (publicWholesalePrice)
                  Row(
                    children: [
                      const AppImage.asset(
                        asset: 'ic_success',
                        width: 20,
                        height: 20,
                      ),
                      const SizedBox(width: 4),
                      Text(
                        'ĐANG ÁP DỤNG GIÁ ĐẶC BIỆT',
                        style: UITextStyle.semiBold.copyWith(
                          color: UIColors.extraGreen,
                        ),
                      )
                    ],
                  ),
                const SizedBox(
                  height: 4,
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    UpdateQuantityWidget(
                      key: ValueKey("${data.sku}-${data.quantity}"),
                      product: data,
                      warningFunction: (onAction) {
                        GlobalFunction.checkPromotion(context, () {
                          onAction.call();
                        });
                      },
                      onQuantityChanged: (value) {
                        onQuantityChanged(context, index, value);
                      },
                    ),
                    DeleteButton(
                      onTap: () {
                        GlobalFunction.checkPromotion(context, () {
                          onDelete(context);
                        });
                      },
                    ),
                  ],
                ),
                const SizedBox(
                  height: 4,
                ),
                Visibility(
                  visible: promotionPrice > 0,
                  child: Row(
                    children: [
                      Text(
                        "Giảm giá:",
                        style: UITextStyle.regular.copyWith(
                          fontSize: 13,
                          color: UIColors.grayText,
                        ),
                      ),
                      const SizedBox(
                        width: 12,
                      ),
                      Text(
                        FormatUtil.currencyDoubleFormat(promotionPrice),
                        style: UITextStyle.regular.copyWith(
                          fontSize: 13,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  onDelete(BuildContext context) {
    final cubit = context.read<MTradePayNowOrderInformationCubit>();
    final isDeletedLastItem = cubit.state.products.length == 1;

    DialogProvider.instance.showMTradeDialog(
      context: context,
      asset: "ic_mtrade_mascot_waiting",
      showDottedDivider: false,
      message: "Xác nhận xóa “${data.name ?? ""}” khỏi danh sách sản phẩm",
      positiveTitle: "Xem lại",
      negativeTitle: "Xóa sản phẩm",
      positiveCallback: () {},
      negativeCallback: () {
        if (isDeletedLastItem) {
          Navigator.of(context).pop();
          return;
        }
        cubit.deleteProduct(data.sku ?? "");
        Future.delayed(const Duration(milliseconds: 200), () {
          onDeleted(data);
        });
      },
    );
  }

  onQuantityChanged(BuildContext context, int index, int quantity) {
    context.read<MTradePayNowOrderInformationCubit>().updateQuantity(index, quantity);
    onUpdated();
  }
}
