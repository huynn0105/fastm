import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/mtrade/cubit/order_detail/mtrade_order_detail_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/tracking_agent/mtrade_tracking_agent_cubit.dart';
import 'package:flutter_module/features/mtrade/page/order_detail/components/order_detail_item.dart';
import 'package:flutter_module/features/mtrade/page/order_detail/status_item/order_detail_pending_item.dart';
import 'package:flutter_module/features/mtrade/page/order_detail/status_item/order_detail_process_item.dart';

import '../../../../common/utils/redirect_util.dart';

@RoutePage()
class MTradeOrderDetailPage extends StatelessWidget implements AutoRouteWrapper {
  const MTradeOrderDetailPage({
    super.key,
    @QueryParam("orderId") this.orderId,
  });

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => MTradeOrderDetailCubit()
            ..updatePayload(orderId: orderId)
            ..fetchData(),
        ),
        BlocProvider(
          create: (context) => MTradeTrackingAgentCubit(),
        ),
      ],
      child: this,
    );
  }

  final String? orderId;

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        if (!context.router.canPop()) {
          RedirectUtil.backToMFast();
          return false;
        }
        return true;
      },
      child: Scaffold(
        appBar: MFastAdvanceAppBar(
          title: 'Chi tiết đơn hàng',
          context: context,
          onBack: context.popRoute,
          onHome: RedirectUtil.backToMFast,
        ),
        body: BlocBuilder<MTradeOrderDetailCubit, MTradeOrderDetailState>(
          builder: (context, state) {
            if (state.status.isLoading) {
              return const LoadingWidget.withoutText();
            }

            return ListView(
              children: [
                OrderDetailItem(
                  processState: state.orderDetail?.processState ?? '',
                  data: state.orderDetail,
                ),
                const SizedBox(
                  height: 20,
                ),
                if (state.orderDetail?.processState == 'pending' && TextUtils.isEmpty(state.orderDetail?.orderID)) ...{
                  OrderDetailPendingItem(data: state.orderDetail)
                } else ...{
                  OrderDetailProcessItem(data: state.orderDetail),
                },
              ],
            );
          },
        ),
      ),
    );
  }
}
