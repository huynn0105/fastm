import 'package:flutter/material.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/features/mtrade/page/order/order_process_state/items/status_items/order_delivery_process_state_item.dart';
import 'package:flutter_module/features/mtrade/page/order/order_process_state/items/status_items/order_failed_process_state_item.dart';
import 'package:flutter_module/features/mtrade/page/order/order_process_state/items/status_items/order_success_process_state_item.dart';
import 'package:flutter_module/features/mtrade/page/order/order_process_state/items/status_items/order_waiting_process_state_item.dart';
import 'package:flutter_module/features/mtrade/page/order_detail/components/order_detail_infomation_item.dart';
import 'package:flutter_module/features/mtrade/page/order/order_process_state/items/product_items/order_information_item.dart';
import 'package:flutter_module/features/mtrade/page/order/order_process_state/items/product_items/order_product_item.dart';
import 'package:flutter_module/models/mtrade/order/mtrade_order_detail_model.dart';
import '../../../../../common/colors.dart';
import '../../../../../common/toast/toast_provider.dart';
import '../../../../../common/widgets/divider.dart';
import '../../mtrade/widgets/mtrade_block_widget.dart';
import '../../../../../models/mtrade/order/order_model.dart';

class OrderDetailItem extends StatelessWidget {
  const OrderDetailItem({
    Key? key,
    required this.data,
    required this.processState,
  }) : super(key: key);

  final MTradeOrderDetailModel? data;
  final String processState;

  @override
  Widget build(BuildContext context) {
    return MTradeBlockWidget(
      title: "",
      spacing: 0,
      child: Container(
        padding: const EdgeInsets.symmetric(
          vertical: 12,
          horizontal: 16,
        ),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(8),
          color: UIColors.white,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Expanded(
                  child: Text(
                    'Đơn hàng #${data?.orderID ?? ""}',
                    style: UITextStyle.semiBold.copyWith(
                      color: UIColors.grayText,
                    ),
                  ),
                ),
                if (TextUtils.isNotEmpty(data?.orderID))
                  AppSplashButton(
                    onTap: () {
                      GlobalFunction.copyText(data?.orderID ?? "").then(
                        (_) {
                          ToastProvider.instance.showCopy(context: context);
                        },
                      );
                    },
                    child: Row(
                      children: [
                        Text(
                          'Copy',
                          style: UITextStyle.semiBold.copyWith(
                            color: UIColors.grayText,
                          ),
                        ),
                        const SizedBox(
                          width: 4,
                        ),
                        const AppImage.asset(
                          asset: "ic_mtrade_copy_outline",
                          width: 24,
                          height: 24,
                        ),
                      ],
                    ),
                  ),
              ],
            ),
            const SizedBox(
              height: 8,
            ),
            OrderProductItem(
              items: data?.items ?? [],
              initialExpanded: true,
            ),
            const DottedDivider(
              height: 8,
            ),
            if (processState == 'pending')
              OrderDetailInformationItem(
                data: data,
              ),
            if (processState != "pending") ...[
              OrderInformationItem(
                data: data as OrderModel,
                processState: processState,
              ),
              const DottedDivider(
                height: 8,
              ),
              if (processState == "waiting")
                OrderWaitingProcessStateItem(
                    data: data as OrderModel, isDisable: true)
              else if (processState == "success")
                OrderSuccessProcessStateItem(
                    data: data as OrderModel, isDisable: true)
              else if (processState == "failed")
                OrderFailedProcessStateItem(
                  data: data as OrderModel,
                  isDisable: true,
                )
              else if (processState == "delivery")
                OrderDeliveryProcessStateItem(
                  data: data as OrderModel,
                  isDisable: true,
                ),
            ]
          ],
        ),
      ),
    );
  }
}
