// ignore_for_file: use_build_context_synchronously

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/enum/mtrade/scheme_type.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/contact_util.dart';
import 'package:flutter_module/common/utils/location_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/features/mtrade/cubit/tracking_agent/mtrade_tracking_agent_cubit.dart';
import 'package:flutter_module/features/mtrade/page/order_detail/components/order_detail_user_infomation_item.dart';
import 'package:flutter_module/models/mtrade/order/mtrade_order_detail_model.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_tracking_agent_payload.dart';

class OrderDetailPendingItem extends StatelessWidget {
  const OrderDetailPendingItem({
    super.key,
    required this.data,
  });

  final MTradeOrderDetailModel? data;

  @override
  Widget build(BuildContext context) {
    final isMPL = data?.paymentMethod == 'MPL';
    final isPOSM = data?.objectType == SchemeType.POSM.name;

    return Column(
      children: [
        OrderDetailUserInformationItem(
          data: data,
        ),
        const SizedBox(
          height: 16,
        ),
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 16),
          child: Text(
            isMPL
                ? 'Bấm “Đăng ký ngay” để tiếp tục khởi tạo hồ sơ trả\nchậm cho khách hàng. Hoặc bấm “Gửi khách hàng”\nđể họ tự thao tác'
                : 'Lưu ý: hệ thống sẽ tự hủy đơn sau 24h kể từ lúc khởi\ntạo nếu đơn hàng chưa được thanh toán thành công',
            textAlign: TextAlign.center,
            style: UITextStyle.regular.copyWith(color: UIColors.grayText),
          ),
        ),
        const SizedBox(
          height: 16,
        ),
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 16),
          child: Row(
            children: isMPL
                ? [
                    if (!isPOSM)
                      Expanded(
                        child: AppOutlinedButton(
                          title: 'Gửi khách hàng',
                          textColor: UIColors.primaryColor,
                          borderColor: UIColors.primaryColor,
                          backgroundColor: Colors.transparent,
                          onPressed: () {
                            _onShare(context, data?.urlDetail ?? '', data?.orderID ?? '');
                          },
                        ),
                      ),
                    if (!isPOSM)
                      const SizedBox(
                        width: 16,
                      ),
                    Expanded(
                      child: PrimaryButton(
                        title: 'Đăng ký ngay',
                        radius: 8,
                        onPressed: () {
                          GlobalFunction.action(
                              context: context,
                              forceCheckPayNow: false,
                              forceCheckPayLater: true,
                              onTap: () {
                                _onDirect(context, data?.urlDetail ?? '');
                              });
                        },
                      ),
                    ),
                  ]
                : [
                    Expanded(
                      child: PrimaryButton(
                        title: 'Tiếp tục thanh toán',
                        radius: 8,
                        onPressed: () {
                          GlobalFunction.action(
                              context: context,
                              onTap: () {
                                _onDirect(
                                  context,
                                  data?.urlDetail ?? '',
                                  isTracking: false,
                                );
                              });
                        },
                      ),
                    )
                  ],
          ),
        ),
      ],
    );
  }

  Future<bool> _onTracking(BuildContext context) async {
    final cubit = context.read<MTradeTrackingAgentCubit>();

    final location = await LocationUtil.instance.getCurrentLocationRequire(context: context);
    final contact = await ContactUtil.instance.getContacts(context: context);
    if (location == null) return false;

    cubit.trackingAgent(
        payload: MTradeTrackingAgentPayload(
      lon: location.longitude.toString(),
      lat: location.latitude.toString(),
      agentContact: contact,
    ));
    return true;
  }

  _onShare(BuildContext context, String url, orderID) async {
    final value = await _onTracking(context);
    if (value == false) return;

    GlobalFunction.shareText(
      url,
      subject: 'Đơn hàng #$orderID',
    );
  }

  _onDirect(BuildContext context, String url, {bool isTracking = true}) async {
    if (isTracking) {
      final value = await _onTracking(context);
      if (value == false) return;
    }

    GlobalFunction.pushWebView(
      context: context,
      url: TextUtils.convertPrivateUrl(
        url,
      ),
    );
  }
}
