import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/empty_widget.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/mtrade/cubit/my_review/mtrade_my_review_cubit.dart';
import 'package:flutter_module/features/mtrade/page/my_review/components/button_filter_select_component.dart';
import 'package:flutter_module/features/mtrade/page/my_review/items/rating_item.dart';

class DetailRatingComponent extends StatelessWidget {
  const DetailRatingComponent({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<MyReviewCubit, MyReviewState>(
      builder: (context, state) {
        _onFetchInitData(
          context,
          state,
        );
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(
                height: 12,
              ),
              SizedBox(
                width: double.infinity,
                child: Wrap(
                  children: List.generate(state.filters.length, (index) {
                    final item = state.filters[index];
                    final keys = item.options?.toJson().keys.whereType<String>().toList();
                    final values = item.options?.toJson().values.whereType<String>().toList();

                    final indexSelected = state.listSelected?[item.name] ?? 0;
                    final title = values?[indexSelected];

                    return FractionallySizedBox(
                      widthFactor: 0.5,
                      child: Padding(
                        padding: EdgeInsets.only(
                          left: index.isOdd ? 4 : 0,
                          right: index.isEven ? 4 : 0,
                        ),
                        child: ButtonFilterSelectComponent(
                          title: title,
                          data: values,
                          indexSelected: indexSelected,
                          onTap: (i) {
                            _onSelectFilter(
                              context,
                              key: item.name,
                              index: i,
                              value: keys?[i],
                            );
                          },
                        ),
                      ),
                    );
                  }),
                ),
              ),
              const SizedBox(
                height: 16,
              ),
              Text(
                'Danh sách đánh giá (${state.totalReview})',
                style: UITextStyle.medium.copyWith(
                  color: UIColors.grayText,
                ),
              ),
              if (state.status.isLoading) ...{
                const LoadingWidget.withoutText(),
              } else if (state.reviews.isEmpty) ...{
                const SizedBox(
                  height: 24,
                ),
                const EmptyWidget(
                  message: 'Hiện chưa có đánh giá nào về bạn',
                )
              } else ...{
                const SizedBox(
                  height: 8,
                ),
                ListView.separated(
                  shrinkWrap: true,
                  padding: EdgeInsets.zero,
                  physics: const NeverScrollableScrollPhysics(),
                  itemBuilder: (context, index) {
                    return RatingItem(
                      data: state.reviews[index],
                    );
                  },
                  separatorBuilder: (_, __) => const SizedBox(
                    height: 12,
                  ),
                  itemCount: state.reviews.length,
                ),
              }
            ],
          ),
        );
      },
    );
  }

  void _onFetchInitData(
    BuildContext context,
    MyReviewState state,
  ) {
    if (state.statusFilter.isInitial) {
      WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
        final cubit = context.read<MyReviewCubit>();
        cubit.fetchFilter();
      });
    }
    if (state.status.isInitial) {
      WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
        final cubit = context.read<MyReviewCubit>();
        cubit.fetchData();
      });
    }
  }

  void _onSelectFilter(
    BuildContext context, {
    String? key,
    String? value,
    int? index,
  }) {
    final cubit = context.read<MyReviewCubit>();
    cubit.selectFilter(
      key: key,
      index: index,
      value: value,
    );
    cubit.fetchData();
  }
}
