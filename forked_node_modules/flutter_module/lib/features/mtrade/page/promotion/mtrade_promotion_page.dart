import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/size.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/format_util.dart';
import 'package:flutter_module/common/utils/redirect_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/empty_widget.dart';
import 'package:flutter_module/common/widgets/widget_layout.dart';
import 'package:flutter_module/features/mtrade/cubit/search_promotion/mtrade_search_promotion_cubit.dart';
import 'package:flutter_module/features/mtrade/page/promotion/components/mtrade_promotion_search_bar_component.dart';
import 'package:flutter_module/features/mtrade/page/promotion/items/promotion_item.dart';
import 'package:flutter_module/models/mtrade/promotion/data_product_variations_model.dart';

import '../../../../common/enum/mtrade/payment_type.dart';
import '../../../../common/enum/mtrade/promotion_implementation_method.dart';
import '../../../../common/global_function.dart';
import '../../../../common/widgets/app_scaffold.dart';
import '../../../../common/widgets/loading.dart';
import '../../../../models/mtrade/promotion/mtrade_promotion_model.dart';
import '../../../../services/api/mtrade/payload/mtrade_pay_now_order_payload.dart';

@RoutePage()
class MTradePromotionPage extends StatefulWidget implements AutoRouteWrapper {
  const MTradePromotionPage({
    super.key,
    this.orderItems,
    this.invalidTicketCodes,
    this.initPromotions = const [],
    this.provinceCode,
    this.districtCode,
    this.wardCode,
    this.paymentMethod,
  });

  final String? provinceCode;
  final String? districtCode;
  final String? wardCode;
  final List<OrderItems>? orderItems;
  final List<String>? invalidTicketCodes;
  final List<DataProductVariationsModel> initPromotions;
  final MTradePaymentType? paymentMethod;

  @override
  State<MTradePromotionPage> createState() => _MTradePromotionPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (context) => MTradeSearchPromotionCubit(),
      child: this,
    );
  }
}

class _MTradePromotionPageState extends State<MTradePromotionPage> {
  final TextEditingController inputController = TextEditingController();

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      final cubit = context.read<MTradeSearchPromotionCubit>();
      cubit.initPromotions(
        widget.initPromotions,
        skus: widget.orderItems?.map((e) => e.sku ?? '').toList() ?? [],
        invalidTicketCodes: widget.invalidTicketCodes ?? [],
        provinceCode: widget.provinceCode,
        districtCode: widget.districtCode,
        wardCode: widget.wardCode,
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return AppScaffold(
      appBar: MFastAdvanceAppBar(
        context: context,
        title: 'Ưu đãi từ MTrade',
        onBack: context.popRoute,
        onHome: RedirectUtil.backToMFast,
      ),
      body: BlocBuilder<MTradeSearchPromotionCubit, MTradeSearchPromotionState>(
        builder: (context, state) {
          final selectedPromotions = GlobalFunction.flatPromotionCode(state.selectedProduct);
          final selectedPromotionsWithCode = selectedPromotions.where((e) {
            final code = e.promotion?.masterPromotionImplementationMethod?.code;
            return code != PromotionImplementationMethod.AUTO_PROMOTION.name;
          }).toList();
          final promotions = List<MTradePromotionModel>.from(state.promotions);
          promotions.sort((a, b) {
            return a.isSelected() ? -1 : 1;
          });
          promotions.sort((a, b) {
            final skus = widget.orderItems?.map((e) => e.sku ?? '').toList() ?? [];
            return !a.isDisabled(skus) ? -1 : 1;
          });
          return WidgetLayout(
            child: Stack(
              children: [
                Column(
                  children: [
                    Expanded(
                      child: Padding(
                        padding: const EdgeInsets.only(left: 16, right: 16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const SizedBox(
                              height: 12,
                            ),
                            CollectDataView(
                              errorMsg: state.searchStatus.isFailure ? state.errorMessage : null,
                              child: MTradePromotionSearchBarComponent(
                                controller: inputController,
                                onSubmitted: (text) {
                                  FocusManager.instance.primaryFocus?.unfocus();
                                  _searchPromotion(context, text);
                                },
                                onClearSearch: () {
                                  _clearErrorMessage(context);
                                },
                                onChange: (text) {
                                  _clearErrorMessage(context);
                                },
                                isLoading: state.searchStatus.isLoading,
                                searchedVoucher: selectedPromotionsWithCode.map((e) => e.code ?? '').toList(),
                                onVoucherDeleted: (code) {
                                  FocusManager.instance.primaryFocus?.unfocus();
                                  _onVoucherDeleted(context, code);
                                },
                              ),
                            ),
                            const SizedBox(
                              height: 24,
                            ),
                            Text(
                              'Danh sách ưu đãi/khuyến mãi',
                              style: UITextStyle.semiBold.copyWith(
                                color: UIColors.grayText,
                              ),
                            ),
                            if (promotions.isEmpty && !state.status.isLoading) ...{
                              const SizedBox(
                                height: 24,
                              ),
                              const EmptyWidget(
                                message: 'Hiện không tìm thấy chương trình\nưu đãi/khuyến mãi nào',
                              ),
                            } else ...{
                              const SizedBox(
                                height: 8,
                              ),
                              Expanded(
                                child: ListView.builder(
                                  padding: const EdgeInsets.only(bottom: 16),
                                  itemBuilder: (context, index) {
                                    final item = promotions[index];
                                    // final isSelected = state.selectedProduct.contains(item.code);
                                    final skus = widget.orderItems?.map((e) => e.sku ?? '').toList() ?? [];
                                    bool isDisable = item.isDisabled(skus);
                                    return PromotionItem(
                                      item: item,
                                      isSelected: item.isSelected(),
                                      isDisable: isDisable,
                                      onSelect: () {
                                        if (state.searchStatus.isLoading) return;
                                        if (item.isSelected()) {
                                          _onVoucherDeleted(context, item.omsPromotionCodes?.getFirst()?.code ?? '');
                                        } else {
                                          _searchPromotion(context, item.omsPromotionCodes?.getFirst()?.code ?? '');
                                        }
                                      },
                                      onForceSelect: () {
                                        if (!item.isSelected()) {
                                          _searchPromotion(context, item.omsPromotionCodes?.getFirst()?.code ?? '');
                                        }
                                      },
                                    );
                                  },
                                  itemCount: promotions.length,
                                ),
                              ),
                            },
                          ],
                        ),
                      ),
                    ),
                    if (state.selectedProduct.isNotEmpty || promotions.isNotEmpty)
                      AnimatedSize(
                        alignment: Alignment.bottomCenter,
                        duration: const Duration(milliseconds: 300),
                        child: Container(
                          color: UIColors.white,
                          width: double.infinity,
                          padding: EdgeInsets.only(
                            top: 12,
                            bottom: AppSize.instance.safeBottomBarHeight + 8,
                            left: 16,
                            right: 16,
                          ),
                          child: Column(
                            children: [
                              if (selectedPromotions.isNotEmpty) ...{
                                RichText(
                                  text: TextSpan(
                                    style: UITextStyle.regular.copyWith(
                                      color: UIColors.grayText,
                                    ),
                                    children: [
                                      TextSpan(
                                        text: '${selectedPromotions.length} ưu đãi ',
                                        style: UITextStyle.bold.copyWith(
                                          color: UIColors.accentGreen,
                                        ),
                                      ),
                                      const TextSpan(
                                        text: 'đã chọn giúp bạn ',
                                      ),
                                      TextSpan(
                                        text:
                                            'tiết kiệm được ${FormatUtil.currencyFormat(TextUtils.parseInt(state.totalDiscount))}',
                                        style: UITextStyle.bold.copyWith(
                                          color: UIColors.accentGreen,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                const SizedBox(
                                  height: 8,
                                ),
                              },
                              PrimaryButton(
                                enabled: !state.searchStatus.isLoading,
                                onPressed: () {
                                  _submitPromotion(context);
                                },
                                title: 'Đồng ý và tiếp tục thanh toán',
                                height: 48,
                                radius: 8,
                                width: double.infinity,
                              )
                            ],
                          ),
                        ),
                      ),
                  ],
                ),
                if (state.status.isLoading) const LoadingWidget.dark(),
              ],
            ),
          );
        },
      ),
    );
  }

  _searchPromotion(BuildContext context, String text) {
    final cubit = context.read<MTradeSearchPromotionCubit>();
    List<PromotionCode> selectedPromotions = GlobalFunction.flatPromotionCode(cubit.state.selectedProduct);
    List<String> codes = selectedPromotions.map((e) => e.code ?? '').toList();
    cubit.updatePayload(
      code: text,
      codes: codes,
      provinceCode: widget.provinceCode,
      districtCode: widget.districtCode,
      wardCode: widget.wardCode,
      productionVariations: widget.initPromotions,
      paymentMethod: widget.paymentMethod?.code,
    );
    cubit.searchPromotion(
      onSuccess: () {
        inputController.text = '';
      },
    );
  }

  _clearErrorMessage(BuildContext context) {
    final cubit = context.read<MTradeSearchPromotionCubit>();
    if (cubit.state.errorMessage.isEmpty) {
      return;
    }
    cubit.clearErrorMessage();
  }

  _submitPromotion(BuildContext context) {
    final cubit = context.read<MTradeSearchPromotionCubit>();

    // final searchedPromotions = cubit.promotions.where(
    //   (e) {
    //     return cubit.state.selectedProduct.contains(e.code);
    //   },
    // ).toList();
    //
    // final selectedPromotions = searchedPromotions.map(
    //   (promotion) {
    //     final base = MTradeSelectedPromotionModel.fromBase(promotion);
    //     //
    //     final code = promotion.omsPromotionCodes?.getFirst()?.code ?? "";
    //     base.tickets = [code];
    //     //
    //     final items = base.omsPromotionConditions?.getFirst()?.omsPromotionConditionItems ?? [];
    //     base.selection = items
    //         .mapIndexed(
    //           (itemIndex, item) {
    //             return MapEntry(
    //               itemIndex,
    //               SelectedPromotionModel(
    //                 code: promotion.omsPromotionCodes?.getFirst()?.code ?? "",
    //                 sku: item.omsProductVariation?.sku,
    //                 promotionPrice: item.promotionPrice,
    //                 promotionValue: item.promotionValue,
    //                 currency: item.getCurrency(),
    //                 ticketValue: item.getTicketValue(),
    //               ),
    //             );
    //           },
    //         )
    //         .map((e) => e.value)
    //         .toList();
    //     //
    //     return base;
    //   },
    // ).toList();

    ///
    context.popRoute(cubit.state.selectedProduct);
  }

  _onVoucherDeleted(BuildContext context, String code) {
    final cubit = context.read<MTradeSearchPromotionCubit>();
    final skus = widget.orderItems?.map((e) => e.sku ?? '').toList() ?? [];
    cubit.removePromotion(voucherCode: code, skus: skus);
    // final promotions = cubit.state.selectedProduct;
    // cubit.initPromotions(
    //   promotions.where((e) => e.codes?.getFirst()?.code != code).toList(),
    //   skus: widget.orderItems?.map((e) => e.sku ?? '').toList() ?? [],
    //   invalidTicketCodes: [],
    // );
  }

// _onSelectItem(BuildContext context, MTradePromotionModel item, bool forceSelect) {
//   if (item.code?.isEmpty == true) return;
//
//   final cubit = context.read<MTradeSearchPromotionCubit>();
//   cubit.selectPromotion(item, forceSelect: forceSelect, skus: widget.skus ?? []);
// }
}
