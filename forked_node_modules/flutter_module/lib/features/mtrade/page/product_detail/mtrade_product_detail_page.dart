import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/enum/log_event_key.dart';
import 'package:flutter_module/common/enum/mtrade/tracking_event.dart';
import 'package:flutter_module/common/utils/log_event_util.dart';
import 'package:flutter_module/common/widgets/app_layout.dart';
import 'package:flutter_module/common/widgets/app_switcher_widget.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/mtrade/cubit/product_pay_later_info/mtrade_product_pay_later_info_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/promotion_product/mtrade_promotion_product_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/suggested_product/mtrade_suggested_product_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/tracking_event/mtrade_tracking_event_cubit.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/render/render_product_app_bar_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/render/render_product_body_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/render/render_product_loading_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/render/render_product_payment_component.dart';
import 'package:flutter_module/services/local/local_data_helper.dart';

import '../../../../app_data.dart';
import '../../../../common/bloc_status.dart';
import '../../../../common/colors.dart';
import '../../../../common/dialogs/dialog_provider.dart';
import '../../../../common/enum/mtrade/mtrade_tab_page.dart';
import '../../../../common/enum/mtrade/product_detail_type.dart';
import '../../../../common/event_bus/event_bus.dart';
import '../../../../common/global_function.dart';
import '../../../../common/size.dart';
import '../../../../common/utils/redirect_util.dart';
import '../../../../common/widgets/app_scaffold.dart';
import '../../../../common/widgets/empty_widget.dart';
import '../../../../common/widgets/loadmore_widget.dart';
import '../../../../common/widgets/widget_layout.dart';
import '../../../../general_config.dart';
import '../../../../models/mtrade/product_detail/mtrade_product_detail_model.dart';
import '../../../../routes/routes.gr.dart';
import '../../../../widgets/footer.dart';
import '../../cubit/cart/mtrade_cart_cubit.dart';
import '../../cubit/product_detail/mtrade_product_detail_cubit.dart';
import 'items/overview_product_item.dart';

@RoutePage()
class MTradeProductDetailPage extends StatelessWidget {
  const MTradeProductDetailPage({
    Key? key,
    @QueryParam("productCode") this.productCode,
    this.product,
    this.type = MTradeProductDetailType.product,
    @QueryParam("pageID") this.pageID,
    @QueryParam("provinceCode") this.provinceCode,
    @QueryParam("districtCode") this.districtCode,
  }) : super(key: key);

  final String? productCode;
  final MTradeProductDetailModel? product;
  final MTradeProductDetailType type;
  final String? pageID;
  final String? provinceCode;
  final String? districtCode;

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => MTradeProductDetailCubit(productCode: productCode ?? '')..fetchFromProductList(product),
        ),
        BlocProvider(
          create: (_) => MTradeSuggestedProductCubit(),
        ),
        BlocProvider(
          create: (_) => MTradePromotionProductCubit(),
        ),
        BlocProvider(
          create: (_) => MTradeProductPayLaterInfoCubit(),
        ),
        BlocProvider(
          create: (_) => MTradeCartCubit(),
        ),
      ],
      child: _MTradeProductDetailPage(
        productCode: productCode,
        product: product,
        type: type,
        pageID: pageID,
        provinceCode: provinceCode,
        districtCode: districtCode,
      ),
    );
  }
}

class _MTradeProductDetailPage extends StatefulWidget {
  const _MTradeProductDetailPage({
    Key? key,
    this.productCode,
    this.product,
    this.type = MTradeProductDetailType.product,
    this.pageID,
    this.provinceCode,
    this.districtCode,
  }) : super(key: key);

  final String? productCode;
  final MTradeProductDetailModel? product;
  final MTradeProductDetailType type;
  final String? pageID;
  final String? provinceCode;
  final String? districtCode;

  @override
  State<_MTradeProductDetailPage> createState() => _MTradeProductDetailPageState();
}

class _MTradeProductDetailPageState extends State<_MTradeProductDetailPage> {
  late final StreamSubscription _subscription;

  @override
  void initState() {
    super.initState();
    _onInit();
    _subscription = eventBus.on<MTradeRefreshByUpdateDeliverySupportEventBus>().listen(_onListen);
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<MTradeProductDetailCubit, MTradeProductDetailState>(
          listenWhen: (pre, cur) {
            return pre.skuDetail?.sku != cur.skuDetail?.sku;
          },
          listener: (context, state) async {
            LogEventUtil.send(LogEventKey.mTradeViewProduct, data: {
              "contentId": state.skuDetail?.sku,
              "contentType": state.product?.name,
              "price": state.skuDetail?.price,
            });
            context.read<MTradePromotionProductCubit>().fetchData(
              skus: [state.skuDetail!.sku!],
              provinceCode: AppData.instance.deliverySupportProvinceCode,
              districtCode: AppData.instance.deliverySupportDistrictCode,
              wardCode: AppData.instance.deliverySupportWardCode,
            );
            context.read<MTradeProductPayLaterInfoCubit>().fetchData(
                  sku: state.skuDetail!.sku!,
                );
          },
        ),
        BlocListener<MTradeProductDetailCubit, MTradeProductDetailState>(
          listener: (context, state) async {
            if (state.addCartStatus.isSuccess) {
              context.read<MTradeCartCubit>().refreshData(); // refresh in product detail page
              eventBus.fire(const MTradeRefreshCartEventBus()); // refresh in cart tab page
              if (widget.type.isSuggestedProductFromDetail) {
                Navigator.of(context).pop();
              }
              DialogProvider.instance.showMTradeDialog(
                context: context,
                asset: "ic_mtrade_mascot_success",
                title: "Sản phẩm đã được thêm vào giỏ hàng chỉ chờ bạn thanh toán",
                positiveTitle: "Xem giỏ hàng",
                negativeTitle: "Quay lại",
                barrierDismissible: widget.type.isProduct,
                titleColor: UIColors.green,
                customContent: BlocProvider.value(
                  value: context.read<MTradeProductDetailCubit>(),
                  child: const OverviewProductItem(),
                ),
                positiveCallback: () {
                  _onBackToCart(context);
                },
              );
            } else if (state.addCartStatus.isFailure) {
              if (state.errorCode == "duplication") {
                DialogProvider.instance.showMTradeDialog(
                  context: context,
                  asset: "ic_mtrade_mascot_announce",
                  title: state.errorTitle ?? "",
                  message: state.errorMessage ?? "",
                  positiveTitle: "Xem giỏ hàng",
                  negativeTitle: "Quay lại",
                  positiveCallback: () {
                    _onBackToCart(context);
                  },
                );
              } else {
                DialogProvider.instance.showMTradeErrorDialog(
                  context: context,
                  title: state.errorTitle ?? "Thất bại",
                  message: state.errorMessage ?? "",
                );
              }
            }
            if (state.checkProjectPayNowStatus.isFailure || state.checkProjectPayLaterStatus.isFailure) {
              DialogProvider.instance.showMTradeProjectCodeDialog(
                context: context,
                message: state.projectCode?.message ?? "",
                url: state.projectCode?.url ?? "",
              );
            }
            if (state.checkProductSchemePayLater.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                title: "Bán hàng trả chậm thất bại",
                message: state.errorMessage ?? "",
              );
            }
            if (state.checkProductStockStatus.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                title: "Thất bại",
                message: state.errorMessage ?? "",
              );
            }
          },
        ),
      ],
      child: AppScaffold(
        backgroundColor: UIColors.white,
        body: SafeArea(
          top: false,
          child: Stack(
            children: [
              Positioned.fill(
                child: Column(
                  children: [
                    Expanded(
                      child: LoadMoreWidget(
                        onRefresh: () {
                          return context.read<MTradeProductDetailCubit>().refreshData();
                        },
                        child: AppSwitcherWidget(
                          showFirst: false,
                          firstChild: const EmptyWidget(),
                          secondChild: AppLayout(
                            color: UIColors.white,
                            footer: const WebFooter(),
                            child: RenderProductBodyComponent(
                              productCode: widget.productCode,
                              product: widget.product,
                              type: widget.type,
                              pageID: widget.pageID,
                            ),
                          ),
                        ),
                      ),
                    ),
                    WidgetLayout(
                      child: RenderProductPaymentComponent(
                        productCode: widget.productCode,
                        product: widget.product,
                        type: widget.type,
                        pageID: widget.pageID,
                        onAddCart: () {
                          GlobalFunction.action(
                            context: context,
                            forceCheckPayNow: false,
                            forceCheckPayLater: false,
                            onTap: () {
                              context.read<MTradeProductDetailCubit>().addCart();
                            },
                          );
                        },
                        onPayNow: () {
                          LogEventUtil.send(LogEventKey.mTradePayNowButton, data: {"paynow": "paynow_button"});
                          GlobalFunction.action(
                            context: context,
                            forceCheckPayNow: false,
                            forceCheckPayLater: false,
                            onTap: () {
                              _onPayNow(context);
                            },
                          );
                        },
                        onPayLater: () {
                          LogEventUtil.send(LogEventKey.mTradePayLaterButton, data: {"paylater": "paylater_button"});
                          GlobalFunction.action(
                            context: context,
                            forceCheckPayNow: false,
                            forceCheckPayLater: false,
                            onTap: () {
                              _onPayLater(context);
                            },
                          );
                        },
                        onAddPayNowForm: () {
                          _onBackFromSuggestedProduct(context, widget.type);
                        },
                      ),
                    ),
                  ],
                ),
              ),
              const Positioned.fill(
                child: RenderProductLoadingComponent(),
              ),
              if (widget.type.isProduct)
                Positioned(
                  top: 0,
                  left: 0,
                  right: 0,
                  child: WidgetLayout(
                    padding: EdgeInsets.only(top: AppSize.instance.safeTop + 5, left: 16, right: 16),
                    child: RenderProductAppBarComponent(
                      onBack: () {
                        context.popRoute();
                      },
                      onCart: () {
                        _onBackToCart(context);
                      },
                      onShare: (name, url) {
                        GlobalFunction.shareText(
                          url,
                          subject: name,
                        );
                      },
                      onHome: () {
                        if (kIsWeb) {
                          context.router.replaceAll([
                            MTradeProductRoute(
                              pageID: widget.pageID,
                            )
                          ]);
                        } else {
                          RedirectUtil.backToMFast();
                        }
                      },
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }

  _onBackFromSuggestedProduct(BuildContext context, MTradeProductDetailType type) {
    final data = context.read<MTradeProductDetailCubit>().convertCartProduct();
    context.popRoute(data);
  }

  _onBackToCart(BuildContext context) {
    RedirectUtil.backToMTradeRoot();
    eventBus.fire(MTradeMTradeTabPageIndexEventBus(MTradeTabPage.cart.index));
  }

  _onPayNow(BuildContext context) {
    final cubit = context.read<MTradeProductDetailCubit>();
    cubit.payNow(
      onSuccess: (data) {
        LocalDataHelper.instance.cacheProductsOrder(
          cubit.state.product,
          cubit.state.skuDetail,
        );
        context.pushRoute(
          MTradePayNowOrderInformationRoute(
            products: data,
          ),
        );
      },
    );
  }

  _onPayLater(BuildContext context) {
    final cubit = context.read<MTradeProductDetailCubit>();
    cubit.payLater(
      onSuccess: (data) {
        LocalDataHelper.instance.cacheProductsOrder(
          cubit.state.product,
          cubit.state.skuDetail,
        );
        context.pushRoute(
          MTradePayLaterOrderInformationRoute(
            products: data,
            pageID: AppData.instance.landingPageID,
            provinceCode: AppData.instance.landingPageProvinceCode,
            districtCode: AppData.instance.landingPageDistrictCode,
          ),
        );
      },
    );
  }

  _onListen(MTradeRefreshByUpdateDeliverySupportEventBus event) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<MTradeProductDetailCubit>().onLocationChange();
      context.read<MTradePromotionProductCubit>().fetchData(
        skus: [context.read<MTradeProductDetailCubit>().state.skuDetail!.sku!],
        provinceCode: AppData.instance.deliverySupportProvinceCode,
        districtCode: AppData.instance.deliverySupportDistrictCode,
        wardCode: AppData.instance.deliverySupportWardCode,
      );
    });
  }

  _onInit() {
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      context.read<MTradeCartCubit>().fetchData();
      await context.read<MTradeProductDetailCubit>().fetchData(checkSupportLocation: true);
      eventBus.fire(const MTradeRefreshHistoryProductEventBus());
      if (kIsWeb) {
        getItInstance.get<MTradeTrackingEventCubit>().trackLandingPage([
          LandingPageTrackingAction.view,
        ]);
      }
    });
  }

// _openWebView(BuildContext context) {
//   // _requestPermission().then((status) {
//   //   if (status == true) {
//   //     context.read<MTradeProductDetailCubit>().payLaterVersion1(
//   //       onSuccess: (url) {
//   //         context.pushRoute(
//   //           WebViewRoute(
//   //             title: "Bán hàng trả chậm",
//   //             url: url,
//   //           ),
//   //         );
//   //       },
//   //     );
//   //   } else {
//   //     DialogProvider.instance.showConfirmDialog(
//   //       context,
//   //       title: 'Quyền truy cập bị từ chối',
//   //       message: 'Vui lòng cho phép đầy đủ quyền camera và vị trí để lên hồ sơ cho bạn',
//   //       positiveTitle: 'Đồng ý',
//   //       negativeTitle: 'Hủy',
//   //       positiveCallback: () async {
//   //         await openAppSettings();
//   //       },
//   //     );
//   //   }
//   // });
// }
//
// Future<bool> _requestPermission() async {
//   final status = await Permission.camera.request();
//   if (status != PermissionStatus.granted) {
//     return false;
//   }
//
//   bool serviceEnabled;
//   LocationPermission permission;
//   List<LocationPermission> deniedPermissionGroup = [
//     LocationPermission.denied,
//     LocationPermission.deniedForever,
//   ];
//   // Test if location services are enabled.
//   serviceEnabled = await Geolocator.isLocationServiceEnabled();
//   if (!serviceEnabled) {
//     return false;
//   }
//   permission = await Geolocator.checkPermission();
//
//   if (deniedPermissionGroup.any((e) => e == permission)) {
//     permission = await Geolocator.requestPermission();
//     if (deniedPermissionGroup.any((e) => e == permission)) {
//       return false;
//     }
//   }
//
//   return true;
// }
}
