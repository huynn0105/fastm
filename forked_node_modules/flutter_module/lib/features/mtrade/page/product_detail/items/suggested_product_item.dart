import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/items/discount_tag.dart';
import 'package:flutter_module/routes/route_path.dart';
import 'package:flutter_module/routes/routes.gr.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/enum/mtrade/product_detail_type.dart';
import '../../../../../common/styles.dart';
import '../../../../../common/utils/format_util.dart';
import '../../../../../common/widgets/buttons.dart';
import '../../../../../common/widgets/images.dart';
import '../../../../../models/mtrade/cart/mtrade_cart_product_model.dart';
import '../../../../../models/mtrade/product/mtrade_product_model.dart';
import '../../../../../models/mtrade/product_detail/mtrade_product_detail_model.dart';
import '../../mtrade/items/mtrade_tag.dart';

class SuggestedProductItem extends StatelessWidget {
  const SuggestedProductItem({
    Key? key,
    required this.index,
    required this.type,
    required this.data,
    this.onSuccess,
  }) : super(key: key);

  final int index;
  final MTradeProductDetailType type;
  final MTradeProductModel data;
  final Function(MTradeCartProductModel data)? onSuccess;

  @override
  Widget build(BuildContext context) {
    final comparePrice = data.comparePrice ?? [];
    final showMTradeTag = data.mfastShipping ?? false;
    return SplashButton(
      onTap: () {
        _showDetailProduct(context);
      },
      borderRadius: BorderRadius.circular(8),
      child: Container(
        width: 156,
        clipBehavior: Clip.hardEdge,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(8),
          color: UIColors.white,
        ),
        child: Stack(
          children: [
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Stack(
                  children: [
                    AspectRatio(
                      aspectRatio: 1,
                      child: AppImage.network(
                        url: data.image ?? "",
                      ),
                    ),
                    if (showMTradeTag)
                      const Positioned(
                        left: 0,
                        bottom: 0,
                        child: MTradeTag(),
                      ),
                  ],
                ),
                Padding(
                  padding: const EdgeInsets.all(12),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        data.name ?? "",
                        style: UITextStyle.regular.copyWith(
                          fontSize: 14,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                      const SizedBox(
                        height: 4,
                      ),
                      Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  FormatUtil.currencyFormat(data.price),
                                  style: UITextStyle.semiBold.copyWith(
                                    fontSize: 14,
                                    color: UIColors.red,
                                  ),
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                ),
                                if (comparePrice.valueAt(0)?.value != null)
                                  Text(
                                    comparePrice.valueAt(0)?.getValue() ?? "",
                                    style: UITextStyle.medium.copyWith(
                                      fontSize: 14,
                                      color: UIColors.grayText,
                                      decoration: TextDecoration.lineThrough,
                                    ),
                                    maxLines: 1,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                              ],
                            ),
                          ),
                          const SizedBox(
                            width: 4,
                          ),
                          const AppImage.asset(
                            asset: "ic_mtrade_add_circle",
                            width: 28,
                            height: 28,
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
            if (comparePrice.valueAt(0)?.value != null)
              Align(
                alignment: Alignment.topRight,
                child: DiscountTag(
                  data: comparePrice.valueAt(1),
                ),
              ),
          ],
        ),
      ),
    );
  }

  _showDetailProduct(BuildContext context) async {
    final data = MTradeProductDetailModel.fromProduct(this.data);
    final result = await context.pushRoute(
      MTradeProductDetailBottomSheetRoute(
        productCode: data.code ?? "",
        product: data,
        type: type,
      ),
    );
    if (result is MTradeCartProductModel) {
      onSuccess?.call(result);
    }
    // BottomSheetProvider.instance.show(
    //   context,
    //   title: "Thông tin sản phẩm",
    //   child: BlocProvider(
    //     create: (context) => MTradeProductDetailCubit(productCode: data.code ?? ""),
    //     child: MTradeProductDetailPage(
    //       productCode: data.code ?? "",
    //       product: data,
    //       type: type,
    //     ),
    //   ),
    // );
  }
}
