import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/enum/mtrade/product_detail_type.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/widgets/empty_widget.dart';
import 'package:flutter_module/features/mtrade/cubit/product_detail/mtrade_product_detail_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/suggested_product/mtrade_suggested_product_cubit.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/attribute_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/delivery_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/description_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/detail_info_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/gift_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/name_information_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/overview_information_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/product_delivery_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/promotion_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/components/suggested_product_component.dart';
import 'package:flutter_module/features/mtrade/page/product_detail/widgets/shimmer_loading.dart';
import 'package:flutter_module/models/mtrade/product_detail/mtrade_product_detail_model.dart';

import '../banner_component.dart';
import '../event_component.dart';

class RenderProductBodyComponent extends StatelessWidget {
  const RenderProductBodyComponent({
    super.key,
    required this.productCode,
    required this.product,
    required this.type,
    required this.pageID,
  });

  final String? productCode;
  final MTradeProductDetailModel? product;
  final MTradeProductDetailType type;
  final String? pageID;

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<MTradeProductDetailCubit, MTradeProductDetailState>(
      builder: (context, state) {
        final product = state.product;
        final isEmpty = product == null && !state.status.showLoading;
        final skuDetail = state.skuDetail;
        final productDelivery = state.supportLocation?.delivery;
        final productInvalid = product?.productInvalid == true;
        final productOutOfStock = product?.productOutOfStock == true && !(productDelivery?.isPreOrder() == true);

        if (isEmpty) {
          return Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Container(
                height: 375,
                decoration: const BoxDecoration(
                  color: UIColors.background,
                ),
              ),
              const SizedBox(
                height: 50,
              ),
              const EmptyWidget(),
              const SizedBox(
                height: 50,
              ),
            ],
          );
        }

        return Column(
          children: [
            AnimatedCrossFade(
              duration: const Duration(milliseconds: 500),
              crossFadeState: state.status.showLoading && this.product == null
                  ? CrossFadeState.showFirst
                  : CrossFadeState.showSecond,
              firstChild: const ShimmerLoading(
                height: 375,
              ),
              secondChild: BannerComponent(
                images: state.productImg,
                productIcon: state.product?.productIcon,
              ),
            ),
            GiftComponent(
              data: product?.contest ?? [],
            ),
            NameInformationComponent(
              data: product,
              comparePrice: skuDetail?.comparePrice?.valueAt(1),
            ),
            AnimatedCrossFade(
              duration: const Duration(milliseconds: 500),
              crossFadeState: state.status.showLoading ? CrossFadeState.showFirst : CrossFadeState.showSecond,
              firstChild: const ShimmerLoading(
                height: 200,
              ),
              secondChild: Column(
                children: [
                  OverviewInformationComponent(
                    state: state,
                  ),
                  if (state.attributes.isNotEmpty) ...[
                    Container(
                      height: 5,
                      width: double.infinity,
                      color: UIColors.extraLightGray,
                    ),
                    AttributeComponent(
                      data: state.attributes,
                      disabled: productInvalid || productOutOfStock,
                    ),
                  ],
                  if (type.isProduct) ...[
                    const PromotionComponent(
                      showDivider: true,
                    ),
                  ],
                  if (!productInvalid) ...[
                    Container(
                      height: 5,
                      width: double.infinity,
                      color: UIColors.extraLightGray,
                    ),
                    DeliveryComponent(
                      errorMessage: state.errorFields[AppConstants.productLocationSupportKey],
                    ),
                    if (productDelivery != null)
                      ProductDeliveryComponent(
                        productDelivery: productDelivery,
                        payOnDelivery: product?.payOnDelivery ?? false,
                      ),
                    if (productDelivery?.event != null)
                      EventComponent(
                        event: productDelivery?.event,
                      ),
                  ],
                  if (product?.detailInfo?.isEnabled() ?? false) ...[
                    Container(
                      height: 5,
                      width: double.infinity,
                      color: UIColors.extraLightGray,
                    ),
                    DetailInfoComponent(
                      data: product?.detailInfo,
                    ),
                  ],
                  if (type.isProduct && !kIsWeb) ...[
                    BlocBuilder<MTradeSuggestedProductCubit, MTradeSuggestedProductState>(
                      builder: (context, state) {
                        if (state.products.isEmpty) {
                          return const SizedBox();
                        }
                        return Container(
                          height: 5,
                          width: double.infinity,
                          color: UIColors.extraLightGray,
                        );
                      },
                    ),
                    SuggestedProductComponent(
                      productCodes: [productCode ?? ''],
                      forceFetchData: type.isProduct,
                    ),
                  ],
                  if (product?.descriptions?.isNotEmpty == true) ...[
                    Container(
                      height: 5,
                      width: double.infinity,
                      color: UIColors.extraLightGray,
                    ),
                    DescriptionComponent(
                      descriptions: product?.descriptions ?? [],
                    ),
                  ],
                  if (!kIsWeb)
                    Container(
                      height: 100,
                      width: double.infinity,
                      color: UIColors.white,
                    ),
                ],
              ),
            ),
          ],
        );
      },
    );
  }
}
