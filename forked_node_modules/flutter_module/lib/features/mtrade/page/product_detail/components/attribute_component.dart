import 'dart:convert';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import '../../../../../common/constants.dart';
import '../../../cubit/product_detail/mtrade_product_detail_cubit.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/styles.dart';
import '../../../../../models/mtrade/product_detail/attribute_model.dart';
import '../items/option_attribute_item.dart';

class AttributeComponent extends StatelessWidget {
  const AttributeComponent({
    Key? key,
    required this.data,
    this.disabled = false,
  }) : super(key: key);

  final bool disabled;
  final List<AttributeModel> data;

  @override
  Widget build(BuildContext context) {
    if (data.isEmpty) {
      return const SizedBox();
    }
    final state = context.select((MTradeProductDetailCubit bloc) => bloc.state);
    final selectedAttributes = state.selectedAttributes;
    final errorFields = state.errorFields;
    //
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: const BoxDecoration(
        color: UIColors.white,
      ),
      child: CollectDataView(
        errorMsg: errorFields[AppConstants.productInvalidKey],
        child: Column(
          children: List.generate(
            max(0, data.length * 2 - 1),
            (index) {
              if (index.isOdd) {
                return const SizedBox(
                  height: 12,
                );
              }
              index = index ~/ 2;
              final item = data[index];
              final keyword = item.value ?? "";
              final options = item.options ?? [];
              return Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Align(
                    alignment: Alignment.centerLeft,
                    child: RichText(
                      maxLines: 3,
                      overflow: TextOverflow.ellipsis,
                      text: TextSpan(
                        children: [
                          TextSpan(
                            text: (item.name ?? "").trim(),
                            style: UITextStyle.semiBold.copyWith(
                              fontSize: 16,
                              height: 1.2,
                              color: UIColors.grayText,
                            ),
                          ),
                          TextSpan(
                            text: " *",
                            style: UITextStyle.semiBold.copyWith(
                              fontSize: 16,
                              color: UIColors.red,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(
                    height: 10,
                  ),
                  SizedBox(
                    height: 44,
                    child: ListView.separated(
                      scrollDirection: Axis.horizontal,
                      itemBuilder: (context, index) {
                        final item = options[index];
                        final value = item.value ?? "";
                        final selected = selectedAttributes[keyword] == value;
                        final disabled = (item.disabled ?? false) || this.disabled;
                        final isError = errorFields["${AppConstants.prefixSkuOption}/$value"] != null;
                        return OptionAttributeItem(
                          title: value,
                          isSelected: selected && !disabled,
                          isDisabled: disabled,
                          isError: isError,
                          onTap: () {
                            context.read<MTradeProductDetailCubit>().selectAttribute(
                                  keyword,
                                  value,
                                  checkSku: true,
                                );
                          },
                        );
                      },
                      separatorBuilder: (_, __) => const SizedBox(
                        width: 16,
                      ),
                      itemCount: options.length,
                    ),
                  ),
                ],
              );
            },
          ),
        ),
      ),
    );
  }
}
