import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/extension/datetime_extension.dart';
import 'package:flutter_module/common/utils/datetime_util.dart';
import 'package:flutter_module/features/mtrade/cubit/order_filter/mtrade_order_filter_cubit.dart';
import 'package:flutter_module/features/mtrade/page/order_filter/components/order_date_filter_component.dart';

import '../../../../common/bloc_status.dart';
import '../../../../common/constants.dart';
import '../../../../common/utils/redirect_util.dart';
import '../../../../common/widgets/appbar.dart';
import '../../../../common/widgets/loading.dart';
import '../../../../common/widgets/loadmore_widget.dart';
import '../../cubit/date_selection/mtrade_date_selection_cubit.dart';
import '../../cubit/detail_collaborator/mtrade_detail_collaborator_cubit.dart';
import '../mtrade/children/order/children/direct_bonus/components/process_component.dart';
import '../mtrade/children/order/components/date_selection_component.dart';
import 'components/information_component.dart';

@RoutePage()
class MTradeDetailCollaboratorPage extends StatelessWidget implements AutoRouteWrapper {
  const MTradeDetailCollaboratorPage({
    Key? key,
    required this.collaboratorID,
  }) : super(key: key);

  final String collaboratorID;

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => MTradeDetailCollaboratorCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: MFastAdvanceAppBar(
        context: context,
        title: "Chi tiết cộng tác viên",
        onHome: () {
          RedirectUtil.backToMFast();
        },
      ),
      body: BlocBuilder<MTradeDetailCollaboratorCubit, MTradeDetailCollaboratorState>(
        builder: (context, state) {
          if (state.status.isInitial) {
            onInit(context);
          }

          return Stack(
            children: [
              Positioned.fill(
                child: LoadMoreWidget(
                  onRefresh: () => context.read<MTradeDetailCollaboratorCubit>().refreshData(),
                  child: ListView(
                    physics: AppConstants.physics,
                    children: [
                      OrderDateFilterComponent(
                        onTimeFilterChanged: (filter) {
                          onTimeFilterChanged(context, filter);
                        },
                      ),
                      const SizedBox(
                        height: 16,
                      ),
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 16),
                        child: CollaboratorInformationComponent(
                          bonus: state.collaborator?.bonus,
                          data: state.collaborator?.collaborator,
                        ),
                      ),
                      const SizedBox(
                        height: 16,
                      ),
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 16),
                        child: OrderProcessStateComponent(
                          data: state.collaborator?.process ?? [],
                          collaboratorID: state.collaborator?.collaborator?.id,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              if (state.status.isLoading) const LoadingWidget.dark(),
            ],
          );
        },
      ),
    );
  }

  // onInit(BuildContext context) {
  //   final cubit = context.read<MTradeDetailCollaboratorCubit>();
  //   final dateCubit = context.read<MTradeDateSelectionCubit>();
  //
  //   cubit.updatePayload(
  //     collaboratorID: collaboratorID,
  //   );
  //
  //   final curDate = dateCubit.state.date;
  //   final initDate = DateTimeUtil.getDate(date, format: DateTimeFormat.yyyy_MM_dd)?.toFirstDayInDateOnly();
  //
  //   WidgetsBinding.instance.addPostFrameCallback((_) {
  //     if (initDate == null || curDate.isAtSameMomentAs(initDate)) {
  //       cubit
  //         ..updateDate(curDate)
  //         ..fetchData();
  //     } else {
  //       dateCubit.updateDate(initDate);
  //     }
  //   });
  // }

  // onChangedDate(BuildContext context, DateTime curDate) {
  //   context.read<MTradeDetailCollaboratorCubit>()
  //     ..updateDate(curDate)
  //     ..fetchData();
  // }

  onInit(BuildContext context) {
    final filter = context.read<MTradeOrderFilterCubit>().getTimeFilterData();
    context.read<MTradeDetailCollaboratorCubit>()
      ..updateCollaborator(collaboratorID)
      ..updateOrderFilter(filter)
      ..fetchData();
  }

  onTimeFilterChanged(BuildContext context, Map<String, dynamic> filter) {
    context.read<MTradeDetailCollaboratorCubit>()
      ..updateOrderFilter(filter)
      ..fetchData();
  }
}
