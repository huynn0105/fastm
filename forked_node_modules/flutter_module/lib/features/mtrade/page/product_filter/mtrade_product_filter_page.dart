import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import '../../../../di/get_it.dart';
import '../../cubit/filter/mtrade_filter_cubit.dart';
import 'components/filter_component.dart';
import 'components/header_component.dart';
import 'components/option_component.dart';

import '../../../../../../../common/colors.dart';

class MTradeProductFilterPage extends StatelessWidget {
  const MTradeProductFilterPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final globalFilterState = getItInstance.get<MTradeFilterCubit>().state;
    return BlocBuilder<MTradeFilterCubit, MTradeFilterState>(
      builder: (context, state) {
        if (state.status.isInitial) {
          if (globalFilterState.status.isSuccess) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              context.read<MTradeFilterCubit>().fillData(globalFilterState);
            });
          } else {
            context.read<MTradeFilterCubit>().fetchData();
          }
        }
        return Row(
          children: [
            const SizedBox(
              width: 80,
            ),
            Expanded(
              child: Scaffold(
                backgroundColor: Colors.transparent,
                body: Container(
                  decoration: const BoxDecoration(
                    color: UIColors.white,
                  ),
                  child: SafeArea(
                    child: Container(
                      decoration: const BoxDecoration(
                        color: UIColors.background,
                      ),
                      child: const Column(
                        children: [
                          FilterHeaderComponent(),
                          FilterDataComponent(),
                        ],
                      ),
                    ),
                  ),
                ),
                bottomNavigationBar: FilterActionComponent(
                  visible: state.status.isSuccess,
                  onClear: () {
                    context.read<MTradeFilterCubit>().clearFilter();
                  },
                  onApply: () {
                    context.read<MTradeFilterCubit>().submit(
                      onSuccess: () {
                        Navigator.of(context).pop(true);
                      },
                      onFailure: (message) {
                        DialogProvider.instance.showMTradeErrorDialog(
                          context: context,
                          title: "Thất bại",
                          message: message,
                        );
                      },
                    );
                  },
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}
