import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/utils/format_util.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/styles.dart';
import '../../../../../common/text_input_formatter/currency_input_formatter.dart';
import '../../../../../common/utils/text_util.dart';
import '../../../cubit/filter/mtrade_filter_cubit.dart';

class FilterPriceTextField extends StatefulWidget {
  const FilterPriceTextField({
    Key? key,
    required this.index,
    required this.initValue,
    required this.hintText,
    required this.onChanged,
  }) : super(key: key);

  final int index;
  final String initValue;
  final String hintText;
  final Function(String value) onChanged;

  @override
  State<FilterPriceTextField> createState() => _FilterPriceTextFieldState();
}

class _FilterPriceTextFieldState extends State<FilterPriceTextField> {
  late final TextEditingController controller;

  @override
  void initState() {
    super.initState();
    controller = TextEditingController(
      text: _parseInitValue(widget.initValue),
    );
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  void didUpdateWidget(covariant FilterPriceTextField oldWidget) {
    if (!context.read<MTradeFilterCubit>().state.isInputtingPrice) {
      var value = TextUtils.parseInt(widget.initValue) ?? 0;
      controller.text = value <= 0 ? "" : FormatUtil.currencyFormat(value, showUnit: false);
    }
    super.didUpdateWidget(oldWidget);
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<MTradeFilterCubit, MTradeFilterState>(
      listenWhen: (pre, cur) {
        return pre.clearPriceInput != true && cur.clearPriceInput == true;
      },
      listener: (context, state) {
        if (state.clearPriceInput == true) {
          controller.clear();
        }
      },
      child: SizedBox(
        height: 40,
        child: TextField(
          controller: controller,
          cursorWidth: 2,
          cursorHeight: 25,
          cursorColor: UIColors.primaryColor,
          enableInteractiveSelection: false,
          cursorRadius: const Radius.circular(1),
          style: UITextStyle.medium.copyWith(
            fontSize: 16,
          ),
          keyboardType: TextInputType.number,
          inputFormatters: [
            FilteringTextInputFormatter.digitsOnly,
            CurrencyInputFormatter(0, enableReplacedMax: false),
          ],
          onChanged: widget.onChanged,
          decoration: InputDecoration(
            filled: true,
            fillColor: UIColors.white,
            hintText: widget.hintText,
            hintStyle: UITextStyle.regular.copyWith(
              fontSize: 14,
              height: 1.5,
              color: UIColors.grayText,
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(
                color: UIColors.lightGray,
              ),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(
                color: UIColors.lightGray,
              ),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(
                color: UIColors.primaryColor,
              ),
            ),
            contentPadding: const EdgeInsets.symmetric(
              horizontal: 12,
            ),
          ),
        ),
      ),
    );
  }

  String _parseInitValue(String value) {
    String result = "";
    RegExp regex = RegExp(r'\d');
    if (regex.hasMatch(value)) {
      int? parser = int.tryParse(value);
      if (parser != null) {
        result = FormatUtil.currencyFormat(parser, showUnit: false);
      }
    }
    return result;
  }
}
