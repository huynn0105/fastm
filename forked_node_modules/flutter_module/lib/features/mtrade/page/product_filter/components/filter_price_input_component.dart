import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../../../../common/extension/list_extension.dart';
import '../../../cubit/filter/mtrade_filter_cubit.dart';
import '../../../../../common/colors.dart';
import '../../../../../models/mtrade/filter/mtrade_input_price_model.dart';

import '../widgets/price_text_filed.dart';

class FilterPriceInputComponent extends StatelessWidget {
  const FilterPriceInputComponent({
    Key? key,
    required this.keyword,
    required this.inputs,
    required this.isTypingPrice,
  }) : super(key: key);

  final String keyword;
  final List<MTradeInputPriceModel> inputs;
  final bool isTypingPrice;

  @override
  Widget build(BuildContext context) {
    const int crossAxisCount = 2;
    final selectedFilters = context.select((MTradeFilterCubit cubit) => cubit.state.selectedFilters);
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Column(
        children: List.generate(
          _columnLength(inputs.length, crossAxisCount) * 2 - 1,
          (columnIndex) {
            if (columnIndex.isOdd) {
              return const SizedBox(
                height: 8,
              );
            }
            columnIndex = columnIndex ~/ 2;
            return Row(
              children: List.generate(
                (crossAxisCount * 2) - 1,
                (rowIndex) {
                  final rowNum = rowIndex + 1;
                  if (rowNum % 2 == 0) {
                    return Container(
                      width: 24,
                      height: 2,
                      margin: const EdgeInsets.symmetric(horizontal: 8),
                      decoration: BoxDecoration(
                        color: UIColors.lightGray,
                        borderRadius: BorderRadius.circular(3),
                      ),
                    );
                  }
                  final rowItemIndex = ((rowNum + 1) ~/ 2) - 1;
                  final itemIndex = (columnIndex * crossAxisCount) + rowItemIndex;
                  if (itemIndex > inputs.length - 1) {
                    return const Expanded(child: SizedBox());
                  }
                  final item = inputs[itemIndex];
                  return Expanded(
                    child: FilterPriceTextField(
                      index: itemIndex,
                      initValue: selectedFilters[keyword].valueAt(0)?.listCode.valueAt(itemIndex) ?? "",
                      hintText: item.placeholder ?? "",
                      onChanged: (value) {
                        context.read<MTradeFilterCubit>().updatePriceInput(
                              keyword: keyword,
                              index: itemIndex,
                              value: value.replaceAll(".", ""),
                            );
                      },
                    ),
                  );
                },
              ),
            );
          },
        ),
      ),
    );
  }

  _columnLength(int itemCount, int crossAxisCount) {
    if (itemCount % crossAxisCount == 0) {
      return itemCount ~/ crossAxisCount;
    } else {
      return (itemCount ~/ crossAxisCount) + 1;
    }
  }
}
