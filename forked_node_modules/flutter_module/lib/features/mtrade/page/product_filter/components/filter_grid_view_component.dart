import 'dart:math';

import 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/widgets/expandable_column.dart';
import '../items/expandable_footer.dart';
import '../../../../../common/extension/list_extension.dart';
import '../../../../../common/constants.dart';
import '../widgets/filter_group_block.dart';
import '../../../../../models/mtrade/filter/mtrade_filter_model.dart';
import '../../../cubit/filter/mtrade_filter_cubit.dart';
import '../items/selector_item.dart';

class FilterGridViewComponent extends StatelessWidget {
  const FilterGridViewComponent({
    Key? key,
    required this.data,
    required this.keyword,
    required this.showPriceInput,
    required this.showLastItemFullScreen,
  }) : super(key: key);

  final List<MTradeFilterModel> data;
  final String keyword;
  final bool showPriceInput;
  final bool showLastItemFullScreen;

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<MTradeFilterCubit>();
    final selectedFilters = context.select((MTradeFilterCubit cubit) => cubit.state.selectedFilters);
    final subgroup = context.select((MTradeFilterCubit cubit) => cubit.state.selectedSubGroup)?[keyword];
    final sublist = subgroup?.list ?? [];
    return Column(
      children: [
        ExpandableColumn(
          showExpand: data.length > 4 && !showPriceInput,
          padding: EdgeInsets.zero,
          borderRadius: BorderRadius.zero,
          backgroundColor: UIColors.background,
          builder: (context, expanded) {
            final length = expanded ? data.length : min(data.length, 4);
            final crossAxisCount = !showPriceInput ? 2 : 4;
            return StaggeredGrid.count(
              crossAxisCount: crossAxisCount,
              mainAxisSpacing: 8,
              crossAxisSpacing: 8,
              axisDirection: AxisDirection.down,
              children: List.generate(
                length,
                (index) {
                  final item = data[index];
                  final code = item.code ?? "";
                  final prices = item.price ?? [];
                  final selected = keyword == "price"
                      ? listEquals(prices, selectedFilters[keyword]?.valueAt(0)?.listCode ?? [])
                      : selectedFilters[keyword]?.map((e) => e.code).toList().contains(code) == true;

                  int crossAxisCellCount =
                      !showPriceInput ? (index == data.length - 1 && showLastItemFullScreen && index.isEven ? 2 : 1) : 1;

                  ///
                  return StaggeredGridTile.fit(
                    crossAxisCellCount: crossAxisCellCount,
                    child: SelectorItem(
                      title: "${item.name}",
                      isSelected: selected,
                      onTap: () {
                        FocusManager.instance.primaryFocus?.unfocus();
                        if (keyword == "price") {
                          cubit
                            ..clearPriceInput()
                            ..selectPrice(
                              index: index,
                              keyword: keyword,
                              name: item.name ?? '',
                              prices: prices,
                            );
                          return;
                        }
                        cubit.selectGroup(
                          keyword: keyword,
                          code: code,
                          name: item.name ?? '',
                          index: index,
                        );
                      },
                    ),
                  );
                },
              ),
            );
            // return AlignedGridView.count(
            //   shrinkWrap: true,
            //   physics: const NeverScrollableScrollPhysics(),
            //   crossAxisCount: showPriceInput ? 4 : 2,
            //   crossAxisSpacing: 8,
            //   mainAxisSpacing: 8,
            //   itemBuilder: (context, index) {
            //     final item = data[index];
            //     final code = item.code ?? "";
            //     final prices = item.price ?? [];
            //     final selected = keyword == "price"
            //         ? listEquals(prices, selectedFilters[keyword]?.valueAt(0)?.listCode ?? [])
            //         : selectedFilters[keyword]?.map((e) => e.code).toList().contains(code) == true;
            //
            //     //
            //     return SelectorItem(
            //       title: "${item.name}",
            //       isSelected: selected,
            //       onTap: () {
            //         FocusManager.instance.primaryFocus?.unfocus();
            //         if (keyword == "price") {
            //           cubit
            //             ..clearPriceInput()
            //             ..selectPrice(
            //               index: index,
            //               keyword: keyword,
            //               name: item.name ?? '',
            //               prices: prices,
            //             );
            //           return;
            //         }
            //         cubit.selectGroup(
            //           keyword: keyword,
            //           code: code,
            //           name: item.name ?? '',
            //           index: index,
            //         );
            //       },
            //     );
            //   },
            //   itemCount: length,
            // );
          },
          footer: (context, expanded, controller) {
            return ExpandableFooter(
              expanded: expanded,
              onTap: controller.toggle,
            );
          },
        ),
        if (sublist.isNotEmpty)
          const Padding(
            padding: EdgeInsets.symmetric(vertical: 16),
            child: Divider(
              height: 0,
            ),
          ),
        AnimatedSize(
          duration: AppConstants.duration,
          alignment: Alignment.topCenter,
          child: Visibility(
            visible: sublist.isNotEmpty,
            child: FilterGroupBlock(
              title: "${subgroup?.title}",
              padding: EdgeInsets.zero,
              child: ExpandableColumn(
                showExpand: sublist.length > 4 && !showPriceInput,
                padding: EdgeInsets.zero,
                borderRadius: BorderRadius.zero,
                backgroundColor: UIColors.background,
                builder: (context, expanded) {
                  final length = expanded ? sublist.length : min(sublist.length, 4);
                  final crossAxisCount = !showPriceInput ? 2 : 4;

                  return StaggeredGrid.count(
                    crossAxisCount: crossAxisCount,
                    mainAxisSpacing: 8,
                    crossAxisSpacing: 8,
                    axisDirection: AxisDirection.down,
                    children: List.generate(
                      length,
                      (index) {
                        final item = sublist[index];
                        final code = item.code ?? "";
                        final subKeyword = subgroup?.keyword ?? "";
                        final selected = selectedFilters[subKeyword]?.map((e) => e.code).contains(code) == true;

                        ///
                        int crossAxisCellCount =
                            !showPriceInput ? (index == data.length - 1 && showLastItemFullScreen && index.isEven ? 2 : 1) : 1;

                        ///
                        return StaggeredGridTile.fit(
                          crossAxisCellCount: crossAxisCellCount,
                          child: SelectorItem(
                            title: "${item.name}",
                            isSelected: selected,
                            onTap: () {
                              cubit.selectSubGroup(
                                keyword: subKeyword,
                                code: code,
                                name: item.name ?? '',
                                parentKeyword: keyword,
                                index: index,
                              );
                            },
                          ),
                        );
                      },
                    ),
                  );
                  // return AlignedGridView.count(
                  //   shrinkWrap: true,
                  //   physics: const NeverScrollableScrollPhysics(),
                  //   crossAxisCount: showPriceInput ? 4 : 2,
                  //   crossAxisSpacing: 8,
                  //   mainAxisSpacing: 8,
                  //   itemBuilder: (context, index) {
                  //     final item = sublist[index];
                  //     final code = item.code ?? "";
                  //     final subKeyword = subgroup?.keyword ?? "";
                  //     final selected = selectedFilters[subKeyword]?.map((e) => e.code).contains(code) == true;
                  //
                  //     //
                  //     return SelectorItem(
                  //       title: "${item.name}",
                  //       isSelected: selected,
                  //       onTap: () {
                  //         cubit.selectSubGroup(
                  //           keyword: subKeyword,
                  //           code: code,
                  //           name: item.name ?? '',
                  //           parentKeyword: keyword,
                  //           index: index,
                  //         );
                  //       },
                  //     );
                  //   },
                  //   itemCount: length,
                  // );
                },
                footer: (context, expanded, controller) {
                  return ExpandableFooter(
                    expanded: expanded,
                    onTap: controller.toggle,
                  );
                },
              ),
            ),
          ),
        ),
      ],
    );
  }
}
