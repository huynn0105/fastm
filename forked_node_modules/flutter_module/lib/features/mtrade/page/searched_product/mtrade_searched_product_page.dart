import 'dart:async';

import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/widgets/app_scaffold.dart';
import 'package:flutter_module/common/widgets/widget_layout.dart';

import '../../../../app_data.dart';
import '../../../../common/event_bus/event_bus.dart';
import '../../../../common/utils/redirect_util.dart';
import '../../../../common/widgets/appbar.dart';
import '../../../../di/get_it.dart';
import '../../../../general_config.dart';
import '../../cubit/filter/mtrade_filter_cubit.dart';
import '../../cubit/searched_product/mtrade_searched_product_cubit.dart';
import 'components/filter_path_component.dart';
import 'components/search_bar_component.dart';
import 'components/searched_product_component.dart';

@RoutePage()
class MTradeSearchedProductPage extends StatefulWidget implements AutoRouteWrapper {
  const MTradeSearchedProductPage({
    Key? key,
    this.title = "Bán hàng trả chậm",
    this.query,
    this.group,
    @QueryParam("pageID") this.pageID,
    @QueryParam("provinceCode") this.provinceCode,
    @QueryParam("districtCode") this.districtCode,
  }) : super(key: key);

  final String title;
  final String? query;
  final String? group;
  final String? pageID;
  final String? provinceCode;
  final String? districtCode;

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (_) => MTradeSearchedProductCubit(),
      child: this,
    );
  }

  @override
  State<MTradeSearchedProductPage> createState() => _MTradeSearchedProductPageState();
}

class _MTradeSearchedProductPageState extends State<MTradeSearchedProductPage> {
  late final TextEditingController _searchController;
  late final StreamSubscription _subscription;

  @override
  void initState() {
    super.initState();
    _searchController = TextEditingController(
      text: widget.query ?? "",
    );
    _subscription = eventBus.on<MTradeRefreshByUpdateDeliverySupportEventBus>().listen((_) {
      onListen(context);
    });
    WidgetsBinding.instance.addPostFrameCallback((_) {
      onInitSearch(context);
    });
  }

  @override
  void dispose() {
    getItInstance.get<MTradeFilterCubit>().clearFilter();
    _searchController.dispose();
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AppScaffold(
      appBar: MFastAdvanceAppBar(
        context: context,
        title: widget.title,
        onHome: () {
          RedirectUtil.backToMFast();
        },
      ),
      body: Column(
        children: [
          WidgetLayout(
            child: SearchBarComponent(
              controller: _searchController,
            ),
          ),
          ValueListenableBuilder(
            valueListenable: _searchController,
            builder: (context, value, child) {
              final query = value.text;
              return WidgetLayout(
                child: FilterPathComponent(
                  query: query,
                ),
              );
            },
          ),
          const SearchedProductComponent(),
        ],
      ),
    );
  }

  onInitSearch(BuildContext context) {
    final cubit = context.read<MTradeSearchedProductCubit>();

    final filter = context.read<MTradeFilterCubit>().convertFilters();

    final provinceCode = AppData.instance.deliverySupportProvinceCode;
    final districtCode = AppData.instance.deliverySupportDistrictCode;
    final wardCode = AppData.instance.deliverySupportWardCode;

    cubit
      ..updatePayloadFromFilter(filter)
      ..updatePayload(
        group: widget.group,
        productName: widget.query,
        provinceCode: provinceCode,
        districtCode: districtCode,
        wardCode: wardCode,
      )
      ..fetchData();
  }

  onListen(BuildContext context) {
    final provinceCode = AppData.instance.deliverySupportProvinceCode;
    final districtCode = AppData.instance.deliverySupportDistrictCode;
    final wardCode = AppData.instance.deliverySupportWardCode;

    context.read<MTradeSearchedProductCubit>()
      ..updatePayload(
        provinceCode: provinceCode,
        districtCode: districtCode,
        wardCode: wardCode,
      )
      ..fetchData();
  }
}
