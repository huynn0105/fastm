import 'package:auto_route/auto_route.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/mtrade/cubit/searched_product/mtrade_searched_product_cubit.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/items/product_card.dart';

import '../../../../../app_data.dart';
import '../../../../../common/utils/redirect_util.dart';
import '../../../../../common/widgets/buttons.dart';
import '../../../../../common/widgets/empty_widget.dart';
import '../../../../../common/widgets/nested_scrollview.dart';
import '../../../../../models/mtrade/product/mtrade_product_model.dart';
import '../../../../../routes/routes.gr.dart';

class SearchedProductComponent extends StatefulWidget {
  const SearchedProductComponent({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() {
    return _SearchedProductState();
  }
}

class _SearchedProductState extends State<SearchedProductComponent> {
  @override
  Widget build(BuildContext context) {
    final cubit = context.read<MTradeSearchedProductCubit>();
    return BlocBuilder<MTradeSearchedProductCubit, MTradeSearchedProductState>(
      builder: (context, state) {
        if (state.status.showLoading) {
          return const Expanded(
            child: LoadingWidget(),
          );
        }

        final data = state.products;

        return Expanded(
          child: data.isEmpty
              ? Column(
                  children: [
                    const EmptyWidget(),
                    const SizedBox(
                      height: 10,
                    ),
                    PrimaryButton(
                      onPressed: () {
                        if (kIsWeb) {
                          context.router.replaceAll([
                            MTradeProductRoute(
                              pageID: AppData.instance.landingPageID,
                              provinceCode: AppData.instance.landingPageProvinceCode,
                              districtCode: AppData.instance.landingPageDistrictCode,
                            )
                          ]);
                        } else {
                          RedirectUtil.backToMTradeRoot();
                        }
                      },
                      title: "Tiếp tục mua hàng",
                    ),
                  ],
                )
              : LayoutBuilder(
                  builder: (BuildContext context, BoxConstraints constraints) {
                    final double layoutMaxWidth = constraints.maxWidth > AppConstants.responsiveSize
                        ? AppConstants.responsiveSize
                        : constraints.maxWidth;
                    final EdgeInsets padding = kIsWeb
                        ? EdgeInsets.symmetric(
                            horizontal: constraints.maxWidth >= AppConstants.responsiveSize
                                ? (constraints.maxWidth - AppConstants.responsiveSize + 24) / 2
                                : 12,
                          )
                        : const EdgeInsets.symmetric(horizontal: 12);
                    final double layoutWidth = (layoutMaxWidth - 36) / 2;
                    const double layoutHeight = 280;
                    return AppNestedScrollView<MTradeProductModel>(
                      onRefresh: cubit.refreshData,
                      source: cubit.productsSource,
                      padding: padding.copyWith(bottom: 100),
                      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: 2,
                        crossAxisSpacing: 8,
                        mainAxisSpacing: 12,
                        childAspectRatio: layoutWidth / layoutHeight,
                      ),
                      itemBuilder: (BuildContext context, item, int index) {
                        return ProductCard.normal(
                          width: layoutWidth,
                          data: (item as MTradeProductModel),
                        );
                      },
                    );
                  },
                ),
        );
      },
    );
  }
}
