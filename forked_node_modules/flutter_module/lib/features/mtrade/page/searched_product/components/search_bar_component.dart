import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/routes/routes.gr.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/styles.dart';
import '../../../../../common/widgets/images.dart';
import '../../../cubit/filter/mtrade_filter_cubit.dart';
import '../../../cubit/searched_product/mtrade_searched_product_cubit.dart';
import '../../mtrade/components/delivery_support/delivery_support_button.dart';
import '../../mtrade/components/filter_button.dart';
import '../../mtrade/widgets/mtrade_text_field.dart';

class SearchBarComponent extends StatelessWidget {
  const SearchBarComponent({
    Key? key,
    required this.controller,
  }) : super(key: key);

  final TextEditingController controller;

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 40,
      color: UIColors.background,
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: Row(
        children: [
          Expanded(
            child: MTradeSearchTextField(
              controller: controller,
              hintText: "Tìm kiếm",
              readOnly: true,
              autoClear: false,
              showClearButton: controller.text.isNotEmpty,
              onCleared: () {
                // onSearch(context, isClearedText: true);
                context.popRoute();
              },
              onTap: () {
                onSearch(context);
              },
            ),
          ),
          const SizedBox(
            width: 16,
          ),
          const MTradeDeliverySupportButton(),
          const SizedBox(
            width: 16,
          ),
          MTradeFilterButton(
            onTap: () {
              onFilter(context);
            },
          ),
        ],
      ),
    );
  }

  onSearch(BuildContext context, {bool isClearedText = false}) async {
    final cubit = context.read<MTradeSearchedProductCubit>();

    final value = await context.pushRoute(
      MTradeSearchRoute(
        query: isClearedText ? "" : controller.text,
        forceRouterPop: true,
      ),
    );

    if (value is String) {
      controller.text = value;
      cubit
        ..updatePayload(productName: value)
        ..fetchData();
    }
  }

  onFilter(BuildContext context) async {
    final cubit = context.read<MTradeSearchedProductCubit>();

    final filter = getItInstance.get<MTradeFilterCubit>().convertFilters();

    cubit
      ..updatePayloadFromFilter(filter)
      ..fetchData();
  }
}
