import 'dart:io';

import 'package:flutter_module/models/master_data/master_data_model.dart';
import 'package:flutter_module/models/mtrade/bonus/mtrade_bonus_model.dart';
import 'package:flutter_module/models/mtrade/cart/mtrade_cart_product_model.dart';
import 'package:flutter_module/models/mtrade/config/mtrade_config_model.dart';
import 'package:flutter_module/models/mtrade/filter/mtrade_filter_group_model.dart';
import 'package:flutter_module/models/mtrade/link_brochure/mtrade_link_brochure_model.dart';
import 'package:flutter_module/models/mtrade/my_review/mtrade_filter_my_review_model.dart';
import 'package:flutter_module/models/mtrade/my_review/mtrade_my_review_model.dart';
import 'package:flutter_module/models/mtrade/order/mtrade_order_model.dart';
import 'package:flutter_module/models/mtrade/order/mtrade_order_payment_method_model.dart';
import 'package:flutter_module/models/mtrade/order/mtrade_order_detail_model.dart';
import 'package:flutter_module/models/mtrade/pay_later/mtrade_pay_later_info_model.dart';
import 'package:flutter_module/models/mtrade/personal_link_setup/mtrade_personal_link_setup_model.dart';
import 'package:flutter_module/models/mtrade/personal_website_setup/mtrade_personal_website_setup_model.dart';
import 'package:flutter_module/models/mtrade/personal_website_statistic/mtrade_personal_website_statistic_model.dart';
import 'package:flutter_module/models/mtrade/product/mtrade_brochure_product_model.dart';
import 'package:flutter_module/models/mtrade/product_detail/mtrade_product_detail_model.dart';
import 'package:flutter_module/models/mtrade/product_detail/mtrade_sku_detail_model.dart';
import 'package:flutter_module/models/mtrade/product_group/mtrade_special_group_model.dart';
import 'package:flutter_module/models/mtrade/promotion/mtrade_promotion_model.dart';
import 'package:flutter_module/models/mtrade/request_otp/request_otp_model.dart';
import 'package:flutter_module/models/mtrade/review/mtrade_select_user_review_model.dart';
import 'package:flutter_module/models/mtrade/review/mtrade_status_review_model.dart';
import 'package:flutter_module/models/mtrade/tools/mtrade_tools_model.dart';
import 'package:flutter_module/services/api/api_provider.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_brochure_product_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_check_promotion_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_collaborator_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_consent_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_event_personal_website_statistic_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_get_pay_later_info_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_my_review_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_order_detail_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_order_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_order_payment_method_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_pay_now_order_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_personal_link_setup_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_personal_website_statistic_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_request_otp_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_review_user_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_search_order_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_personal_website_setup_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_search_promotion_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_send_brochure_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_tracking_agent_payload.dart';
import 'package:flutter_module/services/api/mtrade/payload/mtrade_verify_otp_payload.dart';

import '../../../models/base_model.dart';
import '../../../models/general_object.dart';
import '../../../models/master_data/time_frame_model.dart';
import '../../../models/mtrade/banner/mtrade_banner_model.dart';
import '../../../models/mtrade/bonus/mtrade_indirect_bonus_model.dart';
import '../../../models/mtrade/campaign/campaign_model.dart';
import '../../../models/mtrade/check_project_code/check_project_code_model.dart';
import '../../../models/mtrade/collaborator/mtrade_collaborator_model.dart';
import '../../../models/mtrade/order/mtrade_order_price_model.dart';
import '../../../models/mtrade/order/mtrade_pay_now_order_model.dart';
import '../../../models/mtrade/order/mtrade_searched_order_model.dart';
import '../../../models/mtrade/pay_later/mtrade_gen_mpl_token_model.dart';
import '../../../models/mtrade/pay_later/mtrade_gen_product_token_model.dart';
import '../../../models/mtrade/pay_later/mtrade_pre_screen_data.dart';
import '../../../models/mtrade/personal_website_setup/mtrade_contact_method_model.dart';
import '../../../models/mtrade/product/mtrade_product_model.dart';
import '../../../models/mtrade/product_detail/product_location_support_model.dart';
import '../../../models/mtrade/product_group/mtrade_product_group_model.dart';
import '../../../models/mtrade/promotion/data_product_variations_model.dart';
import '../../../services/api/mtrade/payload/check_product_stock_payload.dart';
import '../../../services/api/mtrade/payload/get_payment_method_url_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_bonus_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_cart_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_category_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_check_product_support_location_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_gen_mpl_token_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_gen_product_token_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_mpl_location_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_order_price_by_sku_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_personal_website_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_pre_screen_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_product_detail_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_product_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_promotion_product_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_request_paylater_confirm_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_request_paylater_otp_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_sku_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_suggested_product_payload.dart';

class MTradeProductRepository {
  Future<BaseModel<MTradeProductGroupModel>> getListProductGroup({required MTradeCategoryPayload payload}) {
    return ApiProvider.instance.mtrade.getListProductGroup(payload: payload);
  }

  Future<BaseModel<List<MTradeSpecialGroupModel>>> getListSpecialCategory() {
    return ApiProvider.instance.mtrade.getListSpecialCategory();
  }

  Future<BaseModel<List<MTradeBannerModel>>> getListBanner() => ApiProvider.instance.mtrade.getListBanner();

  Future<BaseModel<List<MTradeProductModel>>> getFilterProducts({
    required MTradeProductPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getFilterProducts(payload: payload);
  }

  Future<BaseModel<MTradeProductDetailModel>> getProductDetail({
    required MTradeProductDetailPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getProductDetail(payload: payload);
  }

  Future<BaseModel<List<String>>> getFilterSuggestion({
    required String productName,
  }) {
    return ApiProvider.instance.mtrade.getFilterSuggestion(productName: productName);
  }

  Future<BaseModel<List<MTradeFilterGroupModel>>> getListFilter() {
    return ApiProvider.instance.mtrade.getListFilter();
  }

  Future<BaseModel<List<MTradeCartProductModel>>> getListCart({
    required int page,
  }) {
    return ApiProvider.instance.mtrade.getListCart(page: page);
  }

  Future<BaseModel<bool>> createCartItem({
    required MTradeCartPayload payload,
  }) {
    return ApiProvider.instance.mtrade.createCartItem(payload: payload);
  }

  Future<BaseModel<bool>> deleteCartItem({
    required MTradeCartPayload payload,
  }) {
    return ApiProvider.instance.mtrade.deleteCartItem(payload: payload);
  }

  Future<BaseModel<List<MasterDataModel>>> getDeliveryLocation({
    required String type,
    required String code,
  }) {
    return ApiProvider.instance.mtrade.getDeliveryLocation(type: type, code: code);
  }

  Future<BaseModel<List<MasterDataModel>>> getFastDeliveryLocation({
    required List<String>? productGroup,
  }) {
    return ApiProvider.instance.mtrade.getFastDeliveryLocation(productGroup: productGroup);
  }

  Future<BaseModel<MTradeSkuDetailModel>> getSkuDetailByOption({
    required MTradeSkuPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getSkuDetailByOption(payload: payload);
  }

  Future<BaseModel<MTradeOrderPriceModel>> getOrderPriceBySKU({
    required MTradeOrderPriceBySkuPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getOrderPriceBySKU(payload: payload);
  }

  Future<BaseModel<MTradePayNowOrderModel>> submitPayNowOrder({
    required MTradePayNowOrderPayload payload,
  }) {
    return ApiProvider.instance.mtrade.submitPayNowOrder(payload: payload);
  }

  Future<BaseModel<MTradeBonusModel>> getMTradeBonus({
    required MTradeBonusPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getMTradeBonus(payload: payload);
  }

  Future<BaseModel<List<MTradeIndirectBonusModel>>> getIndirectBonus({
    required MTradeBonusPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getIndirectBonus(payload: payload);
  }

  Future<BaseModel<MTradeCollaboratorModel>> getDetailCollaborator({
    required MTradeCollaboratorPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getDetailCollaborator(payload: payload);
  }

  Future<BaseModel<MTradeOrderModel>> getListOrderProcessState({
    required MTradeOrderPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getListOrderProcessState(payload: payload);
  }

  Future<BaseModel<List<MTradeBrochureProductModel>>> getBrochureProduct({
    required MTradeBrochureProductPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getBrochureProduct(payload: payload);
  }

  Future<BaseModel<MTradeCheckProjectCodeModel>> checkProjectCode() {
    return ApiProvider.instance.mtrade.checkProjectCode();
  }

  Future<BaseModel<MTradeConfigModel>> getConfigs() {
    return ApiProvider.instance.mtrade.getConfigs();
  }

  Future<BaseModel<ProductLocationSupportModel>> checkProductLocationSupport({
    required MtradeCheckProductSupportLocationPayload payload,
  }) {
    return ApiProvider.instance.mtrade.checkProductLocationSupport(payload: payload);
  }

  Future<BaseModel<bool>> sendBrochure({
    required MTradeSendBrochurePayload payload,
  }) {
    return ApiProvider.instance.mtrade.sendBrochure(payload: payload);
  }

  Future<BaseModel<MTradeOrderPaymentMethodModel>> getListOrderPaymentMethod({
    required MTradeOrderPaymentMethodPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getListOrderPaymentMethod(payload: payload);
  }

  Future<BaseModel<MTradeOrderDetailModel>> getOrderDetail({
    required MTradeOrderDetailPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getOrderDetail(payload: payload);
  }

  Future<BaseModel<MTradePreScreenDataModel>> getPreScreenData({
    required MTradePreScreenDataPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getPreScreenData(payload: payload);
  }

  Future<BaseModel<MTradeGenProductTokenModel>> genProductToken({
    required MTradeGenProductTokenPayload payload,
  }) {
    return ApiProvider.instance.mtrade.genProductToken(payload: payload);
  }

  Future<BaseModel<MTradeGenMplTokenModel>> genMplToken({
    required MTradeGenMplTokenPayload payload,
  }) {
    return ApiProvider.instance.mtrade.genMplToken(payload: payload);
  }

  Future<BaseModel<List<GeneralObject>>> getMplLocation({
    required MTradeMplLocationPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getMplLocation(payload: payload);
  }

  Future<BaseModel<List<MTradeProductModel>>> getSuggestedProducts({
    required MTradeSuggestedProductPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getSuggestedProducts(payload: payload);
  }

  Future<BaseModel<MTradeSearchOrderModel>> searchOrder({
    required MTradeSearchOrderPayload payload,
  }) {
    return ApiProvider.instance.mtrade.searchOrder(payload: payload);
  }

  Future<BaseModel<String>> uploadImageFromFile(File? file) => ApiProvider.instance.shipper.uploadImageFromFile(file);

  Future<BaseModel<MTradeToolsModel>> getTools() {
    return ApiProvider.instance.mtrade.getTools();
  }

  Future<BaseModel<MTradePersonalWebsiteSetupModel>> getPersonalWebsiteSetup({
    required MTradePersonalWebsiteDataPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getPersonalWebsiteSetup(payload: payload);
  }

  Future<BaseModel<MTradePersonalWebsiteSetupModel>> savePersonalWebsiteSetup({
    required MTradePersonalWebsiteSetupPayload payload,
  }) {
    return ApiProvider.instance.mtrade.savePersonalWebsiteSetup(payload: payload);
  }

  Future<BaseModel<MTradeContactMethodModel>> getLandingPageContactMethods() {
    return ApiProvider.instance.mtrade.getLandingPageContactMethods();
  }

  Future<BaseModel<RequestOTPModel>> requestPayLaterOtp({
    required MTradeRequestPayLaterOtpPayload payload,
  }) {
    return ApiProvider.instance.mtrade.requestPayLaterOtp(payload: payload);
  }

  Future<BaseModel<String>> requestPayLaterConfirm({
    required MTradeRequestPayLaterConfirmPayload payload,
  }) {
    return ApiProvider.instance.mtrade.requestPayLaterConfirm(payload: payload);
  }

  Future<BaseModel<bool>> checkProductStock({
    required CheckProductStockPayload payload,
  }) {
    return ApiProvider.instance.mtrade.checkProductStock(payload: payload);
  }

  Future<BaseModel<bool>> trackingAgent({
    required MTradeTrackingAgentPayload payload,
  }) {
    return ApiProvider.instance.mtrade.trackingAgent(payload: payload);
  }

  Future<BaseModel<List<DataProductVariationsModel>>> searchPromotion({
    required MTradeSearchPromotionPayload payload,
  }) {
    return ApiProvider.instance.mtrade.searchPromotion(payload: payload);
  }

  Future<BaseModel<List<MTradePromotionModel>>> getPromotionProduct({
    required MTradePromotionProductPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getPromotionProduct(payload: payload);
  }

  Future<BaseModel<List<DataProductVariationsModel>>> checkPromotion({
    required MTradeCheckPromotionPayload payload,
  }) {
    return ApiProvider.instance.mtrade.checkPromotion(payload: payload);
  }

  Future<BaseModel<MTradePayLaterInfoModel>> getPayLaterInfo({
    required MTradeGetPayLaterInfoPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getPayLaterInfo(payload: payload);
  }

  Future<BaseModel<MTradeMyReviewModel>> getListMyReview({
    required MTradeMyReviewPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getListMyReview(payload: payload);
  }

  Future<BaseModel<MTradeFilterMyReviewModel>> getFilterMyReview() {
    return ApiProvider.instance.mtrade.getFilterMyReview();
  }

  Future<BaseModel<MTradePersonalLinkSetupModel>> getPersonalLinkSetup() {
    return ApiProvider.instance.mtrade.getPersonalLinkSetup();
  }

  Future<BaseModel<bool>> updatePersonalLinkSetup({
    required MTradePersonalLinkSetupPayload payload,
  }) {
    return ApiProvider.instance.mtrade.updatePersonalLinkSetup(payload: payload);
  }

  Future<BaseModel<List<MTradeSelectUserReviewModel>>> getListSelectUserReview({
    required String appID,
  }) {
    return ApiProvider.instance.mtrade.getListSelectUserReview(appID: appID);
  }

  Future<BaseModel<MTradeStatusReviewModel>> getStatusReview() {
    return ApiProvider.instance.mtrade.getStatusReview();
  }

  Future<BaseModel<bool>> reviewUser({
    required MTradeReviewUserPayload payload,
  }) {
    return ApiProvider.instance.mtrade.reviewUser(payload: payload);
  }

  Future<BaseModel<MTradeLinkBrochureModel>> getDataLinkBrochure({
    required String ID,
  }) {
    return ApiProvider.instance.mtrade.getDataLinkBrochure(ID: ID);
  }

  Future<BaseModel<bool>> sendDataLinkBrochureToEmail({
    required String ID,
    required String email,
  }) {
    return ApiProvider.instance.mtrade.sendDataLinkBrochureToEmail(ID: ID, email: email);
  }

  Future<BaseModel<bool>> sendEventPersonalWebsiteStatistic({
    required MTradeEventPersonalWebsiteStatisticPayload payload,
  }) {
    return ApiProvider.instance.mtrade.sendEventPersonalWebsiteStatistic(payload: payload);
  }

  Future<BaseModel<MTradePersonalWebsiteStatisticModel>> getPersonalWebsiteStatistic({
    required MTradePersonalWebsiteStatisticPayload payload,
  }) {
    return ApiProvider.instance.mtrade.getPersonalWebsiteStatistic(payload: payload);
  }

  Future<BaseModel<String>> requestPayLaterDAAMTrade({
    required MTradeRequestPayLaterConfirmPayload payload,
  }) {
    return ApiProvider.instance.mtrade.requestPayLaterDAAMTrade(payload: payload);
  }

  Future<BaseModel<RequestOTPModel>> requestOTP({
    required MTradeRequestOTPPayload payload,
  }) {
    return ApiProvider.instance.mtrade.requestOTP(payload: payload);
  }

  Future<BaseModel<bool>> verifyOTP({
    required MTradeVerifyOTPPayload payload,
  }) {
    return ApiProvider.instance.mtrade.verifyOTP(payload: payload);
  }

  Future<BaseModel<bool>> saveConsent({
    required MTradeConsentPayload payload,
  }) {
    return ApiProvider.instance.mtrade.saveConsent(payload: payload);
  }

  Future<BaseModel<bool>> requestEmailOTP({
    required String email,
  }) {
    return ApiProvider.instance.mtrade.requestEmailOTP(email: email);
  }

  Future<BaseModel<bool>> verifyEmailOTP({
    required String email,
    required String otpCode,
  }) {
    return ApiProvider.instance.mtrade.verifyEmailOTP(email: email, otpCode: otpCode);
  }

  Future<BaseModel<List<MTradeFilterGroupModel>>> getOrderFilters() {
    return ApiProvider.instance.mtrade.getOrderFilters();
  }

  Future<BaseModel<String>> getPaymentMethodUrl(GetPaymentMethodUrlPayload payload) {
    return ApiProvider.instance.mtrade.getPaymentMethodUrl(payload);
  }

  Future<BaseModel<List<TimeFrameModel>>> getDeliveryTimeFrame() {
    return ApiProvider.instance.mtrade.getDeliveryTimeFrame();
  }

  Future<BaseModel<CampaignModel>> getCampaignEvent() {
    return ApiProvider.instance.mtrade.getCampaignEvent();
  }
}
