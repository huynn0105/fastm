import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/models/otp/email_otp_model.dart';
import 'package:flutter_module/models/personal_setting/login_history_model.dart';
import 'package:flutter_module/models/personal_setting/personal_setting_model.dart';
import 'package:flutter_module/models/user/referral_info_model.dart';
import 'package:flutter_module/models/user/user_delete_model.dart';
import 'package:flutter_module/models/user/user_info_model.dart';
import 'package:flutter_module/models/user/user_meta_data_model.dart';
import 'package:flutter_module/services/api/api_provider.dart';
import 'package:flutter_module/services/api/authentication/payload/delete_account_payload.dart';
import 'package:flutter_module/services/api/user/payload/check_duplicate_email_payload.dart';
import 'package:flutter_module/services/api/user/payload/check_duplicate_nick_name_payload.dart';
import 'package:flutter_module/services/api/user/payload/create_pass_code_payload.dart';
import 'package:flutter_module/services/api/user/payload/get_login_history_payload.dart';
import 'package:flutter_module/services/api/user/payload/request_email_otp_payload.dart';
import 'package:flutter_module/services/api/user/payload/update_user_meta_data_payload.dart';
import 'package:flutter_module/services/api/user/payload/update_user_payload.dart';
import 'package:flutter_module/services/api/user/payload/verify_email_otp_payload.dart';

import '../../../models/mtrade/request_otp/request_otp_model.dart';
import '../../../services/api/mtrade/payload/mtrade_request_otp_payload.dart';
import '../../../services/api/mtrade/payload/mtrade_verify_otp_payload.dart';

class UserRepository {
  Future<BaseModel<bool>> updateFirebaseUser({
    required String userID,
    required UserInfoModel user,
  }) {
    return ApiProvider.instance.chat.updateUser(userID: userID, user: user);
  }

  Future<BaseModel<UserInfoModel>> getUserInfo() {
    return ApiProvider.instance.user.getUserInfo();
  }

  Future<BaseModel<UserMetaDataModel>> getUserMetaData() {
    return ApiProvider.instance.user.getUserMetaData();
  }

  Future<BaseModel<bool>> checkDuplicateNickName({
    required CheckDuplicateNickNamePayload payload,
  }) {
    return ApiProvider.instance.user.checkDuplicateNickName(payload: payload);
  }

  Future<BaseModel<bool>> checkDuplicateEmail({
    required CheckDuplicateEmailPayload payload,
  }) {
    return ApiProvider.instance.user.checkDuplicateEmail(payload: payload);
  }

  Future<BaseModel<UserMetaDataModel>> updateUserMetaData({
    required UpdateUserMetaDataPayload payload,
  }) {
    return ApiProvider.instance.user.updateUserMetaData(payload: payload);
  }

  Future<BaseModel<RequestEmailOTPModel>> requestEmailOTP({
    required RequestEmailOTPPayload payload,
  }) {
    return ApiProvider.instance.user.requestEmailOTP(payload: payload);
  }

  Future<BaseModel<void>> verifyEmailOTP({
    required VerifyEmailOTPPayload payload,
  }) {
    return ApiProvider.instance.user.verifyEmailOTP(payload: payload);
  }

  Future<BaseModel<List<LoginHistoryModel>>> getLoginHistory({
    required GetLoginHistoryPayload payload,
  }) {
    return ApiProvider.instance.user.getLoginHistory(payload: payload);
  }

  Future<BaseModel<ReferralInfoModel>> getReferralInfo() {
    return ApiProvider.instance.user.getReferralInfo();
  }

  Future<BaseModel<bool>> updateUser({
    required UpdateUserPayload payload,
  }) {
    return ApiProvider.instance.user.updateUser(payload: payload);
  }

  Future<BaseModel<bool>> createPassCode({
    required CreatePassCodePayload payload,
  }) {
    return ApiProvider.instance.user.createPassCode(payload: payload);
  }

  Future<BaseModel<RequestOTPModel>> requestOTP({
    required MTradeRequestOTPPayload payload,
  }) {
    return ApiProvider.instance.mtrade.requestOTP(payload: payload);
  }

  Future<BaseModel<bool>> verifyOTP({
    required MTradeVerifyOTPPayload payload,
  }) {
    return ApiProvider.instance.mtrade.verifyOTP(payload: payload);
  }

  Future<BaseModel<bool>> checkUsePassCode(String mobilePhone) {
    return ApiProvider.instance.user.checkUsePassCode(mobilePhone);
  }

  Future<BaseModel<bool>> changeUsePassCode(int status) {
    return ApiProvider.instance.user.changeUsePassCode(status);
  }

  Future<BaseModel<UserDeleteModel>> getUserDelete() {
    return ApiProvider.instance.user.getUserDelete();
  }

  Future<BaseModel<bool>> deleteAccount(DeleteAccountPayload payload) {
    return ApiProvider.instance.user.deleteAccount(payload);
  }

  Future<BaseModel<bool>> cancelDeleteAccount() {
    return ApiProvider.instance.user.cancelDeleteAccount();
  }

  Future<BaseModel<List<PersonalSettingModel>>> getPersonalSetting() {
    return ApiProvider.instance.personalSetting.getPersonalSetting();
  }
}
