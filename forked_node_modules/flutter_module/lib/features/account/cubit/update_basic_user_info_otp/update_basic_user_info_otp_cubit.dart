import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/features/account/repository/user_repository.dart';
import 'package:flutter_module/models/otp/email_otp_model.dart';
import 'package:flutter_module/services/api/user/payload/request_email_otp_payload.dart';
import 'package:flutter_module/services/api/user/payload/verify_email_otp_payload.dart';

import '../../../../common/bloc_status.dart';
import '../../../../common/constants.dart';
import '../../../../common/enum/error_code_type.dart';
import '../../../../models/user/user_info_model.dart';

part 'update_basic_user_info_otp_state.dart';

class UpdateBasicUserInfoOTPCubit extends Cubit<UpdateBasicUserInfoOTPState> {
  UpdateBasicUserInfoOTPCubit() : super(UpdateBasicUserInfoOTPState());

  final _repository = UserRepository();

  requestOTP({
    required String email,
    bool isRetry = false,
  }) async {
    emit(state.copyWith(requestedOtp: true));
    final result = await _repository.requestEmailOTP(
      payload: RequestEmailOTPPayload(
        email: email,
      ),
    );
    emit(state.copyWith(otpModel: result.data));
  }

  otpChange(String text) {
    state.errorFields.removeWhere((key, value) => key == AppConstants.otpKey);
    validateData();
  }

  validateData() {
    emit(state.copyWith(completeStatus: BlocStatus.initial));
  }

  verifyOTP({
    required String email,
    required String otpCode,
    Function(String?, UserInfoModel?)? onSuccess,
  }) async {
    emit(state.copyWith(completeStatus: BlocStatus.loading));
    final result = await _repository.verifyEmailOTP(
      payload: VerifyEmailOTPPayload(
        email: email,
        otpCode: otpCode,
      ),
    );
    if (result.status) {
      emit(state.copyWith(completeStatus: BlocStatus.success));
    } else {
      handleError(result.errorCode, result.errorMessage);
    }
  }

  handleError(String? errorCode, String? errorMessage) {
    if (errorCode == ErrorCodeType.wrongOtp.value) {
      state.errorFields[AppConstants.otpKey] = errorMessage ?? '';
      emit(state.copyWith(completeStatus: BlocStatus.failure));
    } else {
      emit(state.copyWith(completeStatus: BlocStatus.failure, errorMsg: errorMessage));
    }
  }
}
