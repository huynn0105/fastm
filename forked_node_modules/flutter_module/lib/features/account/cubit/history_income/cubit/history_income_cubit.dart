import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/enum/income/history_income_type.dart';
import 'package:flutter_module/features/account/repository/income_repository.dart';
import 'package:flutter_module/models/income/history_income_item_model.dart';
import 'package:flutter_module/models/income/history_income_model.dart';
import 'package:flutter_module/services/api/income/payload/history_income_payload.dart';
import 'package:scroll_to_index/scroll_to_index.dart';

part 'history_income_state.dart';

class HistoryIncomeCubit extends Cubit<HistoryIncomeState> {
  HistoryIncomeCubit() : super(const HistoryIncomeState());

  final IncomeRepository _repository = IncomeRepository();

  final AutoScrollController autoScrollController = AutoScrollController();

  GetHistoryIncomePayload _payload = GetHistoryIncomePayload();

  fetchData({
    bool showLoading = true,
    bool loadMore = false,
  }) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    _updatePayload(page: loadMore ? (_payload.page ?? 1) + 1 : 1);

    final result = await _repository.getHistoryIncome(_payload);

    if (result.status) {
      var data = result.data?.list ?? [];
      if (loadMore) {
        data = [...state.data, ...data];
      }
      emit(state.copyWith(
        status: BlocStatus.success,
        data: data,
        historyData: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  refreshData() async {
    await fetchData(showLoading: false);
  }

  loadMoreData() async {
    final length = state.data.length;
    await fetchData(showLoading: false, loadMore: true);
    return length != state.data.length;
  }

  _updatePayload({
    int? page,
    int? month,
    int? year,
    String? filter,
  }) {
    _payload = _payload.copyWith(
      page: page,
      month: month,
      year: year,
      filter: filter,
    );
  }

  updateDate({required DateTime date}) {
    _updatePayload(
      month: date.month,
      year: date.year,
    );
  }

  updateType({required HistoryIncomeType type}) {
    _updatePayload(
      filter: type.code,
    );
    emit(state.copyWith(
      type: type,
    ));
  }

  @override
  Future<void> close() {
    autoScrollController.dispose();
    return super.close();
  }
}
