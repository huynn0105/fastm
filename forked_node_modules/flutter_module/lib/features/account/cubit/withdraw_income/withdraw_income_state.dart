part of 'withdraw_income_cubit.dart';

class WithdrawIncomeState extends Equatable {
  const WithdrawIncomeState({
    this.status = BlocStatus.initial,
    this.checkStatus = BlocStatus.initial,
    this.feeStatus = BlocStatus.initial,
    this.errorFields = const {},
    this.errorMessage,
    this.withdrawInfo,
    this.checkWithdrawInfo,
    this.transactionBankID,
    this.transactionMoney,
    this.transactionFee,
    this.enabledNextStep = true,
  });

  final BlocStatus status;
  final BlocStatus checkStatus;
  final BlocStatus feeStatus;
  final Map<String, String> errorFields;
  final String? errorMessage;
  final WithdrawInfoModel? withdrawInfo;
  final CheckWithdrawInfoModel? checkWithdrawInfo;
  final String? transactionBankID;
  final double? transactionMoney;
  final double? transactionFee;
  final bool enabledNextStep;

  @override
  List<Object?> get props => [
        status,
        checkStatus,
        feeStatus,
        errorFields,
        errorMessage,
        withdrawInfo,
        checkWithdrawInfo,
        transactionBankID,
        transactionMoney,
        transactionFee,
        enabledNextStep,
      ];

  double get minTransactionMoney => 30000;
  List<double> get defaultTransactionMoneyList => const [50000, 100000, 200000, 500000, 1000000];

  WithdrawIncomeState copyWith({
    BlocStatus? status,
    BlocStatus? checkStatus,
    BlocStatus? feeStatus,
    Map<String, String>? errorFields,
    String? errorMessage,
    WithdrawInfoModel? withdrawInfo,
    CheckWithdrawInfoModel? checkWithdrawInfo,
    String? transactionBankID,
    double? transactionMoney,
    double? transactionFee,
    bool? enabledNextStep,
    bool? clear,
  }) {
    return WithdrawIncomeState(
      status: status ?? this.status,
      checkStatus: checkStatus ?? this.checkStatus,
      feeStatus: checkStatus ?? this.feeStatus,
      errorFields: errorFields ?? this.errorFields,
      errorMessage: errorMessage,
      withdrawInfo: withdrawInfo ?? this.withdrawInfo,
      checkWithdrawInfo: checkWithdrawInfo ?? this.checkWithdrawInfo,
      transactionBankID: (clear == true) ? null : transactionBankID ?? this.transactionBankID,
      transactionMoney: (clear == true) ? null : transactionMoney ?? this.transactionMoney,
      transactionFee: (clear == true) ? null : transactionFee ?? this.transactionFee,
      enabledNextStep: enabledNextStep ?? this.enabledNextStep,
    );
  }
}

enum WithdrawIncomeFields {
  money,
  bank,
}
