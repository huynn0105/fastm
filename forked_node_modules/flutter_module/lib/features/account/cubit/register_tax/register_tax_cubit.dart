import 'package:bloc/bloc.dart';
import 'package:ekyc/common/bloc_status.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/utils/validation_util.dart';
import 'package:flutter_module/features/mfast/repository/mfast_repository.dart';
import 'package:flutter_module/services/api/mfast/payload/mfast_get_list_province_payload.dart';
import 'package:flutter_module/services/api/mfast/payload/mfast_register_tax_payload.dart';

part 'register_tax_state.dart';

class RegisterTaxCubit extends Cubit<RegisterTaxState> {
  RegisterTaxCubit() : super(const RegisterTaxState());
  final MFastRepository _repository = MFastRepository();
  final TextEditingController permanentProvinceController = TextEditingController();
  final TextEditingController permanentDistrictController = TextEditingController();
  final TextEditingController permanentWardController = TextEditingController();
  final TextEditingController permanentAddressController = TextEditingController();
  final TextEditingController temporaryProvinceController = TextEditingController();
  final TextEditingController temporaryDistrictController = TextEditingController();
  final TextEditingController temporaryWardController = TextEditingController();
  final TextEditingController temporaryAddressController = TextEditingController();
  final TextEditingController phoneNumberController = TextEditingController();
  final TextEditingController emailController = TextEditingController();

  getListProvince() async {
    emit(state.copyWith(
      provinceStatus: BlocStatus.loading,
    ));

    final result = await _repository.getListProvince(MFastGetListProvincePayload(
      type: "province",
    ));
    if (result.status) {
      emit(state.copyWith(
        provinceStatus: BlocStatus.success,
        listProvince: result.data,
      ));
    } else {
      emit(state.copyWith(
        provinceStatus: BlocStatus.failure,
      ));
    }
  }

  getListDistrict(String code) async {
    emit(state.copyWith(
      districtStatus: BlocStatus.loading,
    ));

    final result = await _repository.getListProvince(MFastGetListProvincePayload(
      type: "district",
      code: code,
    ));
    if (result.status) {
      emit(state.copyWith(
        districtStatus: BlocStatus.success,
        listDistrict: result.data,
      ));
    } else {
      emit(state.copyWith(
        districtStatus: BlocStatus.failure,
      ));
    }
  }

  getListWard(String code) async {
    emit(state.copyWith(
      wardStatus: BlocStatus.loading,
    ));

    final result = await _repository.getListProvince(MFastGetListProvincePayload(
      type: "ward",
      code: code,
    ));
    if (result.status) {
      emit(state.copyWith(
        wardStatus: BlocStatus.success,
        listWard: result.data,
      ));
    } else {
      emit(state.copyWith(
        wardStatus: BlocStatus.failure,
      ));
    }
  }

  updateSelect({
    String? permanentProvinceId,
    String? permanentDistrictId,
    String? permanentWardId,
    String? temporaryProvinceId,
    String? temporaryDistrictId,
    String? temporaryWardId,
  }) {
    emit(state.copyWith(
      permanentProvinceId: permanentProvinceId,
      permanentDistrictId: permanentDistrictId,
      permanentWardId: permanentWardId,
      temporaryProvinceId: temporaryProvinceId,
      temporaryDistrictId: temporaryDistrictId,
      temporaryWardId: temporaryWardId,
    ));
  }

  bool validInput() {
    Map<String, String> errors = {};

    if (TextUtils.isEmpty(state.permanentProvinceId)) {
      errors["permanentProvince"] = "Thông tin này là bắt buộc";
    }
    if (TextUtils.isEmpty(state.permanentDistrictId)) {
      errors["permanentDistrict"] = "Thông tin này là bắt buộc";
    }
    if (TextUtils.isEmpty(state.permanentWardId)) {
      errors["permanentWard"] = "Thông tin này là bắt buộc";
    }
    if (TextUtils.isEmpty(permanentAddressController.text)) {
      errors["permanentAddress"] = "Thông tin này là bắt buộc";
    }
    if (TextUtils.isEmpty(state.temporaryProvinceId)) {
      errors["temporaryProvince"] = "Thông tin này là bắt buộc";
    }
    if (TextUtils.isEmpty(state.temporaryDistrictId)) {
      errors["temporaryDistrict"] = "Thông tin này là bắt buộc";
    }
    if (TextUtils.isEmpty(state.temporaryWardId)) {
      errors["temporaryWard"] = "Thông tin này là bắt buộc";
    }
    if (TextUtils.isEmpty(temporaryAddressController.text)) {
      errors["temporaryAddress"] = "Thông tin này là bắt buộc";
    }
    if (TextUtils.isEmpty(phoneNumberController.text)) {
      errors["phoneNumber"] = "Thông tin này là bắt buộc";
    } else if (PhoneInputValidation.dirty(
      value: phoneNumberController.text,
    ).isNotValid) {
      errors["phoneNumber"] = "Số điện thoại không hợp lệ";
    }
    if (TextUtils.isEmpty(emailController.text)) {
      errors["email"] = "Thông tin này là bắt buộc";
    } else if (EmailInputValidation.dirty(value: emailController.text).isNotValid) {
      errors["email"] = "Email không hợp lệ";
    }

    emit(state.copyWith(errors: errors));

    return errors.isEmpty;
  }

  registerTax() async {
    final isValid = validInput();
    if (!isValid) return;

    emit(state.copyWith(
      status: BlocStatus.loading,
    ));
    final payload = MFastRegisterTaxPayload(
      homeProvince: state.permanentProvinceId,
      homeDistrict: state.permanentDistrictId,
      homeWard: state.permanentWardId,
      homeAddress: permanentAddressController.text,
      currentProvince: state.temporaryProvinceId,
      currentDistrict: state.temporaryDistrictId,
      currentWard: state.temporaryWardId,
      currentAddress: temporaryAddressController.text,
      mobilePhone: phoneNumberController.text,
      email: emailController.text,
    );
    final result = await _repository.registerTax(payload);

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
        errorMessage: result.errorMessage,
      ));
    }
  }
}
