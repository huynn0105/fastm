import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/enum/income/statistic_income_type.dart';
import 'package:flutter_module/common/utils/color_util.dart';
import 'package:flutter_module/common/widgets/chart/donut_chart/donut_chart_controller.dart';
import 'package:flutter_module/common/widgets/chart/donut_chart/donut_chart_data.dart';
import 'package:flutter_module/features/account/repository/income_repository.dart';
import 'package:flutter_module/models/income/statistic_income_model.dart';
import 'package:flutter_module/services/api/income/payload/export_statement_payload.dart';
import 'package:flutter_module/services/api/income/payload/get_statistice_income_payload.dart';

part 'statistic_income_state.dart';

class StatisticIncomeCubit extends Cubit<StatisticIncomeState> {
  StatisticIncomeCubit() : super(const StatisticIncomeState());

  final _repository = IncomeRepository();
  final chartController = DonutChartController();

  GetStatisticeIncomePayload _payload = GetStatisticeIncomePayload();

  fetchData({bool showLoading = true}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await _repository.getStatisticeIncome(_payload);

    await chartController.delay();

    if (result.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        data: result.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  _updatePayload({
    int? month,
    int? year,
  }) {
    _payload = _payload.copyWith(
      month: month,
      year: year,
    );
  }

  updateDatePayload({required DateTime date}) {
    _updatePayload(
      month: date.month,
      year: date.year,
    );
  }

  exportStatement({required ExportStatementPayload payload}) async {
    emit(state.copyWith(
      statementStatus: BlocStatus.loading,
    ));

    final result = await _repository.exportStatement(payload);

    if (result.status) {
      emit(state.copyWith(
        statementStatus: BlocStatus.success,
      ));
    } else {
      emit(state.copyWith(
        statementStatus: BlocStatus.failure,
        errorMessage: result.errorMessage,
      ));
    }
  }

  DonutChartData getDonutChartData({
    bool isCurrentMonth = true,
  }) {
    return DonutChartData.success(
      displayTotal: state.data?.getTotal() ?? 0,
      sections: [
        DonutChartSectionData(
          value: state.data?.availableBalance ?? 0,
          percent: state.data?.availableBalance ?? 0,
          label: StatisticIncomeType.availableBalance.name,
          color: ColorUtil.fromHex(StatisticIncomeType.availableBalance.color),
          unit: AppConstants.vndCurrencySymbol,
        ),
        DonutChartSectionData(
          value: state.data?.taxHolding ?? 0,
          percent: state.data?.taxHolding ?? 0,
          label: !isCurrentMonth ? 'Thuế TNCN đã thu >>' : StatisticIncomeType.taxHolding.name,
          color: ColorUtil.fromHex(StatisticIncomeType.taxHolding.color),
          unit: AppConstants.vndCurrencySymbol,
        ),
        DonutChartSectionData(
          value: state.data?.withdraw ?? 0,
          percent: state.data?.withdraw ?? 0,
          label: StatisticIncomeType.withdraw.name,
          color: ColorUtil.fromHex(StatisticIncomeType.withdraw.color),
          unit: AppConstants.vndCurrencySymbol,
        ),
        DonutChartSectionData(
          value: state.data?.payment ?? 0,
          percent: state.data?.payment ?? 0,
          label: StatisticIncomeType.payment.name,
          color: ColorUtil.fromHex(StatisticIncomeType.payment.color),
          unit: AppConstants.vndCurrencySymbol,
        ),
      ],
    );
  }

  @override
  Future<void> close() {
    chartController.dispose();
    return super.close();
  }
}
