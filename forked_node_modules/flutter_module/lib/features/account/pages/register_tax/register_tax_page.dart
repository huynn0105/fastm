import 'package:auto_route/auto_route.dart';
import 'package:ekyc/common/bloc_status.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/bottom_sheet/wrapper/data_wrapper.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/account/cubit/register_tax/register_tax_cubit.dart';
import 'package:flutter_module/features/account/cubit/user/user_cubit.dart';
import 'package:flutter_module/features/account/pages/register_tax/components/address_info_component.dart';
import 'package:flutter_module/features/account/pages/register_tax/components/other_info_component.dart';
import 'package:flutter_module/features/account/pages/register_tax/components/user_info_component.dart';

@RoutePage()
class RegisterTaxPage extends StatefulWidget implements AutoRouteWrapper {
  const RegisterTaxPage({super.key});

  @override
  State<RegisterTaxPage> createState() => _RegisterTaxPageState();
  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (context) {
        final cubit = RegisterTaxCubit();
        cubit.getListProvince();
        return cubit;
      },
      child: this,
    );
  }
}

class _RegisterTaxPageState extends State<RegisterTaxPage> {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      final userCubit = context.read<UserCubit>();
      final cubit = context.read<RegisterTaxCubit>();
      cubit.phoneNumberController.text = userCubit.state.userMetaData?.mobilePhone ?? "";
      cubit.emailController.text = userCubit.state.userMetaData?.emailAddress ?? "";
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: MFastSimpleAppBar(title: "Đăng ký tạo MST", context: context),
      body: BlocBuilder<UserCubit, UserState>(
        buildWhen: (previous, current) => previous.userMetaData != current.userMetaData,
        builder: (context, userState) {
          return BlocListener<RegisterTaxCubit, RegisterTaxState>(
            listener: (context, state) {
              if (state.status.isSuccess) {
                final userCubit = context.read<UserCubit>();
                userCubit.getUserMetaData();
                DialogProvider.instance.showMTradeDialog(
                  asset: "ic_mtrade_mascot_success",
                  context: context,
                  titleColor: UIColors.accentGreen,
                  title: "Đăng ký thành công",
                  message:
                      "Yêu cầu đăng ký tạo mã số thuế TNCN của bạn đã được ghi nhận, MFast sẽ kiểm tra và thông báo ngay khi có kết quả.",
                  positiveTitle: "Quay lại",
                  positiveCallback: () {
                    context.popRoute(true);
                  },
                );
                return;
              }
              if (state.status.isFailure) {
                DialogProvider.instance.showMTradeErrorDialog(
                  context: context,
                  title: "Đăng ký thất bại",
                  message: state.errorMessage ?? "Hệ thống đang bận, vui lòng thử lại.",
                );
                return;
              }
            },
            child: BlocBuilder<RegisterTaxCubit, RegisterTaxState>(
              builder: (context, state) {
                final cubit = context.read<RegisterTaxCubit>();
                return Stack(
                  children: [
                    ListView(
                      children: [
                        UserInfoComponent(
                          userMetaData: userState.userMetaData,
                        ),
                        const SizedBox(
                          height: 24,
                        ),
                        AddressInfoComponent(
                          title: "Địa chỉ đăng ký theo hộ khẩu",
                          provinceController: cubit.permanentProvinceController,
                          districtController: cubit.permanentDistrictController,
                          wardController: cubit.permanentWardController,
                          addressController: cubit.permanentAddressController,
                          provinceErrorMsg: state.errors["permanentProvince"],
                          districtErrorMsg: state.errors["permanentDistrict"],
                          wardErrorMsg: state.errors["permanentWard"],
                          addressErrorMsg: state.errors["permanentAddress"],
                          onTapProvince: () {
                            _onTapProvince(
                              context,
                              valueSelected: state.permanentProvinceId,
                              onSelect: (p0) {
                                cubit.updateSelect(permanentProvinceId: p0.id);
                                cubit.permanentProvinceController.text = p0.value ?? "";
                              },
                            );
                          },
                          onTapDistrict: () {
                            _onTapDistrict(
                              context,
                              provinceSelected: state.permanentProvinceId,
                              valueSelected: state.permanentDistrictId,
                              onSelect: (p0) {
                                cubit.updateSelect(permanentDistrictId: p0.id);
                                cubit.permanentDistrictController.text = p0.value ?? "";
                              },
                            );
                          },
                          onTapWard: () {
                            _onTapWard(
                              context,
                              districtSelected: state.permanentDistrictId,
                              valueSelected: state.permanentWardId,
                              onSelect: (p0) {
                                cubit.updateSelect(permanentWardId: p0.id);
                                cubit.permanentWardController.text = p0.value ?? "";
                              },
                            );
                          },
                          onChangeAddress: (value) {},
                        ),
                        const SizedBox(
                          height: 24,
                        ),
                        AddressInfoComponent(
                          title: "Địa chỉ nơi cư trú",
                          provinceController: cubit.temporaryProvinceController,
                          districtController: cubit.temporaryDistrictController,
                          wardController: cubit.temporaryWardController,
                          addressController: cubit.temporaryAddressController,
                          provinceErrorMsg: state.errors["temporaryProvince"],
                          districtErrorMsg: state.errors["temporaryDistrict"],
                          wardErrorMsg: state.errors["temporaryWard"],
                          addressErrorMsg: state.errors["temporaryAddress"],
                          onTapProvince: () {
                            _onTapProvince(
                              context,
                              valueSelected: state.temporaryProvinceId,
                              onSelect: (p0) {
                                cubit.updateSelect(temporaryProvinceId: p0.id);
                                cubit.temporaryProvinceController.text = p0.value ?? "";
                              },
                            );
                          },
                          onTapDistrict: () {
                            _onTapDistrict(
                              context,
                              provinceSelected: state.temporaryProvinceId,
                              valueSelected: state.temporaryDistrictId,
                              onSelect: (p0) {
                                cubit.updateSelect(temporaryDistrictId: p0.id);
                                cubit.temporaryDistrictController.text = p0.value ?? "";
                              },
                            );
                          },
                          onTapWard: () {
                            _onTapWard(
                              context,
                              districtSelected: state.temporaryDistrictId,
                              valueSelected: state.temporaryWardId,
                              onSelect: (p0) {
                                cubit.updateSelect(temporaryWardId: p0.id);
                                cubit.temporaryWardController.text = p0.value ?? "";
                              },
                            );
                          },
                          onChangeAddress: (value) {},
                        ),
                        const SizedBox(
                          height: 24,
                        ),
                        OtherInfoComponent(
                          title: "Thông tin khác",
                          phoneController: cubit.phoneNumberController,
                          emailController: cubit.emailController,
                          phoneNumberErrorMsg: state.errors["phoneNumber"],
                          emailErrorMsg: state.errors["email"],
                        ),
                        const SizedBox(
                          height: 24,
                        ),
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 16),
                          child: PrimaryButton(
                            title: "Yêu cầu đăng ký MST",
                            onPressed: () {
                              _onRegisterTax(context);
                            },
                          ),
                        ),
                      ],
                    ),
                    Visibility(
                      visible: state.provinceStatus.isLoading || state.status.isLoading,
                      child: const LoadingWidget.dark(),
                    ),
                  ],
                );
              },
            ),
          );
        },
      ),
    );
  }

  _onTapProvince(
    BuildContext context, {
    String? valueSelected,
    Function(DataWrapper)? onSelect,
  }) {
    final cubit = context.read<RegisterTaxCubit>();
    final listProvince = cubit.state.listProvince;
    BottomSheetProvider.instance
        .onShowSearchList(
      context,
      title: 'Chọn tỉnh/thành phố',
      selectedId: valueSelected ?? "",
      data: listProvince,
    )
        .then(
      (result) {
        if (result is DataWrapper) {
          onSelect?.call(result);
        }
      },
    );
  }

  _onTapDistrict(
    BuildContext context, {
    String? provinceSelected,
    String? valueSelected,
    Function(DataWrapper)? onSelect,
  }) async {
    if (TextUtils.isEmpty(provinceSelected)) {
      _onTapProvince(context);
      return;
    }
    final cubit = context.read<RegisterTaxCubit>();
    await cubit.getListDistrict(provinceSelected ?? "");
    if (!context.mounted) return;
    final listDistrict = cubit.state.listDistrict;
    BottomSheetProvider.instance
        .onShowSearchList(
      context,
      title: 'Chọn quận/huyện',
      selectedId: valueSelected ?? "",
      data: listDistrict,
    )
        .then(
      (result) {
        if (result is DataWrapper) {
          onSelect?.call(result);
        }
      },
    );
  }

  _onTapWard(
    BuildContext context, {
    String? districtSelected,
    String? valueSelected,
    Function(DataWrapper)? onSelect,
  }) async {
    if (TextUtils.isEmpty(districtSelected)) {
      _onTapDistrict(context);
      return;
    }
    final cubit = context.read<RegisterTaxCubit>();
    await cubit.getListWard(districtSelected ?? "");
    if (!context.mounted) return;
    final listWard = cubit.state.listWard;
    BottomSheetProvider.instance
        .onShowSearchList(
      context,
      title: 'Chọn phường/xã',
      selectedId: valueSelected ?? "",
      data: listWard,
    )
        .then(
      (result) {
        if (result is DataWrapper) {
          onSelect?.call(result);
        }
      },
    );
  }

  _onRegisterTax(BuildContext context) {
    final cubit = context.read<RegisterTaxCubit>();
    cubit.registerTax();
  }
}
