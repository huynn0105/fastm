import 'package:auto_route/auto_route.dart';
import 'package:extended_nested_scroll_view/extended_nested_scroll_view.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/enum/income/history_income_type.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/features/account/cubit/history_income/cubit/history_income_cubit.dart';
import 'package:flutter_module/features/account/cubit/statistic_income/statistic_income_cubit.dart';
import 'package:flutter_module/features/account/cubit/withdraw_income/withdraw_income_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/date_selection/mtrade_date_selection_cubit.dart';
import 'package:scroll_to_index/scroll_to_index.dart';

import '../../../../common/constants.dart';
import '../../../../common/widgets/appbar.dart';
import '../../../../common/widgets/tabbar/tabbar.dart';
import '../../../../routes/routes.gr.dart';
import 'components/chart_component.dart';

@RoutePage()
class IncomePage extends StatefulWidget implements AutoRouteWrapper {
  const IncomePage({
    Key? key,
    @QueryParam('initIndex') this.initIndex,
  }) : super(key: key);

  final String? initIndex;

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => MTradeDateSelectionCubit(),
        ),
        BlocProvider(
          create: (_) => StatisticIncomeCubit(),
        ),
        BlocProvider(
          create: (_) => HistoryIncomeCubit(),
        ),
        BlocProvider(
          create: (_) => WithdrawIncomeCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  State<IncomePage> createState() => _IncomePageState();
}

class _IncomePageState extends State<IncomePage> {
  TabController? _tabController;

  @override
  void dispose() {
    _tabController?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<StatisticIncomeCubit>();
    return Scaffold(
      appBar: MFastSimpleAppBar(
        title: "Thu nhập trong tháng",
        context: context,
      ),
      body: ExtendedNestedScrollView(
        onlyOneScrollInBody: true,
        physics: AppConstants.physics,
        headerSliverBuilder: (_, __) {
          return [
            SliverToBoxAdapter(
              child: ChartComponent(
                chartController: cubit.chartController,
              ),
            ),
          ];
        },
        body: AutoTabsRouter.tabBar(
          physics: AppConstants.physics,
          routes: [
            StatisticIncomeRoute(
              chartController: cubit.chartController,
              onHistoryTypeChanged: (type) => _onHistoryTypeChanged(context, type),
            ),
            const WithdrawIncomeRoute(),
            const HistoryIncomeRoute(),
          ],
          builder: (context, child, tabController) {
            _tabController ??= tabController;
            return Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const SizedBox(
                  height: 20,
                ),
                RoundedIndicatorTabbar(
                  controller: tabController,
                  margin: const EdgeInsets.symmetric(
                    horizontal: 40,
                  ),
                  titles: const [
                    "Thống kê",
                    "Rút tiền",
                    "Lịch sử",
                  ],
                  initIndex: TextUtils.parseInt(widget.initIndex),
                  onTap: (index) {
                    AutoTabsRouter.of(context).setActiveIndex(index);
                  },
                ),
                const SizedBox(
                  height: 20,
                ),
                Expanded(
                  child: child,
                ),
              ],
            );
          },
        ),
      ),
    );
  }

  _onHistoryTypeChanged(BuildContext context, HistoryIncomeType type) {
    _tabController?.animateTo(2);
    final historyCubit = context.read<HistoryIncomeCubit>();
    historyCubit.updateType(type: type);
    historyCubit.fetchData();
    historyCubit.autoScrollController.scrollToIndex(type.index, preferPosition: AutoScrollPosition.middle);
  }
}
