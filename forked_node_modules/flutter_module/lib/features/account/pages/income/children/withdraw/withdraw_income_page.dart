import 'package:auto_route/auto_route.dart';
import 'package:collection/collection.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/app_data.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/extension/list_extension.dart';
import 'package:flutter_module/common/global_function.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/utils/location_util.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/account/cubit/user/user_cubit.dart';
import 'package:flutter_module/features/account/cubit/withdraw_income/withdraw_income_cubit.dart';
import 'package:flutter_module/features/account/pages/income/children/withdraw/components/check_error_component.dart';
import 'package:flutter_module/features/account/pages/income/children/withdraw/components/ekyc_component.dart';
import 'package:flutter_module/routes/routes.gr.dart';
import 'package:url_launcher/url_launcher_string.dart';

import '../../../../../../common/colors.dart';
import '../../../../../../common/constants.dart';
import 'components/input_withdraw_component.dart';
import 'components/method_withdraw_component.dart';

@RoutePage()
class WithdrawIncomePage extends StatelessWidget {
  const WithdrawIncomePage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<WithdrawIncomeCubit>();
    return MultiBlocListener(
      listeners: [
        BlocListener<WithdrawIncomeCubit, WithdrawIncomeState>(
          listenWhen: (pre, cur) => cur.checkStatus != cur.checkStatus,
          listener: (context, state) {
            if (state.checkStatus.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: state.errorMessage,
              );
            }
          },
        ),
      ],
      child: BlocBuilder<WithdrawIncomeCubit, WithdrawIncomeState>(
        builder: (context, state) {
          if (state.status.isInitial) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              _onInit(context);
            });
          }

          final isAllowWithdraw = state.checkWithdrawInfo?.allowWithdrawal == true;
          final ekycInfo = state.checkWithdrawInfo?.errors?.firstWhereOrNull((e) => e.type == 'needKYC');
          final checkWithdrawErrors = state.checkWithdrawInfo?.errors ?? [];

          if (ekycInfo != null) {
            return EKYCIncomeComponent(
              message: ekycInfo.text,
            );
          }

          ///
          return Stack(
            children: [
              ListView(
                physics: AppConstants.physics,
                padding: const EdgeInsets.fromLTRB(16, 0, 16, 100),
                children: [
                  Visibility(
                    visible: checkWithdrawErrors.isNotEmpty,
                    child: Column(
                      children: [
                        ...List.generate(
                          checkWithdrawErrors.length,
                          (index) {
                            final item = checkWithdrawErrors[index];
                            return CheckErrorComponent(
                              html: item.html ?? '',
                            );
                          },
                        ),
                        const SizedBox(
                          height: 16,
                        ),
                      ],
                    ),
                  ),
                  Stack(
                    children: [
                      Column(
                        children: [
                          InputWithdrawComponent(
                            moneyController: cubit.moneyController,
                            availableBalance: state.withdrawInfo?.availabilityMoney ?? 0,
                            minWithdrawMoney: state.minTransactionMoney,
                            defaulMoneyList: state.defaultTransactionMoneyList,
                            onMoneyChanged: cubit.changeTransactionMoney,
                            onMoneySelected: cubit.selecteTransactionMoney,
                            errorMessage: state.errorFields[WithdrawIncomeFields.money.name],
                          ),
                          const SizedBox(
                            height: 24,
                          ),
                          MethodWithdrawComponent(
                            isLoading: state.status.isLoading,
                            data: state.withdrawInfo?.bankingPicked ?? [],
                            selectedBankID: state.transactionBankID,
                            isAllowWithdraw: isAllowWithdraw,
                            transactionMoney: state.transactionMoney,
                            transactoinFee: state.transactionFee,
                            onBankSelected: cubit.selectTransactionBank,
                            errorMessage: state.errorFields[WithdrawIncomeFields.bank.name],
                          ),
                          const SizedBox(
                            height: 24,
                          ),
                          PrimaryButton(
                            onPressed: () => _onSubmit(context),
                            enabled: state.enabledNextStep,
                            title: 'Tiếp tục',
                          ),
                          const SizedBox(
                            height: 16,
                          ),
                          RichText(
                            text: TextSpan(
                              style: UITextStyle.regular.copyWith(
                                fontSize: 13,
                                color: UIColors.grayText,
                              ),
                              children: [
                                const TextSpan(
                                  text: 'Chi tiết biểu phí rút tiền, ',
                                ),
                                TextSpan(
                                  text: 'xem tại đây',
                                  style: UITextStyle.semiBold.copyWith(
                                    fontSize: 13,
                                    color: UIColors.primaryColor,
                                  ),
                                  recognizer: TapGestureRecognizer()
                                    ..onTap = () {
                                      GlobalFunction.launchScheme(
                                        AppData.instance.appInfo.withdrawalFeeUrl ?? '',
                                        mode: LaunchMode.externalApplication,
                                      );
                                    },
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                      Visibility(
                        visible: !isAllowWithdraw,
                        child: Positioned.fill(
                          child: Container(
                            decoration: BoxDecoration(
                              color: UIColors.background.withOpacity(0.5),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
              Visibility(
                visible: state.status.isLoading || state.checkStatus.isLoading || state.feeStatus.isLoading,
                child: const LoadingWidget.dark(),
              ),
            ],
          );
        },
      ),
    );
  }

  void _onInit(BuildContext context) {
    final cubit = context.read<WithdrawIncomeCubit>();
    cubit.fetchData();
  }

  void _onSubmit(BuildContext context) async {
    final cubit = context.read<WithdrawIncomeCubit>();

    if (!cubit.validateAll()) {
      return;
    }

    final location = await LocationUtil.instance.getCurrentLocationRequire(context: context);

    if (location == null) {
      return;
    }

    if (!context.mounted) {
      return;
    }

    final phoneNumber = context.read<UserCubit>().state.userInfo?.mobilePhone ?? '';
    final transactionBankID = cubit.state.transactionBankID ?? '';
    final transactionMoney = cubit.state.transactionMoney?.toInt().toString() ?? '';

    final result = await context.router.push(
      WithdrawIncomeOTPRoute(
        phoneNumber: phoneNumber,
        transactionBankID: transactionBankID,
        transactionMoney: transactionMoney,
        latitude: location.latitude,
        longitude: location.longitude,
      ),
    );
    if (result is List) {
      final status = result.getFirst() ?? false;
      final message = result.getLast() ?? '';
      if (status) {
        cubit.checkWithdrawInfo();
        cubit.resetSelection();
        if (TextUtils.isNotEmpty(message) && context.mounted) {
          DialogProvider.instance.showMTradeDialog(
            context: context,
            showDottedDivider: false,
            asset: 'ic_mtrade_mascot_happy_waiting',
            message: message,
            positiveTitle: 'Đã hiểu',
            positiveCallback: () {},
          );
        }
      }
    }
  }
}
