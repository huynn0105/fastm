import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/utils/text_util.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/images.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/pin_code/pin_code_component.dart';
import 'package:flutter_module/features/account/cubit/withdraw_income_otp/withdraw_income_otp_cubit.dart';

@RoutePage()
class WithdrawIncomeOTPPage extends StatefulWidget implements AutoRouteWrapper {
  const WithdrawIncomeOTPPage({
    super.key,
    required this.phoneNumber,
    required this.transactionBankID,
    required this.transactionMoney,
    required this.latitude,
    required this.longitude,
  });

  final String phoneNumber;
  final String transactionBankID;
  final String transactionMoney;
  final double? latitude;
  final double? longitude;

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (_) => WithdrawIncomeOTPCubit(),
        ),
      ],
      child: this,
    );
  }

  @override
  State<WithdrawIncomeOTPPage> createState() => _WithdrawIncomeOTPPageState();
}

class _WithdrawIncomeOTPPageState extends State<WithdrawIncomeOTPPage> {
  String otpCode = '';

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<WithdrawIncomeOTPCubit>();
    return Scaffold(
      backgroundColor: UIColors.extraLightGray,
      body: MultiBlocListener(
        listeners: [
          BlocListener<WithdrawIncomeOTPCubit, WithdrawIncomeOTPState>(
            listener: (context, state) {
              if (state.completeStatus.isSuccess) {
                context.router.pop([true, state.errorMsg]);
              } else if (state.completeStatus.isFailure && TextUtils.isNotEmpty(state.errorMsg)) {
                DialogProvider.instance.showErrorMsgDialog(
                  context: context,
                  message: state.errorMsg,
                  btnTitle: 'Đóng',
                );
              }
            },
          ),
        ],
        child: BlocBuilder<WithdrawIncomeOTPCubit, WithdrawIncomeOTPState>(
          builder: (context, state) {
            if (!state.requestedOtp) {
              WidgetsBinding.instance.addPostFrameCallback((_) {
                cubit.requestOtp(phoneNumber: widget.phoneNumber);
              });
            }
            return Stack(
              children: [
                SafeArea(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          SplashButton(
                            onTap: context.router.pop,
                            child: Container(
                              margin: const EdgeInsets.only(left: 4),
                              padding: const EdgeInsets.all(12),
                              child: const AppImage.asset(
                                asset: "ic_arrow_left",
                                width: 24,
                                height: 24,
                                color: UIColors.grayText,
                              ),
                            ),
                          ),
                          const AppImage.asset(
                            asset: "ic_academy_mfast_logo",
                            width: 116,
                            height: 32,
                          ),
                          const SizedBox(
                            width: 52,
                          )
                        ],
                      ),
                      Container(
                        margin: const EdgeInsets.all(16),
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
                        decoration: BoxDecoration(color: UIColors.white, borderRadius: BorderRadius.circular(16)),
                        child: PinCodeComponent(
                          data: widget.phoneNumber,
                          allowRetryEmail: state.otpModel?.allowRetryEmail ?? false,
                          errorMsg: state.errorFields[AppConstants.otpKey],
                          onOtpChange: cubit.otpChange,
                          countdownTime: state.otpModel?.waitRetry ?? 60,
                          onComplete: (code) {
                            _onOTPCompleted(context, code);
                          },
                          onTapResendOption: (String option) {
                            cubit.requestOtp(phoneNumber: widget.phoneNumber, isRetry: true, type: option);
                          },
                        ),
                      ),
                    ],
                  ),
                ),
                Visibility(
                  visible: state.completeStatus.isLoading,
                  child: const LoadingWidget.dark(),
                ),
              ],
            );
          },
        ),
      ),
    );
  }

  void _onOTPCompleted(BuildContext context, String code) async {
    final cubit = context.read<WithdrawIncomeOTPCubit>();
    cubit.verifyOtp(
      otpCode: code,
      mobilePhone: widget.phoneNumber,
      transactionMoney: widget.transactionMoney,
      transactionBankID: widget.transactionBankID,
      latitude: widget.latitude,
      longitude: widget.longitude,
    );
  }
}
