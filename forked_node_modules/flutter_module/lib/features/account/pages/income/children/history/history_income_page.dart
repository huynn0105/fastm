import 'package:auto_route/annotations.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/constants.dart';
import 'package:flutter_module/common/enum/income/history_income_type.dart';
import 'package:flutter_module/common/widgets/empty_widget.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/loadmore_widget.dart';
import 'package:flutter_module/features/account/cubit/history_income/cubit/history_income_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/date_selection/mtrade_date_selection_cubit.dart';

import 'components/category_component.dart';
import 'components/history_component.dart';

@RoutePage()
class HistoryIncomePage extends StatelessWidget {
  const HistoryIncomePage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<MTradeDateSelectionCubit, MTradeDateSelectionState>(
          listener: (context, state) {
            _onDateChanged(context, state.date);
          },
        ),
      ],
      child: BlocBuilder<HistoryIncomeCubit, HistoryIncomeState>(
        builder: (context, state) {
          final cubit = context.read<HistoryIncomeCubit>();
          if (state.status.isInitial) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              _onInit(context);
            });
          }

          final data = state.data;
          final taxHolding = state.historyData?.taxHolding;
          return Stack(
            children: [
              Padding(
                padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
                child: LoadMoreWidget(
                  onRefresh: () => cubit.refreshData(),
                  onLoadMore: () => cubit.loadMoreData(),
                  child: CustomScrollView(
                    physics: AppConstants.physics,
                    slivers: [
                      CategoryComponent(
                        type: state.type,
                        onTypeChanged: (type) => _onTypeChanged(context, type),
                        autoScrollController: cubit.autoScrollController,
                      ),
                      if (data.isEmpty && !state.status.showLoading && taxHolding == null) ...[
                        SliverToBoxAdapter(
                          child: Container(
                            margin: const EdgeInsets.only(top: 24),
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: UIColors.white,
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: const EmptyWidget(
                              message: 'Chưa phát sinh giao dịch trong tháng',
                            ),
                          ),
                        ),
                      ] else ...[
                        HistoryComponent(
                          data: data,
                          taxHolding: taxHolding,
                        ),
                      ],
                    ],
                  ),
                ),
              ),
              Visibility(
                visible: state.status.isLoading,
                child: const LoadingWidget.dark(),
              ),
            ],
          );
        },
      ),
    );
  }

  void _onInit(BuildContext context) {
    final cubit = context.read<HistoryIncomeCubit>();
    final dateCubit = context.read<MTradeDateSelectionCubit>();
    cubit
      ..updateDate(date: dateCubit.state.date)
      ..fetchData();
  }

  void _onDateChanged(BuildContext context, DateTime date) {
    final cubit = context.read<HistoryIncomeCubit>();
    cubit
      ..updateDate(date: date)
      ..fetchData();
  }

  void _onTypeChanged(BuildContext context, HistoryIncomeType type) {
    final cubit = context.read<HistoryIncomeCubit>();
    cubit
      ..updateType(type: type)
      ..fetchData();
  }
}
