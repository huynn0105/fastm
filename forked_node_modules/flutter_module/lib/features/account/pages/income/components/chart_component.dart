import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/utils/debounce_util.dart';
import 'package:flutter_module/features/account/cubit/export_statement/export_statement_cubit.dart';
import 'package:flutter_module/features/account/cubit/statistic_income/statistic_income_cubit.dart';
import 'package:flutter_module/features/account/cubit/user/user_cubit.dart';
import 'package:flutter_module/features/account/pages/income/components/export_statement_component.dart';
import 'package:flutter_module/features/mtrade/cubit/date_selection/mtrade_date_selection_cubit.dart';
import 'package:flutter_module/features/mtrade/page/mtrade/children/order/components/date_selection_component.dart';
import 'package:flutter_module/services/api/income/payload/export_statement_payload.dart';

import '../../../../../common/colors.dart';
import '../../../../../common/utils/format_util.dart';
import '../../../../../common/widgets/chart/donut_chart/animated_donut_chart.dart';
import '../../../../../common/widgets/chart/donut_chart/donut_chart_controller.dart';
import '../../../../../common/widgets/images.dart';
import '../items/export_statement_button.dart';

class ChartComponent extends StatefulWidget {
  const ChartComponent({
    Key? key,
    required this.chartController,
  }) : super(key: key);

  final DonutChartController chartController;

  @override
  State<ChartComponent> createState() => _ChartComponentState();
}

class _ChartComponentState extends State<ChartComponent> {
  final DebounceUtil debounce = DebounceUtil(milliseconds: 200);

  @override
  void dispose() {
    debounce.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<StatisticIncomeCubit, StatisticIncomeState>(
          listener: (context, state) => _action(context),
        ),
        BlocListener<StatisticIncomeCubit, StatisticIncomeState>(
          listenWhen: (pre, cur) {
            return pre.statementStatus != cur.statementStatus;
          },
          listener: (context, state) {
            if (state.statementStatus.isSuccess) {
              ToastProvider.instance.showSuccess(
                context: context,
                message: 'Xuất sao kê thành công',
              );
            } else if (state.statementStatus.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: state.errorMessage,
              );
            }
          },
        ),
        BlocListener<MTradeDateSelectionCubit, MTradeDateSelectionState>(
          listener: (context, state) {
            debounce.run(() {
              _onDateChanged(context, state.date);
            });
          },
        ),
      ],
      child: BlocBuilder<StatisticIncomeCubit, StatisticIncomeState>(
        builder: (context, state) {
          if (state.status.isInitial) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              _onInit(context);
            });
          }

          ///
          return Container(
            width: double.infinity,
            padding: const EdgeInsets.symmetric(
              vertical: 12,
              horizontal: 16,
            ),
            decoration: const BoxDecoration(
              color: UIColors.white,
            ),
            child: Column(
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    DateSelectionComponent(
                      onDateChanged: (date) {},
                    ),
                    ExportStatementButton(
                      isLoading: state.statementStatus.isLoading,
                      onTap: () => _onExport(context),
                    ),
                  ],
                ),
                const SizedBox(
                  height: 8,
                ),
                Row(
                  children: [
                    AppImage.asset(
                      asset: "ic_white_logo_mfast",
                      width: 40,
                      height: 40,
                      color: UIColors.primaryColor.withOpacity(0.1),
                    ),
                    const SizedBox(
                      width: 16,
                    ),
                    Expanded(
                      child: AnimatedDonutChart(
                        controller: widget.chartController,
                        onDisplayTitle: (value) {
                          return FormatUtil.numberFormat(value, thousandSymbol: 'ng', millionSymbol: 'tr');
                        },
                        totalValue: state.data?.getTotal() ?? 0,
                        subtitle: "Tổng thu nhập",
                      ),
                    ),
                    const SizedBox(
                      width: 16,
                    ),
                    AppImage.asset(
                      asset: "ic_white_logo_mfast",
                      width: 40,
                      height: 40,
                      color: UIColors.primaryColor.withOpacity(0.1),
                    ),
                  ],
                ),
                const SizedBox(
                  height: 16,
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  void _onInit(BuildContext context) {
    final cubit = context.read<StatisticIncomeCubit>();
    final dateCubit = context.read<MTradeDateSelectionCubit>();
    cubit
      ..updateDatePayload(date: dateCubit.state.date)
      ..fetchData();
  }

  void _onDateChanged(BuildContext context, DateTime date) {
    final cubit = context.read<StatisticIncomeCubit>();
    cubit
      ..updateDatePayload(date: date)
      ..fetchData();
  }

  void _action(BuildContext context) async {
    final cubit = context.read<StatisticIncomeCubit>();
    final dateCubit = context.read<MTradeDateSelectionCubit>();
    final state = cubit.state;
    if (state.status.isLoading) {
      cubit.chartController.load();
      return;
    }
    if (state.status.isSuccess) {
      final isCurrentMonth = dateCubit.state.date.month == DateTime.now().month;
      final total = state.data?.getTotal() ?? 0;
      if (total <= 0) {
        cubit.chartController.empty();
        return;
      }
      cubit.chartController.show(data: cubit.getDonutChartData(isCurrentMonth: isCurrentMonth));
      return;
    }
    if (state.status.isFailure) {
      cubit.chartController.empty();
      return;
    }
  }

  void _onExport(BuildContext context) async {
    final cubit = context.read<StatisticIncomeCubit>();
    final email = context.read<UserCubit>().state.userMetaData?.emailAddress ?? "";
    final result = await BottomSheetProvider.instance.show(
      context,
      title: 'Xuất sao kê',
      child: BlocProvider(
        create: (_) => ExportStatementCubit()..initData(email: email),
        child: const ExportStatementComponent(),
      ),
    );
    if (result is ExportStatementPayload) {
      cubit.exportStatement(payload: result);
    }
  }
}
