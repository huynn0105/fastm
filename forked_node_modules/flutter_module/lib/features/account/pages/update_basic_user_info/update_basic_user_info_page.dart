import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/bottom_sheet/bottom_sheet_provider.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/dialogs/dialog_provider.dart';
import 'package:flutter_module/common/enum/mfast/gender_type.dart';
import 'package:flutter_module/common/enum/tracking_event_type.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/toast/toast_provider.dart';
import 'package:flutter_module/common/widgets/appbar.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/collect_data_view.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/common/widgets/radio.dart';
import 'package:flutter_module/common/widgets/textfields.dart';
import 'package:flutter_module/di/get_it.dart';
import 'package:flutter_module/features/account/cubit/update_basic_user_info/update_basic_user_info_cubit.dart';
import 'package:flutter_module/features/account/cubit/user/user_cubit.dart';
import 'package:flutter_module/features/app_cubit.dart';
import 'package:flutter_module/routes/routes.gr.dart';

@RoutePage()
class UpdateBasicUserInfoPage extends StatefulWidget implements AutoRouteWrapper {
  const UpdateBasicUserInfoPage({
    super.key,
  });

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      lazy: false,
      create: (_) => UpdateBasicUserInfoCubit(),
      child: this,
    );
  }

  @override
  State<UpdateBasicUserInfoPage> createState() => _UpdateBasicUserInfoPageState();
}

class _UpdateBasicUserInfoPageState extends State<UpdateBasicUserInfoPage> {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final userCubit = context.read<UserCubit>();
      final updateUserCubit = context.read<UpdateBasicUserInfoCubit>();
      updateUserCubit.onInit(userMetaData: userCubit.state.userMetaData);
    });
  }

  @override
  Widget build(BuildContext context) {
    final cubit = context.read<UpdateBasicUserInfoCubit>();
    return MultiBlocListener(
      listeners: [
        BlocListener<UpdateBasicUserInfoCubit, UpdateBasicUserInfoState>(
          listenWhen: (pre, cur) {
            return pre.submitStatus != cur.submitStatus;
          },
          listener: (context, state) {
            if (state.submitStatus.isSuccess) {
              getItInstance.get<AppCubit>().trackingEvent(event: TrackingEventType.updateMetadataBasic);
              if (state.isEmailUpdated) {
                context.router.replace(const UpdateEmailSuccessRoute());
                return;
              }
              ToastProvider.instance.show(
                context: context,
                message: 'Cập nhật thông tin thành công',
                backgroundColor: UIColors.green,
                duration: const Duration(seconds: 2),
              );
              context.router.pop();
            } else if (state.submitStatus.isFailure) {
              DialogProvider.instance.showMTradeErrorDialog(
                context: context,
                message: state.errorMessage,
              );
            }
          },
        ),
      ],
      child: Scaffold(
        appBar: MFastSimpleAppBar(
          context: context,
          title: 'Cập nhật thông tin cơ bản',
        ),
        body: BlocBuilder<UpdateBasicUserInfoCubit, UpdateBasicUserInfoState>(
          builder: (context, state) {
            return Stack(
              children: [
                ListView(
                  children: [
                    Container(
                      margin: const EdgeInsets.all(16),
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: UIColors.white,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Column(
                        children: [
                          CollectDataView(
                            errorMsg: state.errorFields[UpdateUserInfoField.gender.name],
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                RichText(
                                  text: TextSpan(
                                    children: [
                                      TextSpan(
                                        text: 'Giới tính',
                                        style: UITextStyle.regular.copyWith(
                                          fontSize: 13,
                                          color: UIColors.grayText,
                                        ),
                                      ),
                                      TextSpan(
                                        text: ' *',
                                        style: UITextStyle.regular.copyWith(
                                          fontSize: 13,
                                          color: UIColors.red,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                const SizedBox(
                                  height: 4,
                                ),
                                Row(
                                  children: [
                                    SplashButton(
                                      onTap: () => cubit.onChangedGender(GenderType.male),
                                      child: IgnorePointer(
                                        ignoring: true,
                                        child: AppRadio(
                                          title: 'Nam',
                                          value: state.gender?.isMale == true,
                                          onChanged: (value) {},
                                        ),
                                      ),
                                    ),
                                    const SizedBox(
                                      width: 16,
                                    ),
                                    SplashButton(
                                      onTap: () => cubit.onChangedGender(GenderType.female),
                                      child: IgnorePointer(
                                        ignoring: true,
                                        child: AppRadio(
                                          title: 'Nữ',
                                          value: state.gender?.isFemale == true,
                                          onChanged: (value) {},
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(
                            height: 16,
                          ),
                          CollectDataView(
                            errorMsg: state.errorFields[UpdateUserInfoField.email.name],
                            child: UITextField(
                              controller: cubit.emailController,
                              onChanged: cubit.onEmailChanged,
                              hintText: '',
                              labelText: 'Địa chỉ email',
                              hintTextStyle: UITextStyle.regular.copyWith(
                                fontSize: 13,
                                color: UIColors.grayText,
                              ),
                              keyboardType: TextInputType.emailAddress,
                            ),
                          ),
                          const SizedBox(
                            height: 16,
                          ),
                          CollectDataView(
                            errorMsg: state.errorFields[UpdateUserInfoField.contactAddress.name],
                            child: UITextField(
                              controller: cubit.contactAddressController,
                              onChanged: cubit.onContactAddressChanged,
                              hintText: '',
                              labelText: 'Địa chỉ liên hệ',
                              hintTextStyle: UITextStyle.regular.copyWith(
                                fontSize: 13,
                                color: UIColors.grayText,
                              ),
                              keyboardType: TextInputType.text,
                            ),
                          ),
                          const SizedBox(
                            height: 16,
                          ),
                          CollectDataView(
                            errorMsg: state.errorFields[UpdateUserInfoField.districtAddress.name],
                            child: SplashButton(
                              onTap: () => _onShowDistrictAddressSheet(context),
                              child: IgnorePointer(
                                ignoring: true,
                                child: UITextField.dropdown(
                                  controller: cubit.districtAddressController,
                                  enable: state.districtAddresses.isNotEmpty,
                                  hintText: '',
                                  labelText: 'Quận/Huyện - Tỉnh/Thành phố',
                                  hintTextStyle: UITextStyle.regular.copyWith(
                                    fontSize: 13,
                                    color: UIColors.grayText,
                                  ),
                                  readOnly: true,
                                  onTap: () {},
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.all(16),
                      child: PrimaryButton(
                        enabled: state.enabledNextStep,
                        width: double.infinity,
                        onPressed: () => _onSubmit(context),
                        title: 'Cập nhật',
                      ),
                    ),
                  ],
                ),
                Visibility(
                  visible: state.submitStatus.isLoading || state.checkDupEmailStatus.isLoading,
                  child: const LoadingWidget.dark(),
                ),
              ],
            );
          },
        ),
      ),
    );
  }

  _onShowDistrictAddressSheet(BuildContext context) async {
    FocusManager.instance.primaryFocus?.unfocus();

    ///
    final cubit = context.read<UpdateBasicUserInfoCubit>();
    final districts = cubit.state.districtAddresses;

    final result = await BottomSheetProvider.instance.onShowSearchList(
      context,
      title: 'Quận / Huyện',
      selectedId: cubit.districtAddressController.text,
      data: districts,
    );

    if (result != null) {
      cubit.onDistrictAddressChanged(result);
    }
  }

  _onSubmit(BuildContext context) async {
    final userCubit = context.read<UserCubit>();
    final updateUserCubit = context.read<UpdateBasicUserInfoCubit>();

    if (!updateUserCubit.validateAll()) {
      return;
    }

    final isEmailUpdated = userCubit.state.userMetaData?.emailAddress != updateUserCubit.emailController.text;

    if (isEmailUpdated) {
      final checkDupEmail = await updateUserCubit.checkDupEmail();

      if (!checkDupEmail) {
        return;
      }
      if (!context.mounted) {
        return;
      }

      final result = await context.pushRoute(
        UpdateBasicUserInfoOTPRoute(email: updateUserCubit.emailController.text),
      );
      if (result == true) {
        updateUserCubit.submit(isEmailUpdated: isEmailUpdated);
      }
      return;
    }

    updateUserCubit.submit(isEmailUpdated: isEmailUpdated);
  }
}
