import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/news/cubit/contests/contests_cubit.dart';
import 'package:flutter_module/features/news/cubit/news/news_cubit.dart';
import 'package:flutter_module/features/news/pages/news/components/contest_swiper.dart';
import 'package:flutter_module/features/news/pages/news/components/list_hot_news.dart';
import 'package:flutter_module/features/news/pages/news/components/list_news.dart';
import 'package:flutter_module/features/news/pages/news/components/list_selector.dart';
import 'package:flutter_module/models/news/news_model.dart';
import 'package:scroll_to_index/scroll_to_index.dart';

import '../../../../../../common/widgets/images.dart';

class Menu {
  final int id;
  final String title;
  final List<String>? children;

  Menu({required this.id, required this.title, this.children});
}

final List<Menu> listMenu = [
  Menu(id: 1, title: 'Tất cả'),
  Menu(id: 2, title: 'Tin tức'),
  Menu(
    id: 3,
    title: 'Tài chính',
    children: [
      'Mcredit',
      'Cash24',
      'Mirae Asset',
      'Easy Credit',
      'Cimb Bank',
      'MFast',
      '\$NAP',
      'PTF',
    ],
  ),
  Menu(id: 4, title: 'Bảo hiểm'),
  Menu(id: 5, title: 'Thi đua'),
  Menu(id: 6, title: 'Bí quyết'),
];

@RoutePage()
class NewsTabPage extends StatefulWidget implements AutoRouteWrapper {
  const NewsTabPage({
    super.key,
    @QueryParam('newsTabIndex') this.newsTabIndex,
  });

  final int? newsTabIndex;

  @override
  State<NewsTabPage> createState() => _NewsTabPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(
          create: (context) => NewsCubit()..fetchData(showLoading: true),
        ),
        BlocProvider(
          create: (context) => ContestsCubit()..fetchData(showLoading: true),
        ),
      ],
      child: this,
    );
  }
}

class _NewsTabPageState extends State<NewsTabPage> {
  int indexSelected = 0;
  late final AutoScrollController autoScrollController;

  @override
  void initState() {
    super.initState();
    indexSelected = widget.newsTabIndex ?? 0;
    autoScrollController = AutoScrollController();
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      autoScrollController.scrollToIndex(indexSelected, preferPosition: AutoScrollPosition.middle);
    });
  }

  @override
  void dispose() {
    autoScrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ListSelector(
              autoScrollController: autoScrollController,
              data: listMenu,
              indexSelected: indexSelected,
              onTabItem: (_, index) {
                setState(() {
                  indexSelected = index;
                });
              },
            ),
            BlocBuilder<ContestsCubit, ContestsState>(
              builder: (context, contestsState) {
                if (contestsState.status.isInitial) {
                  context.read<ContestsCubit>().fetchData(showLoading: true);
                }

                return BlocBuilder<NewsCubit, NewsState>(
                  builder: (context, newsState) {
                    String titleListNew = indexSelected == 0 ? 'Khác' : listMenu[indexSelected].title;

                    final List<NewsModel> hotNews = newsState.news.where((item) => item.isHighlight!).toList();

                    final List<NewsModel> news = indexSelected == 0
                        ? newsState.news
                        : indexSelected == 5
                            ? newsState.tips
                            : newsState.news.where((item) => item.hashtag?.contains(titleListNew) ?? false).toList();

                    if (newsState.status.isLoading) {
                      return const LoadingWidget();
                    }
                    if (newsState.news.isEmpty == true || (news.isEmpty && hotNews.isEmpty)) {
                      return Column(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const SizedBox(height: 16),
                          Text(
                            'Tin tức $titleListNew',
                            style: UITextStyle.medium.copyWith(
                              fontSize: 14,
                              color: UIColors.lightBlack,
                            ),
                          ),
                          Align(
                            alignment: Alignment.center,
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                const SizedBox(
                                  height: 24,
                                ),
                                const AppImage.asset(
                                  asset: 'ic_nothing',
                                  width: 150,
                                  height: 150,
                                ),
                                const SizedBox(
                                  height: 8,
                                ),
                                Text(
                                  'Hiện chưa có tin tức, bài viết liên quan',
                                  style: UITextStyle.regular.copyWith(fontSize: 14, color: UIColors.grayText),
                                )
                              ],
                            ),
                          ),
                        ],
                      );
                    }
                    final banners =
                        contestsState.contests?.processing.map((e) => e.items ?? []).expand((e) => e).toList();
                    return Expanded(
                      child: Container(
                        margin: const EdgeInsets.only(top: 16),
                        child: ListView(
                          children: [
                            ListHotNews(data: hotNews),
                            ContestSwiper(
                              data: banners ?? [],
                            ),
                            ListNews(
                              title: titleListNew,
                              data: news,
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}
