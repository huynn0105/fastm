import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/common/colors.dart';
import 'package:flutter_module/common/styles.dart';
import 'package:flutter_module/common/widgets/buttons.dart';
import 'package:flutter_module/common/widgets/loading.dart';
import 'package:flutter_module/features/news/cubit/contests/contests_cubit.dart';
import 'package:flutter_module/features/news/pages/news/components/list_selector.dart';
import 'package:flutter_module/models/news/contests_model.dart';

import '../../../../../../common/widgets/images.dart';

class Menu {
  final String id;
  final String title;

  Menu({
    required this.id,
    required this.title,
  });
}

final List<Menu> listMenu = [
  Menu(id: 'all', title: 'Tất cả'),
  Menu(id: 'processing', title: 'Đang diễn ra'),
  Menu(id: 'end', title: 'Đã kết thúc'),
];

@RoutePage()
class ContestTabPage extends StatefulWidget implements AutoRouteWrapper {
  const ContestTabPage({super.key});

  @override
  State<ContestTabPage> createState() => _ContestTabPageState();

  @override
  Widget wrappedRoute(BuildContext context) {
    return BlocProvider(
      create: (_) => ContestsCubit()..fetchData(showLoading: true),
      child: this,
    );
  }
}

class _ContestTabPageState extends State<ContestTabPage> {
  int? indexSelected = 1;

  @override
  void initState() {
    super.initState();
    indexSelected = indexSelected ?? 0;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ListSelector(
                data: listMenu,
                indexSelected: indexSelected,
                onTabItem: (_, index) {
                  setState(() {
                    indexSelected = index;
                  });
                }),
            BlocBuilder<ContestsCubit, ContestsState>(
              builder: (context, state) {
                final String key = listMenu[indexSelected ?? 0].id;
                final List<ContestBannerModel> data =
                    (state.contests?.getData(key) ?? []).map((e) => e.items ?? []).expand((e) => e).toList();

                if (state.status.isLoading) {
                  return const Expanded(child: LoadingWidget());
                }
                if (data.isEmpty == true) {
                  return Align(
                    alignment: Alignment.center,
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        const SizedBox(
                          height: 24,
                        ),
                        const AppImage.asset(
                          asset: 'ic_nothing',
                          width: 150,
                          height: 150,
                        ),
                        const SizedBox(
                          height: 8,
                        ),
                        Text(
                          'Hiện chưa có chương trình thi đua nào đang diễn ra, hoặc đã kết thúc',
                          style: UITextStyle.regular.copyWith(fontSize: 14, color: UIColors.grayText),
                          textAlign: TextAlign.center,
                        )
                      ],
                    ),
                  );
                }
                return Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const SizedBox(
                        height: 16,
                      ),
                      Text(indexSelected == 0
                          ? 'Tất cả các sự kiện'
                          : 'Các sự kiện ${listMenu[indexSelected ?? 0].title.toLowerCase()}'),
                      Expanded(
                        child: Container(
                          margin: const EdgeInsets.only(top: 16),
                          child: ListView.builder(
                            itemCount: data.length,
                            itemBuilder: (context, index) {
                              final ContestBannerModel item = data[index];

                              return SplashButton(
                                child: Container(
                                  margin: EdgeInsets.only(top: index > 0 ? 16 : 0),
                                  child: AspectRatio(
                                    aspectRatio: 343 / 192,
                                    child: Image.network(
                                      item.img,
                                      width: double.infinity,
                                    ),
                                  ),
                                ),
                              );
                            },
                          ),
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}
