import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter_module/common/bloc_status.dart';
import 'package:flutter_module/features/home/repository/home_repository.dart';
import 'package:flutter_module/features/news/repository/news_repository.dart';
import 'package:flutter_module/models/base_model.dart';
import 'package:flutter_module/models/news/news_model.dart';
import 'package:flutter_module/services/api/news/payload/get_news_payload.dart';

part 'news_state.dart';

class NewsCubit extends Cubit<NewsState> {
  NewsCubit() : super(const NewsState());
  final NewsRepository _repository = NewsRepository();
  final HomeRepository _homeRepository = HomeRepository();

  GetListNewsPayload _payload = GetListNewsPayload();

  fetchData({bool showLoading = true, bool loadmore = false}) async {
    if (showLoading) {
      emit(state.copyWith(
        status: BlocStatus.loading,
      ));
    }

    final result = await Future.wait<BaseModel<List<NewsModel>>>([
     _repository.getListNews(_payload),
     _homeRepository.getHomeTips(),
    ]);
    


    if (result.first.status && result.last.status) {
      emit(state.copyWith(
        status: BlocStatus.success,
        news: result.first.data,
        tips: result.last.data,
      ));
    } else {
      emit(state.copyWith(
        status: BlocStatus.failure,
      ));
    }
  }

  refreshData() async {
    await fetchData(showLoading: false);
  }

  _updatePayload({
    String? keyword,
  }) {
    _payload = _payload.copyWith(
      keyword: keyword,
    );
  }

  updateKeywordPayload(String keyword) {
    _updatePayload(keyword: keyword);
  }

  initProducts(NewsCubit cubit) {}
}
