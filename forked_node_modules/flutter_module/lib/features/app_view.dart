import 'dart:ui';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_module/common/enum/web_type.dart';
import 'package:flutter_module/common/utils/deeplink_util.dart';
import 'package:flutter_module/common/widgets/widget_layout.dart';
import 'package:flutter_module/features/account/cubit/user/user_cubit.dart';
import 'package:flutter_module/features/authentication/auth/auth_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_contact/chat_contact_cubit.dart';
import 'package:flutter_module/features/chat/cubit/chat_thread/chat_thread_cubit.dart';
import 'package:flutter_module/features/client/cubit/client/client_cubit.dart';
import 'package:flutter_module/features/client/cubit/client_list/client_list_cubit.dart';
import 'package:flutter_module/features/legendary/cubit/legendary_hier_user_info/legendary_hier_user_info_cubit.dart';
import 'package:flutter_module/features/main_view/cubit/customer_requirements/customer_requirements_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/order_filter/mtrade_order_filter_cubit.dart';
import 'package:flutter_module/features/mtrade/cubit/tracking_event/mtrade_tracking_event_cubit.dart';
import 'package:flutter_module/features/notification/cubit/push_notification/push_notification_cubit.dart';
import 'package:flutter_module/features/personal_setting/cubit/security/security_cubit.dart';
import 'package:flutter_module/features/statistic_working/cubit/statistic_path/statistic_path_cubit.dart';
import 'package:flutter_module/services/notification/notification_service.dart';
import 'package:flutter_portal/flutter_portal.dart';
import 'package:permission_handler/permission_handler.dart';
import "package:pull_to_refresh/pull_to_refresh.dart";

import '../../di/get_it.dart';
import '../../routes/routes_observer.dart';
import '../common/bloc_status.dart';
import '../common/colors.dart';
import '../common/size.dart';
import '../common/utils/redirect_util.dart';
import '../common/widgets/appbar.dart';
import '../common/widgets/loading.dart';
import '../common/widgets/scroll_configuration.dart';
import '../common/widgets/splash_screen.dart';
import '../env_data.dart';
import '../routes/routes.dart';
import 'app_cubit.dart';
import 'mtrade/cubit/check_project_code/mtrade_check_project_code_cubit.dart';
import 'mtrade/cubit/delivery_support/mtrade_delivery_support_cubit.dart';
import 'mtrade/cubit/filter/mtrade_filter_cubit.dart';

class AppView extends StatefulWidget {
  const AppView({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() {
    return _AppViewState();
  }
}

class _AppViewState extends State<AppView> {
  bool _init = false;

  @override
  void initState() {
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      _requestPermission();
      _preCacheImages();
    });
    super.initState();
  }

  _preCacheImages() {
    String package = EnvData.instance.package != null ? 'packages/${EnvData.instance.package}/' : '';
    precacheImage(AssetImage('${package}assets/images/ic_marker.png'), context);
  }

  _requestPermission() {
    Permission.appTrackingTransparency.request().then((status) {
      print(status);
    });
  }

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider.value(value: getItInstance.get<AppCubit>()),
        BlocProvider.value(value: getItInstance.get<MTradeDeliverySupportCubit>()),
        BlocProvider.value(value: getItInstance.get<MTradeFilterCubit>()),
        BlocProvider.value(value: getItInstance.get<MTradeCheckProjectCodeCubit>()),
        BlocProvider.value(value: getItInstance.get<MTradeTrackingEventCubit>()),
        BlocProvider.value(value: getItInstance.get<MTradeOrderFilterCubit>()),
        BlocProvider.value(value: getItInstance.get<ChatThreadCubit>()),
        BlocProvider.value(value: getItInstance.get<ChatContactCubit>()),
        BlocProvider.value(value: getItInstance.get<AuthCubit>()),
        BlocProvider.value(value: getItInstance.get<UserCubit>()),
        BlocProvider.value(value: getItInstance.get<ClientGlobalCubit>()),
        BlocProvider.value(value: getItInstance.get<ClientListGlobalCubit>()),
        BlocProvider.value(value: getItInstance.get<LegendaryHierUserInfoCubit>()),
        BlocProvider.value(value: getItInstance.get<CustomerRequirementsCubit>()),
        BlocProvider.value(value: getItInstance.get<PushNotificationCubit>()),
        BlocProvider.value(value: getItInstance.get<SecurityCubit>()),
        BlocProvider.value(value: getItInstance.get<StatisticPathCubit>()),
      ],
      child: BlocConsumer<AppCubit, AppState>(
        listenWhen: (pre, cur) => pre.isAppRouterAttached != cur.isAppRouterAttached,
        listener: (context, state) {
          if (state.isAppRouterAttached) {
            NotificationService().initNotification();
            DeepLinkUtil.instance.listenIncomingURI();
          }
        },
        builder: (context, state) {
          if (state.status.isInitial && !_init) {
            _init = true;
            context.read<AppCubit>().init();
          }
          if (state.status.isInitial || state.status.isLoading) {
            return SplashScreen(key: Key(state.status.name));
          }
          return SplashScreen(
            key: Key(state.status.name),
            nextScreen: Portal(
              child: GestureDetector(
                onTap: () => _dismissKeyboardOnLostFocus(context),
                child: RefreshConfiguration(
                  footerTriggerDistance: _getHeightWithoutContext() * 2 / 3,
                  hideFooterWhenNotFull: true,
                  child: MaterialApp.router(
                    debugShowCheckedModeBanner: false,
                    routeInformationParser: getItInstance.get<AppRouter>().defaultRouteParser(),
                    routerDelegate: getItInstance.get<AppRouter>().delegate(
                          navigatorObservers: () => [
                            AppRoutesObserver(),
                          ],
                          deepLinkBuilder: (deepLink) {
                            getItInstance.get<AppCubit>().onAttachAppRouter();
                            return deepLink;
                          },
                        ),
                    theme: Theme.of(context).copyWith(
                      scaffoldBackgroundColor: UIColors.background,
                    ),
                    builder: (context, child) {
                      AppSize.instance.init(context);
                      if (!state.status.isSuccess && kIsWeb) {
                        return Scaffold(
                          appBar: MFastAdvanceAppBar(
                            context: context,
                            title: state.webType == WebType.landingPage ? "MTrade" : "MFast",
                            onBack: () {
                              RedirectUtil.backToMFast();
                            },
                            onHome: () {
                              RedirectUtil.backToMFast();
                            },
                          ),
                          body: const LinearProgressIndicator(
                            color: UIColors.primaryColor,
                            backgroundColor: UIColors.lightBlue,
                          ),
                        );
                      }
                      return ScrollConfiguration(
                        behavior: RemoveGlowScrollBehavior(),
                        child: Stack(
                          children: [
                            child!,
                            BlocBuilder<AuthCubit, AuthState>(
                              builder: (context, authState) {
                                return BlocBuilder<MTradeCheckProjectCodeCubit, MTradeCheckProjectCodeState>(
                                  builder: (context, state) {
                                    final isLoading = [
                                      authState.status.isLoading,
                                      state.checkProjectCodePayNow.isLoading,
                                      state.checkProjectCodePayLater.isLoading,
                                    ];
                                    return Visibility(
                                      visible: isLoading.any((e) => e == true),
                                      child: WidgetLayout(
                                        child: Material(
                                          type: MaterialType.transparency,
                                          child: LoadingWidget.dark(isFullScreen: authState.status.isLoading),
                                        ),
                                      ),
                                    );
                                  },
                                );
                              },
                            ),
                          ],
                        ),
                      );
                      // return BlocBuilder<MTradePersonalWebsiteSetupCubit, MTradePersonalWebsiteSetupState>(
                      //   buildWhen: (pre, cur) {
                      //     return pre.contactMethod == null && cur.contactMethod != null && kIsWeb;
                      //   },
                      //   builder: (context, state) {
                      //     if (state.contactMethod != null) {
                      //       return Scaffold(
                      //         body: ScrollConfiguration(
                      //           behavior: RemoveGlowScrollBehavior(),
                      //           child: Stack(
                      //             children: [
                      //               child!,
                      //               BlocBuilder<AuthCubit, AuthState>(
                      //                 builder: (context, authState) {
                      //                   return BlocBuilder<MTradeCheckProjectCodeCubit, MTradeCheckProjectCodeState>(
                      //                     builder: (context, state) {
                      //                       return Visibility(
                      //                         visible: (authState.status.isLoading && authState.isForceLogout) ||
                      //                             state.checkProjectCodePayNow.isLoading ||
                      //                             state.checkProjectCodePayLater.isLoading,
                      //                         child: WidgetLayout(
                      //                           child: Material(
                      //                             type: MaterialType.transparency,
                      //                             child: LoadingWidget.dark(isFullScreen: authState.isForceLogout),
                      //                           ),
                      //                         ),
                      //                       );
                      //                     },
                      //                   );
                      //                 },
                      //               ),
                      //             ],
                      //           ),
                      //         ),
                      //         floatingActionButton: WidgetLayout(
                      //           child: ContactMethodComponent(
                      //             data: state.contactMethod,
                      //           ),
                      //         ),
                      //       );
                      //     }
                      //     return ScrollConfiguration(
                      //       behavior: RemoveGlowScrollBehavior(),
                      //       child: Stack(
                      //         children: [
                      //           child!,
                      //           BlocBuilder<AuthCubit, AuthState>(
                      //             builder: (context, authState) {
                      //               return BlocBuilder<MTradeCheckProjectCodeCubit, MTradeCheckProjectCodeState>(
                      //                 builder: (context, state) {
                      //                   return Visibility(
                      //                     visible: (authState.status.isLoading && authState.isForceLogout) ||
                      //                         state.checkProjectCodePayNow.isLoading ||
                      //                         state.checkProjectCodePayLater.isLoading,
                      //                     child: WidgetLayout(
                      //                       child: Material(
                      //                         type: MaterialType.transparency,
                      //                         child: LoadingWidget.dark(isFullScreen: authState.isForceLogout),
                      //                       ),
                      //                     ),
                      //                   );
                      //                 },
                      //               );
                      //             },
                      //           ),
                      //         ],
                      //       ),
                      //     );
                      //   },
                      // );
                    },
                  ),
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  void _dismissKeyboardOnLostFocus(BuildContext ctx) {
    final FocusScopeNode currentFocus = FocusScope.of(ctx);
    if (!currentFocus.hasPrimaryFocus) {
      FocusManager.instance.primaryFocus?.unfocus();
    }
  }

  _getHeightWithoutContext() {
    FlutterView view = WidgetsBinding.instance.platformDispatcher.views.first;
    return view.physicalSize.height / view.devicePixelRatio;
  }
}

clickedBackBtn() {
  return true;
}
