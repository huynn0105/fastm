import 'package:auto_route/auto_route.dart';
import 'package:flutter_module/routes/route_path.dart';
import 'package:flutter_module/routes/routes.gr.dart';

import 'custom_route.dart';
import 'guards.dart';

@AutoRouterConfig(
  replaceInRouteName: 'Page,Route',
  deferredLoading: true,
)
class AppRouter extends $AppRouter {
  @override
  RouteType get defaultRouteType => const RouteType.material();

  @override
  final List<AutoRoute> routes = [
    AutoRoute(
      page: MainTabbarRoute.page,
      path: RoutePath.rootPath,
      initial: true,
      guards: [
        AuthGuard(),
        InitialDeepLinkHandlerGuard(),
      ],
      children: [
        AutoRoute(page: HomeRoute.page, initial: true),
        AutoRoute(
          page: ClientRoute.page,
          children: [
            AutoRoute(page: ClientStatisticRoute.page, initial: true),
            AutoRoute(page: ClientListRoute.page),
          ],
        ),
        AutoRoute(
          page: LegendaryRoute.page,
          children: [
            AutoRoute(page: LegendaryOverviewRoute.page),
            AutoRoute(page: LegendaryCollaboratorRoute.page),
            AutoRoute(page: LegendaryCommunityRoute.page),
          ],
        ),
        AutoRoute(page: PersonalSettingRoute.page),
      ],
    ),
    AutoRoute(page: OnboardingRoute.page),
    AutoRoute(page: HomeSearchRoute.page),
    AutoRoute(
      page: LegendaryHierCollaboratorRoute.page,
      children: [
        AutoRoute(page: LegendaryOverviewRoute.page),
        AutoRoute(page: LegendaryCollaboratorRoute.page),
        AutoRoute(page: LegendaryCommunityRoute.page),
      ],
    ),
    AutoRoute(
      page: RSMPushRoute.page,
      children: [
        AutoRoute(page: RSMPushUserRoute.page),
        AutoRoute(page: RSMPushHistoryRoute.page),
      ],
    ),
    AutoRoute(
      page: NewSupporterRoute.page,
    ),
    AutoRoute(
      page: CollaboratorNeedToCareRoute.page,
      path: RoutePath.collaboratorNeedToCare,
    ),
    AutoRoute(
      page: LoginRoute.page,
      path: RoutePath.login,
    ),
    AutoRoute(page: RegisterNameRoute.page),
    AutoRoute(page: OTPRoute.page),
    AutoRoute(
      page: UserInfoRoute.page,
      path: RoutePath.userInfo,
    ),
    AutoRoute(
      page: ClientDetailMiddleRoute.page,
      path: RoutePath.clientDetailMiddle,
    ),
    AutoRoute(
      page: IncomeRoute.page,
      path: RoutePath.income,
      children: [
        AutoRoute(page: StatisticIncomeRoute.page),
        AutoRoute(page: WithdrawIncomeRoute.page),
        AutoRoute(page: HistoryIncomeRoute.page),
      ],
    ),
    AutoRoute(page: WithdrawIncomeOTPRoute.page),
    AutoRoute(
      page: NotificationRoute.page,
      children: [
        AutoRoute(page: FluctuationNotificationRoute.page, initial: true),
        AutoRoute(page: GeneralNotificationRoute.page),
      ],
    ),
    AutoRoute(
      page: NewsRoute.page,
      path: RoutePath.news,
      children: [
        AutoRoute(page: KnowledgesTabRoute.page, initial: true),
        AutoRoute(
          page: NewsTabRoute.page,
        ),
        AutoRoute(
          page: ContestTabRoute.page,
        ),
      ],
    ),
    AutoRoute(page: AboutRoute.page),
    AutoRoute(page: RegisterMentorRoute.page),
    AutoRoute(page: MTradeProductRoute.page, guards: [AuthGuard()]),
    AutoRoute(
      page: MTradeRoute.page,
      path: RoutePath.mtrade,
      guards: [
        AuthGuard(),
      ],
      children: [
        AutoRoute(page: MTradeToolsRoute.page),
        AutoRoute(page: MTradeCartTabRoute.page),
        AutoRoute(page: MTradeProductTabRoute.page, path: ''),
        AutoRoute(
          page: MTradeOrderTabRoute.page,
          children: [
            AutoRoute(page: MTradeDirectBonusRoute.page, path: ''),
            AutoRoute(page: MTradeIndirectBonusRoute.page),
          ],
        ),
      ],
    ),
    AutoRoute(
      page: MTradeBrochureRoute.page,
      path: RoutePath.mTradeBrochure,
    ),
    AutoRoute(page: ReviewBrochureRoute.page),
    AutoRoute(
      page: MTradeProductDetailRoute.page,
      path: RoutePath.mTradeProductDetail,
    ),
    CustomRoute(
      page: MTradeProductDetailBottomSheetRoute.page,
      customRouteBuilder: routeDetailProductSheetBuilder,
    ),
    AutoRoute(
      page: MTradeSearchRoute.page,
      path: RoutePath.mTradeSearch,
    ),
    AutoRoute(
      page: MTradeSearchedProductRoute.page,
      path: RoutePath.mTradeSearchProduct,
    ),
    AutoRoute(
      page: MTradePayNowOrderInformationRoute.page,
      path: RoutePath.mTradePayNow,
    ),
    AutoRoute(page: OrderOverviewRoute.page),
    AutoRoute(
      page: MTradePayLaterOrderInformationRoute.page,
      path: RoutePath.mTradePayLater,
      children: [
        AutoRoute(page: ProductSchemePayLaterOrderRoute.page),
        AutoRoute(page: PreScreenPayLaterOrderRoute.page),
        AutoRoute(page: ResultPayLaterOrderRoute.page),
        AutoRoute(page: ResultRequestPayLaterOrderRoute.page),
      ],
    ),
    AutoRoute(
      page: WebViewRoute.page,
      path: RoutePath.webview,
    ),
    CustomRoute(
      page: WebViewBottomSheetRoute.page,
      customRouteBuilder: routeWebViewBottomSheetBuilder,
    ),
    CustomRoute(
      page: WebViewPaymentMethodBottomSheetRoute.page,
      customRouteBuilder: routeWebViewBottomSheetBuilder,
    ),
    AutoRoute(page: MTradeDetailCollaboratorRoute.page),
    AutoRoute(page: MTradeOrderProcessStateRoute.page),
    AutoRoute(
      page: MTradeOrderDetailRoute.page,
      path: RoutePath.orderDetail,
    ),
    AutoRoute(
      page: MTradeSearchOrderRoute.page,
      path: RoutePath.mTradeSearchOrder,
    ),
    AutoRoute(
      page: MTradePersonalWebsiteTabbarRoute.page,
      path: RoutePath.mTradeLadingSetup,
      children: [
        AutoRoute(page: MTradePersonalWebsiteSetupRoute.page),
        AutoRoute(page: MTradePersonalWebsiteStatisticRoute.page),
      ],
    ),
    AutoRoute(
      page: MTradeNotFoundRoute.page,
      path: RoutePath.mTradeNotFound,
    ),
    AutoRoute(
      page: WarrantyPolicyRoute.page,
      path: RoutePath.csbh,
    ),
    AutoRoute(
      page: DeliveryPolicyRoute.page,
      path: RoutePath.csgh,
    ),
    AutoRoute(
      page: MTradePersonalLinkSetupRoute.page,
      path: RoutePath.mTradeLinkSetup,
    ),
    AutoRoute(
      page: MTradeMyReviewRoute.page,
      path: RoutePath.mTradeMyReview,
    ),
    AutoRoute(page: MTradePromotionRoute.page),
    AutoRoute(page: MTradeDetailPromotionRoute.page),
    AutoRoute(
      page: ShipperRoute.page,
      path: RoutePath.shipper,
      guards: [
        AuthGuard(),
      ],
      children: [
        AutoRoute(page: ShipperNewBillLadingRoute.page),
        AutoRoute(page: ShipperDeliveryBillLadingRoute.page),
        AutoRoute(page: ShipperCompletedBillLadingRoute.page),
      ],
    ),
    AutoRoute(page: ShipperBillLadingDetailRoute.page, path: RoutePath.billLadingDetail),
    AutoRoute(page: ShipperPhotoPreviewRoute.page),
    AutoRoute(
      page: AcademyRoute.page,
      path: RoutePath.academy,
      guards: [
        AuthGuard(),
      ],
    ),
    AutoRoute(
      page: ShipperBillLadingDetailRoute.page,
      path: RoutePath.billLadingDetail,
    ),
    AutoRoute(page: ShipperPhotoPreviewRoute.page),
    CustomRoute(
      page: BottomSheetRegisteredEventRoute.page,
      customRouteBuilder: routeWebViewBottomSheetBuilder,
      children: [
        AutoRoute(page: AcademyRegisteredEventRoute.page),
      ],
    ),
    AutoRoute(
      path: RoutePath.academyRegister,
      page: AcademyRegisterEventRoute.page,
    ),
    AutoRoute(
      path: RoutePath.academyCheckIn,
      page: AcademyCheckInEventRoute.page,
    ),
    AutoRoute(
      path: RoutePath.academyCheckout,
      page: AcademyCheckOutEventRoute.page,
    ),
    AutoRoute(
      path: RoutePath.academyQuiz,
      page: AcademyQuizRoute.page,
    ),
    AutoRoute(
      page: AcademyEventDetailRoute.page,
      path: RoutePath.academyEventDetail,
    ),
    AutoRoute(
      page: RegisterEventResultRoute.page,
    ),

    // MFAST
    AutoRoute(
      page: MFastRoute.page,
      path: RoutePath.mfast,
      guards: [AuthGuard()],
    ),
    AutoRoute(
      page: MFastUpdatePhoneNumberRoute.page,
      path: RoutePath.mFastUpdatePhoneNumber,
    ),
    AutoRoute(
      page: MFastAccountIdentificationRoute.page,
      path: RoutePath.mFastAccountIdentification,
    ),
    AutoRoute(
      page: MFastNotificationRoute.page,
      path: RoutePath.mFastNotification,
      children: [
        AutoRoute(page: MFastNotificationSystemRoute.page),
        AutoRoute(page: MFastNotificationAdminRoute.page),
      ],
    ),
    AutoRoute(
      page: MFastNotificationSettingRoute.page,
      path: RoutePath.notificationSetting,
    ),

    /// CHAT
    AutoRoute(
      page: ChatRoute.page,
      path: RoutePath.chat,
      children: [
        AutoRoute(
          page: ChatSupportRequestRoute.page,
          children: [
            AutoRoute(page: AllChatSupportRequestListRoute.page),
            AutoRoute(page: PendingChatSupportRequestListRoute.page),
            AutoRoute(page: RespondedChatSupportRequestListRoute.page),
            AutoRoute(page: ClosedChatSupportRequestListRoute.page),
          ],
        ),
        AutoRoute(page: ChatThreadRoute.page),
        AutoRoute(page: ChatContactsRoute.page),
      ],
    ),
    AutoRoute(page: ChatSupportTicketRoute.page),
    AutoRoute(
      page: ChatAddContactRoute.page,
    ),
    AutoRoute(
      page: ChatContactRequestRoute.page,
      children: [
        AutoRoute(
          page: ChatContactRequestReceivedRoute.page,
        ),
        AutoRoute(
          page: ChatContactRequestSentRoute.page,
        ),
      ],
    ),
    AutoRoute(
      page: ChatSettingRoute.page,
    ),
    AutoRoute(
      page: ChatGeneralMediaRoute.page,
      children: [
        AutoRoute(page: ChatGeneralImageRoute.page),
        AutoRoute(page: ChatGeneralVideoRoute.page),
        AutoRoute(page: ChatGeneralLinkRoute.page),
      ],
    ),
    AutoRoute(page: ChatSearchContactRoute.page),
    AutoRoute(page: ChatPreviewImageRoute.page),
    AutoRoute(page: ChatPreviewVideoRoute.page),
    AutoRoute(page: ChatForwardMessageRoute.page),
    AutoRoute(page: ThreadMessagesRoute.page),
    AutoRoute(page: CreateThreadGroupRoute.page),
    AutoRoute(page: ChatAddMemberThreadRoute.page),
    AutoRoute(page: ChatMemberThreadRoute.page),
    AutoRoute(page: ChatBotRoute.page),
    AutoRoute(
      page: BlockUsersRoute.page,
    ),

    ///
    AutoRoute(
      page: UpdateBasicUserInfoRoute.page,
    ),
    AutoRoute(
      page: UpdateBasicUserInfoOTPRoute.page,
    ),
    AutoRoute(
      page: MFastContractCollaboratorRoute.page,
      path: RoutePath.contractCollaborators,
    ),
    AutoRoute(
      page: AboutRoute.page,
      path: RoutePath.aboutAppay,
    ),
    AutoRoute(
      page: AccountSettingRoute.page,
      path: RoutePath.accountSetting,
    ),
    AutoRoute(
      page: AccountVisibleSettingRoute.page,
      // path: RoutePath.accountSetting,
    ),
    AutoRoute(
      page: SecurityRoute.page,
      path: RoutePath.accountSecurity,
    ),
    AutoRoute(
      page: LoginHistoryRoute.page,
    ),
    AutoRoute(
      page: AdLinkRoute.page,
      path: RoutePath.adLinkScreen,
      children: [
        AutoRoute(page: AdLinkListRoute.page),
        AutoRoute(page: AdLinkStatisticRoute.page),
      ],
    ),
    AutoRoute(page: BankAccountRoute.page, path: RoutePath.bankAccount, children: [
      AutoRoute(page: BankAccountTabRoute.page),
      AutoRoute(page: TaxTabRoute.page),
    ]),
    AutoRoute(page: BankAccountDetailRoute.page),
    AutoRoute(page: AddBankAccountRoute.page),
    AutoRoute(page: RegisterTaxRoute.page),
    AutoRoute(page: AddBIDVBankAccountRoute.page),
    AutoRoute(page: UpdateEmailSuccessRoute.page),
    AutoRoute(page: CollaboratorPendingRoute.page),
    AutoRoute(
      page: TakePictureRoute.page,
      path: RoutePath.takePicture,
    ),
    AutoRoute(
      page: TimeCheckingHistoryRoute.page,
      path: RoutePath.timeCheckingHistory,
    ),
    AutoRoute(
      page: TimeCheckingReportRoute.page,
      path: RoutePath.timeCheckingReport,
    ),
    AutoRoute(
      page: TimeCheckingReportResultRoute.page,
      path: RoutePath.timeCheckingReportResult,
    ),
    AutoRoute(
      page: TimeCheckingReportDetailRoute.page,
      path: RoutePath.timeCheckingReportDetail,
    ),
    AutoRoute(
      page: CollaboratorPendingConfrimRoute.page,
      path: RoutePath.confirmCollaboratorPending,
    ),
    AutoRoute(
      page: StatisticWorkingRoute.page,
      path: RoutePath.statisticWorking,
    ),
    AutoRoute(
      page: StatisticAsmReportRoute.page,
      path: RoutePath.statisticAsmReport,
    ),
    AutoRoute(
      page: StatisticAgentReportRoute.page,
      path: RoutePath.statisticAgentReport,
    ),
    AutoRoute(
      page: StatisticAgentCheckingRoute.page,
      path: RoutePath.statisticAgentChecking,
    ),
    AutoRoute(
      page: StatisticAsmCheckingRoute.page,
      path: RoutePath.statisticAsmChecking,
    ),
  ];
}
