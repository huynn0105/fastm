apply plugin: "com.android.application"
// Firebase
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

import com.android.build.OutputFile
import java.text.SimpleDateFormat

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false


/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);


/**
 * Auto increment versionCode for every build
 * Read version_code.properties in android root directory and auto increment only on release build
 */
def readAndIncrementVersionCode() {
  def isRelease = false
  List<String> runTasks = gradle.startParameter.getTaskNames();

  for (String item : runTasks) {
    if (item.contains("assemble") && item.contains("Release")) {
      isRelease = true;
    }
  }

  def versionFile = new File(project.rootDir, 'version_code.properties')

  // read
  def version = new Properties()
  def stream
  try {
    stream = new FileInputStream(versionFile)
    version.load(stream)
  } catch (FileNotFoundException ignore) {
    println "version_code.properties not found"
  } finally {
    if (stream != null) stream.close()
  }
  def versionCode = version['versionCode'] ? version['versionCode'] as int : 0

  // increment by 1 in release
  if (isRelease) {
    versionCode += 1
    version['versionCode'] = versionCode.toString()
    // write
    def outStream = new FileOutputStream(versionFile)
    try {
      version.store(outStream, null)
    } finally {
      stream.close()
    }
  }

  return versionCode
}

/**
 * Get password from keychain
 */
def getPasswordFromKeychain(String currentUser, String keyChain) {
  def stdout = new ByteArrayOutputStream()
  def stderr = new ByteArrayOutputStream()
  exec {
    commandLine 'security', '-q', 'find-generic-password', '-a', currentUser, '-s', keyChain, '-w'
    standardOutput = stdout
    errorOutput = stderr
    ignoreExitValue true
  }
  // noinspection GroovyAssignabilityCheck
  stdout.toString().trim()
}
def releasePassword = getPasswordFromKeychain("mfast", "mfast")

/**
 * compileSdkVersion, buildToolsVersion, minSdkVersion, targetSdkVersion
 * should be matched with 0-scripts/configure_gradle.py
 */
android {
  compileSdkVersion rootProject.ext.compileSdkVersion
//  ndkVersion rootProject.ext.ndkVersion

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    applicationId "com.digipay.mfast"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode readAndIncrementVersionCode()
    versionName "3.23.3"
    multiDexEnabled true
    vectorDrawables.useSupportLibrary true
    missingDimensionStrategy 'react-native-camera', 'general'
    renderscriptTargetApi 23
    renderscriptSupportModeEnabled true
    ndk {
      abiFilters "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
    }
  }

  signingConfigs {
    release {
      if (System.getenv()["CI"]) {
        storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
        storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
        keyAlias System.getenv()["CM_KEY_ALIAS"]
        keyPassword System.getenv()["CM_KEY_PASSWORD"]
      } else if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
        storeFile file(MYAPP_RELEASE_STORE_FILE)
        storePassword 'leanhtu'
        keyAlias MYAPP_RELEASE_KEY_ALIAS
        keyPassword 'leanhtu'
      }
    }
  }

  splits {
    abi {
      reset()
      enable enableSeparateBuildPerCPUArchitecture
      universalApk false  // If true, also generate a universal APK
      include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"    
    }
  }

  buildTypes {
    profile {
      initWith debug
      matchingFallbacks = ['debug', 'release']
    }
    release {
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      signingConfig signingConfigs.release
      matchingFallbacks = ['debug', 'release']
    }
  }

  packagingOptions {
    exclude 'META-INF/core_release.kotlin_module'
  }

  flavorDimensions "environment"
  productFlavors {
    develop {
      dimension "environment"
      resValue 'string', 'facebook_app_id', '1637485106686587'
      resValue 'string', 'facebook_client_token', '91acbb352ce698ce3fc816e06885b628'
      resValue 'string', 'zalo_app_id', '3061511678273864526'
      resValue 'string', 'scheme_zalo_app_id', 'zalo-3061511678273864526'
      resValue 'string', 'branchKey', 'key_live_cp9Nwfcj1wkk4uCaarITWgihtFdmKe3r'
      resValue 'string', 'branchKeyTest', 'key_test_lfYUtphp3Dfa1ssjnvIT6feitxciIaZU'
      resValue 'string', 'googleApiKey', 'AIzaSyAmd5tJtN6eP-95B1Rb6pUwTu8l1QoWu-k'
      resValue 'string', 'CodePushDeploymentKey', 'iMFvzv8v6Wifk8EHYrqWWrSVh-uYhWQzxWolc'
      signingConfig signingConfigs.release
      versionNameSuffix "-DEV-" + getDate()
    }
    staging {
      dimension "environment"
      resValue 'string', 'facebook_app_id', '1637485106686587'
      resValue 'string', 'facebook_client_token', '91acbb352ce698ce3fc816e06885b628'
      resValue 'string', 'zalo_app_id', '3061511678273864526'
      resValue 'string', 'scheme_zalo_app_id', 'zalo-3061511678273864526'
      resValue 'string', 'branchKey', 'key_live_cp9Nwfcj1wkk4uCaarITWgihtFdmKe3r'
      resValue 'string', 'branchKeyTest', 'key_test_lfYUtphp3Dfa1ssjnvIT6feitxciIaZU'
      resValue 'string', 'googleApiKey', 'AIzaSyAmd5tJtN6eP-95B1Rb6pUwTu8l1QoWu-k'
      resValue 'string', 'CodePushDeploymentKey', 'V6wMSXYOXl0-l2Qi-cgX9jWW2MSc-OeoZXpdA'
      signingConfig signingConfigs.release
      versionNameSuffix "-STAG-" + getDate()
    }
    production {
      dimension "environment"
      resValue 'string', 'facebook_app_id', '1637485106686587'
      resValue 'string', 'facebook_client_token', '91acbb352ce698ce3fc816e06885b628'
      resValue 'string', 'zalo_app_id', '3061511678273864526'
      resValue 'string', 'scheme_zalo_app_id', 'zalo-3061511678273864526'
      resValue 'string', 'branchKey', 'key_live_cp9Nwfcj1wkk4uCaarITWgihtFdmKe3r'
      resValue 'string', 'branchKeyTest', 'key_test_lfYUtphp3Dfa1ssjnvIT6feitxciIaZU'
      resValue 'string', 'googleApiKey', 'AIzaSyAmd5tJtN6eP-95B1Rb6pUwTu8l1QoWu-k'
      resValue 'string', 'CodePushDeploymentKey', 'U1jx7gz32R_P2-IJnru9wnAiGuv9c5QS0gznV'
      signingConfig signingConfigs.release
    }
  }

  // applicationVariants are e.g. debug, release
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      // For each separate APK per architecture, set a unique version code as described here:
      // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
      def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
      def abi = output.getFilter(OutputFile.ABI)
      if (abi != null) {  // null for the universal-debug, universal-release variants
        output.versionCodeOverride =
            versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
      }
    }
  }

//   packagingOptions {
//     pickFirst 'lib/x86/libc++_shared.so'
//     pickFirst 'lib/x86/libjsc.so'
//     pickFirst 'lib/x86_64/libjsc.so'
//     pickFirst 'lib/arm64-v8a/libjsc.so'
//     pickFirst 'lib/arm64-v8a/libc++_shared.so'
//     pickFirst 'lib/x86_64/libc++_shared.so'
//     pickFirst 'lib/armeabi-v7a/libc++_shared.so'
//     pickFirst 'lib/armeabi-v7a/libjsc.so'
//   }
}

dependencies {
//  implementation project(':flutter')
//    debugImplementation 'com.digipay.flutter_module:flutter_debug:1.0'
//    profileImplementation 'com.digipay.flutter_module:flutter_profile:1.0'
    implementation 'com.digipay.flutter_module:flutter_release:1.0'
    implementation project(':react-native-moengage')
    implementation project(':react-native-touch-id')
    implementation project(':react-native-moengage-inbox')
    implementation("com.moengage:moe-android-sdk:12.10.00")
    implementation("com.moengage:inbox-core:2.5.0")
    implementation("com.moengage:inapp:7.0.0")
  // react native

  implementation fileTree(include: ['*.jar'], dir: 'libs')

  implementation 'androidx.appcompat:appcompat:1.4.2'
  implementation "com.facebook.react:react-native:+"
  implementation("androidx.core:core:1.9.0")
  implementation("androidx.lifecycle:lifecycle-process:2.5.1")
    // This should be here already

  implementation 'com.facebook.fresco:animated-gif:2.0.0'

  // Needed to support API<21, though there is a small chance proguard shrinks things sufficiently
  implementation "androidx.multidex:multidex:2.0.1"

  implementation 'me.leolin:ShortcutBadger:1.1.22@aar'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

  // implementation 'com.facebook.soloader:soloader:0.9.0+'
  if (enableHermes) {
    def hermesPath = "../../node_modules/hermes-engine/android/";
    debugImplementation files(hermesPath + "hermes-debug.aar")
    releaseImplementation files(hermesPath + "hermes-release.aar")
  } else {
    implementation jscFlavor
  }
}

static def getDate() {
  def df = new SimpleDateFormat('HHmm.ddMMyyyy')
  df.setTimeZone(TimeZone.getTimeZone("Asia/Ho_Chi_Minh"));
  return df.format(new Date())
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
